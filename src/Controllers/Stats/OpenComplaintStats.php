<?php
/**
  * OpenComplaintStats is a helper class which manages
  * aggregate calculations related to complaints.
  *
  * OpenPolice.org
  * @package  flexyourrights/openpolice
  * @author  Morgan Lesko <morgan@flexyourrights.org>
  * @since v0.3.1
  */
namespace FlexYourRights\OpenPolice\Controllers\Stats;

use DB;
use DateTime;
use App\Models\OPComplaints;
use FlexYourRights\OpenPolice\Controllers\Stats\OpenComplaintStatsRecord;
use RockHopSoft\Survloop\Controllers\Stats\SurvStatsGraph;
use RockHopSoft\Survloop\Controllers\Stats\SurvStatsTbl;

class OpenComplaintStats
{
  	// Collection of variables to be passed into Views
  	protected $v = [];

  	// Used to query database for core records
  	protected $searcher = null;

    /**
    * Initialize some lists needed for the reports generated by this class.
    *
    * @param  RockHopSoft\Survloop\Controllers\Searcher $searcher
    * @param  App\Models\OPComplaints $complaints
    */
  	public function __construct($searcher, $complaints)
  	{
    		$this->searcher = $searcher;
    		$this->v["coreRecs"] = $complaints;
    		if (sizeof($this->v["coreRecs"]) > 0) {
      			foreach ($this->v["coreRecs"] as $ind => $com) {
      				  $this->v["coreInd"][$com->com_id] = $ind;
      			}
    		}
        $this->v["statTbls"] = [];
        $this->loadStatVars();
    }

    /**
     * Looks up extra data needed for report.
     *
     * @return boolean
     */
    protected function loadComplaintDeets()
    {
        $this->v["civsData"] = [];
        $comIDs = $GLOBALS["SL"]->resToArrIds($this->v["coreRecs"], 'com_id');
        $civs = DB::table('op_civilians')
            ->join('op_person_contact', 'op_civilians.civ_person_id',
              '=', 'op_person_contact.prsn_id')
            ->join('op_physical_desc', 'op_civilians.civ_phys_desc_id',
              '=', 'op_physical_desc.phys_id')
            ->whereIn('civ_complaint_id', $comIDs)
            ->where('civ_role', 'LIKE', 'Victim')
            ->select('op_civilians.civ_id', 'op_civilians.civ_complaint_id',
              'op_physical_desc.phys_id', 'op_physical_desc.phys_age',
              'op_person_contact.prsn_birthday',
              'op_physical_desc.phys_gender', 'op_physical_desc.phys_gender_other')
            ->get();
        if (sizeof($this->v["coreRecs"]) > 0 && $civs->isNotEmpty()) {
            foreach ($civs as $civ) {
                $com = $this->v["coreRecs"][$this->v["coreInd"][$civ->civ_complaint_id]];
                $this->v["civsData"][] = new OpenComplaintStatsRecord($com, $civ);
            }
        }
//echo '<h1>civsData:</h1><pre>'; print_r($this->v["civsData"]); echo '</pre>'; exit;
        return true;
    }

    /**
     * Load the maps for this report's data tables.
     *
     * @return boolean
     */
    protected function statsLoadMaps()
    {
        foreach ($this->v["statTbls"] as $tbl) {
            $this->v[$tbl]->addDataType('date', 'Incident Date');
            $this->v[$tbl]->loadMap();
        }
        return true;
    }

    /**
     * Run the calculations for all of this report's data tables.
     *
     * @return boolean
     */
    protected function statsRunCalcs()
    {
        foreach ($this->v["statTbls"] as $tbl) {
            $this->v[$tbl]->resetRecFilt();
            $this->v[$tbl]->calcStats();
        }
        return true;
    }

    /**
     * Loads standard variable sets.
     *
     * @return void
     */
    protected function loadStatVars()
    {
        // These arrays cache the lookups for these system definitions,
        // formatted here to be loaded into the stats engine...
        $this->v["fltAges"] = [
            [ 101, 102, 103, 104, 105, 106, 107, 75 ],
            [
              '0-15', '16-24', '25-34', '35-44',
              '45-54', '55-64', '65-74', 'Over 75'
            ],
            [ 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h' ]
        ];
        $this->v["fltRaces"] = [
            [ 318, 319, 320, 469, 321, 322, 323, 324, 2 ],
            [
              'Asian', 'Black/African/Caribbean', 'Hispanic/Latinx',
              'Middle Eastern', 'Native American', 'Pacific Islander',
              'White/Caucasian', 'Other', 'Multiple Races'
            ],
            [ 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i' ]
        ];
        $this->v["fltRaces2"] = [
            [ 323, 319, 320, 324 ],
            [
              'White/Caucasian', 'Black/African/Caribbean',
              'Hispanic/Latinx', 'Other'
            ],
            [ 'a', 'b', 'c', 'd' ]
        ];

        $this->v["fltGenders"] = [
            [ 'F', 'M', 'O' ],
            [ 'Female', 'Male', 'Transgender & Other' ],
            [ 'a', 'b', 'c' ]
        ];

        $this->v["fltGold"] = [
            [ 'N', 'Y' ],
            [ 'Silver', 'Gold' ],
            [ 'a', 'b' ]
        ];

        $this->v["fltCharges"] = [
            [ 'N', 'Y' ],
            [ 'No Unresolved Charges', 'Unresolved Charges' ],
            [ 'a', 'b' ]
        ];

        $this->v["fltForce"] = [
            [ 'Y', 'N' ],
            [ 'Unreasonable Force Allegation', 'No Unreasonable Force' ],
            [ 'a', 'b' ]
        ];

        $this->v["fltStatusPub"] = [
            [ 'N', 'O', 'Y' ],
            [ 'Not Ready to File', 'OK to File w/ IAs', 'Published & Filed w/ IAs' ],
            [ 'a', 'b', 'c' ]
        ];

        $this->v["fltTransparent"] = [
            [ 'Y', 'N' ],
            [ 'Full Transparency', 'Not Full Transparency' ],
            [ 'a', 'b' ]
        ];

        $this->v["fltTwoWeeks"] = [
            [ 'Y', 'N' ],
            [ 'Within Last Two Weeks', 'Before Last Two Weeks' ],
            [ 'a', 'b' ]
        ];

        $this->v["fltNewDept"] = [
            [ 'N', 'Y' ],
            [ 'No New Department', 'Has New Department' ],
            [ 'a', 'b' ]
        ];
    }

    /**
     * Get publishing status variable description.
     *
     * @return void
     */
    protected function getStatusPubTitle($abbr)
    {
        if (isset($this->v["fltStatusPub"])) {
            foreach ($this->v["fltStatusPub"][0] as $i => $val) {
                if ($val == $abbr) {
                    return $this->v["fltStatusPub"][1][$i];
                }
            }
        }
        return '';
    }

    /**
     * Get two weeks timeline description.
     *
     * @return void
     */
    protected function getNewDeptTitle($abbr)
    {
        if (isset($this->v["fltNewDept"])) {
            foreach ($this->v["fltNewDept"][0] as $i => $val) {
                if ($val == $abbr) {
                    return $this->v["fltNewDept"][1][$i];
                }
            }
        }
        return '';
    }
}
