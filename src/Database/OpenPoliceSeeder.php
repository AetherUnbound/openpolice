<?php 
// generated from /resources/views/vendor/survloop/admin/db/export-laravel-gen-seeder.blade.php

use Illuminate\Database\Seeder;
use Illuminate\Database\Eloquent\Model;

class OpenPoliceSeeder extends Seeder
{
    /**
     * Run the database seeds.
     *
     * @return  void
     */
    public function run()
    {

	DB::table('SL_Databases')->insert([
			'DbID' => 1,
			'DbUser' => '1',
			'DbPrefix' => 'OP_',
			'DbName' => 'OpenPolice.org',
			'DbDesc' => 'The nation\'s most trusted police complaints service',
			'DbMission' => 'The purpose of the OpenPolice.org database is to maintain the data we collect from users and to supply information that supports the work of police oversight professionals throughout the United States.',
			'DbTables' => '62',
			'DbFields' => '626'
		]);
	
	DB::table('SL_Tables')->insert([
			'TblID' => 102,
			'TblDatabase' => '1',
			'TblAbbr' => 'Civ',
			'TblName' => 'Civilians',
			'TblEng' => 'Civilians',
			'TblDesc' => 'Individuals who are directly impacted by, observed, or are reporting on an police incident. This information allows us to identify and contact individuals who\'ve been impacted by alleged incident.',
			'TblGroup' => 'People Involved In Complaint',
			'TblOrd' => '22',
			'TblExtend' => '0',
			'TblNumFields' => '23',
			'TblNumForeignKeys' => '4',
			'TblNumForeignIn' => '6'
		]);
		DB::table('SL_Tables')->insert([
			'TblID' => 104,
			'TblDatabase' => '1',
			'TblAbbr' => 'Off',
			'TblName' => 'Officers',
			'TblEng' => 'Officers',
			'TblDesc' => 'Includes law enforcement personnel who engaged in alleged misconduct or who witnessed alleged misconduct mentioned in a Complaint. This information is vital for verifying the identity of named and unnamed officers who were involved in alleged police misconduct.',
			'TblGroup' => 'People Involved In Complaint',
			'TblOrd' => '23',
			'TblExtend' => '0',
			'TblNumFields' => '19',
			'TblNumForeignKeys' => '5',
			'TblNumForeignIn' => '4'
		]);
		DB::table('SL_Tables')->insert([
			'TblID' => 106,
			'TblDatabase' => '1',
			'TblAbbr' => 'Over',
			'TblName' => 'Oversight',
			'TblEng' => 'Investigative Agencies',
			'TblDesc' => 'These are the organizations tasked with receiving and investigating Civilian Complaints against Officers. This information helps us keep track of who is investigating Complaints submitted through OpenPolice.org.',
			'TblNotes' => 'There are 2 types of Investigative Agencies: Internal Affairs (IA) & Citizen Investigative Agencies (COAs). Every police department has an Internal Affairs contact \ï¿½?? but many medium and larger municipalities also have a COA tasked with receiving and investigating citizen complaints. COAs are generally more responsive than IAs. THEREFORE, if a police department has a NACOLE-approved COA, the table data must ONLY contain COA contact information \ï¿½?? but no IA contact information.',
			'TblGroup' => 'People & Groups Involved In Complaint Process',
			'TblOrd' => '30',
			'TblExtend' => '0',
			'TblNumFields' => '38',
			'TblNumForeignKeys' => '2',
			'TblNumForeignIn' => '2'
		]);
		DB::table('SL_Tables')->insert([
			'TblID' => 108,
			'TblDatabase' => '1',
			'TblAbbr' => 'Adm',
			'TblName' => 'Administrators',
			'TblEng' => 'Administrators',
			'TblDesc' => 'OpenPolice.org staff and volunteers with special access permission to review and manage Complaints. This information allows OpenPolice.org management to measure the performance of individual Administrators.',
			'TblGroup' => 'People & Groups Involved In Complaint Process',
			'TblOrd' => '38',
			'TblExtend' => '0',
			'TblNumFields' => '2',
			'TblNumForeignKeys' => '2',
			'TblNumForeignIn' => '1'
		]);
		DB::table('SL_Tables')->insert([
			'TblID' => 110,
			'TblDatabase' => '1',
			'TblAbbr' => 'Part',
			'TblName' => 'Partners',
			'TblEng' => 'Partners',
			'TblDesc' => 'People and organizations who access our detailed complaints data to assist their police accountability efforts and research. Information in this table is vital to the organization, because it enables us to communicate with Partners about our collaboration and service offerings.',
			'TblNotes' => 'Partners may also include prospects.',
			'TblGroup' => 'People & Groups Involved In Complaint Process',
			'TblOrd' => '32',
			'TblExtend' => '0',
			'TblNumFields' => '20',
			'TblNumForeignKeys' => '2',
			'TblNumForeignIn' => '4'
		]);
		DB::table('SL_Tables')->insert([
			'TblID' => 111,
			'TblDatabase' => '1',
			'TblAbbr' => 'Dept',
			'TblName' => 'Departments',
			'TblEng' => 'Police Departments',
			'TblDesc' => 'Includes Local, State, and Federal law enforcement agencies and their jurisdictional boundaries. This table information allows the organization to identify and track Departments associated with Complaints.',
			'TblNotes' => 'Data obtained thanks to Prof. Hickman.',
			'TblGroup' => 'People & Groups Involved In Complaint Process',
			'TblOrd' => '29',
			'TblExtend' => '0',
			'TblNumFields' => '26',
			'TblNumForeignKeys' => '1',
			'TblNumForeignIn' => '8'
		]);
		DB::table('SL_Tables')->insert([
			'TblID' => 112,
			'TblDatabase' => '1',
			'TblAbbr' => 'Com',
			'TblName' => 'Complaints',
			'TblEng' => 'Complaints',
			'TblDesc' => 'Reports of dissatisfaction that contain one or more Allegations of Officer misconduct. Complaints are vital, because they provide the essential store of information for communicating what happened during a police encounter. Complaints data also helps the organization keep track of how various police accountability professionals are responding to Complaint Allegations.',
			'TblGroup' => 'Complaint Data Tables',
			'TblOpts' => '11',
			'TblExtend' => '0',
			'TblNumFields' => '40',
			'TblNumForeignKeys' => '5',
			'TblNumForeignIn' => '14'
		]);
		DB::table('SL_Tables')->insert([
			'TblID' => 113,
			'TblDatabase' => '1',
			'TblAbbr' => 'Alle',
			'TblName' => 'Allegations',
			'TblEng' => 'Allegations',
			'TblDesc' => 'Represent specific misconduct accusations against Officers, vital to identifying the most serious Complaints. This information also helps OpenPolice.org provide useful next-steps advice for Complainants who generate Complaints. This table provides storage for the descriptions of why each Allegation has been made, and a record to link with Officers and/or Victims.',
			'TblNotes' => 'San Jose IPA has model categories

http://www.sanjoseca.gov/DocumentCenter/View/29599',
			'TblGroup' => 'Complaint Data Tables',
			'TblOrd' => '4',
			'TblExtend' => '0',
			'TblNumFields' => '5',
			'TblNumForeignKeys' => '2',
			'TblNumForeignIn' => '2'
		]);
		DB::table('SL_Tables')->insert([
			'TblID' => 114,
			'TblDatabase' => '1',
			'TblAbbr' => 'Inc',
			'TblName' => 'Incidents',
			'TblEng' => 'Incidents',
			'TblDesc' => 'Represent individual, uninterrupted police events occurring at a specific time and place. Incident information is vital for identifying and associating data from multiple Complaints with each other.',
			'TblNotes' => 'Generally, we have a goal of one-complaint-per-incident. But in cases where Complaint data is inconsistent, Incident data allows us to simply associate them with each other in a less invasive way.',
			'TblGroup' => 'Complaint Data Tables',
			'TblOrd' => '1',
			'TblExtend' => '0',
			'TblNumFields' => '13',
			'TblNumForeignKeys' => '1',
			'TblNumForeignIn' => '2'
		]);
		DB::table('SL_Tables')->insert([
			'TblID' => 115,
			'TblDatabase' => '1',
			'TblAbbr' => 'Scn',
			'TblName' => 'Scenes',
			'TblEng' => 'Scenes',
			'TblDesc' => 'Scene information provides descriptive details about the setting where an Incident occurred. Beyond mere time and location, this adds an important contextual backdrop behind specific Incident events. Scene information also helps provide a more objective evaluation of the Incident and Allegations.',
			'TblGroup' => 'Complaint Data Tables',
			'TblOrd' => '2',
			'TblExtend' => '0',
			'TblNumFields' => '7',
			'TblNumForeignIn' => '2'
		]);
		DB::table('SL_Tables')->insert([
			'TblID' => 116,
			'TblDatabase' => '1',
			'TblAbbr' => 'For',
			'TblName' => 'Force',
			'TblEng' => 'Force',
			'TblDesc' => 'Includes all Allegations that feature use of violent contact up to and including deadly Force by an Officer. Because excessive Force Allegations deserve the greatest scrutiny, this information is vital to substantiating such Allegations if they are truthful.',
			'TblNotes' => 'Subset data of Event Sequences. ',
			'TblType' => 'Subset',
			'TblGroup' => 'Complaint Data Tables',
			'TblOrd' => '12',
			'TblExtend' => '0',
			'TblNumFields' => '12',
			'TblNumForeignKeys' => '1',
			'TblNumForeignIn' => '2'
		]);
		DB::table('SL_Tables')->insert([
			'TblID' => 117,
			'TblDatabase' => '1',
			'TblAbbr' => 'Inj',
			'TblName' => 'Injuries',
			'TblEng' => 'Injuries',
			'TblDesc' => 'Includes all instances of bodily harm sustained as a result of alleged Force initiated by Officers. Detailed Injury information is vital to substantiating such Allegations if they are truthful.',
			'TblNotes' => 'There can be multiple Injury records for each victim (Civilian).',
			'TblGroup' => 'Complaint Data Tables',
			'TblOrd' => '17',
			'TblExtend' => '0',
			'TblNumFields' => '5',
			'TblNumForeignKeys' => '1',
			'TblNumForeignIn' => '2'
		]);
		DB::table('SL_Tables')->insert([
			'TblID' => 121,
			'TblDatabase' => '1',
			'TblAbbr' => 'Stop',
			'TblName' => 'Stops',
			'TblEng' => 'Stops',
			'TblDesc' => 'Includes all instances where Officers pull over a vehicle, detain a pedestrian, or otherwise question a Civilian at a residence. This table provides important information about Officers\' behavior and Stop practices within particular Departments.',
			'TblNotes' => 'Subset data of Event Sequences. This table could also be called Detentions, because both traffic stops and stop-and-frisk fall under the purview Terry v. Ohio. Provides link to article on topic.',
			'TblType' => 'Subset',
			'TblGroup' => 'Complaint Data Tables',
			'TblOrd' => '6',
			'TblExtend' => '0',
			'TblNumFields' => '24',
			'TblNumForeignKeys' => '2',
			'TblNumForeignIn' => '1'
		]);
		DB::table('SL_Tables')->insert([
			'TblID' => 122,
			'TblDatabase' => '1',
			'TblAbbr' => 'Srch',
			'TblName' => 'Searches',
			'TblEng' => 'Searches',
			'TblDesc' => 'Includes all instances of vehicle searches, home, or other property searches. Detailed Search information is vital to evaluating the legitimacy of the search itself as well as identifying general Search practices within particular Departments.',
			'TblNotes' => 'Subset data of Event Sequences. Provides link to article on topic. 
If there is a Property record associated with a Search record, then property was searched.',
			'TblType' => 'Subset',
			'TblGroup' => 'Complaint Data Tables',
			'TblOrd' => '8',
			'TblExtend' => '0',
			'TblNumFields' => '19',
			'TblNumForeignKeys' => '1',
			'TblNumForeignIn' => '2'
		]);
		DB::table('SL_Tables')->insert([
			'TblID' => 123,
			'TblDatabase' => '1',
			'TblAbbr' => 'Arst',
			'TblName' => 'Arrests',
			'TblEng' => 'Arrests',
			'TblDesc' => 'Includes all instances where individuals are placed under arrest. This table information helps provide richer detail about the nature of the Arrest and the individual burden of certain low-level discretionary or retaliatory Arrests.',
			'TblNotes' => 'Subset data of Event Sequences. We want to highlight all arrests that appear to be retaliatory in nature. Provides link to article on topic.',
			'TblType' => 'Subset',
			'TblGroup' => 'Complaint Data Tables',
			'TblOrd' => '11',
			'TblExtend' => '0',
			'TblNumFields' => '10',
			'TblNumForeignKeys' => '1'
		]);
		DB::table('SL_Tables')->insert([
			'TblID' => 125,
			'TblDatabase' => '1',
			'TblAbbr' => 'Priv',
			'TblName' => 'PrivilegeProfiles',
			'TblEng' => 'Privileges Profiles',
			'TblDesc' => 'Beyond default privileges for various types of system users, this table includes explicit privileges to enable access to specific system data. This is vital in allowing User IDs (which are associated with different user types) to be granted access to specific complaints or sets of complaints.',
			'TblType' => 'Linking',
			'TblGroup' => 'Internal Infrastructure',
			'TblOrd' => '54',
			'TblOpts' => '3',
			'TblExtend' => '0',
			'TblNumFields' => '4',
			'TblNumForeignKeys' => '3'
		]);
		DB::table('SL_Tables')->insert([
			'TblID' => 126,
			'TblDatabase' => '1',
			'TblAbbr' => 'AdmAct',
			'TblName' => 'AdminActions',
			'TblEng' => 'Administrator Actions',
			'TblDesc' => 'Includes administrator edits to all user data and incident reports. This information provides a complete history of data changes so any human, system, or security errors can be investigated and reversed if necessary.',
			'TblNotes' => '(*This is just how Morgan might implement this need, but the details of its implementation should not effect the core OpenPolice.org data structures*)',
			'TblType' => 'Validation',
			'TblGroup' => 'Logging Data Tables',
			'TblOrd' => '56',
			'TblExtend' => '0',
			'TblNumFields' => '5',
			'TblNumForeignKeys' => '1'
		]);
		DB::table('SL_Tables')->insert([
			'TblID' => 128,
			'TblDatabase' => '1',
			'TblAbbr' => 'Surv',
			'TblName' => 'Surveys',
			'TblEng' => 'Surveys',
			'TblDesc' => 'Includes feedback after the entire process has been completed. This is primarily provided by Complainants, but may also be expanded to other types of system Users. This is vital for continuing to improve the quality of the system, both in general and in specific detail.',
			'TblNotes' => 'Maybe even feedback from Subjects and/or Officers, in addition to established User types? 

Question list and fields coming soon...',
			'TblGroup' => 'Complaint Data Tables',
			'TblOrd' => '20',
			'TblExtend' => '0',
			'TblNumFields' => '2',
			'TblNumForeignKeys' => '2'
		]);
		DB::table('SL_Tables')->insert([
			'TblID' => 136,
			'TblDatabase' => '1',
			'TblAbbr' => 'Note',
			'TblName' => 'ComplaintNotes',
			'TblEng' => 'Complaint Notes',
			'TblDesc' => 'Information which must be appended to Complaints any time after they are submitted. This is important for recording updates from system Administrators or even allowing Complainants to potentially upload evidence obtained after initially submitting their report.',
			'TblGroup' => 'Complaint Data Tables',
			'TblOrd' => '21',
			'TblExtend' => '0',
			'TblNumFields' => '3',
			'TblNumForeignKeys' => '2'
		]);
		DB::table('SL_Tables')->insert([
			'TblID' => 137,
			'TblDatabase' => '1',
			'TblAbbr' => 'Eve',
			'TblName' => 'EventSequence',
			'TblEng' => 'Event Sequence',
			'TblDesc' => 'Represent key discrete events occurring during a police Incident which require details like Stops, Searches, uses of Force, and Arrests. Event Sequence information is vital for identifying the chronological order of these events. This table also acts as a common reference to associate Orders, Evidence, and People-Event Links with all four of these types of events.',
			'TblType' => 'Linking',
			'TblGroup' => 'Complaint Data Tables',
			'TblOrd' => '5',
			'TblExtend' => '0',
			'TblNumFields' => '2',
			'TblNumForeignKeys' => '1',
			'TblNumForeignIn' => '7'
		]);
		DB::table('SL_Tables')->insert([
			'TblID' => 138,
			'TblDatabase' => '1',
			'TblAbbr' => 'Chrg',
			'TblName' => 'Charges',
			'TblEng' => 'Charges',
			'TblDesc' => 'Includes all instances where individuals are charged without being arrested. This table information helps provide richer detail, especially about the use of excessive/unnecessary citations.',
			'TblGroup' => 'Complaint Data Tables',
			'TblOrd' => '16',
			'TblExtend' => '0',
			'TblNumFields' => '2',
			'TblNumForeignKeys' => '1'
		]);
		DB::table('SL_Tables')->insert([
			'TblID' => 144,
			'TblDatabase' => '1',
			'TblAbbr' => 'LnkComDept',
			'TblName' => 'LinksComplaintDept',
			'TblEng' => 'Complaint-Department Links',
			'TblDesc' => 'Includes linkages between Police Departments and Complaints. This allows a single Complaint to be associated with more than one Police Department.',
			'TblType' => 'Linking',
			'TblGroup' => 'Complaint Linkage Tables',
			'TblOrd' => '40',
			'TblOpts' => '3',
			'TblExtend' => '0',
			'TblNumFields' => '2',
			'TblNumForeignKeys' => '2'
		]);
		DB::table('SL_Tables')->insert([
			'TblID' => 145,
			'TblDatabase' => '1',
			'TblAbbr' => 'LnkComOver',
			'TblName' => 'LinksComplaintOversight',
			'TblEng' => 'Complaint-Oversight Links',
			'TblDesc' => 'Includes linkages between Investigative Agencies involved in a Complaint. This allows us to track the progress of Complaints being investigated by more than one Investigative Agency.',
			'TblType' => 'Linking',
			'TblGroup' => 'Complaint Linkage Tables',
			'TblOrd' => '41',
			'TblOpts' => '3',
			'TblExtend' => '0',
			'TblNumFields' => '10',
			'TblNumForeignKeys' => '3'
		]);
		DB::table('SL_Tables')->insert([
			'TblID' => 146,
			'TblDatabase' => '1',
			'TblAbbr' => 'InjCare',
			'TblName' => 'InjuryCare',
			'TblEng' => 'Injury Care',
			'TblDesc' => 'Information from medical institutions who treated a Civilian\'s Injuries. Important for investigating use of Force Allegations.',
			'TblNotes' => 'There can be only one Injury Care record for each victim (Civilian), but this record should only exist if the victim did have Injuries.',
			'TblGroup' => 'Complaint Data Tables',
			'TblOrd' => '19',
			'TblExtend' => '0',
			'TblNumFields' => '17',
			'TblNumForeignKeys' => '1'
		]);
		DB::table('SL_Tables')->insert([
			'TblID' => 147,
			'TblDatabase' => '1',
			'TblAbbr' => 'StopReas',
			'TblName' => 'StopReasons',
			'TblEng' => 'Stop Reasons',
			'TblDesc' => 'The table stores the stated or non-stated Officer explanations to Civilians for a Stop or detention. This table is important for associating multiple Stop Reasons given for a single Stop.',
			'TblType' => 'Subset',
			'TblGroup' => 'Complaint Data Tables',
			'TblOrd' => '7',
			'TblExtend' => '0',
			'TblNumFields' => '2',
			'TblNumForeignKeys' => '1'
		]);
		DB::table('SL_Tables')->insert([
			'TblID' => 148,
			'TblDatabase' => '1',
			'TblAbbr' => 'ForceSub',
			'TblName' => 'ForceSubType',
			'TblEng' => 'Force Sub-Type',
			'TblDesc' => 'This subset table stores secondary types of Use of Force. This table specifically includes greater detail for Use of Force records that include any of these types of force: 1) Control Hold, 2) Body Weapon, and 3) Takedown. This data is important for linking multiple force type details with a single Use of Force.',
			'TblNotes' => 'Many-to-1 relationship with Use of Force',
			'TblType' => 'Subset',
			'TblGroup' => 'Complaint Data Tables',
			'TblOrd' => '13',
			'TblExtend' => '0',
			'TblNumFields' => '2',
			'TblNumForeignKeys' => '1'
		]);
		DB::table('SL_Tables')->insert([
			'TblID' => 149,
			'TblDatabase' => '1',
			'TblAbbr' => 'FrcBdy',
			'TblName' => 'ForceBodyParts',
			'TblEng' => 'Force Body Parts',
			'TblDesc' => 'This subset table stores which areas of a Civilian\'s body were impacted by Force. This is important for providing investigators documentation regarding Civilian\'s Injuries.',
			'TblType' => 'Subset',
			'TblGroup' => 'Complaint Data Tables',
			'TblOrd' => '14',
			'TblExtend' => '0',
			'TblNumFields' => '2',
			'TblNumForeignKeys' => '1'
		]);
		DB::table('SL_Tables')->insert([
			'TblID' => 150,
			'TblDatabase' => '1',
			'TblAbbr' => 'SrchCon',
			'TblName' => 'SearchContra',
			'TblEng' => 'Search Contraband',
			'TblDesc' => 'This table stores types of illegal items that were seized during a Search. Important for associating multiple types of contraband items with a single Search.',
			'TblType' => 'Subset',
			'TblGroup' => 'Complaint Data Tables',
			'TblOrd' => '9',
			'TblExtend' => '0',
			'TblNumFields' => '2',
			'TblNumForeignKeys' => '1'
		]);
		DB::table('SL_Tables')->insert([
			'TblID' => 151,
			'TblDatabase' => '1',
			'TblAbbr' => 'SrchSeiz',
			'TblName' => 'SearchSeize',
			'TblEng' => 'Search Seizures',
			'TblDesc' => 'This table stores types of legal property that were seized during a Search. Important for associating multiple types of seized items with a single Search.',
			'TblType' => 'Subset',
			'TblGroup' => 'Complaint Data Tables',
			'TblOrd' => '10',
			'TblExtend' => '0',
			'TblNumFields' => '2',
			'TblNumForeignKeys' => '1'
		]);
		DB::table('SL_Tables')->insert([
			'TblID' => 152,
			'TblDatabase' => '1',
			'TblAbbr' => 'Vehic',
			'TblName' => 'Vehicles',
			'TblEng' => 'Vehicles',
			'TblDesc' => 'This table includes identifying information about Civilian and Officer vehicles. This data helps investigators locate or verify the identities of Officers and Civilians involved in an Incident.',
			'TblType' => 'Subset',
			'TblGroup' => 'People Involved In Complaint',
			'TblOrd' => '28',
			'TblExtend' => '0',
			'TblNumFields' => '9',
			'TblNumForeignKeys' => '1',
			'TblNumForeignIn' => '2'
		]);
		DB::table('SL_Tables')->insert([
			'TblID' => 153,
			'TblDatabase' => '1',
			'TblAbbr' => 'Phys',
			'TblName' => 'PhysicalDesc',
			'TblEng' => 'Physical Descriptions',
			'TblDesc' => 'This table includes subjective characteristics of Civilians and Officers as described by Complainants. This information is vital for for verifying the identity of Civilians and Officers connected to Complaints.',
			'TblNotes' => 'For example, the Person Contact table has a "date of birth field" while the Physical Descriptions table has an "age range" field.',
			'TblType' => 'Subset',
			'TblGroup' => 'People Involved In Complaint',
			'TblOrd' => '26',
			'TblExtend' => '0',
			'TblNumFields' => '6',
			'TblNumForeignIn' => '4'
		]);
		DB::table('SL_Tables')->insert([
			'TblID' => 154,
			'TblDatabase' => '1',
			'TblAbbr' => 'Prsn',
			'TblName' => 'PersonContact',
			'TblEng' => 'Person Contact Info',
			'TblDesc' => 'This is the name and contact info for Civilians, Officers, and other system Users. This information is vital for keeping in touch with all the key people connected to the police oversight process.',
			'TblType' => 'Subset',
			'TblGroup' => 'People Involved In Complaint',
			'TblOrd' => '25',
			'TblExtend' => '0',
			'TblNumFields' => '18',
			'TblNumForeignKeys' => '1',
			'TblNumForeignIn' => '7'
		]);
		DB::table('SL_Tables')->insert([
			'TblID' => 155,
			'TblDatabase' => '1',
			'TblAbbr' => 'LnkOffVehic',
			'TblName' => 'LinksOfficerVehicles',
			'TblEng' => 'Officer-Vehicle Links',
			'TblDesc' => 'This table includes linkages between vehicles and people. This allows a single vehicle to be associated with one or more Officer.',
			'TblType' => 'Linking',
			'TblGroup' => 'Complaint Linkage Tables',
			'TblOrd' => '44',
			'TblExtend' => '0',
			'TblNumFields' => '3',
			'TblNumForeignKeys' => '2'
		]);
		DB::table('SL_Tables')->insert([
			'TblID' => 156,
			'TblDatabase' => '1',
			'TblAbbr' => 'AlleSil',
			'TblName' => 'AllegSilver',
			'TblEng' => 'Silver Allegations',
			'TblDesc' => 'Tracks the yes/no responses to Silver-Level Allegations against Officers, vital to identifying the most serious Complaints. This information also helps OpenPolice.org provide useful next-steps advice for Complainants who generate Complaints.',
			'TblGroup' => 'Complaint Data Tables',
			'TblOrd' => '3',
			'TblExtend' => '0',
			'TblNumFields' => '30',
			'TblNumForeignKeys' => '1'
		]);
		DB::table('SL_Tables')->insert([
			'TblID' => 157,
			'TblDatabase' => '1',
			'TblAbbr' => 'LnkCivAlle',
			'TblName' => 'LinksCivilianAllegations',
			'TblEng' => 'Civilian-Allegation Links',
			'TblType' => 'Linking',
			'TblGroup' => 'Complaint Linkage Tables',
			'TblOrd' => '45',
			'TblOpts' => '3',
			'TblExtend' => '0',
			'TblNumFields' => '2',
			'TblNumForeignKeys' => '2'
		]);
		DB::table('SL_Tables')->insert([
			'TblID' => 158,
			'TblDatabase' => '1',
			'TblAbbr' => 'LnkOffAlle',
			'TblName' => 'LinksOfficerAllegations',
			'TblEng' => 'Officer-Allegation Links',
			'TblType' => 'Linking',
			'TblGroup' => 'Complaint Linkage Tables',
			'TblOrd' => '42',
			'TblOpts' => '3',
			'TblExtend' => '0',
			'TblNumFields' => '2',
			'TblNumForeignKeys' => '2'
		]);
		DB::table('SL_Tables')->insert([
			'TblID' => 160,
			'TblDatabase' => '1',
			'TblAbbr' => 'LnkOffEve',
			'TblName' => 'LinksOfficerEvents',
			'TblEng' => 'Officer-Event Links',
			'TblDesc' => 'Includes linkages between Officers involved in an Incident with key events that happened during an Incident. Each record links one Officer with one Event (a Stop, Search, Property, or Use of Force).',
			'TblType' => 'Linking',
			'TblGroup' => 'Complaint Linkage Tables',
			'TblOrd' => '43',
			'TblOpts' => '3',
			'TblExtend' => '0',
			'TblNumFields' => '2',
			'TblNumForeignKeys' => '2'
		]);
		DB::table('SL_Tables')->insert([
			'TblID' => 162,
			'TblDatabase' => '1',
			'TblAbbr' => 'LnkCivEve',
			'TblName' => 'LinksCivilianEvents',
			'TblEng' => 'Civilian-Event Links',
			'TblType' => 'Linking',
			'TblGroup' => 'Complaint Linkage Tables',
			'TblOrd' => '46',
			'TblOpts' => '3',
			'TblExtend' => '0',
			'TblNumFields' => '2',
			'TblNumForeignKeys' => '2'
		]);
		DB::table('SL_Tables')->insert([
			'TblID' => 163,
			'TblDatabase' => '1',
			'TblAbbr' => 'LnkCivVehic',
			'TblName' => 'LinksCivilianVehicles',
			'TblEng' => 'Civilian-Vehicle Links',
			'TblDesc' => 'This table includes linkages between vehicles and people. This allows a single vehicle to be associated with one or more Civilian.',
			'TblType' => 'Linking',
			'TblGroup' => 'Complaint Linkage Tables',
			'TblOrd' => '47',
			'TblExtend' => '0',
			'TblNumFields' => '3',
			'TblNumForeignKeys' => '2'
		]);
		DB::table('SL_Tables')->insert([
			'TblID' => 164,
			'TblDatabase' => '1',
			'TblAbbr' => 'PhysRace',
			'TblName' => 'PhysicalDescRace',
			'TblEng' => 'Physical Descriptions Race',
			'TblDesc' => 'This subset table stores races associated with the Physical Descriptions of Civilians and Officers. This table specifically provides the important ability to accurately store data for people with multiple races.',
			'TblNotes' => 'The U.S. Census in 2000 and 2010 has been tracking multiple races for each citizen.',
			'TblType' => 'Subset',
			'TblGroup' => 'People Involved In Complaint',
			'TblOrd' => '27',
			'TblExtend' => '0',
			'TblNumFields' => '2',
			'TblNumForeignKeys' => '1'
		]);
		DB::table('SL_Tables')->insert([
			'TblID' => 165,
			'TblDatabase' => '1',
			'TblAbbr' => 'CivWeap',
			'TblName' => 'CivWeapons',
			'TblEng' => 'Civilian Body Weapons',
			'TblDesc' => 'This subset table stores one or more body weapons used by a Civilian against an Officer.',
			'TblNotes' => 'Many-to-1 relationship with Complaint',
			'TblType' => 'Subset',
			'TblGroup' => 'Complaint Data Tables',
			'TblOrd' => '15',
			'TblExtend' => '0',
			'TblNumFields' => '2',
			'TblNumForeignKeys' => '1'
		]);
		DB::table('SL_Tables')->insert([
			'TblID' => 172,
			'TblDatabase' => '1',
			'TblAbbr' => 'ZedDept',
			'TblName' => 'Zedit_Departments',
			'TblEng' => 'Edits: Police Departments',
			'TblDesc' => 'Each record stores a copy of individual edits made to unique records in the Departments table.',
			'TblType' => 'Validation',
			'TblGroup' => 'Record Edit Histories',
			'TblOrd' => '57',
			'TblExtend' => '111',
			'TblNumFields' => '2',
			'TblNumForeignIn' => '1'
		]);
		DB::table('SL_Tables')->insert([
			'TblID' => 173,
			'TblDatabase' => '1',
			'TblAbbr' => 'ZedOver',
			'TblName' => 'Zedit_Oversight',
			'TblEng' => 'Edits: Investigative Agencies',
			'TblDesc' => 'Each record stores a copy of individual edits made to unique records in the Oversight table.',
			'TblType' => 'Validation',
			'TblGroup' => 'Record Edit Histories',
			'TblOrd' => '58',
			'TblExtend' => '106',
			'TblNumFields' => '5',
			'TblNumForeignKeys' => '1'
		]);
		DB::table('SL_Tables')->insert([
			'TblID' => 174,
			'TblDatabase' => '1',
			'TblAbbr' => 'VolunStat',
			'TblName' => 'zVolunStatDays',
			'TblEng' => 'Volunteers: Daily Stats',
			'TblDesc' => 'Each record stores daily statistics for volunteer activity.',
			'TblType' => 'Validation',
			'TblGroup' => 'Internal Volunteer Data',
			'TblOrd' => '59',
			'TblExtend' => '0',
			'TblNumFields' => '15'
		]);
		DB::table('SL_Tables')->insert([
			'TblID' => 176,
			'TblDatabase' => '1',
			'TblAbbr' => 'UserInfo',
			'TblName' => 'zVolunUserInfo',
			'TblEng' => 'Volunteers: User Info',
			'TblDesc' => 'Each record stores extra information related to one volunteer User.',
			'TblGroup' => 'Internal Volunteer Data',
			'TblOrd' => '60',
			'TblExtend' => '0',
			'TblNumFields' => '8',
			'TblNumForeignKeys' => '2'
		]);
		DB::table('SL_Tables')->insert([
			'TblID' => 167,
			'TblDatabase' => '1',
			'TblName' => 'users',
			'TblEng' => 'Users',
			'TblDesc' => 'This represents the Laravel Users table, but will not actually be implemented by SurvLoop as part of the database installation.',
			'TblGroup' => 'Users',
			'TblOrd' => '55',
			'TblExtend' => '0',
			'TblNumForeignIn' => '18'
		]);
		DB::table('SL_Tables')->insert([
			'TblID' => 168,
			'TblDatabase' => '1',
			'TblAbbr' => 'Vis',
			'TblName' => 'Visitors',
			'TblEng' => 'Site Visitors',
			'TblDesc' => 'Represent user sessions while visiting the web site. This is useful for tracking visitor responses, searches, etc.',
			'TblGroup' => 'Internal Infrastructure',
			'TblOrd' => '53',
			'TblExtend' => '0',
			'TblNumFields' => '7',
			'TblNumForeignKeys' => '1'
		]);
		DB::table('SL_Tables')->insert([
			'TblID' => 169,
			'TblDatabase' => '1',
			'TblAbbr' => 'OffComp',
			'TblName' => 'OffCompliment',
			'TblEng' => 'Officer Compliments',
			'TblDesc' => 'Tracks the yes/no responses to Compliments given to Officers.',
			'TblGroup' => 'Compliment Data Tables',
			'TblOrd' => '50',
			'TblExtend' => '0',
			'TblNumFields' => '10',
			'TblNumForeignKeys' => '2'
		]);
		DB::table('SL_Tables')->insert([
			'TblID' => 170,
			'TblDatabase' => '1',
			'TblAbbr' => 'Compli',
			'TblName' => 'Compliments',
			'TblEng' => 'Compliments',
			'TblDesc' => 'Reports of satisfaction that contain one or more Compliment/Commendation of Officer conduct. Compliments are vital, because they provide the essential store of information for communicating what happened during positive police encounters.',
			'TblGroup' => 'Compliment Data Tables',
			'TblOrd' => '48',
			'TblExtend' => '0',
			'TblNumFields' => '22',
			'TblNumForeignKeys' => '3',
			'TblNumForeignIn' => '4'
		]);
		DB::table('SL_Tables')->insert([
			'TblID' => 171,
			'TblDatabase' => '1',
			'TblAbbr' => 'LnkCompliDept',
			'TblName' => 'LinksComplimentDept',
			'TblEng' => 'Compliment-Department Links',
			'TblDesc' => 'Includes linkages between Police Departments and Compliments. This allows a single Compliment to be associated with more than one Police Department.',
			'TblType' => 'Linking',
			'TblGroup' => 'Compliment Data Tables',
			'TblOrd' => '51',
			'TblExtend' => '0',
			'TblNumFields' => '2',
			'TblNumForeignKeys' => '2'
		]);
		DB::table('SL_Tables')->insert([
			'TblID' => 177,
			'TblDatabase' => '1',
			'TblAbbr' => 'ComRev',
			'TblName' => 'zComplaintReviews',
			'TblEng' => 'Complaint Review',
			'TblDesc' => 'Each record stores feedback from a system admin, the complaint owner, or the department.',
			'TblGroup' => 'Internal Volunteer Data',
			'TblOrd' => '61',
			'TblExtend' => '0',
			'TblNumFields' => '20',
			'TblNumForeignKeys' => '2'
		]);
		DB::table('SL_Tables')->insert([
			'TblID' => 178,
			'TblDatabase' => '1',
			'TblAbbr' => 'InjBdy',
			'TblName' => 'InjuryBodyParts',
			'TblEng' => 'Injury Body Parts',
			'TblDesc' => 'This subset table stores which areas of a Civilian\'s body were impacted by this Injury. This is important for providing investigators documentation regarding Civilian\'s Injuries.',
			'TblType' => 'Subset',
			'TblGroup' => 'Complaint Data Tables',
			'TblOrd' => '18',
			'TblExtend' => '0',
			'TblNumFields' => '2',
			'TblNumForeignKeys' => '1'
		]);
		DB::table('SL_Tables')->insert([
			'TblID' => 179,
			'TblDatabase' => '1',
			'TblAbbr' => 'PrtFlt',
			'TblName' => 'PartnerFilters',
			'TblEng' => 'Partner Complaint Case Filters',
			'TblDesc' => 'Partners can specify one or more sets of filters to define one type of case.',
			'TblType' => 'Linking',
			'TblGroup' => 'People & Groups Involved In Complaint Process',
			'TblOrd' => '36',
			'TblExtend' => '0',
			'TblNumFields' => '2',
			'TblNumForeignKeys' => '1'
		]);
		DB::table('SL_Tables')->insert([
			'TblID' => 180,
			'TblDatabase' => '1',
			'TblAbbr' => 'PrtCas',
			'TblName' => 'PartnerCaseTypes',
			'TblEng' => 'Partner Complaint Case Types',
			'TblDesc' => 'Partners can specify one or more sets of filters for types of complaints that match their needs. Each record links one complaint case profile to as many complaint filters as needed. Information in this table enables us to alert Partners to the best matches.',
			'TblType' => 'Subset',
			'TblGroup' => 'People & Groups Involved In Complaint Process',
			'TblOrd' => '35',
			'TblExtend' => '0',
			'TblNumFields' => '1',
			'TblNumForeignKeys' => '1',
			'TblNumForeignIn' => '1'
		]);
		DB::table('SL_Tables')->insert([
			'TblID' => 181,
			'TblDatabase' => '1',
			'TblAbbr' => 'PrtSta',
			'TblName' => 'PartnerStates',
			'TblEng' => 'Partner States',
			'TblDesc' => 'Partners can specify one or more states where there currently work. Information in this table enables us to alert Partners to the best matches they can actually work with.',
			'TblType' => 'Linking',
			'TblGroup' => 'People & Groups Involved In Complaint Process',
			'TblOrd' => '33',
			'TblExtend' => '0',
			'TblNumFields' => '2',
			'TblNumForeignKeys' => '1'
		]);
		DB::table('SL_Tables')->insert([
			'TblID' => 182,
			'TblDatabase' => '1',
			'TblAbbr' => 'PrtCap',
			'TblName' => 'PartnerCapac',
			'TblEng' => 'Partner Capacities',
			'TblDesc' => 'Partners can specify one or more sets of Capacities to list for their organization. These are important for site visitors and power users to filter for the most helpful organizations for a given situation.',
			'TblType' => 'Subset',
			'TblGroup' => 'People & Groups Involved In Complaint Process',
			'TblOrd' => '34',
			'TblExtend' => '0',
			'TblNumFields' => '2',
			'TblNumForeignKeys' => '1'
		]);
		DB::table('SL_Tables')->insert([
			'TblID' => 183,
			'TblDatabase' => '1',
			'TblAbbr' => 'OverMod',
			'TblName' => 'OversightModels',
			'TblEng' => 'Oversight Models',
			'TblDesc' => 'This helper table tracks the Oversight Models associated with each Investigative Agency.',
			'TblType' => 'Subset',
			'TblGroup' => 'People & Groups Involved In Complaint Process',
			'TblOrd' => '31',
			'TblExtend' => '0',
			'TblNumFields' => '2'
		]);
		DB::table('SL_Tables')->insert([
			'TblID' => 184,
			'TblDatabase' => '1',
			'TblAbbr' => 'Beta',
			'TblName' => 'TesterBeta',
			'TblEng' => 'Beta Test Signups',
			'TblDesc' => 'Each record is one complainant who requested to participate in the pilot program.',
			'TblGroup' => 'People Involved In Complaint',
			'TblOrd' => '37',
			'TblExtend' => '0',
			'TblNumFields' => '14',
			'TblNumForeignKeys' => '1'
		]);
		DB::table('SL_Tables')->insert([
			'TblID' => 185,
			'TblDatabase' => '1',
			'TblAbbr' => 'CivComp',
			'TblName' => 'CivCompliment',
			'TblEng' => 'Civilians Compliments',
			'TblDesc' => 'Individuals who are directly impacted by, observed, or are reporting on an police incident. This information allows us to identify and contact individuals who\'ve been impacted by alleged incident.',
			'TblGroup' => 'Compliment Data Tables',
			'TblOrd' => '49',
			'TblExtend' => '0',
			'TblNumFields' => '6',
			'TblNumForeignKeys' => '4'
		]);
		DB::table('SL_Tables')->insert([
			'TblID' => 186,
			'TblDatabase' => '1',
			'TblAbbr' => 'LnkCompliOver',
			'TblName' => 'LinksComplimentOversight',
			'TblEng' => 'Compliment-Oversight Links',
			'TblDesc' => 'Includes linkages between Investigative Agencies involved in a Compliment. This allows us to track the progress of Compliments being investigated by more than one Investigative Agency.',
			'TblType' => 'Linking',
			'TblGroup' => 'Compliment Data Tables',
			'TblOrd' => '52',
			'TblExtend' => '0',
			'TblNumFields' => '5',
			'TblNumForeignKeys' => '3'
		]);
		DB::table('SL_Tables')->insert([
			'TblID' => 187,
			'TblDatabase' => '1',
			'TblAbbr' => 'OffVer',
			'TblName' => 'OfficersVerified',
			'TblEng' => 'Verified Officer Records',
			'TblDesc' => 'An internal Verified Officer Record is used to the most accurate and current information on an officer. This is vital for tracking Officers involved in multiple Incidents over time, and multiple departments.',
			'TblGroup' => 'People Involved In Complaint',
			'TblOrd' => '24',
			'TblExtend' => '0',
			'TblNumFields' => '13',
			'TblNumForeignKeys' => '2',
			'TblNumForeignIn' => '2'
		]);
		DB::table('SL_Tables')->insert([
			'TblID' => 188,
			'TblDatabase' => '1',
			'TblAbbr' => 'LnkOffDept',
			'TblName' => 'LinksOfficerDept',
			'TblEng' => 'Verified Officer-Department Links',
			'TblDesc' => 'Includes linkages between Verified Officer Records and Police Departments. This allows a single Officer to be associated with more than one Police Department over time.',
			'TblType' => 'Linking',
			'TblGroup' => 'Complaint Linkage Tables',
			'TblOrd' => '39',
			'TblExtend' => '0',
			'TblNumFields' => '3',
			'TblNumForeignKeys' => '2'
		]);
	
	DB::table('SL_Fields')->insert([
			'FldID' => 256,
			'FldDatabase' => '1',
			'FldTable' => '116',
			'FldOrd' => '3',
			'FldSpecSource' => '0',
			'FldName' => 'Type',
			'FldEng' => 'Types of Force',
			'FldDesc' => 'The categories of Force an Officer used on a Subject. Essential for evaluating Allegations of excessive force and for tracking Force trends.',
			'FldForeignTable' => '0',
			'FldForeignMin' => '11',
			'FldForeignMax' => '11',
			'FldForeign2Min' => '0',
			'FldForeign2Max' => '0',
			'FldValues' => 'Def::Force Type',
			'FldType' => 'INT',
			'FldDataType' => 'Numeric',
			'FldDataLength' => '3',
			'FldCharSupport' => ',Numbers,',
			'FldKeyStruct' => 'Simple',
			'FldCompareSame' => '130'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 257,
			'FldDatabase' => '1',
			'FldTable' => '116',
			'FldOrd' => '4',
			'FldSpecSource' => '0',
			'FldName' => 'TypeOther',
			'FldEng' => 'Other Type of Force',
			'FldDesc' => 'Category of Force an Officer used on Subject. Important for identifying less-common Force types.',
			'FldNotes' => 'Only visible if "Other" selected under "Which Types of Force did this officer used?"',
			'FldForeignTable' => '0',
			'FldForeignMin' => '11',
			'FldForeignMax' => '11',
			'FldForeign2Min' => '0',
			'FldForeign2Max' => '0',
			'FldDataLength' => '0',
			'FldCharSupport' => ',Letters,Keyboard,',
			'FldKeyStruct' => 'Simple',
			'FldOpts' => '7'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 769,
			'FldDatabase' => '1',
			'FldTable' => '104',
			'FldOrd' => '2',
			'FldSpecType' => 'Replica',
			'FldSpecSource' => '866',
			'FldName' => 'ComplaintID',
			'FldEng' => 'Complaint ID',
			'FldDesc' => 'The unique number of the Complaint record related to this Officer\'s record. Vital for associating Officer with all other Complaint data.',
			'FldForeignTable' => '112',
			'FldForeignMin' => '11',
			'FldForeignMax' => 'N',
			'FldForeign2Min' => '0',
			'FldForeign2Max' => '11',
			'FldIsIndex' => '1',
			'FldType' => 'INT',
			'FldDataType' => 'Numeric',
			'FldDataLength' => '11',
			'FldCharSupport' => ',Numbers,',
			'FldKeyType' => ',Foreign,',
			'FldKeyStruct' => 'Simple',
			'FldEditRule' => 'NowNot',
			'FldValuesEnteredBy' => 'System',
			'FldCompareSame' => '130',
			'FldOpts' => '13'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 1025,
			'FldDatabase' => '1',
			'FldTable' => '111',
			'FldOrd' => '13',
			'FldSpecSource' => '0',
			'FldName' => 'ScoreOpenness',
			'FldEng' => 'Openness Score',
			'FldDesc' => 'This indicates an overall rating for a Police Department\'s online presence and the quality of their Complaint submission process. This is important for encouraging Departments to improve these metrics.',
			'FldForeignTable' => '0',
			'FldForeignMin' => 'N',
			'FldForeignMax' => 'N',
			'FldForeign2Min' => 'N',
			'FldForeign2Max' => 'N',
			'FldDataType' => 'Numeric',
			'FldDataLength' => '11',
			'FldCharSupport' => ',Numbers,',
			'FldValuesEnteredBy' => 'System',
			'FldCompareSame' => '6',
			'FldOperateSame' => '10010'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 258,
			'FldDatabase' => '1',
			'FldTable' => '116',
			'FldOrd' => '7',
			'FldSpecSource' => '0',
			'FldName' => 'HowManyTimes',
			'FldEng' => 'How many times was subject hit?',
			'FldDesc' => 'Indicates the number of times an Officer hit a Subject with this type of Force. Important for investigating Allegations of Force and for identifying Force trends.',
			'FldNotes' => 'We might not want to reveal this for certain types of force -- such takedowns and control holds. Because those are likely to only be deployed once.',
			'FldForeignTable' => '0',
			'FldForeignMin' => '11',
			'FldForeignMax' => '11',
			'FldForeign2Min' => '0',
			'FldForeign2Max' => '0',
			'FldType' => 'INT',
			'FldDataType' => 'Numeric',
			'FldDataLength' => '11',
			'FldCharSupport' => ',Numbers,',
			'FldKeyType' => 'Non',
			'FldKeyStruct' => 'Simple',
			'FldCompareSame' => '6'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 1026,
			'FldDatabase' => '1',
			'FldTable' => '106',
			'FldOrd' => '21',
			'FldSpecSource' => '0',
			'FldName' => 'ComplaintWebForm',
			'FldEng' => 'Website Complaint Form URL',
			'FldDesc' => 'Indicates whether or not the designated Police Department website has a form to allow complaints to be submitted online. (Most will not.)',
			'FldForeignTable' => '0',
			'FldForeignMin' => 'N',
			'FldForeignMax' => 'N',
			'FldForeign2Min' => 'N',
			'FldForeign2Max' => 'N',
			'FldDataLength' => '0',
			'FldCharSupport' => ',Letters,Keyboard,Numbers,',
			'FldCompareSame' => '130'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 771,
			'FldDatabase' => '1',
			'FldTable' => '111',
			'FldOrd' => '4',
			'FldSpecType' => 'Replica',
			'FldSpecSource' => '926',
			'FldName' => 'Verified',
			'FldEng' => 'Contact Info Last Verified',
			'FldDesc' => 'Indicates the date and time when Police Department contact information was last verified. This is crucial for keeping track of the accuracy of Police Department contact information.',
			'FldNotes' => 'NULL value means unverified.',
			'FldForeignTable' => '0',
			'FldForeignMin' => '11',
			'FldForeignMax' => '11',
			'FldForeign2Min' => '0',
			'FldForeign2Max' => '0',
			'FldType' => 'DATETIME',
			'FldDataType' => 'DateTime',
			'FldDataLength' => '0',
			'FldCharSupport' => ',Keyboard,Numbers,',
			'FldDisplayFormat' => 'YYYY-MM-DD HH:MM:SS',
			'FldKeyType' => 'Non',
			'FldKeyStruct' => 'Simple',
			'FldCompareSame' => '6'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 1027,
			'FldDatabase' => '1',
			'FldTable' => '121',
			'FldOrd' => '8',
			'FldSpecSource' => '0',
			'FldName' => 'RequestID',
			'FldEng' => 'Officer requested ID?',
			'FldDesc' => 'Indicates whether or not the Officer requested the Subject\'s identification. Important for identifying possible violation of Department procedure.',
			'FldForeignTable' => '0',
			'FldForeignMin' => 'N',
			'FldForeignMax' => 'N',
			'FldForeign2Min' => 'N',
			'FldForeign2Max' => 'N',
			'FldValues' => 'Y;N;?',
			'FldDataLength' => '1',
			'FldCharSupport' => ',Letters,',
			'FldCompareSame' => '130'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 260,
			'FldDatabase' => '1',
			'FldTable' => '116',
			'FldOrd' => '8',
			'FldSpecSource' => '0',
			'FldName' => 'OrdersBeforeForce',
			'FldEng' => 'Officers Orders Used Before Force',
			'FldDesc' => 'Indicates whether or not an Officer issued orders before using Force against a Subject. Important for investigating Excessive Force Allegations of Excessive Force.',
			'FldForeignTable' => '0',
			'FldForeignMin' => '11',
			'FldForeignMax' => '11',
			'FldForeign2Min' => '0',
			'FldForeign2Max' => '0',
			'FldValues' => 'Y;N;?',
			'FldDataLength' => '1',
			'FldCharSupport' => ',Letters,Keyboard,',
			'FldKeyType' => 'Non',
			'FldKeyStruct' => 'Simple',
			'FldCompareSame' => '130'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 516,
			'FldDatabase' => '1',
			'FldTable' => '128',
			'FldSpecType' => 'Replica',
			'FldSpecSource' => '866',
			'FldName' => 'ComplaintID',
			'FldEng' => 'Complaint ID',
			'FldDesc' => 'The unique number of the Complaint record related to this Survey record, vital to associating with all other Complaint data.',
			'FldForeignTable' => '112',
			'FldForeignMin' => '0',
			'FldForeignMax' => 'N',
			'FldForeign2Min' => '0',
			'FldForeign2Max' => '11',
			'FldIsIndex' => '1',
			'FldType' => 'INT',
			'FldDataType' => 'Numeric',
			'FldDataLength' => '11',
			'FldCharSupport' => ',Numbers,',
			'FldKeyType' => ',Foreign,',
			'FldKeyStruct' => 'Simple',
			'FldEditRule' => 'NowNot',
			'FldValuesEnteredBy' => 'System',
			'FldRequired' => '1',
			'FldCompareSame' => '130',
			'FldOpts' => '13'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 772,
			'FldDatabase' => '1',
			'FldTable' => '106',
			'FldOrd' => '5',
			'FldSpecType' => 'Replica',
			'FldSpecSource' => '926',
			'FldName' => 'Verified',
			'FldEng' => 'Contact Info Last Verified',
			'FldDesc' => 'Indicates the date and time when an Investigative Agency\'s Police contact information was last verified. This is crucial for keeping track of the accuracy of Investigative Agency\'s contact information.',
			'FldNotes' => 'NULL value means unverified.',
			'FldForeignTable' => '0',
			'FldForeignMin' => '11',
			'FldForeignMax' => '11',
			'FldForeign2Min' => '0',
			'FldForeign2Max' => '0',
			'FldType' => 'DATETIME',
			'FldDataType' => 'DateTime',
			'FldDataLength' => '0',
			'FldCharSupport' => ',Keyboard,Numbers,',
			'FldDisplayFormat' => 'YYYY-MM-DD HH:MM:SS',
			'FldKeyType' => 'Non',
			'FldKeyStruct' => 'Simple',
			'FldCompareSame' => '6'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 773,
			'FldDatabase' => '1',
			'FldTable' => '145',
			'FldOrd' => '6',
			'FldSpecSource' => '0',
			'FldName' => 'Investigated',
			'FldEng' => 'Investigated by Investigative Agency',
			'FldDesc' => 'Indicates the date and time when the Complainant was contacted by an Investigative Agency contact regarding the status of their Complaint or to investigate any Allegations contained in the Complaint.',
			'FldNotes' => 'Complainants must provide OPC this information. So we must send Complainants regular follow up emails to track Investigative Agency response rates and response times.',
			'FldForeignMin' => '11',
			'FldForeignMax' => '11',
			'FldForeign2Min' => '0',
			'FldForeign2Max' => '0',
			'FldDefault' => 'NULL',
			'FldType' => 'DATETIME',
			'FldDataType' => 'DateTime',
			'FldDataLength' => '0',
			'FldCharSupport' => ',Numbers,Keyboard,',
			'FldDisplayFormat' => 'YYYY-MM-DD HH:MM:SS',
			'FldNullSupport' => '0',
			'FldCompareSame' => '6'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 1029,
			'FldDatabase' => '1',
			'FldTable' => '102',
			'FldOrd' => '9',
			'FldSpecSource' => '0',
			'FldName' => 'Occupation',
			'FldEng' => 'Occupation',
			'FldDesc' => 'The profession of a Civilian. This information can help investigators identify Civilians.',
			'FldForeignTable' => '0',
			'FldForeignMin' => 'N',
			'FldForeignMax' => 'N',
			'FldForeign2Min' => 'N',
			'FldForeign2Max' => 'N',
			'FldDataLength' => '0',
			'FldCharSupport' => ',Letters,Keyboard,Numbers,',
			'FldCompareSame' => '130',
			'FldOpts' => '7'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 262,
			'FldDatabase' => '1',
			'FldTable' => '116',
			'FldOrd' => '9',
			'FldSpecSource' => '0',
			'FldName' => 'OrdersSubjectResponse',
			'FldEng' => 'Victim\'s Response Before Force',
			'FldDesc' => 'Narrative account of what the Subject of an Excessive Force Allegation said or did before Officer used Force. Important for investigating Excessive Force Allegations and for identifying Force trends.',
			'FldForeignTable' => '0',
			'FldForeignMin' => '11',
			'FldForeignMax' => '11',
			'FldForeign2Min' => '0',
			'FldForeign2Max' => '0',
			'FldType' => 'TEXT',
			'FldDataLength' => '0',
			'FldCharSupport' => ',Letters,Keyboard,',
			'FldKeyStruct' => 'Simple',
			'FldOpts' => '7'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 263,
			'FldDatabase' => '1',
			'FldTable' => '116',
			'FldOrd' => '12',
			'FldSpecSource' => '0',
			'FldName' => 'WhileHandcuffed',
			'FldEng' => 'Subject handcuffed when hit?',
			'FldDesc' => 'Indicates whether or not Subject was handcuffed when struck by an Officer. Important for evaluating Allegations of Excessive Force and tracking Force trends.',
			'FldForeignTable' => '0',
			'FldForeignMin' => '11',
			'FldForeignMax' => '11',
			'FldForeign2Min' => '0',
			'FldForeign2Max' => '0',
			'FldValues' => 'Y;N;?',
			'FldDataLength' => '1',
			'FldCharSupport' => ',Letters,Keyboard,',
			'FldKeyType' => 'Non',
			'FldKeyStruct' => 'Simple',
			'FldCompareSame' => '130'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 519,
			'FldDatabase' => '1',
			'FldTable' => '128',
			'FldOrd' => '2',
			'FldSpecType' => 'Replica',
			'FldSpecSource' => '921',
			'FldName' => 'AuthUserID',
			'FldEng' => 'User Authentication ID',
			'FldDesc' => 'The unique number of the System User record logged in while completing this Survey record. Important for tracking which User is providing this feedback on the OPC system.',
			'FldForeignTable' => '167',
			'FldForeignMin' => '0',
			'FldForeignMax' => '11',
			'FldForeign2Min' => '0',
			'FldForeign2Max' => '11',
			'FldType' => 'INT',
			'FldDataType' => 'Numeric',
			'FldDataLength' => '11',
			'FldCharSupport' => ',Numbers,',
			'FldKeyType' => 'Foreign',
			'FldKeyStruct' => 'Simple',
			'FldCompareSame' => '130',
			'FldOpts' => '13'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 1031,
			'FldDatabase' => '1',
			'FldTable' => '112',
			'FldOrd' => '6',
			'FldSpecSource' => '0',
			'FldName' => 'AwardMedallion',
			'FldEng' => 'Award Medallion',
			'FldDesc' => 'The current level of detail asked of Complainant based on their selection. We use this information internally to determine what fields to show the Complainant, and what Medallion up-sells to encourage when appropriate.',
			'FldNotes' => 'Defaults to Gold.',
			'FldForeignTable' => '0',
			'FldForeignMin' => 'N',
			'FldForeignMax' => 'N',
			'FldForeign2Min' => 'N',
			'FldForeign2Max' => 'N',
			'FldValues' => 'Silver;Gold',
			'FldDataLength' => '10',
			'FldCharSupport' => ',Letters,',
			'FldCompareSame' => '130'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 264,
			'FldDatabase' => '1',
			'FldTable' => '116',
			'FldOrd' => '13',
			'FldSpecSource' => '0',
			'FldName' => 'WhileHeldDown',
			'FldEng' => 'Subject held down when hit?',
			'FldDesc' => 'Indicates whether or not Subject was restrained on the ground when struck by an Officer. Important for evaluating Allegations of Excessive Force and tracking Force trends.',
			'FldForeignTable' => '0',
			'FldForeignMin' => '11',
			'FldForeignMax' => '11',
			'FldForeign2Min' => '0',
			'FldForeign2Max' => '0',
			'FldValues' => 'Y;N;?',
			'FldDataLength' => '1',
			'FldCharSupport' => ',Letters,Keyboard,',
			'FldKeyType' => 'Non',
			'FldKeyStruct' => 'Simple',
			'FldCompareSame' => '130'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 776,
			'FldDatabase' => '1',
			'FldTable' => '112',
			'FldOrd' => '27',
			'FldSpecSource' => '0',
			'FldName' => 'Notes',
			'FldEng' => 'Complaint Notes',
			'FldDesc' => 'Additional annotations related to this Complaint. Might add additional information or context regarding the Complaint.',
			'FldNotes' => 'Changed to "Complaint Notes"',
			'FldForeignTable' => '0',
			'FldForeignMin' => '11',
			'FldForeignMax' => '11',
			'FldForeign2Min' => '0',
			'FldForeign2Max' => '0',
			'FldType' => 'TEXT',
			'FldDataLength' => '0',
			'FldCharSupport' => ',Letters,Keyboard,',
			'FldKeyType' => 'Non',
			'FldKeyStruct' => 'Simple',
			'FldCompareSame' => '6',
			'FldOpts' => '11'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 1032,
			'FldDatabase' => '1',
			'FldTable' => '145',
			'FldOrd' => '7',
			'FldSpecSource' => '0',
			'FldName' => 'ReportDate',
			'FldEng' => 'Investigative Agency Report Uploaded',
			'FldDesc' => 'Indicates the date and time when an Investigative Agency contact regarding the status of their Complaint or to investigate any Allegations contained in the Complaint.',
			'FldForeignMin' => 'N',
			'FldForeignMax' => 'N',
			'FldForeign2Min' => 'N',
			'FldForeign2Max' => 'N',
			'FldType' => 'DATETIME',
			'FldDataType' => 'DateTime',
			'FldDataLength' => '0',
			'FldCharSupport' => ',Numbers,Keyboard,',
			'FldNullSupport' => '0',
			'FldCompareSame' => '6',
			'FldCompareOther' => '6',
			'FldOperateSame' => '137200',
			'FldOperateOther' => '137200'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 777,
			'FldDatabase' => '1',
			'FldTable' => '136',
			'FldSpecType' => 'Replica',
			'FldSpecSource' => '866',
			'FldName' => 'ComplaintID',
			'FldEng' => 'Complaint ID',
			'FldDesc' => 'The unique number of the Complaint record related to this Complaint Note. Vital for associating Complaint record to Complaint Note data.',
			'FldForeignTable' => '112',
			'FldForeignMin' => '0',
			'FldForeignMax' => 'N',
			'FldForeign2Min' => '11',
			'FldForeign2Max' => '11',
			'FldIsIndex' => '1',
			'FldType' => 'INT',
			'FldDataType' => 'Numeric',
			'FldDataLength' => '11',
			'FldCharSupport' => ',Numbers,',
			'FldKeyType' => ',Foreign,',
			'FldKeyStruct' => 'Simple',
			'FldEditRule' => 'NowNot',
			'FldNullSupport' => '0',
			'FldValuesEnteredBy' => 'System',
			'FldRequired' => '1',
			'FldCompareSame' => '130',
			'FldOpts' => '13'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 778,
			'FldDatabase' => '1',
			'FldTable' => '136',
			'FldOrd' => '1',
			'FldSpecType' => 'Replica',
			'FldSpecSource' => '921',
			'FldName' => 'UserID',
			'FldEng' => 'User ID',
			'FldDesc' => 'The primary User Authentication number connected to this Complaint Note. This is vital to tracking which system user provide which new information and Evidence to a Complaint.',
			'FldForeignTable' => '167',
			'FldForeignMin' => '0',
			'FldForeignMax' => 'N',
			'FldForeign2Min' => '11',
			'FldForeign2Max' => '11',
			'FldType' => 'INT',
			'FldDataType' => 'Numeric',
			'FldDataLength' => '11',
			'FldCharSupport' => ',Numbers,',
			'FldKeyType' => ',Foreign,',
			'FldKeyStruct' => 'Simple',
			'FldCompareSame' => '130',
			'FldOpts' => '13'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 1034,
			'FldDatabase' => '1',
			'FldTable' => '121',
			'FldOrd' => '6',
			'FldSpecSource' => '0',
			'FldName' => 'PermissionEnter',
			'FldEng' => 'Officer request permission to enter?',
			'FldDesc' => 'Indicates whether or not the Officer requested permission to enter a private residence or workplace. Important for identifying possible violation of Department procedure.',
			'FldForeignTable' => '0',
			'FldForeignMin' => 'N',
			'FldForeignMax' => 'N',
			'FldForeign2Min' => 'N',
			'FldForeign2Max' => 'N',
			'FldValues' => 'Y;N;?',
			'FldDataLength' => '1',
			'FldCharSupport' => ',Letters,',
			'FldCompareSame' => '130'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 1035,
			'FldDatabase' => '1',
			'FldTable' => '121',
			'FldOrd' => '7',
			'FldSpecSource' => '0',
			'FldName' => 'PermissionEnterGranted',
			'FldEng' => 'Subject gave officer permission to enter?',
			'FldDesc' => 'Indicates whether or not the Civilian granted an Officer permission to enter a private residence or workplace. Important for identifying possible violation of Department procedure.',
			'FldNotes' => 'If Complainant respond "No", then prompt for Wrongful Entry Allegation (with description).',
			'FldForeignTable' => '0',
			'FldForeignMin' => 'N',
			'FldForeignMax' => 'N',
			'FldForeign2Min' => 'N',
			'FldForeign2Max' => 'N',
			'FldValues' => 'Y;N;?',
			'FldDataLength' => '1',
			'FldCharSupport' => ',Letters,',
			'FldCompareSame' => '130'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 780,
			'FldDatabase' => '1',
			'FldTable' => '136',
			'FldOrd' => '4',
			'FldSpecSource' => '0',
			'FldName' => 'Content',
			'FldEng' => 'Note Content',
			'FldDesc' => 'The main text/body of a Note being added to a Complaint, providing new information or descriptive updates of the Complaint\'s status. This is important as an open-ended tool to add extra information about a Complaint.',
			'FldForeignTable' => '0',
			'FldForeignMin' => '11',
			'FldForeignMax' => '11',
			'FldForeign2Min' => '0',
			'FldForeign2Max' => '0',
			'FldType' => 'TEXT',
			'FldDataLength' => '0',
			'FldCharSupport' => ',Letters,Keyboard,',
			'FldKeyStruct' => 'Simple',
			'FldOpts' => '11'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 1036,
			'FldDatabase' => '1',
			'FldTable' => '121',
			'FldOrd' => '4',
			'FldSpecSource' => '0',
			'FldName' => 'EnterPrivateProperty',
			'FldEng' => 'Officer entered private property?',
			'FldDesc' => 'Indicates whether or not the an Officer entered a private residence or workplace. Important for identifying possible violation of Department procedure.',
			'FldForeignTable' => '0',
			'FldForeignMin' => 'N',
			'FldForeignMax' => 'N',
			'FldForeign2Min' => 'N',
			'FldForeign2Max' => 'N',
			'FldValues' => 'Y;N;?',
			'FldDataLength' => '1',
			'FldCharSupport' => ',Letters,',
			'FldCompareSame' => '130'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 269,
			'FldDatabase' => '1',
			'FldTable' => '117',
			'FldOrd' => '3',
			'FldSpecSource' => '0',
			'FldName' => 'HowManyTimes',
			'FldEng' => 'How Many Injuries',
			'FldDesc' => 'A number to indicate how many Injuries a particular Civilian received during an use of Force Incident. Important for quantifying the number of discrete Injuries received from Force.',
			'FldNotes' => 'We have decided this might not be necessary 10/17/15======This field hidden for Injury Types (these types count by Injury Locations): In-patient hospital stay required, Blood loss requiring transfusion, Major concussion, Longer than brief loss of consciousness, Minor concussion, Brief loss of consciousness, ',
			'FldForeignTable' => '0',
			'FldForeignMin' => '11',
			'FldForeignMax' => '11',
			'FldForeign2Min' => '0',
			'FldForeign2Max' => '0',
			'FldType' => 'INT',
			'FldDataType' => 'Numeric',
			'FldDataLength' => '11',
			'FldCharSupport' => ',Numbers,',
			'FldKeyStruct' => 'Simple',
			'FldCompareSame' => '6'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 1037,
			'FldDatabase' => '1',
			'FldTable' => '121',
			'FldOrd' => '5',
			'FldSpecSource' => '0',
			'FldName' => 'EnterPrivatePropertyDesc',
			'FldEng' => 'What happened?',
			'FldDesc' => 'Describes how an Officer entered a private residence or workplace. Important for identifying possible violation of Department procedure.',
			'FldForeignTable' => '0',
			'FldForeignMin' => 'N',
			'FldForeignMax' => 'N',
			'FldForeign2Min' => 'N',
			'FldForeign2Max' => 'N',
			'FldDataLength' => '0',
			'FldCharSupport' => ',Letters,Keyboard,Numbers,',
			'FldOpts' => '7'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 782,
			'FldDatabase' => '1',
			'FldTable' => '115',
			'FldOrd' => '5',
			'FldSpecSource' => '0',
			'FldName' => 'CCTV',
			'FldEng' => 'Closed circuit cameras on scene?',
			'FldDesc' => 'Indicates that there was possible video surveillance of the Scene. Important for obtaining new Evidence of the Incident.',
			'FldNotes' => 'Go back to the scene to check for CCTV cameras to chase down potential video Evidence.

If selected, we might want to email user article on How to Track Down CCTV Footage, or something like that.',
			'FldForeignTable' => '0',
			'FldForeignMin' => '11',
			'FldForeignMax' => '11',
			'FldForeign2Min' => '0',
			'FldForeign2Max' => '0',
			'FldValues' => 'Y;N;?',
			'FldDataLength' => '1',
			'FldCharSupport' => ',Letters,Keyboard,',
			'FldKeyStruct' => 'Simple',
			'FldCompareSame' => '130'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 1038,
			'FldDatabase' => '1',
			'FldTable' => '102',
			'FldOrd' => '5',
			'FldSpecSource' => '0',
			'FldName' => 'PhysDescID',
			'FldEng' => 'Physical Description ID',
			'FldDesc' => 'The primary Physical Description record number connected to a Civilian\'s record. Important for linking name and basic contact information to a Civilian.',
			'FldForeignTable' => '153',
			'FldForeignMin' => '0',
			'FldForeignMax' => '11',
			'FldForeign2Min' => '0',
			'FldForeign2Max' => '11',
			'FldType' => 'INT',
			'FldDataType' => 'Numeric',
			'FldDataLength' => '0',
			'FldCharSupport' => ',Numbers,',
			'FldKeyType' => ',Foreign,',
			'FldCompareSame' => '130',
			'FldOpts' => '13'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 271,
			'FldDatabase' => '1',
			'FldTable' => '117',
			'FldOrd' => '2',
			'FldSpecSource' => '0',
			'FldName' => 'Type',
			'FldEng' => 'Injury Type(s)',
			'FldDesc' => 'Category of Injury on a Civilian\'s body resulting from use of Force. Important for evaluating Allegations of excessive Force.',
			'FldNotes' => 'SJ IPA has twenty injury options broken into six categories -- including "none," "pre-existing," and "unknown."',
			'FldForeignTable' => '0',
			'FldForeignMin' => '11',
			'FldForeignMax' => '11',
			'FldForeign2Min' => '0',
			'FldForeign2Max' => '0',
			'FldValues' => 'Def::Injury Types',
			'FldType' => 'INT',
			'FldDataType' => 'Numeric',
			'FldDataLength' => '3',
			'FldCharSupport' => ',Numbers,',
			'FldKeyStruct' => 'Simple',
			'FldCompareSame' => '130'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 783,
			'FldDatabase' => '1',
			'FldTable' => '115',
			'FldOrd' => '6',
			'FldSpecSource' => '0',
			'FldName' => 'CCTVDesc',
			'FldEng' => 'Closed Circuit Camera Descriptions',
			'FldDesc' => 'Narrative details about the type and location of any visible video surveillance cameras. Might help Investigative Agencies or Attorneys track down new Evidence of the Incident.',
			'FldForeignTable' => '0',
			'FldForeignMin' => '11',
			'FldForeignMax' => '11',
			'FldForeign2Min' => '0',
			'FldForeign2Max' => '0',
			'FldType' => 'TEXT',
			'FldDataLength' => '0',
			'FldCharSupport' => ',Letters,Keyboard,',
			'FldKeyType' => 'Non',
			'FldKeyStruct' => 'Simple',
			'FldOpts' => '7'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 1039,
			'FldDatabase' => '1',
			'FldTable' => '104',
			'FldOrd' => '6',
			'FldSpecSource' => '0',
			'FldName' => 'PhysDescID',
			'FldEng' => 'Physical Description ID',
			'FldDesc' => 'The primary Physical Description record number connected to a Officer\'s record. Important for linking name and basic contact information to a Officer.',
			'FldForeignTable' => '153',
			'FldForeignMin' => '0',
			'FldForeignMax' => '11',
			'FldForeign2Min' => '0',
			'FldForeign2Max' => '11',
			'FldType' => 'INT',
			'FldDataType' => 'Numeric',
			'FldDataLength' => '0',
			'FldCharSupport' => ',Numbers,',
			'FldKeyType' => ',Foreign,',
			'FldCompareSame' => '130',
			'FldOpts' => '13'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 272,
			'FldDatabase' => '1',
			'FldTable' => '117',
			'FldOrd' => '4',
			'FldSpecSource' => '0',
			'FldName' => 'Description',
			'FldEng' => 'Injury Description',
			'FldDesc' => 'Additional narrative information about a specific Injury. Important for evaluating Allegations of excessive Force.',
			'FldForeignTable' => '0',
			'FldForeignMin' => '11',
			'FldForeignMax' => '11',
			'FldForeign2Min' => '0',
			'FldForeign2Max' => '0',
			'FldType' => 'TEXT',
			'FldDataLength' => '0',
			'FldCharSupport' => ',Letters,Keyboard,Numbers,',
			'FldKeyStruct' => 'Simple',
			'FldOpts' => '7'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 1040,
			'FldDatabase' => '1',
			'FldTable' => '121',
			'FldOrd' => '10',
			'FldSpecSource' => '0',
			'FldName' => 'RequestOfficerID',
			'FldEng' => 'Subject asked for officer\'s ID?',
			'FldDesc' => 'Indicates whether or not a Subject requested the Officer\'s identification. Important for identifying possible violation of Department procedure.',
			'FldForeignTable' => '0',
			'FldForeignMin' => 'N',
			'FldForeignMax' => 'N',
			'FldForeign2Min' => 'N',
			'FldForeign2Max' => 'N',
			'FldValues' => 'Y;N;?',
			'FldDataLength' => '1',
			'FldCharSupport' => ',Letters,Keyboard,',
			'FldCompareSame' => '130'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 273,
			'FldDatabase' => '1',
			'FldTable' => '146',
			'FldOrd' => '2',
			'FldSpecSource' => '0',
			'FldName' => 'ResultInDeath',
			'FldEng' => 'Injuries result in death?',
			'FldDesc' => 'Indicates that an Injury resulted in death to the Civilian. Important for identifying police killings.',
			'FldNotes' => 'This might be redundant if we have a "Fatal injuries" selection under "Injury Type." However, I feel like this might be an important stand-alone question. 
Implementation Note: This should NOT be asked if the Complainant indicates that they are the Civilian linked to this particular Injury -- because that would be damn near impossible.',
			'FldForeignTable' => '0',
			'FldForeignMin' => '11',
			'FldForeignMax' => '11',
			'FldForeign2Min' => '0',
			'FldForeign2Max' => '0',
			'FldValues' => 'Y;N;?',
			'FldDataLength' => '1',
			'FldCharSupport' => ',Letters,Keyboard,',
			'FldKeyType' => 'Non',
			'FldKeyStruct' => 'Simple',
			'FldCompareSame' => '130'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 785,
			'FldDatabase' => '1',
			'FldTable' => '102',
			'FldOrd' => '15',
			'FldSpecType' => 'Replica',
			'FldSpecSource' => '918',
			'FldName' => 'CameraRecord',
			'FldEng' => 'Recorded this incident?',
			'FldDesc' => 'Indicates whether or not this Civilian recorded the Incident. This information might help us track down new video Evidence.',
			'FldForeignMin' => '11',
			'FldForeignMax' => '11',
			'FldForeign2Min' => '0',
			'FldForeign2Max' => '0',
			'FldValues' => 'Y;N;?',
			'FldDataLength' => '1',
			'FldCharSupport' => ',Letters,',
			'FldNullSupport' => '0',
			'FldCompareSame' => '878800'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 274,
			'FldDatabase' => '1',
			'FldTable' => '146',
			'FldOrd' => '3',
			'FldSpecSource' => '0',
			'FldName' => 'TimeOfDeath',
			'FldEng' => 'Date & Time of death',
			'FldDesc' => 'Indicates the official time of death of a Civilian resulting from a Force Injury. Important for statistical purposes.',
			'FldForeignTable' => '0',
			'FldForeignMin' => '11',
			'FldForeignMax' => '11',
			'FldForeign2Min' => '0',
			'FldForeign2Max' => '0',
			'FldType' => 'DATETIME',
			'FldDataType' => 'DateTime',
			'FldDataLength' => '0',
			'FldCharSupport' => ',Keyboard,Numbers,',
			'FldDisplayFormat' => 'YYYY-MM-DD HH:MM:SS',
			'FldKeyType' => 'Non',
			'FldKeyStruct' => 'Simple',
			'FldCompareSame' => '6'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 786,
			'FldDatabase' => '1',
			'FldTable' => '104',
			'FldOrd' => '14',
			'FldSpecSource' => '0',
			'FldName' => 'BodyCam',
			'FldEng' => 'Wearing body camera?',
			'FldDesc' => 'Indicates whether or not the Officer was wearing a body-mounted camera. Essential for obtaining possible video Evidence of the Incident.',
			'FldNotes' => 'We will need to create document with tips on obtaining dash-cam and on-body camera footage.',
			'FldForeignMin' => '11',
			'FldForeignMax' => '11',
			'FldForeign2Min' => '0',
			'FldForeign2Max' => '0',
			'FldValues' => 'Y;N;?',
			'FldDataLength' => '1',
			'FldCharSupport' => ',Letters,Keyboard,',
			'FldNullSupport' => '0',
			'FldCompareSame' => '878800'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 1042,
			'FldDatabase' => '1',
			'FldTable' => '106',
			'FldOrd' => '20',
			'FldSpecSource' => '0',
			'FldName' => 'ComplaintPDF',
			'FldEng' => 'Complaint PDF',
			'FldDesc' => 'Indicates whether or not the designated Police Department provide a PDF of their paper Complaint form online. This URL is very important for providing Complainants with easy access to the form they might be required to fill out for an investigation to begin.',
			'FldForeignTable' => '0',
			'FldForeignMin' => 'N',
			'FldForeignMax' => 'N',
			'FldForeign2Min' => 'N',
			'FldForeign2Max' => 'N',
			'FldDataLength' => '0',
			'FldCharSupport' => ',Letters,Keyboard,Numbers,'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 1554,
			'FldDatabase' => '1',
			'FldTable' => '123',
			'FldOrd' => '9',
			'FldSpecSource' => '0',
			'FldName' => 'ChargesOther',
			'FldEng' => 'Other charges filed?',
			'FldDesc' => 'Arrest charge(s) an Officer issued a Subject as a result of this Stop. Important for evaluating wrongful arrest and retaliatory Allegations and tracking citation trends.',
			'FldForeignMin' => 'N',
			'FldForeignMax' => 'N',
			'FldForeign2Min' => 'N',
			'FldForeign2Max' => 'N',
			'FldType' => 'TEXT',
			'FldDataLength' => '0',
			'FldCharSupport' => ',Letters,Numbers,Keyboard,',
			'FldEditRule' => '',
			'FldOpts' => '7'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 275,
			'FldDatabase' => '1',
			'FldTable' => '117',
			'FldOrd' => '1',
			'FldSpecSource' => '0',
			'FldName' => 'SubjectID',
			'FldEng' => 'Subject of Injury',
			'FldDesc' => 'Indicates which Subject\'s Injuries are described by this record.',
			'FldForeignTable' => '102',
			'FldForeignMin' => '0',
			'FldForeignMax' => 'N',
			'FldForeign2Min' => '0',
			'FldForeign2Max' => '11',
			'FldType' => 'INT',
			'FldDataType' => 'Numeric',
			'FldDataLength' => '11',
			'FldCharSupport' => ',Numbers,',
			'FldKeyType' => ',Foreign,',
			'FldKeyStruct' => 'Simple',
			'FldCompareSame' => '130',
			'FldOpts' => '13'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 1043,
			'FldDatabase' => '1',
			'FldTable' => '106',
			'FldOrd' => '15',
			'FldSpecSource' => '0',
			'FldName' => 'Facebook',
			'FldEng' => 'Facebook',
			'FldDesc' => 'This is the URL address of a Agency\'s Facebook page. If available, this will be included in each Agency\'s OPC page so that members of public may have another way to voice their complements or concerns with the department.',
			'FldForeignTable' => '0',
			'FldForeignMin' => 'N',
			'FldForeignMax' => 'N',
			'FldForeign2Min' => 'N',
			'FldForeign2Max' => 'N',
			'FldDataLength' => '0',
			'FldCharSupport' => ',Letters,Keyboard,Numbers,'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 276,
			'FldDatabase' => '1',
			'FldTable' => '146',
			'FldOrd' => '5',
			'FldSpecSource' => '0',
			'FldName' => 'HospitalTreated',
			'FldEng' => 'Hospital Where Treated',
			'FldDesc' => 'The name of the hospital where the Civilian who received Injuries was initially treated. Important for verifying Injury information.',
			'FldForeignTable' => '0',
			'FldForeignMin' => '11',
			'FldForeignMax' => '11',
			'FldForeign2Min' => '0',
			'FldForeign2Max' => '0',
			'FldDataLength' => '0',
			'FldCharSupport' => ',Letters,Keyboard,',
			'FldKeyType' => 'Non',
			'FldKeyStruct' => 'Simple',
			'FldCompareSame' => '6',
			'FldOpts' => '7'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 532,
			'FldDatabase' => '1',
			'FldTable' => '154',
			'FldOrd' => '11',
			'FldSpecType' => 'Replica',
			'FldSpecSource' => '837',
			'FldName' => 'Email',
			'FldEng' => 'Email',
			'FldDesc' => 'The valid email address provided by or for a person. This is the primary way we communicate with them.',
			'FldForeignTable' => '0',
			'FldForeignMin' => '11',
			'FldForeignMax' => '11',
			'FldForeign2Min' => '0',
			'FldForeign2Max' => '0',
			'FldDataLength' => '0',
			'FldCharSupport' => ',Letters,Keyboard,Numbers,',
			'FldInputMask' => 'AAA@AAA.AAA',
			'FldKeyStruct' => 'Simple',
			'FldCompareSame' => '6',
			'FldOpts' => '11'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 788,
			'FldDatabase' => '1',
			'FldTable' => '112',
			'FldOrd' => '30',
			'FldSpecSource' => '0',
			'FldName' => 'SubmissionProgress',
			'FldEng' => 'Submission Progress',
			'FldDesc' => 'Indicates current progress of an "incomplete" Complaint. Important for identifying problem areas which might cause Complaints to be left unfinished.',
			'FldNotes' => 'TBD: [Shorthand] notation of where in the complaint submission process. Probably both an overall section identifier (like Turbo Tax), and sub-section identifier.',
			'FldForeignMin' => '11',
			'FldForeignMax' => '11',
			'FldForeign2Min' => '0',
			'FldForeign2Max' => '0',
			'FldDataLength' => '0',
			'FldCharSupport' => ',Letters,Numbers,Keyboard,',
			'FldNullSupport' => '0',
			'FldCompareSame' => '6'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 1044,
			'FldDatabase' => '1',
			'FldTable' => '112',
			'FldOrd' => '35',
			'FldSpecSource' => '0',
			'FldName' => 'UniqueStr',
			'FldEng' => 'Unique String',
			'FldDesc' => 'This unique, randomly generated string can be important for creating custom URLs which are more secure than using the Complaint ID#.',
			'FldForeignTable' => '0',
			'FldForeignMin' => 'N',
			'FldForeignMax' => 'N',
			'FldForeign2Min' => 'N',
			'FldForeign2Max' => 'N',
			'FldDataLength' => '20',
			'FldCharSupport' => ',Letters,Numbers,',
			'FldUnique' => '1',
			'FldCompareSame' => '130',
			'FldOpts' => '13'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 277,
			'FldDatabase' => '1',
			'FldTable' => '146',
			'FldOrd' => '6',
			'FldSpecSource' => '0',
			'FldName' => 'DoctorNameFirst',
			'FldEng' => 'Doctor First Name',
			'FldDesc' => 'The legal given name of a doctor who treated an Injury. Important for identifying doctors who treated Injuries.',
			'FldForeignTable' => '0',
			'FldForeignMin' => '11',
			'FldForeignMax' => '11',
			'FldForeign2Min' => '0',
			'FldForeign2Max' => '0',
			'FldDataLength' => '0',
			'FldCharSupport' => ',Letters,Keyboard,',
			'FldKeyType' => 'Non',
			'FldKeyStruct' => 'Simple',
			'FldCompareSame' => '6',
			'FldOpts' => '11'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 533,
			'FldDatabase' => '1',
			'FldTable' => '154',
			'FldOrd' => '12',
			'FldSpecType' => 'Replica',
			'FldSpecSource' => '838',
			'FldName' => 'PhoneHome',
			'FldEng' => 'Home Phone',
			'FldDesc' => 'The contact number where a person can be reached at their home. This is usually a landline phone, which cannot receive text messages.',
			'FldNotes' => 'At least one phone number -- be it Home, Work, or Mobile -- should be required for public complaints.',
			'FldForeignTable' => '0',
			'FldForeignMin' => '11',
			'FldForeignMax' => '11',
			'FldForeign2Min' => '0',
			'FldForeign2Max' => '0',
			'FldDataLength' => '20',
			'FldCharSupport' => ',Letters,Keyboard,Numbers,',
			'FldInputMask' => '###-###-#### [x###]',
			'FldKeyStruct' => 'Simple',
			'FldOpts' => '11'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 789,
			'FldDatabase' => '1',
			'FldTable' => '112',
			'FldOrd' => '7',
			'FldSpecSource' => '0',
			'FldName' => 'Summary',
			'FldEng' => 'Summary (Narrative)',
			'FldDesc' => 'The Complainant narrative describes the chronological sequence of key Incident events and Allegations. This story brings to life to an otherwise clinical and legalistic Complaint document.',
			'FldForeignTable' => '0',
			'FldForeignMin' => '11',
			'FldForeignMax' => '11',
			'FldForeign2Min' => '0',
			'FldForeign2Max' => '0',
			'FldType' => 'TEXT',
			'FldDataLength' => '0',
			'FldCharSupport' => ',Letters,Keyboard,',
			'FldKeyStruct' => 'Simple',
			'FldOpts' => '7'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 534,
			'FldDatabase' => '1',
			'FldTable' => '154',
			'FldOrd' => '13',
			'FldSpecType' => 'Replica',
			'FldSpecSource' => '839',
			'FldName' => 'PhoneWork',
			'FldEng' => 'Work Phone',
			'FldDesc' => 'The contact number where persons can be reached at their place of business. This is usually a landline phone, which cannot receive text messages.',
			'FldNotes' => 'We might need to add an "extension" field for some work phone numbers.',
			'FldForeignTable' => '0',
			'FldForeignMin' => '11',
			'FldForeignMax' => '11',
			'FldForeign2Min' => '0',
			'FldForeign2Max' => '0',
			'FldDataLength' => '20',
			'FldCharSupport' => ',Letters,Keyboard,Numbers,',
			'FldInputMask' => '###-###-#### [x###]',
			'FldKeyStruct' => 'Simple',
			'FldOpts' => '11'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 279,
			'FldDatabase' => '1',
			'FldTable' => '146',
			'FldOrd' => '7',
			'FldSpecSource' => '0',
			'FldName' => 'DoctorNameLast',
			'FldEng' => 'Doctor Last Name',
			'FldDesc' => 'The legal surname of a doctor who treated an Injury. Important for identifying doctors who treated Injuries.',
			'FldForeignTable' => '0',
			'FldForeignMin' => '11',
			'FldForeignMax' => '11',
			'FldForeign2Min' => '0',
			'FldForeign2Max' => '0',
			'FldDataLength' => '0',
			'FldCharSupport' => ',Letters,Keyboard,',
			'FldKeyType' => 'Non',
			'FldKeyStruct' => 'Simple',
			'FldCompareSame' => '6',
			'FldOpts' => '11'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 535,
			'FldDatabase' => '1',
			'FldTable' => '154',
			'FldOrd' => '14',
			'FldSpecType' => 'Replica',
			'FldSpecSource' => '840',
			'FldName' => 'PhoneMobile',
			'FldEng' => 'Mobile Phone',
			'FldDesc' => 'The contact number where persons can be reached on their cellular device. We may use this number for both text and voice communications.',
			'FldForeignTable' => '0',
			'FldForeignMin' => '11',
			'FldForeignMax' => '11',
			'FldForeign2Min' => '0',
			'FldForeign2Max' => '0',
			'FldDataLength' => '20',
			'FldCharSupport' => ',Letters,Keyboard,Numbers,',
			'FldInputMask' => '###-###-#### [x###]',
			'FldKeyStruct' => 'Simple',
			'FldOpts' => '11'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 1047,
			'FldDatabase' => '1',
			'FldTable' => '111',
			'FldOrd' => '1',
			'FldSpecSource' => '0',
			'FldName' => 'Slug',
			'FldEng' => 'URL Slug',
			'FldDesc' => 'This defines the version of the department name which is compatible and ideal to be used as part of a website URL. This is vital for creating public pages of the website which are intuitive and professional.',
			'FldForeignTable' => '0',
			'FldForeignMin' => 'N',
			'FldForeignMax' => 'N',
			'FldForeign2Min' => 'N',
			'FldForeign2Max' => 'N',
			'FldDataLength' => '100',
			'FldCharSupport' => ',Letters,Numbers,',
			'FldCompareSame' => '130',
			'FldOpts' => '13'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 280,
			'FldDatabase' => '1',
			'FldTable' => '146',
			'FldOrd' => '8',
			'FldSpecSource' => '0',
			'FldName' => 'DoctorEmail',
			'FldEng' => 'Doctor Email',
			'FldDesc' => 'The valid email address of a doctor who treated an Injury. Important for communicating with doctors who treated Injuries.',
			'FldForeignTable' => '0',
			'FldForeignMin' => '11',
			'FldForeignMax' => '11',
			'FldForeign2Min' => '0',
			'FldForeign2Max' => '0',
			'FldDataLength' => '0',
			'FldCharSupport' => ',Letters,Keyboard,',
			'FldKeyStruct' => 'Simple',
			'FldCompareSame' => '130',
			'FldOpts' => '11'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 536,
			'FldDatabase' => '1',
			'FldTable' => '154',
			'FldOrd' => '15',
			'FldSpecType' => 'Replica',
			'FldSpecSource' => '841',
			'FldName' => 'Address',
			'FldEng' => 'Street Address',
			'FldDesc' => 'The first line of the postal location where a person resides or is able to receive mail. This is an integral component of a person\'s complete address.',
			'FldNotes' => 'If they can\'t reliable receive mail at residence, use reliable mailing address instead.',
			'FldForeignTable' => '0',
			'FldForeignMin' => '11',
			'FldForeignMax' => '11',
			'FldForeign2Min' => '0',
			'FldForeign2Max' => '0',
			'FldDataLength' => '0',
			'FldCharSupport' => ',Letters,Keyboard,Numbers,',
			'FldKeyStruct' => 'Simple',
			'FldOpts' => '11'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 1048,
			'FldDatabase' => '1',
			'FldTable' => '112',
			'FldOrd' => '28',
			'FldSpecSource' => '0',
			'FldName' => 'Slug',
			'FldEng' => 'URL Slug',
			'FldDesc' => 'This defines the version of the Complaint\'s Social Media Headline which is compatible and ideal to be used as part of a website URL. This is vital for creating public pages of the website which are intuitive and professional.',
			'FldForeignTable' => '0',
			'FldForeignMin' => 'N',
			'FldForeignMax' => 'N',
			'FldForeign2Min' => 'N',
			'FldForeign2Max' => 'N',
			'FldDataLength' => '255',
			'FldCharSupport' => ',Letters,Numbers,',
			'FldCompareSame' => '878800',
			'FldOpts' => '13'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 281,
			'FldDatabase' => '1',
			'FldTable' => '146',
			'FldOrd' => '9',
			'FldSpecSource' => '0',
			'FldName' => 'DoctorPhone',
			'FldEng' => 'Doctor Phone',
			'FldDesc' => 'The contact number of a doctor who treated an Injury. Important for communicating with doctors who treated Injuries.',
			'FldForeignTable' => '0',
			'FldForeignMin' => '11',
			'FldForeignMax' => '11',
			'FldForeign2Min' => '0',
			'FldForeign2Max' => '0',
			'FldDataLength' => '0',
			'FldCharSupport' => ',Letters,Keyboard,Numbers,',
			'FldInputMask' => '###-###-#### [x###]',
			'FldKeyType' => 'Non',
			'FldKeyStruct' => 'Simple',
			'FldOpts' => '11'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 537,
			'FldDatabase' => '1',
			'FldTable' => '154',
			'FldOrd' => '16',
			'FldSpecType' => 'Replica',
			'FldSpecSource' => '842',
			'FldName' => 'Address2',
			'FldEng' => 'Street Address 2',
			'FldDesc' => 'The second line, if needed, of the postal location where a person resides or is able to receive mail. This is an integral component of a person\'s complete address.',
			'FldForeignTable' => '0',
			'FldForeignMin' => '11',
			'FldForeignMax' => '11',
			'FldForeign2Min' => '0',
			'FldForeign2Max' => '0',
			'FldDataLength' => '0',
			'FldCharSupport' => ',Letters,Keyboard,Numbers,',
			'FldKeyStruct' => 'Simple',
			'FldOpts' => '11'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 1049,
			'FldDatabase' => '1',
			'FldTable' => '106',
			'FldOrd' => '35',
			'FldSpecSource' => '0',
			'FldName' => 'WaySubPaperMail',
			'FldEng' => 'Way to Submit: Paper Form Mail',
			'FldDesc' => 'This flags that the designated Police Department currently accepts complaints when submitted on their paper form by mail, important for rating Departments.',
			'FldForeignTable' => '0',
			'FldForeignMin' => 'N',
			'FldForeignMax' => 'N',
			'FldForeign2Min' => 'N',
			'FldForeign2Max' => 'N',
			'FldValues' => '0;1',
			'FldType' => 'INT',
			'FldDataType' => 'Numeric',
			'FldDataLength' => '1',
			'FldCharSupport' => ',Numbers,',
			'FldCompareSame' => '878800'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 282,
			'FldDatabase' => '1',
			'FldTable' => '146',
			'FldOrd' => '10',
			'FldSpecSource' => '0',
			'FldName' => 'EmergencyOnScene',
			'FldEng' => 'Emergency staff on scene?',
			'FldDesc' => 'Indicates whether or not emergency medical staff were present at the Scene where any Injuries were received. Important for identifying emergency medical personnel who treated Injuries.',
			'FldForeignTable' => '0',
			'FldForeignMin' => '11',
			'FldForeignMax' => '11',
			'FldForeign2Min' => '0',
			'FldForeign2Max' => '0',
			'FldValues' => 'Y;N;?',
			'FldDataLength' => '1',
			'FldCharSupport' => ',Letters,Keyboard,',
			'FldKeyType' => 'Non',
			'FldKeyStruct' => 'Simple',
			'FldCompareSame' => '130',
			'FldOpts' => '11'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 538,
			'FldDatabase' => '1',
			'FldTable' => '154',
			'FldOrd' => '17',
			'FldSpecType' => 'Replica',
			'FldSpecSource' => '843',
			'FldName' => 'AddressCity',
			'FldEng' => 'City',
			'FldDesc' => 'The metropolitan area where a person resides or is able to receive mail. This is an integral component of a person\'s complete address.',
			'FldForeignTable' => '0',
			'FldForeignMin' => '11',
			'FldForeignMax' => '11',
			'FldForeign2Min' => '0',
			'FldForeign2Max' => '0',
			'FldDataLength' => '0',
			'FldCharSupport' => ',Letters,Keyboard,',
			'FldKeyStruct' => 'Simple',
			'FldCompareSame' => '130'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 1050,
			'FldDatabase' => '1',
			'FldTable' => '106',
			'FldOrd' => '32',
			'FldSpecSource' => '0',
			'FldName' => 'WaySubOnline',
			'FldEng' => 'Way to Submit: Online Form',
			'FldDesc' => 'This flags that the designated Police Department currently accepts complaints when submitted via an online form, important for rating Departments.',
			'FldForeignTable' => '0',
			'FldForeignMin' => 'N',
			'FldForeignMax' => 'N',
			'FldForeign2Min' => 'N',
			'FldForeign2Max' => 'N',
			'FldValues' => '0;1',
			'FldType' => 'INT',
			'FldDataType' => 'Numeric',
			'FldDataLength' => '1',
			'FldCharSupport' => ',Numbers,',
			'FldCompareSame' => '130'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 283,
			'FldDatabase' => '1',
			'FldTable' => '146',
			'FldOrd' => '11',
			'FldSpecSource' => '0',
			'FldName' => 'EmergencyNameFirst',
			'FldEng' => 'Emergency Staff First Name',
			'FldDesc' => 'The legal given name of an emergency medical services staffer present at the Scene where any Injuries were received. Important for identifying emergency medical personnel who treated Injuries.',
			'FldForeignTable' => '0',
			'FldForeignMin' => '11',
			'FldForeignMax' => '11',
			'FldForeign2Min' => '0',
			'FldForeign2Max' => '0',
			'FldDataLength' => '0',
			'FldCharSupport' => ',Letters,Keyboard,',
			'FldKeyType' => 'Non',
			'FldKeyStruct' => 'Simple',
			'FldCompareSame' => '6',
			'FldOpts' => '11'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 539,
			'FldDatabase' => '1',
			'FldTable' => '154',
			'FldOrd' => '18',
			'FldSpecType' => 'Replica',
			'FldSpecSource' => '844',
			'FldName' => 'AddressState',
			'FldEng' => 'State',
			'FldDesc' => 'The state or district where a person resides or is able to receive mail. This is an integral component of a person\'s complete address.',
			'FldForeignTable' => '0',
			'FldForeignMin' => '11',
			'FldForeignMax' => '11',
			'FldForeign2Min' => '0',
			'FldForeign2Max' => '0',
			'FldDataLength' => '2',
			'FldCharSupport' => ',Letters,',
			'FldInputMask' => 'AA',
			'FldKeyStruct' => 'Simple',
			'FldCompareSame' => '6'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 1051,
			'FldDatabase' => '1',
			'FldTable' => '106',
			'FldOrd' => '30',
			'FldSpecSource' => '0',
			'FldName' => 'OfficialFormNotReq',
			'FldEng' => 'Official Form Not Required',
			'FldDesc' => 'This flags that the designated Police Department requires their own paper form to investigate, important for rating Departments.',
			'FldForeignTable' => '0',
			'FldForeignMin' => 'N',
			'FldForeignMax' => 'N',
			'FldForeign2Min' => 'N',
			'FldForeign2Max' => 'N',
			'FldValues' => '0;1',
			'FldType' => 'INT',
			'FldDataType' => 'Numeric',
			'FldDataLength' => '1',
			'FldCharSupport' => ',Numbers,',
			'FldCompareSame' => '878800'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 540,
			'FldDatabase' => '1',
			'FldTable' => '154',
			'FldOrd' => '19',
			'FldSpecType' => 'Replica',
			'FldSpecSource' => '845',
			'FldName' => 'AddressZip',
			'FldEng' => 'Zip Code',
			'FldDesc' => 'The postal code where a person resides or is able to receive mail. This is an integral component of a person\'s complete address.',
			'FldForeignTable' => '0',
			'FldForeignMin' => '11',
			'FldForeignMax' => '11',
			'FldForeign2Min' => '0',
			'FldForeign2Max' => '0',
			'FldDataLength' => '10',
			'FldCharSupport' => ',Keyboard,Numbers,',
			'FldInputMask' => '#####[-####]',
			'FldKeyStruct' => 'Simple',
			'FldCompareSame' => '130',
			'FldOpts' => '11'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 1052,
			'FldDatabase' => '1',
			'FldTable' => '106',
			'FldOrd' => '36',
			'FldSpecSource' => '0',
			'FldName' => 'WaySubPaperInPerson',
			'FldEng' => 'Way to Submit: Requires In-Person Paper Form',
			'FldDesc' => 'This flags that the designated Police Department currently accepts complaints when submitted on their paper form in-person, important for rating Departments.',
			'FldForeignTable' => '0',
			'FldForeignMin' => 'N',
			'FldForeignMax' => 'N',
			'FldForeign2Min' => 'N',
			'FldForeign2Max' => 'N',
			'FldValues' => '0;1',
			'FldType' => 'INT',
			'FldDataType' => 'Numeric',
			'FldDataLength' => '1',
			'FldCharSupport' => ',Numbers,',
			'FldCompareSame' => '878800'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 285,
			'FldDatabase' => '1',
			'FldTable' => '146',
			'FldOrd' => '12',
			'FldSpecSource' => '0',
			'FldName' => 'EmergencyNameLast',
			'FldEng' => 'Emergency Staff Last Name',
			'FldDesc' => 'The legal surname of an emergency medical services staffer present at the Scene where any Injuries were received. Important for identifying emergency medical personnel who treated Injuries.',
			'FldForeignTable' => '0',
			'FldForeignMin' => '11',
			'FldForeignMax' => '11',
			'FldForeign2Min' => '0',
			'FldForeign2Max' => '0',
			'FldDataLength' => '0',
			'FldCharSupport' => ',Letters,Keyboard,',
			'FldKeyType' => 'Non',
			'FldKeyStruct' => 'Simple',
			'FldCompareSame' => '6',
			'FldOpts' => '11'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 541,
			'FldDatabase' => '1',
			'FldTable' => '154',
			'FldOrd' => '21',
			'FldSpecType' => 'Replica',
			'FldSpecSource' => '847',
			'FldName' => 'Facebook',
			'FldEng' => 'Facebook',
			'FldDesc' => 'This is the URL address of a person\'s Facebook page. This is used to help verify their identities and for communicating with them if they select this as a preferred method of contact.',
			'FldForeignTable' => '0',
			'FldForeignMin' => '11',
			'FldForeignMax' => '11',
			'FldForeign2Min' => '0',
			'FldForeign2Max' => '0',
			'FldDataLength' => '0',
			'FldCharSupport' => ',Letters,Keyboard,Numbers,',
			'FldInputMask' => 'http://facebook.com/AAAAAA',
			'FldKeyStruct' => 'Simple',
			'FldCompareSame' => '6',
			'FldOpts' => '11'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 286,
			'FldDatabase' => '1',
			'FldTable' => '146',
			'FldOrd' => '13',
			'FldSpecSource' => '0',
			'FldName' => 'EmergencyIDnumber',
			'FldEng' => 'Emergency Staff ID Number',
			'FldDesc' => 'A unique number assigned to the emergency medical services staffer by their department. Important for identifying emergency medical personnel who treated Injuries.',
			'FldForeignMin' => '11',
			'FldForeignMax' => '11',
			'FldForeign2Min' => '0',
			'FldForeign2Max' => '0',
			'FldDataLength' => '0',
			'FldCharSupport' => ',Numbers,',
			'FldNullSupport' => '0',
			'FldCompareSame' => '6',
			'FldOpts' => '7'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 1054,
			'FldDatabase' => '1',
			'FldTable' => '106',
			'FldOrd' => '34',
			'FldSpecSource' => '0',
			'FldName' => 'WaySubVerbalPhone',
			'FldEng' => 'Way to Submit: Verbal Phone',
			'FldDesc' => 'This flags that the designated Police Department currently accepts complaints when submitted verbally over the phone, important for rating Departments.',
			'FldForeignTable' => '0',
			'FldForeignMin' => 'N',
			'FldForeignMax' => 'N',
			'FldForeign2Min' => 'N',
			'FldForeign2Max' => 'N',
			'FldValues' => '0;1',
			'FldType' => 'INT',
			'FldDataType' => 'Numeric',
			'FldDataLength' => '1',
			'FldCharSupport' => ',Numbers,',
			'FldCompareSame' => '130'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 287,
			'FldDatabase' => '1',
			'FldTable' => '146',
			'FldOrd' => '14',
			'FldSpecSource' => '0',
			'FldName' => 'EmergencyVehicleNumber',
			'FldEng' => 'Emergency Staff Vehicle Number',
			'FldDesc' => 'A unique number assigned to an emergency medical services vehicle. Important for identifying emergency medical personnel who treated Injuries.',
			'FldForeignMin' => '11',
			'FldForeignMax' => '11',
			'FldForeign2Min' => '0',
			'FldForeign2Max' => '0',
			'FldDataLength' => '0',
			'FldCharSupport' => ',Numbers,',
			'FldNullSupport' => '0',
			'FldCompareSame' => '6',
			'FldOpts' => '7'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 1055,
			'FldDatabase' => '1',
			'FldTable' => '106',
			'FldOrd' => '33',
			'FldSpecSource' => '0',
			'FldName' => 'WaySubEmail',
			'FldEng' => 'Way to Submit: Email',
			'FldDesc' => 'This flags that the designated Police Department currently accepts complaints when submitted via email, important for rating Departments.',
			'FldForeignTable' => '0',
			'FldForeignMin' => 'N',
			'FldForeignMax' => 'N',
			'FldForeign2Min' => 'N',
			'FldForeign2Max' => 'N',
			'FldValues' => '0;1',
			'FldType' => 'INT',
			'FldDataType' => 'Numeric',
			'FldDataLength' => '1',
			'FldCharSupport' => ',Numbers,',
			'FldCompareSame' => '130'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 288,
			'FldDatabase' => '1',
			'FldTable' => '146',
			'FldOrd' => '15',
			'FldSpecSource' => '0',
			'FldName' => 'EmergencyLicenceNumber',
			'FldEng' => 'Emergency Staff Licence Number',
			'FldDesc' => 'The license plate number of an emergency medical services vehicle. Important for identifying emergency medical personnel who treated Injuries.',
			'FldForeignMin' => '11',
			'FldForeignMax' => '11',
			'FldForeign2Min' => '0',
			'FldForeign2Max' => '0',
			'FldDataLength' => '0',
			'FldCharSupport' => ',Letters,Numbers,Keyboard,',
			'FldNullSupport' => '0',
			'FldCompareSame' => '6',
			'FldOpts' => '11'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 289,
			'FldDatabase' => '1',
			'FldTable' => '146',
			'FldOrd' => '16',
			'FldSpecSource' => '0',
			'FldName' => 'EmergencyDeptName',
			'FldEng' => 'Emergency Staff Department Name',
			'FldDesc' => 'The official name of the emergency medical services department. Important for identifying emergency medical personnel who treated Injuries.',
			'FldForeignTable' => '0',
			'FldForeignMin' => '11',
			'FldForeignMax' => '11',
			'FldForeign2Min' => '0',
			'FldForeign2Max' => '0',
			'FldDataLength' => '0',
			'FldCharSupport' => ',Letters,Keyboard,',
			'FldKeyType' => 'Non',
			'FldKeyStruct' => 'Simple',
			'FldCompareSame' => '6',
			'FldOpts' => '7'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 1057,
			'FldDatabase' => '1',
			'FldTable' => '147',
			'FldOrd' => '1',
			'FldSpecSource' => '0',
			'FldName' => 'Reason',
			'FldEng' => 'Officer gave reason for stop?',
			'FldDesc' => 'The stated or non-stated Officer explanations to Civilians for a Stop or detention. This table is important for associating multiple reasons given for a single Stop.',
			'FldForeignTable' => '0',
			'FldForeignMin' => 'N',
			'FldForeignMax' => 'N',
			'FldForeign2Min' => 'N',
			'FldForeign2Max' => 'N',
			'FldValues' => 'Def::Reason for Vehicle Stop',
			'FldType' => 'INT',
			'FldDataType' => 'Numeric',
			'FldDataLength' => '3',
			'FldCharSupport' => ',Numbers,',
			'FldCompareSame' => '130'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 1058,
			'FldDatabase' => '1',
			'FldTable' => '147',
			'FldSpecSource' => '0',
			'FldName' => 'StopID',
			'FldEng' => 'Stop ID',
			'FldDesc' => 'The unique number of the Stop record related to this Stop Reason. Vital for associating multiple Stop Reasons with a single Stop during an Incident.',
			'FldForeignTable' => '121',
			'FldForeignMin' => '0',
			'FldForeignMax' => 'N',
			'FldForeign2Min' => '11',
			'FldForeign2Max' => '11',
			'FldType' => 'INT',
			'FldDataType' => 'Numeric',
			'FldDataLength' => '0',
			'FldCharSupport' => ',Numbers,',
			'FldKeyType' => ',Non,Foreign,',
			'FldCompareSame' => '130',
			'FldOpts' => '13'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 1059,
			'FldDatabase' => '1',
			'FldTable' => '148',
			'FldOrd' => '1000',
			'FldSpecSource' => '0',
			'FldName' => 'ForceID',
			'FldEng' => 'Force ID',
			'FldDesc' => 'The unique number of the Force record related to further type of force details. Vital for associating multiple secondary types of force used with a single Use of Force during an Incident.',
			'FldForeignTable' => '116',
			'FldForeignMin' => '0',
			'FldForeignMax' => 'N',
			'FldForeign2Min' => '11',
			'FldForeign2Max' => '11',
			'FldType' => 'INT',
			'FldDataType' => 'Numeric',
			'FldDataLength' => '0',
			'FldCharSupport' => ',Numbers,',
			'FldKeyType' => ',Foreign,',
			'FldCompareSame' => '130',
			'FldOpts' => '13'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 804,
			'FldDatabase' => '1',
			'FldTable' => '114',
			'FldOrd' => '2',
			'FldSpecType' => 'Replica',
			'FldSpecSource' => '842',
			'FldName' => 'Address2',
			'FldEng' => 'Street Address 2',
			'FldDesc' => 'The second line, if needed of the postal location at or near where an Incident occurred. This is an integral component of a complete Incident location address.',
			'FldForeignTable' => '0',
			'FldForeignMin' => '11',
			'FldForeignMax' => '11',
			'FldForeign2Min' => '0',
			'FldForeign2Max' => '0',
			'FldDataLength' => '0',
			'FldCharSupport' => ',Letters,Keyboard,Numbers,',
			'FldKeyType' => 'Non',
			'FldKeyStruct' => 'Simple',
			'FldOpts' => '7'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 1060,
			'FldDatabase' => '1',
			'FldTable' => '148',
			'FldOrd' => '1000',
			'FldSpecSource' => '0',
			'FldName' => 'Type',
			'FldEng' => 'Secondary Force Type',
			'FldDesc' => 'This provides greater detail on the type of force used in this instance. The options vary between Force types Control Hold, Body Weapon, or Takedown.',
			'FldForeignTable' => '0',
			'FldForeignMin' => 'N',
			'FldForeignMax' => 'N',
			'FldForeign2Min' => 'N',
			'FldForeign2Max' => 'N',
			'FldValues' => 'Def::Force Type - Control Hold',
			'FldType' => 'INT',
			'FldDataType' => 'Numeric',
			'FldDataLength' => '3',
			'FldCharSupport' => ',Numbers,'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 805,
			'FldDatabase' => '1',
			'FldTable' => '114',
			'FldOrd' => '3',
			'FldSpecType' => 'Replica',
			'FldSpecSource' => '843',
			'FldName' => 'AddressCity',
			'FldEng' => 'City',
			'FldDesc' => 'The metropolitan area where an Incident occurred. This is an integral component of a complete Incident location address.',
			'FldForeignTable' => '0',
			'FldForeignMin' => '11',
			'FldForeignMax' => '11',
			'FldForeign2Min' => '0',
			'FldForeign2Max' => '0',
			'FldDataLength' => '0',
			'FldCharSupport' => ',Letters,Keyboard,',
			'FldKeyStruct' => 'Simple',
			'FldRequired' => '1',
			'FldCompareSame' => '878800'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 1061,
			'FldDatabase' => '1',
			'FldTable' => '149',
			'FldSpecSource' => '0',
			'FldName' => 'ForceID',
			'FldEng' => 'Force ID',
			'FldDesc' => 'The unique number of the Use of Force record which this Body Part helps describe. Vital for associating multiple Body Parts with a single Use of Force during an Incident.',
			'FldForeignTable' => '116',
			'FldForeignMin' => '0',
			'FldForeignMax' => 'N',
			'FldForeign2Min' => '0',
			'FldForeign2Max' => '11',
			'FldType' => 'INT',
			'FldDataType' => 'Numeric',
			'FldDataLength' => '0',
			'FldCharSupport' => ',Numbers,',
			'FldKeyType' => ',Foreign,',
			'FldCompareSame' => '130',
			'FldOpts' => '13'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 294,
			'FldDatabase' => '1',
			'FldTable' => '122',
			'FldOrd' => '15',
			'FldSpecSource' => '0',
			'FldName' => 'Seized',
			'FldEng' => 'Property seized?',
			'FldDesc' => 'Indicates that Officers took property from a Subject. Important for evaluating seizure Allegations and forfeiture trends.',
			'FldForeignTable' => '0',
			'FldForeignMin' => '11',
			'FldForeignMax' => '11',
			'FldForeign2Min' => '0',
			'FldForeign2Max' => '0',
			'FldValues' => 'Y;N;?',
			'FldDataLength' => '1',
			'FldCharSupport' => ',Letters,Keyboard,',
			'FldKeyType' => 'Non',
			'FldKeyStruct' => 'Simple',
			'FldCompareSame' => '130'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 806,
			'FldDatabase' => '1',
			'FldTable' => '114',
			'FldOrd' => '4',
			'FldSpecType' => 'Replica',
			'FldSpecSource' => '844',
			'FldName' => 'AddressState',
			'FldEng' => 'State',
			'FldDesc' => 'The state or district where an Incident occurred. This is an integral component of a complete Incident location address.',
			'FldNotes' => 'Incident locations should only include locations within the 50 U.S. states and the District of Columbia.',
			'FldForeignTable' => '0',
			'FldForeignMin' => '11',
			'FldForeignMax' => '11',
			'FldForeign2Min' => '0',
			'FldForeign2Max' => '0',
			'FldDataLength' => '2',
			'FldCharSupport' => ',Letters,',
			'FldInputMask' => 'AA',
			'FldKeyType' => 'Non',
			'FldKeyStruct' => 'Simple',
			'FldRequired' => '1',
			'FldCompareSame' => '6'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 1062,
			'FldDatabase' => '1',
			'FldTable' => '178',
			'FldOrd' => '1',
			'FldSpecSource' => '0',
			'FldName' => 'InjuryID',
			'FldEng' => 'Injury ID',
			'FldDesc' => 'The unique number of the Injury record which this Body Part helps describe. Vital for associating multiple Body Parts with a single type of Injury ocurring during an Incident.',
			'FldForeignTable' => '117',
			'FldForeignMin' => '0',
			'FldForeignMax' => 'N',
			'FldForeign2Min' => '0',
			'FldForeign2Max' => '11',
			'FldType' => 'INT',
			'FldDataType' => 'Numeric',
			'FldDataLength' => '0',
			'FldCharSupport' => ',Numbers,',
			'FldKeyType' => ',Foreign,',
			'FldCompareSame' => '130',
			'FldOpts' => '13'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 807,
			'FldDatabase' => '1',
			'FldTable' => '114',
			'FldOrd' => '5',
			'FldSpecType' => 'Replica',
			'FldSpecSource' => '845',
			'FldName' => 'AddressZip',
			'FldEng' => 'Zip Code',
			'FldDesc' => 'The postal code where an Incident occurred. This is an integral component of a complete Incident location address.',
			'FldForeignTable' => '0',
			'FldForeignMin' => '11',
			'FldForeignMax' => '11',
			'FldForeign2Min' => '0',
			'FldForeign2Max' => '0',
			'FldDataLength' => '10',
			'FldCharSupport' => ',Keyboard,Numbers,',
			'FldInputMask' => '#####[-####]',
			'FldKeyType' => 'Non',
			'FldKeyStruct' => 'Simple',
			'FldCompareSame' => '130'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 1063,
			'FldDatabase' => '1',
			'FldTable' => '149',
			'FldOrd' => '2',
			'FldSpecSource' => '0',
			'FldName' => 'Part',
			'FldEng' => 'Which parts of body were hit?',
			'FldDesc' => 'This describes which part of the body Force was used upon or where Injuries happened. This is important for providing investigators documentation regarding Civilian health.',
			'FldForeignTable' => '0',
			'FldForeignMin' => 'N',
			'FldForeignMax' => 'N',
			'FldForeign2Min' => 'N',
			'FldForeign2Max' => 'N',
			'FldValues' => 'Def::Body Part',
			'FldType' => 'INT',
			'FldDataType' => 'Numeric',
			'FldDataLength' => '3',
			'FldCharSupport' => ',Numbers,'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 296,
			'FldDatabase' => '1',
			'FldTable' => '122',
			'FldOrd' => '16',
			'FldSpecSource' => '0',
			'FldName' => 'SeizedDesc',
			'FldEng' => 'Property seizure description',
			'FldDesc' => 'Additional narrative information about the specific Property items that were seized. Important for evaluating Property seizure Allegations.',
			'FldNotes' => 'Describe the specific items seized. For example, if cash seized, please specify the dollar amount.',
			'FldForeignTable' => '0',
			'FldForeignMin' => '11',
			'FldForeignMax' => '11',
			'FldForeign2Min' => '0',
			'FldForeign2Max' => '0',
			'FldType' => 'TEXT',
			'FldDataLength' => '0',
			'FldCharSupport' => ',Letters,Keyboard,',
			'FldKeyType' => 'Non',
			'FldKeyStruct' => 'Simple',
			'FldOpts' => '7'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 808,
			'FldDatabase' => '1',
			'FldTable' => '114',
			'FldOrd' => '6',
			'FldSpecSource' => '0',
			'FldName' => 'AddressLat',
			'FldEng' => 'Geolocation Latitude',
			'FldDesc' => 'The geographic coordinate that specifies the north-south position of the point on the Earth\'s surface where an Incident occurred. This information might help identify Police Departments whose jurisdictions cover the coordinates where an Incident occurred.',
			'FldForeignTable' => '0',
			'FldForeignMin' => '11',
			'FldForeignMax' => '11',
			'FldForeign2Min' => '0',
			'FldForeign2Max' => '0',
			'FldType' => 'DOUBLE',
			'FldDataLength' => '0',
			'FldDataDecimals' => '10',
			'FldCharSupport' => ',Letters,Keyboard,',
			'FldKeyType' => 'Non',
			'FldKeyStruct' => 'Simple',
			'FldCompareSame' => '6'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 1064,
			'FldDatabase' => '1',
			'FldTable' => '150',
			'FldSpecSource' => '0',
			'FldName' => 'SearchID',
			'FldEng' => 'Search ID',
			'FldDesc' => 'The unique number of the Search record related to this Search Contraband found. Vital for associating multiple Search Contraband items with a single Search during an Incident.',
			'FldForeignTable' => '122',
			'FldForeignMin' => '0',
			'FldForeignMax' => 'N',
			'FldForeign2Min' => '11',
			'FldForeign2Max' => '11',
			'FldType' => 'INT',
			'FldDataType' => 'Numeric',
			'FldDataLength' => '0',
			'FldCharSupport' => ',Numbers,',
			'FldKeyType' => ',Foreign,',
			'FldCompareSame' => '130',
			'FldOpts' => '13'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 809,
			'FldDatabase' => '1',
			'FldTable' => '114',
			'FldOrd' => '7',
			'FldSpecSource' => '0',
			'FldName' => 'AddressLng',
			'FldEng' => 'Geolocation Longitude',
			'FldDesc' => 'The geographic coordinate that specifies the east-west position of the point on the Earth\'s surface where an Incident occurred. This information might help identify Police Departments whose jurisdictions cover the coordinates where an Incident occurred.',
			'FldForeignTable' => '0',
			'FldForeignMin' => '11',
			'FldForeignMax' => '11',
			'FldForeign2Min' => '0',
			'FldForeign2Max' => '0',
			'FldType' => 'DOUBLE',
			'FldDataLength' => '0',
			'FldDataDecimals' => '10',
			'FldCharSupport' => ',Letters,Keyboard,',
			'FldKeyType' => 'Non',
			'FldKeyStruct' => 'Simple',
			'FldCompareSame' => '6'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 1065,
			'FldDatabase' => '1',
			'FldTable' => '150',
			'FldOrd' => '1',
			'FldSpecSource' => '0',
			'FldName' => 'Type',
			'FldEng' => 'Contraband Types',
			'FldDesc' => 'Categories of illegal items discovered during a Search. Important for identifying search trends.',
			'FldForeignTable' => '0',
			'FldForeignMin' => 'N',
			'FldForeignMax' => 'N',
			'FldForeign2Min' => 'N',
			'FldForeign2Max' => 'N',
			'FldValues' => 'Def::Contraband Types',
			'FldType' => 'INT',
			'FldDataType' => 'Numeric',
			'FldDataLength' => '3',
			'FldCharSupport' => ',Numbers,'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 298,
			'FldDatabase' => '1',
			'FldTable' => '122',
			'FldOrd' => '17',
			'FldSpecSource' => '0',
			'FldName' => 'Damage',
			'FldEng' => 'Officer damaged property?',
			'FldDesc' => 'Indicates that Officers damaged or destroyed Subject\'s Property. Important for evaluating Property damage claims.',
			'FldNotes' => 'IF Yes, then Evidence can be optionally uploaded.',
			'FldForeignTable' => '0',
			'FldForeignMin' => '11',
			'FldForeignMax' => '11',
			'FldForeign2Min' => '0',
			'FldForeign2Max' => '0',
			'FldValues' => 'Y;N;?',
			'FldDataLength' => '1',
			'FldCharSupport' => ',Letters,Keyboard,',
			'FldKeyType' => 'Non',
			'FldKeyStruct' => 'Simple',
			'FldCompareSame' => '130'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 810,
			'FldDatabase' => '1',
			'FldTable' => '111',
			'FldOrd' => '2',
			'FldSpecSource' => '0',
			'FldName' => 'Type',
			'FldEng' => 'Type of Department',
			'FldDesc' => 'The general category of a particular law enforcement agency. This information helps us identify the responsibilities and jurisdiction of a given Police Department. ',
			'FldNotes' => 'Detailed Google Doc: https://docs.google.com/document/d/1OZBZYd8V7gC3es46Z5sWrfu2IRvhrK1CkfV8vKp8xgY/edit?usp=sharing',
			'FldForeignTable' => '0',
			'FldForeignMin' => '11',
			'FldForeignMax' => '11',
			'FldForeign2Min' => '0',
			'FldForeign2Max' => '0',
			'FldValues' => 'Def::Types of Departments',
			'FldType' => 'INT',
			'FldDataType' => 'Numeric',
			'FldDataLength' => '3',
			'FldCharSupport' => ',Numbers,',
			'FldKeyStruct' => 'Simple',
			'FldEditRule' => 'NowAllowed',
			'FldNullSupport' => '0',
			'FldRequired' => '1',
			'FldCompareSame' => '130'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 1066,
			'FldDatabase' => '1',
			'FldTable' => '151',
			'FldSpecSource' => '0',
			'FldName' => 'SearchID',
			'FldEng' => 'Search ID',
			'FldDesc' => 'The unique number of the Search record related to this Search Seizure. Vital for associating multiple Search Seizures items with a single Search during an Incident.',
			'FldForeignTable' => '122',
			'FldForeignMin' => '0',
			'FldForeignMax' => 'N',
			'FldForeign2Min' => '11',
			'FldForeign2Max' => '11',
			'FldType' => 'INT',
			'FldDataType' => 'Numeric',
			'FldDataLength' => '0',
			'FldCharSupport' => ',Numbers,',
			'FldKeyType' => ',Foreign,',
			'FldCompareSame' => '130',
			'FldOpts' => '13'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 1067,
			'FldDatabase' => '1',
			'FldTable' => '151',
			'FldOrd' => '1',
			'FldSpecSource' => '0',
			'FldName' => 'Type',
			'FldEng' => 'Seized property type',
			'FldDesc' => 'Categories of items Seized discovered during a Search. Important for identifying search trends.',
			'FldForeignTable' => '0',
			'FldForeignMin' => 'N',
			'FldForeignMax' => 'N',
			'FldForeign2Min' => 'N',
			'FldForeign2Max' => 'N',
			'FldValues' => 'Def::Property Seized Types',
			'FldType' => 'INT',
			'FldDataType' => 'Numeric',
			'FldDataLength' => '3',
			'FldCharSupport' => ',Numbers,',
			'FldCompareSame' => '130'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 300,
			'FldDatabase' => '1',
			'FldTable' => '122',
			'FldOrd' => '18',
			'FldSpecSource' => '0',
			'FldName' => 'DamageDesc',
			'FldEng' => 'Property damage description',
			'FldDesc' => 'Additional information about the nature of the damaged or destroyed Property. Important for evaluating Property damage claims.',
			'FldNotes' => 'Describe the specific items damaged and the nature of the damage. Please include dollar amounts for repairing or replacing damaged items.',
			'FldForeignTable' => '0',
			'FldForeignMin' => '11',
			'FldForeignMax' => '11',
			'FldForeign2Min' => '0',
			'FldForeign2Max' => '0',
			'FldType' => 'TEXT',
			'FldDataLength' => '0',
			'FldCharSupport' => ',Letters,Keyboard,',
			'FldKeyType' => 'Non',
			'FldKeyStruct' => 'Simple',
			'FldOpts' => '7'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 812,
			'FldDatabase' => '1',
			'FldTable' => '156',
			'FldOrd' => '23',
			'FldSpecSource' => '0',
			'FldName' => 'IntimidatingWeapon',
			'FldEng' => 'Think officer wrongfully intimidated w/ weapon display?',
			'FldDesc' => 'The Officer brandished or discharged a weapon in threatening manner. Important for identifying non-Force complaints where an Officer might have used a weapon for intimidation purposes.',
			'FldNotes' => 'IF this Complaint includes a Use of Force Allegation, THEN the Complainant should NOT be offered this Weapon Intimidation Allegation.

Weapon-related threats do not apply to weapons safely in holsters. Actual use of weapon AGAINST a person is use of Force, not just Intimidation.',
			'FldForeignTable' => '0',
			'FldForeignMin' => '11',
			'FldForeignMax' => '11',
			'FldForeign2Min' => '0',
			'FldForeign2Max' => '0',
			'FldValues' => 'Def::Intimidating Displays Of Weapon',
			'FldType' => 'INT',
			'FldDataType' => 'Numeric',
			'FldDataLength' => '3',
			'FldCharSupport' => ',Numbers,',
			'FldKeyStruct' => 'Simple',
			'FldCompareSame' => '130'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 1068,
			'FldDatabase' => '1',
			'FldTable' => '102',
			'FldOrd' => '4',
			'FldSpecSource' => '0',
			'FldName' => 'PersonID',
			'FldEng' => 'Person Contact Info ID',
			'FldDesc' => 'The primary Person Contact record number connected to a Civilian\'s record. Important for linking name and basic contact information to a Civilian.',
			'FldForeignTable' => '154',
			'FldForeignMin' => '11',
			'FldForeignMax' => '11',
			'FldForeign2Min' => '11',
			'FldForeign2Max' => '11',
			'FldType' => 'INT',
			'FldDataType' => 'Numeric',
			'FldDataLength' => '0',
			'FldCharSupport' => ',Numbers,',
			'FldKeyType' => ',Foreign,',
			'FldCompareSame' => '130',
			'FldOpts' => '13'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 1069,
			'FldDatabase' => '1',
			'FldTable' => '104',
			'FldOrd' => '5',
			'FldSpecSource' => '0',
			'FldName' => 'PersonID',
			'FldEng' => 'Person Contact Info ID',
			'FldDesc' => 'The primary Person Contact record number connected to a Officer\'s record. Important for linking name and basic contact information to an Officer.',
			'FldForeignTable' => '154',
			'FldForeignMin' => '11',
			'FldForeignMax' => '11',
			'FldForeign2Min' => '11',
			'FldForeign2Max' => '11',
			'FldType' => 'INT',
			'FldDataType' => 'Numeric',
			'FldDataLength' => '0',
			'FldCharSupport' => ',Numbers,',
			'FldKeyType' => ',Foreign,',
			'FldCompareSame' => '130',
			'FldOpts' => '13'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 1070,
			'FldDatabase' => '1',
			'FldTable' => '108',
			'FldOrd' => '1',
			'FldSpecSource' => '0',
			'FldName' => 'PersonID',
			'FldEng' => 'Person Contact Info ID',
			'FldDesc' => 'The primary Person Contact record number connected to a Administrator\'s record. Important for linking name and basic contact information to a Administrator.',
			'FldForeignTable' => '154',
			'FldForeignMin' => '11',
			'FldForeignMax' => '11',
			'FldForeign2Min' => '11',
			'FldForeign2Max' => '11',
			'FldType' => 'INT',
			'FldDataType' => 'Numeric',
			'FldDataLength' => '0',
			'FldCharSupport' => ',Numbers,',
			'FldKeyType' => ',Foreign,',
			'FldCompareSame' => '130',
			'FldOpts' => '13'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 815,
			'FldDatabase' => '1',
			'FldTable' => '156',
			'FldOrd' => '24',
			'FldSpecSource' => '0',
			'FldName' => 'IntimidatingWeaponType',
			'FldEng' => 'What weapon was wrongfully displayed?',
			'FldDesc' => 'The category of weapon the Officer used in a threatening manner. Important for identifying whether an Officer might have violated Department policies or procedures.',
			'FldNotes' => 'Range of Values is a subset of Force Type, which can be used for intimidation. Hide Force Type Definitions: Control Hold, Body Weapons, Takedown, Vehicle',
			'FldForeignTable' => '0',
			'FldForeignMin' => '11',
			'FldForeignMax' => '11',
			'FldForeign2Min' => '0',
			'FldForeign2Max' => '0',
			'FldValues' => 'Def::Force Type',
			'FldType' => 'INT',
			'FldDataType' => 'Numeric',
			'FldDataLength' => '3',
			'FldCharSupport' => ',Numbers,',
			'FldKeyStruct' => 'Simple',
			'FldCompareSame' => '130'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 1071,
			'FldDatabase' => '1',
			'FldTable' => '110',
			'FldOrd' => '3',
			'FldSpecSource' => '0',
			'FldName' => 'PersonID',
			'FldEng' => 'Person Contact Info ID',
			'FldDesc' => 'The primary Person Contact record number connected to a Customer\'s record. Important for linking name and basic contact information to a Customer.',
			'FldForeignTable' => '154',
			'FldForeignMin' => '11',
			'FldForeignMax' => '11',
			'FldForeign2Min' => '11',
			'FldForeign2Max' => '11',
			'FldType' => 'INT',
			'FldDataType' => 'Numeric',
			'FldDataLength' => '0',
			'FldCharSupport' => ',Numbers,',
			'FldKeyType' => ',Foreign,',
			'FldCompareSame' => '130',
			'FldOpts' => '13'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 816,
			'FldDatabase' => '1',
			'FldTable' => '121',
			'FldOrd' => '16',
			'FldSpecSource' => '0',
			'FldName' => 'SubjectHandcuffInjury',
			'FldEng' => 'Handcuff Injury ID',
			'FldDesc' => 'Indicates whether or not the Subject reported any Injuries related to an Officer\'s misuse of handcuffs. Important for connecting with possible Use of Force.',
			'FldNotes' => 'Injuries from handcuffs should only link to an Allegation of Excessive Force if and only if the Complainant provides Evidence of Injury.

NULL if No',
			'FldForeignTable' => '117',
			'FldForeignMin' => '0',
			'FldForeignMax' => '11',
			'FldForeign2Min' => '0',
			'FldForeign2Max' => '11',
			'FldType' => 'INT',
			'FldDataType' => 'Numeric',
			'FldDataLength' => '11',
			'FldCharSupport' => ',Numbers,',
			'FldKeyType' => ',Foreign,',
			'FldKeyStruct' => 'Simple',
			'FldCompareSame' => '130',
			'FldOpts' => '13'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 817,
			'FldDatabase' => '1',
			'FldTable' => '137',
			'FldSpecType' => 'Replica',
			'FldSpecSource' => '866',
			'FldName' => 'ComplaintID',
			'FldEng' => 'Complaint ID',
			'FldDesc' => 'The unique number of the Complaint record related to this Incident Event, vital to associating with all other Complaint data.',
			'FldForeignTable' => '112',
			'FldForeignMin' => '0',
			'FldForeignMax' => 'N',
			'FldForeign2Min' => '11',
			'FldForeign2Max' => '11',
			'FldIsIndex' => '1',
			'FldType' => 'INT',
			'FldDataType' => 'Numeric',
			'FldDataLength' => '11',
			'FldCharSupport' => ',Numbers,',
			'FldKeyType' => ',Foreign,',
			'FldKeyStruct' => 'Simple',
			'FldEditRule' => 'NowNot',
			'FldNullSupport' => '0',
			'FldValuesEnteredBy' => 'System',
			'FldRequired' => '1',
			'FldCompareSame' => '130',
			'FldOpts' => '13'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 1073,
			'FldDatabase' => '1',
			'FldTable' => '155',
			'FldSpecSource' => '0',
			'FldName' => 'OffID',
			'FldEng' => 'Officer ID',
			'FldDesc' => 'The unique number of the Officer record being linked in this record. Vital for associating Officers with the Vehicle.',
			'FldForeignTable' => '104',
			'FldForeignMin' => '0',
			'FldForeignMax' => '11',
			'FldForeign2Min' => '0',
			'FldForeign2Max' => '11',
			'FldType' => 'INT',
			'FldDataType' => 'Numeric',
			'FldDataLength' => '0',
			'FldCharSupport' => ',Numbers,',
			'FldKeyType' => ',Foreign,',
			'FldCompareSame' => '130',
			'FldOpts' => '13'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 1074,
			'FldDatabase' => '1',
			'FldTable' => '155',
			'FldOrd' => '1',
			'FldSpecSource' => '0',
			'FldName' => 'VehicID',
			'FldEng' => 'Vehicle ID',
			'FldDesc' => 'The unique number of the Vehicle record being linked in this record. Vital for associating Civilians or Officers with the Vehicle.',
			'FldForeignTable' => '152',
			'FldForeignMin' => '0',
			'FldForeignMax' => 'N',
			'FldForeign2Min' => '11',
			'FldForeign2Max' => '11',
			'FldType' => 'INT',
			'FldDataType' => 'Numeric',
			'FldDataLength' => '0',
			'FldCharSupport' => ',Numbers,',
			'FldKeyType' => ',Foreign,',
			'FldCompareSame' => '130',
			'FldOpts' => '13'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 1076,
			'FldDatabase' => '1',
			'FldTable' => '112',
			'FldOrd' => '36',
			'FldSpecSource' => '0',
			'FldName' => 'IPaddy',
			'FldEng' => 'IP Address (encrypted)',
			'FldDesc' => 'This logs an encrypted copy of the Complainants IP Address. This is important for checking if multiple Complaints were submitted from the same location, especially when filtering Complaints categorized as spam or abuse.',
			'FldForeignTable' => '0',
			'FldForeignMin' => 'N',
			'FldForeignMax' => 'N',
			'FldForeign2Min' => 'N',
			'FldForeign2Max' => 'N',
			'FldDataLength' => '0',
			'FldCharSupport' => ',Letters,Keyboard,Numbers,',
			'FldCompareSame' => '130',
			'FldOpts' => '13'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 1078,
			'FldDatabase' => '1',
			'FldTable' => '102',
			'FldOrd' => '8',
			'FldSpecSource' => '0',
			'FldName' => 'Resident',
			'FldEng' => 'Resident of jurisdiction?',
			'FldDesc' => 'Indicates whether or not a Victim was a resident of the police Department\'s jurisdiction, at the time of the incident. This information could help inform race-based allegations.',
			'FldForeignMin' => 'N',
			'FldForeignMax' => 'N',
			'FldForeign2Min' => 'N',
			'FldForeign2Max' => 'N',
			'FldValues' => 'Y;N;?',
			'FldDataLength' => '1',
			'FldCharSupport' => ',Letters,',
			'FldNullSupport' => '0',
			'FldCompareSame' => '878800'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 823,
			'FldDatabase' => '1',
			'FldTable' => '113',
			'FldOrd' => '3',
			'FldSpecSource' => '0',
			'FldName' => 'Description',
			'FldEng' => 'Subject comments about specific allegations',
			'FldDesc' => 'Additional narrative information about a specific Allegation. Might provide additional  context to help investigate and verify these Allegations.',
			'FldNotes' => 'Anytime a user indicate an Allegation they will be prompted for additional information to describe the Allegation or why they think the Allegation should apply.',
			'FldForeignTable' => '0',
			'FldForeignMin' => '11',
			'FldForeignMax' => '11',
			'FldForeign2Min' => '0',
			'FldForeign2Max' => '0',
			'FldType' => 'TEXT',
			'FldDataLength' => '0',
			'FldCharSupport' => ',Letters,Keyboard,',
			'FldKeyStruct' => 'Simple',
			'FldOpts' => '7'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 1079,
			'FldDatabase' => '1',
			'FldTable' => '102',
			'FldOrd' => '21',
			'FldSpecSource' => '0',
			'FldName' => 'CitationNumber',
			'FldEng' => 'Citation ID#',
			'FldDesc' => 'Citation ID Number issued to a Subject. Important for tracking down more information during investigations.',
			'FldForeignTable' => '0',
			'FldForeignMin' => 'N',
			'FldForeignMax' => 'N',
			'FldForeign2Min' => 'N',
			'FldForeign2Max' => 'N',
			'FldDataLength' => '25',
			'FldCharSupport' => ',Letters,Numbers,',
			'FldCompareSame' => '878800',
			'FldOpts' => '11'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 568,
			'FldDatabase' => '1',
			'FldTable' => '106',
			'FldOrd' => '22',
			'FldSpecType' => 'Replica',
			'FldSpecSource' => '837',
			'FldName' => 'Email',
			'FldEng' => 'Email',
			'FldDesc' => 'The valid email address for an Investigative Agency contact. This is the primary way we communicate with them.',
			'FldForeignTable' => '0',
			'FldForeignMin' => '11',
			'FldForeignMax' => '11',
			'FldForeign2Min' => '0',
			'FldForeign2Max' => '0',
			'FldDataLength' => '0',
			'FldCharSupport' => ',Letters,Keyboard,Numbers,',
			'FldInputMask' => 'AAA@AAA.AAA',
			'FldKeyType' => 'Non',
			'FldKeyStruct' => 'Simple',
			'FldCompareSame' => '6'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 824,
			'FldDatabase' => '1',
			'FldTable' => '138',
			'FldOrd' => '2',
			'FldSpecSource' => '0',
			'FldName' => 'Charges',
			'FldEng' => 'What charges were filed?',
			'FldDesc' => 'Category of citation or arrest charge(s) an Officer issued a Subject. Important for evaluating excessive citation Allegations and tracking citation trends.',
			'FldNotes' => 'Complainants should be able to select multiple Citations, because we want to be able to track Officers who are Citation-crazy.',
			'FldForeignMin' => '11',
			'FldForeignMax' => '11',
			'FldForeign2Min' => '0',
			'FldForeign2Max' => '0',
			'FldValues' => 'Def::Citation Charges',
			'FldType' => 'INT',
			'FldDataType' => 'Numeric',
			'FldDataLength' => '3',
			'FldCharSupport' => ',Numbers,',
			'FldNullSupport' => '0',
			'FldCompareSame' => '878800'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 1080,
			'FldDatabase' => '1',
			'FldTable' => '106',
			'FldOrd' => '16',
			'FldSpecSource' => '0',
			'FldName' => 'Twitter',
			'FldEng' => 'Twitter',
			'FldDesc' => 'This is the URL address of a Agency\'s Twitter page. If available, this will be included in each Agency\'s OPC page so that members of public may have another way to voice their complements or concerns with the department.',
			'FldForeignTable' => '0',
			'FldForeignMin' => 'N',
			'FldForeignMax' => 'N',
			'FldForeign2Min' => 'N',
			'FldForeign2Max' => 'N',
			'FldDataLength' => '0',
			'FldCharSupport' => ',Letters,Keyboard,Numbers,',
			'FldCompareSame' => '130'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 1336,
			'FldDatabase' => '1',
			'FldTable' => '104',
			'FldOrd' => '12',
			'FldSpecType' => 'Replica',
			'FldSpecSource' => '955',
			'FldName' => 'OfficerRank',
			'FldEng' => 'Officer Rank',
			'FldDesc' => 'This indicates an Officer\'s position within the Department. This information might help us verify an Officer\'s identity.',
			'FldNotes' => 'Option list from Philly PD, adapt as needed.',
			'FldForeignTable' => '0',
			'FldForeignMin' => '11',
			'FldForeignMax' => '11',
			'FldForeign2Min' => '0',
			'FldForeign2Max' => '0',
			'FldValues' => 'Police Officer;Detective;Corporal;Sergeant;Lieutenant;Captain;Staff Inspector;Inspector;Chief Inspector;Deputy Commissioner;Commissioner;?',
			'FldDataLength' => '0',
			'FldCharSupport' => ',Letters,Keyboard,Numbers,',
			'FldKeyType' => 'Non',
			'FldKeyStruct' => 'Simple',
			'FldCompareSame' => '130',
			'FldOpts' => '7'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 1081,
			'FldDatabase' => '1',
			'FldTable' => '106',
			'FldOrd' => '31',
			'FldSpecSource' => '0',
			'FldName' => 'OfficialAnon',
			'FldEng' => 'Anonymous Complaints Investigated',
			'FldDesc' => 'This flags that the designated Police Department does accept -- and will investigate -- complaints which are submitted anonymously. This is important for department ratings and OPC compatibility.

',
			'FldForeignTable' => '0',
			'FldForeignMin' => 'N',
			'FldForeignMax' => 'N',
			'FldForeign2Min' => 'N',
			'FldForeign2Max' => 'N',
			'FldValues' => '0;1',
			'FldType' => 'INT',
			'FldDataType' => 'Numeric',
			'FldDataLength' => '1',
			'FldCharSupport' => ',Numbers,',
			'FldCompareSame' => '130'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 314,
			'FldDatabase' => '1',
			'FldTable' => '121',
			'FldOrd' => '1',
			'FldSpecSource' => '0',
			'FldName' => 'StatedReasonDesc',
			'FldEng' => 'Stated Stop Reason Description',
			'FldDesc' => 'Narrative description of the Officer\'s stated reason for stopping any Civilians related to this Stop. Might provide additional information for evaluating any Allegations related to this Stop.',
			'FldNotes' => 'As best you can remember, what were the exact words this Officer used to explain why you were stopped? ',
			'FldForeignTable' => '0',
			'FldForeignMin' => '11',
			'FldForeignMax' => '11',
			'FldForeign2Min' => '0',
			'FldForeign2Max' => '0',
			'FldType' => 'TEXT',
			'FldDataLength' => '0',
			'FldCharSupport' => ',Letters,Keyboard,',
			'FldKeyType' => 'Non',
			'FldKeyStruct' => 'Simple',
			'FldOpts' => '7'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 570,
			'FldDatabase' => '1',
			'FldTable' => '106',
			'FldOrd' => '23',
			'FldSpecType' => 'Replica',
			'FldSpecSource' => '839',
			'FldName' => 'PhoneWork',
			'FldEng' => 'Work Phone',
			'FldDesc' => 'The contact number where Investigative Agency contact can be reached.',
			'FldNotes' => 'We might need to add an "extension" field for some work phone numbers.',
			'FldForeignTable' => '0',
			'FldForeignMin' => '11',
			'FldForeignMax' => '11',
			'FldForeign2Min' => '0',
			'FldForeign2Max' => '0',
			'FldDataLength' => '20',
			'FldCharSupport' => ',Letters,Keyboard,Numbers,',
			'FldInputMask' => '###-###-#### [x###]',
			'FldKeyType' => 'Non',
			'FldKeyStruct' => 'Simple'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 1338,
			'FldDatabase' => '1',
			'FldTable' => '104',
			'FldOrd' => '11',
			'FldSpecType' => 'Replica',
			'FldSpecSource' => '965',
			'FldName' => 'IDnumber',
			'FldEng' => 'Additional ID#',
			'FldDesc' => 'A secondary number that Departments assign to Officers, which stays consistent over time. This information might help us verify an Officer\'s identity.',
			'FldNotes' => 'Eg. in New York, officers have a consistent Tax ID. This might help us track Officers who obtain a new rank, or move to a different precinct or district.',
			'FldForeignTable' => '0',
			'FldForeignMin' => '11',
			'FldForeignMax' => '11',
			'FldForeign2Min' => '0',
			'FldForeign2Max' => '0',
			'FldType' => 'INT',
			'FldDataType' => 'Numeric',
			'FldDataLength' => '11',
			'FldCharSupport' => ',Numbers,',
			'FldKeyType' => 'Non',
			'FldKeyStruct' => 'Simple',
			'FldCompareSame' => '6',
			'FldOpts' => '7'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 315,
			'FldDatabase' => '1',
			'FldTable' => '121',
			'FldOrd' => '2',
			'FldSpecSource' => '0',
			'FldName' => 'SubjectAskedToLeave',
			'FldEng' => 'Subject ask to leave?',
			'FldDesc' => 'Indicates whether or not this Subject asked the Officer if he/she was free to go during the Stop. Doing this indicates that a Stop is no longer voluntary. This is important information for evaluating certain Allegations related to this stop.',
			'FldNotes' => 'http://www.flexyourrights.org/faqs/how-long-can-police-detain-you/',
			'FldForeignTable' => '0',
			'FldForeignMin' => '11',
			'FldForeignMax' => '11',
			'FldForeign2Min' => '0',
			'FldForeign2Max' => '0',
			'FldValues' => 'Y;N;?',
			'FldDataLength' => '1',
			'FldCharSupport' => ',Letters,Keyboard,',
			'FldKeyType' => 'Non',
			'FldKeyStruct' => 'Simple',
			'FldCompareSame' => '130'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 1339,
			'FldDatabase' => '1',
			'FldTable' => '104',
			'FldOrd' => '10',
			'FldSpecType' => 'Replica',
			'FldSpecSource' => '956',
			'FldName' => 'BadgeNumber',
			'FldEng' => 'Badge Number',
			'FldDesc' => 'An identification number Departments assign to Officers. This information might help us verify an Officer\'s identity.',
			'FldNotes' => 'We might want to tell users that they don\'t necessarily need a badge number to identify Officers',
			'FldForeignTable' => '0',
			'FldForeignMin' => '11',
			'FldForeignMax' => '11',
			'FldForeign2Min' => '0',
			'FldForeign2Max' => '0',
			'FldType' => 'INT',
			'FldDataType' => 'Numeric',
			'FldDataLength' => '11',
			'FldCharSupport' => ',Numbers,',
			'FldKeyType' => 'Non',
			'FldKeyStruct' => 'Simple',
			'FldCompareSame' => '6',
			'FldOpts' => '7'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 316,
			'FldDatabase' => '1',
			'FldTable' => '121',
			'FldOrd' => '3',
			'FldSpecSource' => '0',
			'FldName' => 'SubjectStatementsDesc',
			'FldEng' => 'What did subject say to officer?',
			'FldDesc' => 'Narrative account of what Subject said to the Officer during the Stop. This is important for evaluating any Allegations related to this Stop.',
			'FldNotes' => 'As best you can remember, what were the exact words this Subject said to this Officer? ',
			'FldForeignTable' => '0',
			'FldForeignMin' => '11',
			'FldForeignMax' => '11',
			'FldForeign2Min' => '0',
			'FldForeign2Max' => '0',
			'FldType' => 'TEXT',
			'FldDataLength' => '0',
			'FldCharSupport' => ',Letters,Keyboard,',
			'FldKeyType' => 'Non',
			'FldKeyStruct' => 'Simple',
			'FldOpts' => '7'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 572,
			'FldDatabase' => '1',
			'FldTable' => '106',
			'FldOrd' => '24',
			'FldSpecType' => 'Replica',
			'FldSpecSource' => '841',
			'FldName' => 'Address',
			'FldEng' => 'Street Address',
			'FldDesc' => 'The first line of the postal location where an Investigative Agency contact receive mail. This is an integral component of an Investigative Agency contact\'s complete address.',
			'FldForeignTable' => '0',
			'FldForeignMin' => '11',
			'FldForeignMax' => '11',
			'FldForeign2Min' => '0',
			'FldForeign2Max' => '0',
			'FldDataLength' => '0',
			'FldCharSupport' => ',Letters,Keyboard,Numbers,',
			'FldKeyType' => 'Non',
			'FldKeyStruct' => 'Simple'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 1084,
			'FldDatabase' => '1',
			'FldTable' => '102',
			'FldOrd' => '19',
			'FldSpecSource' => '0',
			'FldName' => 'GivenCitation',
			'FldEng' => 'Given Citation (Not Arrested)',
			'FldDesc' => 'Indicates whether or not this Subject was given a Citation with Charges as a result of this Stop.',
			'FldForeignTable' => '0',
			'FldForeignMin' => 'N',
			'FldForeignMax' => 'N',
			'FldForeign2Min' => 'N',
			'FldForeign2Max' => 'N',
			'FldValues' => 'Y;N;?',
			'FldDataLength' => '1',
			'FldCharSupport' => ',Letters,',
			'FldCompareSame' => '130'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 317,
			'FldDatabase' => '1',
			'FldTable' => '121',
			'FldOrd' => '9',
			'FldSpecSource' => '0',
			'FldName' => 'RefuseID',
			'FldEng' => 'Subject refused to give ID?',
			'FldDesc' => 'Indicates whether or not a Civilian refused to provide ID to an Officer. Important for identifying patterns of excessive ID requests and retaliatory policing. ',
			'FldNotes' => 'http://www.flexyourrights.org/faqs/when-can-police-ask-for-id/',
			'FldForeignTable' => '0',
			'FldForeignMin' => '11',
			'FldForeignMax' => '11',
			'FldForeign2Min' => '0',
			'FldForeign2Max' => '0',
			'FldValues' => 'Y;N;?',
			'FldDataLength' => '1',
			'FldCharSupport' => ',Letters,Keyboard,Numbers,',
			'FldKeyStruct' => 'Simple',
			'FldNullSupport' => '0'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 573,
			'FldDatabase' => '1',
			'FldTable' => '106',
			'FldOrd' => '25',
			'FldSpecType' => 'Replica',
			'FldSpecSource' => '842',
			'FldName' => 'Address2',
			'FldEng' => 'Street Address 2',
			'FldDesc' => 'The second line, if needed, of the postal location where an Investigative Agency contact receives mail. This is an integral component of an Investigative Agency contact\'s complete address.',
			'FldForeignTable' => '0',
			'FldForeignMin' => '11',
			'FldForeignMax' => '11',
			'FldForeign2Min' => '0',
			'FldForeign2Max' => '0',
			'FldDataLength' => '0',
			'FldCharSupport' => ',Letters,Keyboard,Numbers,',
			'FldKeyType' => 'Non',
			'FldKeyStruct' => 'Simple'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 1085,
			'FldDatabase' => '1',
			'FldTable' => '102',
			'FldOrd' => '20',
			'FldSpecSource' => '0',
			'FldName' => 'GivenWarning',
			'FldEng' => 'Given Written Warning',
			'FldDesc' => 'Indicates whether or not this Subject was only given a Warning as a result of this Stop.',
			'FldForeignTable' => '0',
			'FldForeignMin' => 'N',
			'FldForeignMax' => 'N',
			'FldForeign2Min' => 'N',
			'FldForeign2Max' => 'N',
			'FldValues' => 'Y;N;?',
			'FldDataLength' => '1',
			'FldCharSupport' => ',Letters,',
			'FldCompareSame' => '130'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 1341,
			'FldDatabase' => '1',
			'FldTable' => '104',
			'FldOrd' => '4',
			'FldSpecType' => 'Replica',
			'FldSpecSource' => '920',
			'FldName' => 'DeptID',
			'FldEng' => 'Department ID',
			'FldDesc' => 'The unique number of the Department record related to this Officer. Vital for associating this Officer with other Department data.
',
			'FldForeignTable' => '111',
			'FldForeignMin' => '0',
			'FldForeignMax' => 'N',
			'FldForeign2Min' => '11',
			'FldForeign2Max' => '11',
			'FldIsIndex' => '1',
			'FldType' => 'INT',
			'FldDataType' => 'Numeric',
			'FldDataLength' => '11',
			'FldCharSupport' => ',Numbers,',
			'FldKeyType' => ',Foreign,',
			'FldKeyStruct' => 'Simple',
			'FldEditRule' => 'NowAllowed',
			'FldNullSupport' => '0',
			'FldRequired' => '1',
			'FldCompareSame' => '130'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 318,
			'FldDatabase' => '1',
			'FldTable' => '121',
			'FldOrd' => '14',
			'FldSpecSource' => '0',
			'FldName' => 'SubjectHandcuffed',
			'FldEng' => 'Subject handcuffed?',
			'FldDesc' => 'Indicates whether or not this Subject was handcuffed by an Officer during this Stop. Important information for identifying Department patterns of excessive handcuffing during Stops.',
			'FldNotes' => 'San Jose IPA is trying to limit this common practice.',
			'FldForeignTable' => '0',
			'FldForeignMin' => '11',
			'FldForeignMax' => '11',
			'FldForeign2Min' => '0',
			'FldForeign2Max' => '0',
			'FldValues' => 'Y;N;?',
			'FldDataLength' => '1',
			'FldCharSupport' => ',Letters,Keyboard,',
			'FldKeyType' => 'Non',
			'FldKeyStruct' => 'Simple',
			'FldCompareSame' => '130'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 574,
			'FldDatabase' => '1',
			'FldTable' => '106',
			'FldOrd' => '26',
			'FldSpecType' => 'Replica',
			'FldSpecSource' => '843',
			'FldName' => 'AddressCity',
			'FldEng' => 'City',
			'FldDesc' => 'The metropolitan area where an Investigative Agency contact receives mail. This is an integral component of an Investigative Agency contact\'s complete address.',
			'FldForeignTable' => '0',
			'FldForeignMin' => '11',
			'FldForeignMax' => '11',
			'FldForeign2Min' => '0',
			'FldForeign2Max' => '0',
			'FldDataLength' => '0',
			'FldCharSupport' => ',Letters,Keyboard,',
			'FldKeyType' => 'Non',
			'FldKeyStruct' => 'Simple',
			'FldCompareSame' => '130'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 830,
			'FldDatabase' => '1',
			'FldTable' => '0',
			'FldOrd' => '27',
			'FldSpecType' => 'Generic',
			'FldSpecSource' => '0',
			'FldName' => 'NameFirst',
			'FldEng' => 'First Name',
			'FldDesc' => 'The legal given name of a person related to this record that we use in all formal communications with that person or regarding that person.',
			'FldNotes' => 'Use the legal spelling and format of their first name even if they use the initial of their first name and prefer their middle name. http://departments.weber.edu/qsupport&training/Data_Standards/Name.htm',
			'FldForeignTable' => '0',
			'FldForeignMin' => '11',
			'FldForeignMax' => '11',
			'FldForeign2Min' => '0',
			'FldForeign2Max' => '0',
			'FldDataLength' => '0',
			'FldCharSupport' => ',Letters,Keyboard,',
			'FldKeyType' => 'Non',
			'FldKeyStruct' => 'Simple',
			'FldCompareSame' => '6'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 1086,
			'FldDatabase' => '1',
			'FldTable' => '102',
			'FldOrd' => '22',
			'FldSpecSource' => '0',
			'FldName' => 'ChargesOther',
			'FldEng' => 'Other charges filed?',
			'FldDesc' => 'Citation charge(s) an Officer issued a Subject as a result of this Stop. Important for evaluating wrongful citation Allegations and tracking citation trends.',
			'FldForeignMin' => 'N',
			'FldForeignMax' => 'N',
			'FldForeign2Min' => 'N',
			'FldForeign2Max' => 'N',
			'FldType' => 'TEXT',
			'FldDataLength' => '0',
			'FldCharSupport' => ',Letters,Numbers,Keyboard,',
			'FldOpts' => '7'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 319,
			'FldDatabase' => '1',
			'FldTable' => '121',
			'FldOrd' => '13',
			'FldSpecSource' => '0',
			'FldName' => 'SubjectFrisk',
			'FldEng' => 'Subject frisked?',
			'FldDesc' => 'Indicates whether or not this Subject was patted down by an Officer during this Stop. This is important information for evaluating certain Allegations related to this stop. Also important for identifying patterns of excessive pat downs.',
			'FldNotes' => 'Related Article
http://www.flexyourrights.org/faqs/what-is-reasonable-suspicion/

There was at one point a copy of this field in Searches. We deleted it because frisks are not technically searches and are generally legally permissible as part of a Stop.



Q. Do we want mere frisks to trigger wrongful search Allegations? Because frisks alone are almost always legally permissible, this might be Allegation overkill.',
			'FldForeignTable' => '0',
			'FldForeignMin' => '11',
			'FldForeignMax' => '11',
			'FldForeign2Min' => '0',
			'FldForeign2Max' => '0',
			'FldValues' => 'Y;N;?',
			'FldDataLength' => '1',
			'FldCharSupport' => ',Letters,Keyboard,',
			'FldKeyStruct' => 'Simple',
			'FldCompareSame' => '130'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 575,
			'FldDatabase' => '1',
			'FldTable' => '106',
			'FldOrd' => '27',
			'FldSpecType' => 'Replica',
			'FldSpecSource' => '844',
			'FldName' => 'AddressState',
			'FldEng' => 'State',
			'FldDesc' => 'The state or district where an Investigative Agency contact receives mail. This is an integral component of an Investigative Agency contact\'s complete address.',
			'FldForeignTable' => '0',
			'FldForeignMin' => '11',
			'FldForeignMax' => '11',
			'FldForeign2Min' => '0',
			'FldForeign2Max' => '0',
			'FldDataLength' => '2',
			'FldCharSupport' => ',Letters,',
			'FldInputMask' => 'AA',
			'FldKeyType' => 'Non',
			'FldKeyStruct' => 'Simple',
			'FldCompareSame' => '6'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 1087,
			'FldDatabase' => '1',
			'FldTable' => '145',
			'FldOrd' => '4',
			'FldSpecSource' => '0',
			'FldName' => 'StillNoResponse',
			'FldEng' => 'No Response from Investigative Agency',
			'FldDesc' => 'Indicates date and time when a Complainant last confirmed that they have heard no response from the appropriate Investigative Agency. This is essential for tracking an Investigative Agency\'s response time when acknowledging receipt of OPC-submitted Complaints.',
			'FldForeignMin' => 'N',
			'FldForeignMax' => 'N',
			'FldForeign2Min' => 'N',
			'FldForeign2Max' => 'N',
			'FldType' => 'DATETIME',
			'FldDataType' => 'DateTime',
			'FldDataLength' => '0',
			'FldCharSupport' => ',Numbers,',
			'FldNullSupport' => '0',
			'FldCompareSame' => '6'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 576,
			'FldDatabase' => '1',
			'FldTable' => '106',
			'FldOrd' => '28',
			'FldSpecType' => 'Replica',
			'FldSpecSource' => '845',
			'FldName' => 'AddressZip',
			'FldEng' => 'Zip Code',
			'FldDesc' => 'The postal code where an Investigative Agency contact receives mail. This is an integral component of an Investigative Agency contact\'s complete address.',
			'FldForeignTable' => '0',
			'FldForeignMin' => '11',
			'FldForeignMax' => '11',
			'FldForeign2Min' => '0',
			'FldForeign2Max' => '0',
			'FldDataLength' => '10',
			'FldCharSupport' => ',Keyboard,Numbers,',
			'FldInputMask' => '#####[-####]',
			'FldKeyType' => 'Non',
			'FldKeyStruct' => 'Simple',
			'FldCompareSame' => '130'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 832,
			'FldDatabase' => '1',
			'FldTable' => '0',
			'FldOrd' => '29',
			'FldSpecType' => 'Generic',
			'FldSpecSource' => '0',
			'FldName' => 'NameMiddle',
			'FldEng' => 'Middle Name',
			'FldDesc' => 'The name of a Complainant, placed between their first name and before their surname, that we use in all formal communications with Complainants or regarding Complainants.',
			'FldNotes' => 'Use only if selected. Field may otherwise be left blank',
			'FldForeignTable' => '0',
			'FldForeignMin' => '11',
			'FldForeignMax' => '11',
			'FldForeign2Min' => '0',
			'FldForeign2Max' => '0',
			'FldDataLength' => '100',
			'FldCharSupport' => ',Letters,Keyboard,',
			'FldKeyType' => 'Non',
			'FldKeyStruct' => 'Simple',
			'FldCompareSame' => '6'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 1088,
			'FldDatabase' => '1',
			'FldTable' => '121',
			'FldOrd' => '15',
			'FldSpecSource' => '0',
			'FldName' => 'StopSubjectHandcuffInjYN',
			'FldEng' => 'Subject injured from handcuffs?',
			'FldDesc' => 'Indicates whether or not the Subject reported any Injuries related to an Officer\'s misuse of handcuffs. Important for connecting with possible Use of Force.',
			'FldForeignTable' => '0',
			'FldForeignMin' => 'N',
			'FldForeignMax' => 'N',
			'FldForeign2Min' => 'N',
			'FldForeign2Max' => 'N',
			'FldValues' => 'Y;N;?',
			'FldDataLength' => '1',
			'FldCharSupport' => ',Letters,Keyboard,',
			'FldCompareSame' => '130'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 833,
			'FldDatabase' => '1',
			'FldTable' => '0',
			'FldOrd' => '31',
			'FldSpecType' => 'Generic',
			'FldSpecSource' => '0',
			'FldName' => 'NameSuffix',
			'FldEng' => 'Name Suffix',
			'FldDesc' => 'Letters added after a person\'s last name related to this record -- which provide additional information about their title or inherited name -- that we use in all formal communications with that person or regarding that person.',
			'FldForeignTable' => '0',
			'FldForeignMin' => '11',
			'FldForeignMax' => '11',
			'FldForeign2Min' => '0',
			'FldForeign2Max' => '0',
			'FldDataLength' => '20',
			'FldCharSupport' => ',Letters,Keyboard,',
			'FldKeyType' => 'Non',
			'FldKeyStruct' => 'Simple',
			'FldCompareSame' => '6'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 1089,
			'FldDatabase' => '1',
			'FldTable' => '106',
			'FldOrd' => '37',
			'FldSpecSource' => '0',
			'FldName' => 'WaySubNotary',
			'FldEng' => 'Way to Submit: Requires Notary',
			'FldDesc' => 'This flags that the designated Police Department currently requires complaints to be submitted with a notary.',
			'FldForeignTable' => '0',
			'FldForeignMin' => '0',
			'FldForeignMax' => '0',
			'FldForeign2Min' => '0',
			'FldForeign2Max' => '0',
			'FldValues' => '0;1',
			'FldType' => 'INT',
			'FldDataType' => 'Numeric',
			'FldDataLength' => '1',
			'FldCharSupport' => ',Numbers,',
			'FldCompareSame' => '878800'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 322,
			'FldDatabase' => '1',
			'FldTable' => '121',
			'FldOrd' => '22',
			'FldSpecType' => 'Replica',
			'FldSpecSource' => '940',
			'FldName' => 'Duration',
			'FldEng' => 'Duration',
			'FldDesc' => 'The total calculated minutes of of a single Stop. This information is vital for verifying a Stop occurrence and evaluating its legal legitimacy.',
			'FldNotes' => 'Calculated based on Stop Start Time and Stop End Time. Instead of capturing this information within the Stop, this is found in the duration of the Incident for Complaints with a Stop but no Arrest.',
			'FldForeignTable' => '0',
			'FldForeignMin' => '11',
			'FldForeignMax' => '11',
			'FldForeign2Min' => '0',
			'FldForeign2Max' => '0',
			'FldType' => 'INT',
			'FldDataType' => 'Numeric',
			'FldDataLength' => '5',
			'FldCharSupport' => ',Numbers,',
			'FldKeyStruct' => 'Simple',
			'FldCompareSame' => '6'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 834,
			'FldDatabase' => '1',
			'FldTable' => '0',
			'FldOrd' => '26',
			'FldSpecType' => 'Generic',
			'FldSpecSource' => '0',
			'FldName' => 'NamePrefix',
			'FldEng' => 'Name Prefix',
			'FldDesc' => 'Letters placed before a person\'s first name related to this record, whether original or by title, that we use in all formal communications with that person or regarding that person.',
			'FldNotes' => '"Name Prefix" should also include titles (e.g. "Judge" or "Vice Admiral"). Field may be left blank. Question: If these are generic fields, will this incident-involved definition apply to IA staff, Attorneys, and others not directly associated with incident?',
			'FldForeignTable' => '0',
			'FldForeignMin' => '11',
			'FldForeignMax' => '11',
			'FldForeign2Min' => '0',
			'FldForeign2Max' => '0',
			'FldDataLength' => '20',
			'FldCharSupport' => ',Letters,Keyboard,',
			'FldKeyType' => 'Non',
			'FldKeyStruct' => 'Simple',
			'FldCompareSame' => '6'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 1090,
			'FldDatabase' => '1',
			'FldTable' => '183',
			'FldOrd' => '1',
			'FldSpecSource' => '0',
			'FldName' => 'CivModel',
			'FldEng' => 'Civilian Oversight Model',
			'FldDesc' => 'Indicates subcategory of Civilian Oversight Agency, either Investigative, Review, or Audit. This information is essential for determining scope of a given Investigative Agency.',
			'FldForeignMin' => '0',
			'FldForeignMax' => '0',
			'FldForeign2Min' => '0',
			'FldForeign2Max' => '0',
			'FldValues' => 'Def::Civilian Oversight Models',
			'FldType' => 'INT',
			'FldDataType' => 'Numeric',
			'FldDataLength' => '11',
			'FldCharSupport' => ',Numbers,',
			'FldNullSupport' => '0',
			'FldCompareSame' => '878800'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 835,
			'FldDatabase' => '1',
			'FldTable' => '0',
			'FldOrd' => '30',
			'FldSpecType' => 'Generic',
			'FldSpecSource' => '0',
			'FldName' => 'NameLast',
			'FldEng' => 'Last Name',
			'FldDesc' => 'The legal surname of a person related to this record that we use in all formal communications with that person or regarding that person.',
			'FldForeignTable' => '0',
			'FldForeignMin' => '11',
			'FldForeignMax' => '11',
			'FldForeign2Min' => '0',
			'FldForeign2Max' => '0',
			'FldDataLength' => '0',
			'FldCharSupport' => ',Letters,Keyboard,',
			'FldKeyType' => 'Non',
			'FldKeyStruct' => 'Simple',
			'FldCompareSame' => '6'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 1091,
			'FldDatabase' => '1',
			'FldTable' => '156',
			'FldSpecSource' => '0',
			'FldName' => 'ComplaintID',
			'FldEng' => 'Complaint ID',
			'FldDesc' => 'The unique number of the Complaint record related to this record of Allegation-related responses, vital to associating with all other Complaint data.',
			'FldForeignTable' => '112',
			'FldForeignMin' => '11',
			'FldForeignMax' => '11',
			'FldForeign2Min' => '11',
			'FldForeign2Max' => '11',
			'FldType' => 'INT',
			'FldDataType' => 'Numeric',
			'FldDataLength' => '11',
			'FldCharSupport' => ',Numbers,',
			'FldKeyType' => ',Foreign,',
			'FldKeyStruct' => 'Simple',
			'FldCompareSame' => '878800',
			'FldOpts' => '13'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 1092,
			'FldDatabase' => '1',
			'FldTable' => '156',
			'FldOrd' => '1',
			'FldSpecSource' => '0',
			'FldName' => 'StopYN',
			'FldEng' => 'Officer stop, detain, or questioned someone?',
			'FldDesc' => 'Indicates whether or not an Officer detained anyone during the Incident. This is important for later reloading Complaint forms for silver Allegations with the user\'s previous response.',
			'FldForeignTable' => '0',
			'FldForeignMin' => '0',
			'FldForeignMax' => '0',
			'FldForeign2Min' => '0',
			'FldForeign2Max' => '0',
			'FldValues' => 'Y;N;?',
			'FldDataLength' => '1',
			'FldCharSupport' => ',Letters,Keyboard,',
			'FldCompareSame' => '878800'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 325,
			'FldDatabase' => '1',
			'FldTable' => '122',
			'FldOrd' => '1',
			'FldSpecSource' => '0',
			'FldName' => 'StatedReason',
			'FldEng' => 'Did officer state reason for search?',
			'FldDesc' => 'Indicates whether or not the Officer gave a reason for this Search. Important for evaluating possible wrongful search Allegation and identifying Search trends.',
			'FldForeignTable' => '0',
			'FldForeignMin' => '11',
			'FldForeignMax' => '11',
			'FldForeign2Min' => '0',
			'FldForeign2Max' => '0',
			'FldValues' => 'Y;N;?',
			'FldDataLength' => '1',
			'FldCharSupport' => ',Letters,Keyboard,',
			'FldKeyType' => 'Non',
			'FldKeyStruct' => 'Simple',
			'FldCompareSame' => '130'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 837,
			'FldDatabase' => '1',
			'FldTable' => '0',
			'FldOrd' => '32',
			'FldSpecType' => 'Generic',
			'FldSpecSource' => '0',
			'FldName' => 'Email',
			'FldEng' => 'Email',
			'FldDesc' => 'The valid email address provided by Complainants. This is the primary way we communicate with them.',
			'FldForeignTable' => '0',
			'FldForeignMin' => '11',
			'FldForeignMax' => '11',
			'FldForeign2Min' => '0',
			'FldForeign2Max' => '0',
			'FldDataLength' => '0',
			'FldCharSupport' => ',Letters,Keyboard,Numbers,',
			'FldInputMask' => 'AAA@AAA.AAA',
			'FldKeyType' => 'Non',
			'FldKeyStruct' => 'Simple',
			'FldCompareSame' => '6'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 1093,
			'FldDatabase' => '1',
			'FldTable' => '156',
			'FldOrd' => '2',
			'FldSpecSource' => '0',
			'FldName' => 'StopWrongful',
			'FldEng' => 'Think stop or detention wrongful?',
			'FldDesc' => 'Indicates whether or not the Complainant believes there is an Allegation regarding the wrongful stop of at least one Civilian. Such Allegation claims are central to Complaints.',
			'FldForeignTable' => '0',
			'FldForeignMin' => '0',
			'FldForeignMax' => '0',
			'FldForeign2Min' => '0',
			'FldForeign2Max' => '0',
			'FldValues' => 'Y;N;?',
			'FldDataLength' => '1',
			'FldCharSupport' => ',Letters,Keyboard,',
			'FldCompareSame' => '878800'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 326,
			'FldDatabase' => '1',
			'FldTable' => '122',
			'FldOrd' => '2',
			'FldSpecSource' => '0',
			'FldName' => 'StatedReasonDesc',
			'FldEng' => 'Stated reason description',
			'FldDesc' => 'The specific reason the Officer gave for conducting this Search. Important for evaluating possible wrongful search Allegation and identifying Search trends.',
			'FldNotes' => 'As best you can remember, what were the exact words this Officer said before conducting this search?',
			'FldForeignTable' => '0',
			'FldForeignMin' => '11',
			'FldForeignMax' => '11',
			'FldForeign2Min' => '0',
			'FldForeign2Max' => '0',
			'FldType' => 'TEXT',
			'FldDataLength' => '0',
			'FldCharSupport' => ',Letters,Keyboard,',
			'FldKeyType' => 'Non',
			'FldKeyStruct' => 'Simple',
			'FldOpts' => '7'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 838,
			'FldDatabase' => '1',
			'FldTable' => '0',
			'FldOrd' => '33',
			'FldSpecType' => 'Generic',
			'FldSpecSource' => '0',
			'FldName' => 'PhoneHome',
			'FldEng' => 'Home Phone',
			'FldDesc' => 'The contact number where the person can be reached at their home. This is usually a landline phone, which cannot receive text messages.',
			'FldForeignTable' => '0',
			'FldForeignMin' => '11',
			'FldForeignMax' => '11',
			'FldForeign2Min' => '0',
			'FldForeign2Max' => '0',
			'FldDataLength' => '20',
			'FldCharSupport' => ',Letters,Keyboard,Numbers,',
			'FldInputMask' => '###-###-#### [x###]',
			'FldKeyType' => 'Non',
			'FldKeyStruct' => 'Simple'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 1094,
			'FldDatabase' => '1',
			'FldTable' => '156',
			'FldOrd' => '3',
			'FldSpecSource' => '0',
			'FldName' => 'OfficerID',
			'FldEng' => 'Any one ask for officer\'s ID?',
			'FldDesc' => 'Indicates whether or not anybody asked for any Officer\'s identification. Storing this is important in determining whether or not to display the question regarding an Officer\'s refusal.',
			'FldForeignTable' => '0',
			'FldForeignMin' => '0',
			'FldForeignMax' => '0',
			'FldForeign2Min' => '0',
			'FldForeign2Max' => '0',
			'FldValues' => 'Y;N;?',
			'FldDataLength' => '1',
			'FldCharSupport' => ',Letters,Keyboard,',
			'FldCompareSame' => '878800'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 327,
			'FldDatabase' => '1',
			'FldTable' => '122',
			'FldOrd' => '3',
			'FldSpecSource' => '0',
			'FldName' => 'OfficerRequest',
			'FldEng' => 'Officer request permission to search?',
			'FldDesc' => 'Indicates whether or not the Officer asked the Subject for permission to Search their person or property. Important for evaluating possible wrongful search Allegation and identifying Search trends.',
			'FldForeignTable' => '0',
			'FldForeignMin' => '11',
			'FldForeignMax' => '11',
			'FldForeign2Min' => '0',
			'FldForeign2Max' => '0',
			'FldValues' => 'Y;N;?',
			'FldDataLength' => '1',
			'FldCharSupport' => ',Letters,Keyboard,',
			'FldKeyType' => 'Non',
			'FldKeyStruct' => 'Simple',
			'FldCompareSame' => '130'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 839,
			'FldDatabase' => '1',
			'FldTable' => '0',
			'FldOrd' => '34',
			'FldSpecType' => 'Generic',
			'FldSpecSource' => '0',
			'FldName' => 'PhoneWork',
			'FldEng' => 'Work Phone',
			'FldDesc' => 'The contact phone number where the person can be reached at their place of employment. This is usually a landline phone, which cannot receive text messages.',
			'FldNotes' => 'We might need to add an "extension" field for some work phone numbers.',
			'FldForeignTable' => '0',
			'FldForeignMin' => '11',
			'FldForeignMax' => '11',
			'FldForeign2Min' => '0',
			'FldForeign2Max' => '0',
			'FldDataLength' => '20',
			'FldCharSupport' => ',Letters,Keyboard,Numbers,',
			'FldInputMask' => '###-###-#### [x###]',
			'FldKeyType' => 'Non',
			'FldKeyStruct' => 'Simple'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 1095,
			'FldDatabase' => '1',
			'FldTable' => '156',
			'FldOrd' => '4',
			'FldSpecSource' => '0',
			'FldName' => 'OfficerRefuseID',
			'FldEng' => 'Officer refused to provide ID?',
			'FldDesc' => 'Indicates whether or not the Complainant believes there is a potential Allegation regarding an Officer refusing to provide identification. Such Allegation claims are central to Complaints.',
			'FldForeignTable' => '0',
			'FldForeignMin' => '0',
			'FldForeignMax' => '0',
			'FldForeign2Min' => '0',
			'FldForeign2Max' => '0',
			'FldValues' => 'Y;N;?',
			'FldDataLength' => '1',
			'FldCharSupport' => ',Letters,Keyboard,',
			'FldCompareSame' => '878800'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 328,
			'FldDatabase' => '1',
			'FldTable' => '122',
			'FldOrd' => '4',
			'FldSpecSource' => '0',
			'FldName' => 'OfficerRequestDesc',
			'FldEng' => 'Officer request description',
			'FldDesc' => 'The specific words and tone the Officer used to solicit consent to search. Important for evaluating possible wrongful search Allegation and identifying Search trends.',
			'FldNotes' => 'What were the exact words and tone this Officer used to request consent to search? (Search requests often sound a lot like commands.)',
			'FldForeignTable' => '0',
			'FldForeignMin' => '11',
			'FldForeignMax' => '11',
			'FldForeign2Min' => '0',
			'FldForeign2Max' => '0',
			'FldType' => 'TEXT',
			'FldDataLength' => '0',
			'FldCharSupport' => ',Letters,Keyboard,',
			'FldKeyType' => 'Non',
			'FldKeyStruct' => 'Simple',
			'FldOpts' => '7'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 840,
			'FldDatabase' => '1',
			'FldTable' => '0',
			'FldOrd' => '35',
			'FldSpecType' => 'Generic',
			'FldSpecSource' => '0',
			'FldName' => 'PhoneMobile',
			'FldEng' => 'Mobile Phone',
			'FldDesc' => 'The contact number where the person can be reach on their cellular device. We may use this number for both text and voice communications.',
			'FldForeignTable' => '0',
			'FldForeignMin' => '11',
			'FldForeignMax' => '11',
			'FldForeign2Min' => '0',
			'FldForeign2Max' => '0',
			'FldDataLength' => '20',
			'FldCharSupport' => ',Letters,Keyboard,Numbers,',
			'FldInputMask' => '###-###-#### [x###]',
			'FldKeyType' => 'Non',
			'FldKeyStruct' => 'Simple'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 1096,
			'FldDatabase' => '1',
			'FldTable' => '156',
			'FldOrd' => '5',
			'FldSpecSource' => '0',
			'FldName' => 'SearchYN',
			'FldEng' => 'Officer searched someone or something?',
			'FldDesc' => 'Indicates whether or not an Officer searched anyone during the Incident. This is important for later reloading Complaint forms for silver Allegations with the user\'s previous response.',
			'FldForeignTable' => '0',
			'FldForeignMin' => '0',
			'FldForeignMax' => '0',
			'FldForeign2Min' => '0',
			'FldForeign2Max' => '0',
			'FldValues' => 'Y;N;?',
			'FldDataLength' => '1',
			'FldCharSupport' => ',Letters,Keyboard,',
			'FldCompareSame' => '878800'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 329,
			'FldDatabase' => '1',
			'FldTable' => '122',
			'FldOrd' => '5',
			'FldSpecSource' => '0',
			'FldName' => 'SubjectConsent',
			'FldEng' => 'Did subject consent to search?',
			'FldDesc' => 'Indicates whether or not the Subject gave the Officer permission to Search their person or property. Important for evaluating possible wrongful search Allegation and identifying Search trends.',
			'FldForeignTable' => '0',
			'FldForeignMin' => '11',
			'FldForeignMax' => '11',
			'FldForeign2Min' => '0',
			'FldForeign2Max' => '0',
			'FldValues' => 'Y;N;?',
			'FldDataLength' => '1',
			'FldCharSupport' => ',Letters,Keyboard,',
			'FldKeyType' => 'Non',
			'FldKeyStruct' => 'Simple',
			'FldCompareSame' => '130'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 841,
			'FldDatabase' => '1',
			'FldTable' => '0',
			'FldOrd' => '36',
			'FldSpecType' => 'Generic',
			'FldSpecSource' => '0',
			'FldName' => 'Address',
			'FldEng' => 'Street Address',
			'FldDesc' => 'The postal location at or near where an Incident occurred or the postal location where a contact resides.',
			'FldForeignTable' => '0',
			'FldForeignMin' => '11',
			'FldForeignMax' => '11',
			'FldForeign2Min' => '0',
			'FldForeign2Max' => '0',
			'FldDataLength' => '0',
			'FldCharSupport' => ',Letters,Keyboard,Numbers,',
			'FldKeyType' => 'Non',
			'FldKeyStruct' => 'Simple'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 1097,
			'FldDatabase' => '1',
			'FldTable' => '156',
			'FldOrd' => '6',
			'FldSpecSource' => '0',
			'FldName' => 'SearchWrongful',
			'FldEng' => 'Think search was wrongful?',
			'FldDesc' => 'Indicates whether or not the Complainant believes there is an Allegation regarding the wrongful search of at least one Civilian. Such Allegation claims are central to Complaints.',
			'FldForeignTable' => '0',
			'FldForeignMin' => '0',
			'FldForeignMax' => '0',
			'FldForeign2Min' => '0',
			'FldForeign2Max' => '0',
			'FldValues' => 'Y;N;?',
			'FldDataLength' => '1',
			'FldCharSupport' => ',Keyboard,',
			'FldCompareSame' => '878800'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 330,
			'FldDatabase' => '1',
			'FldTable' => '122',
			'FldOrd' => '6',
			'FldSpecSource' => '0',
			'FldName' => 'SubjectSay',
			'FldEng' => 'What did subject say?',
			'FldDesc' => 'Narrative account of specific words a Subject used to consent to the search. Important for evaluating possible wrongful search Allegation and identifying Search trends.',
			'FldNotes' => 'What were the exact words and tone [the Subject] used to give consent to the Officer?',
			'FldForeignTable' => '0',
			'FldForeignMin' => '11',
			'FldForeignMax' => '11',
			'FldForeign2Min' => '0',
			'FldForeign2Max' => '0',
			'FldType' => 'TEXT',
			'FldDataLength' => '0',
			'FldCharSupport' => ',Letters,Keyboard,',
			'FldKeyStruct' => 'Simple',
			'FldOpts' => '7'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 842,
			'FldDatabase' => '1',
			'FldTable' => '0',
			'FldOrd' => '37',
			'FldSpecType' => 'Generic',
			'FldSpecSource' => '0',
			'FldName' => 'Address2',
			'FldEng' => 'Street Address 2',
			'FldDesc' => 'Line 2 of person\'s address, if needed',
			'FldForeignTable' => '0',
			'FldForeignMin' => '11',
			'FldForeignMax' => '11',
			'FldForeign2Min' => '0',
			'FldForeign2Max' => '0',
			'FldDataLength' => '0',
			'FldCharSupport' => ',Letters,Keyboard,Numbers,',
			'FldKeyType' => 'Non',
			'FldKeyStruct' => 'Simple'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 1098,
			'FldDatabase' => '1',
			'FldTable' => '156',
			'FldOrd' => '9',
			'FldSpecSource' => '0',
			'FldName' => 'PropertyYN',
			'FldEng' => 'Property seized or damaged?',
			'FldDesc' => 'Indicates whether or not an Officer seized or damaged any property during the Incident. This is important for later reloading Complaint forms for silver Allegations with the user\'s previous response.',
			'FldForeignTable' => '0',
			'FldForeignMin' => '0',
			'FldForeignMax' => '0',
			'FldForeign2Min' => '0',
			'FldForeign2Max' => '0',
			'FldValues' => 'Y;N;?',
			'FldDataLength' => '1',
			'FldCharSupport' => ',Letters,Keyboard,',
			'FldCompareSame' => '878800'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 331,
			'FldDatabase' => '1',
			'FldTable' => '122',
			'FldOrd' => '7',
			'FldSpecSource' => '0',
			'FldName' => 'OfficerThreats',
			'FldEng' => 'Officer make threats or lie to get consent to search?',
			'FldDesc' => 'Indicates whether or not an Officer made any stated or implied threats to the Subject to obtain consent to search Subject\'s person or property. Important for evaluating possible wrongful search Allegation and identifying Search trends.',
			'FldForeignTable' => '0',
			'FldForeignMin' => '11',
			'FldForeignMax' => '11',
			'FldForeign2Min' => '0',
			'FldForeign2Max' => '0',
			'FldValues' => 'Y;N;?',
			'FldDataLength' => '1',
			'FldCharSupport' => ',Letters,Keyboard,',
			'FldKeyStruct' => 'Simple',
			'FldCompareSame' => '130'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 843,
			'FldDatabase' => '1',
			'FldTable' => '0',
			'FldOrd' => '38',
			'FldSpecType' => 'Generic',
			'FldSpecSource' => '0',
			'FldName' => 'AddressCity',
			'FldEng' => 'City',
			'FldForeignTable' => '0',
			'FldForeignMin' => '11',
			'FldForeignMax' => '11',
			'FldForeign2Min' => '0',
			'FldForeign2Max' => '0',
			'FldDataLength' => '0',
			'FldCharSupport' => ',Letters,Keyboard,',
			'FldKeyType' => 'Non',
			'FldKeyStruct' => 'Simple',
			'FldCompareSame' => '130'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 1099,
			'FldDatabase' => '1',
			'FldTable' => '156',
			'FldOrd' => '10',
			'FldSpecSource' => '0',
			'FldName' => 'PropertyWrongful',
			'FldEng' => 'Think property wrongfully seized?',
			'FldDesc' => 'Indicates whether or not the Complainant believes there is an Allegation regarding the wrongful seizure or destruction of at least one Civilian\'s property. Such Allegation claims are central to Complaints.',
			'FldForeignTable' => '0',
			'FldForeignMin' => '0',
			'FldForeignMax' => '0',
			'FldForeign2Min' => '0',
			'FldForeign2Max' => '0',
			'FldValues' => 'Y;N;?',
			'FldDataLength' => '1',
			'FldCharSupport' => ',Letters,Keyboard,',
			'FldCompareSame' => '878800'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 332,
			'FldDatabase' => '1',
			'FldTable' => '122',
			'FldOrd' => '8',
			'FldSpecSource' => '0',
			'FldName' => 'OfficerThreatsDesc',
			'FldEng' => 'Officer threat description',
			'FldDesc' => 'The specific words the Officer used to trick Subject into consenting to Search. Important for evaluating possible wrongful search Allegation and identifying Search trends.',
			'FldNotes' => 'What were the exact words this Officer used to threaten or trick the Subject into giving consent to search?',
			'FldForeignTable' => '0',
			'FldForeignMin' => '11',
			'FldForeignMax' => '11',
			'FldForeign2Min' => '0',
			'FldForeign2Max' => '0',
			'FldType' => 'TEXT',
			'FldDataLength' => '0',
			'FldCharSupport' => ',Letters,Keyboard,',
			'FldKeyType' => 'Non',
			'FldKeyStruct' => 'Simple',
			'FldOpts' => '7'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 844,
			'FldDatabase' => '1',
			'FldTable' => '0',
			'FldOrd' => '39',
			'FldSpecType' => 'Generic',
			'FldSpecSource' => '0',
			'FldName' => 'AddressState',
			'FldEng' => 'State',
			'FldForeignTable' => '0',
			'FldForeignMin' => '11',
			'FldForeignMax' => '11',
			'FldForeign2Min' => '0',
			'FldForeign2Max' => '0',
			'FldDataLength' => '2',
			'FldCharSupport' => ',Letters,',
			'FldInputMask' => 'AA',
			'FldKeyType' => 'Non',
			'FldKeyStruct' => 'Simple',
			'FldCompareSame' => '6'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 1100,
			'FldDatabase' => '1',
			'FldTable' => '156',
			'FldOrd' => '7',
			'FldSpecSource' => '0',
			'FldName' => 'ForceYN',
			'FldEng' => 'Officer used physical force?',
			'FldDesc' => 'Indicates whether or not an Officer used physical force against anyone during the Incident. This is important for later reloading Complaint forms for silver Allegations with the user\'s previous response.',
			'FldForeignTable' => '0',
			'FldForeignMin' => '0',
			'FldForeignMax' => '0',
			'FldForeign2Min' => '0',
			'FldForeign2Max' => '0',
			'FldValues' => 'Y;N;?',
			'FldDataLength' => '1',
			'FldCharSupport' => ',Letters,Keyboard,',
			'FldCompareSame' => '878800'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 333,
			'FldDatabase' => '1',
			'FldTable' => '122',
			'FldOrd' => '11',
			'FldSpecSource' => '0',
			'FldName' => 'K9sniff',
			'FldEng' => 'Officer use K9 (dog) sniff?',
			'FldDesc' => 'Indicates whether or not an Officer had a K9 (Dog) sniff a Subject or their property. Important for identifying possible wrongful search Allegation and identifying K9 (Dog) search trends.',
			'FldNotes' => 'Q. Do we want mere K9 sniffs to trigger wrongful search Allegations? Because K9 sniffs alone are almost always legally permissible, this might be Allegation overkill.',
			'FldForeignMin' => '11',
			'FldForeignMax' => '11',
			'FldForeign2Min' => '0',
			'FldForeign2Max' => '0',
			'FldValues' => 'Y;N;?',
			'FldDataLength' => '1',
			'FldCharSupport' => ',Letters,Keyboard,',
			'FldNullSupport' => '0',
			'FldCompareSame' => '878800'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 845,
			'FldDatabase' => '1',
			'FldTable' => '0',
			'FldOrd' => '40',
			'FldSpecType' => 'Generic',
			'FldSpecSource' => '0',
			'FldName' => 'AddressZip',
			'FldEng' => 'Zip Code',
			'FldForeignTable' => '0',
			'FldForeignMin' => '11',
			'FldForeignMax' => '11',
			'FldForeign2Min' => '0',
			'FldForeign2Max' => '0',
			'FldDataLength' => '10',
			'FldCharSupport' => ',Keyboard,Numbers,',
			'FldInputMask' => '#####[-####]',
			'FldKeyType' => 'Non',
			'FldKeyStruct' => 'Simple',
			'FldCompareSame' => '130'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 1101,
			'FldDatabase' => '1',
			'FldTable' => '156',
			'FldOrd' => '8',
			'FldSpecSource' => '0',
			'FldName' => 'ForceUnreason',
			'FldEng' => 'Think physical force unreasonable?',
			'FldDesc' => 'Indicates whether or not the Complainant believes there is an Allegation regarding the unreasonable use of force against at least one Civilian. Such Allegation claims are central to Complaints.',
			'FldForeignTable' => '0',
			'FldForeignMin' => '0',
			'FldForeignMax' => '0',
			'FldForeign2Min' => '0',
			'FldForeign2Max' => '0',
			'FldValues' => 'Y;N;?',
			'FldDataLength' => '1',
			'FldCharSupport' => ',Letters,Keyboard,',
			'FldCompareSame' => '878800'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 846,
			'FldDatabase' => '1',
			'FldTable' => '0',
			'FldOrd' => '41',
			'FldSpecType' => 'Generic',
			'FldSpecSource' => '0',
			'FldName' => 'Birthday',
			'FldEng' => 'Date of Birth',
			'FldDesc' => 'The month, day, and year a Complainant was born. This information is used to help verify a Complainant\'s identity.',
			'FldForeignTable' => '0',
			'FldForeignMin' => '11',
			'FldForeignMax' => '11',
			'FldForeign2Min' => '0',
			'FldForeign2Max' => '0',
			'FldType' => 'DATE',
			'FldDataType' => 'DateTime',
			'FldDataLength' => '0',
			'FldCharSupport' => ',Keyboard,Numbers,',
			'FldInputMask' => 'YYYY-MM-DD',
			'FldKeyType' => 'Non',
			'FldKeyStruct' => 'Simple',
			'FldCompareSame' => '6',
			'FldCompareOther' => '6',
			'FldCompareValue' => '6'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 1102,
			'FldDatabase' => '1',
			'FldTable' => '156',
			'FldOrd' => '11',
			'FldSpecSource' => '0',
			'FldName' => 'ArrestYN',
			'FldEng' => 'Officer arrested someone?',
			'FldDesc' => 'Indicates whether or not an Officer arrested anyone during the Incident. This is important for later reloading Complaint forms for silver Allegations with the user\'s previous response.',
			'FldForeignTable' => '0',
			'FldForeignMin' => '0',
			'FldForeignMax' => '0',
			'FldForeign2Min' => '0',
			'FldForeign2Max' => '0',
			'FldValues' => 'Y;N;?',
			'FldDataLength' => '1',
			'FldCharSupport' => ',Letters,Keyboard,',
			'FldCompareSame' => '878800'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 335,
			'FldDatabase' => '1',
			'FldTable' => '122',
			'FldOrd' => '9',
			'FldSpecSource' => '0',
			'FldName' => 'Strip',
			'FldEng' => 'Officer strip searched someone?',
			'FldDesc' => 'Indicates whether or not an Officer performed a strip search on a Subject (not including at the police station). Important for evaluating possible wrongful search Allegation and identifying search trends.',
			'FldForeignTable' => '0',
			'FldForeignMin' => '11',
			'FldForeignMax' => '11',
			'FldForeign2Min' => '0',
			'FldForeign2Max' => '0',
			'FldValues' => 'Y;N;?',
			'FldDataLength' => '1',
			'FldCharSupport' => ',Letters,Keyboard,',
			'FldKeyType' => 'Non',
			'FldKeyStruct' => 'Simple',
			'FldCompareSame' => '130'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 847,
			'FldDatabase' => '1',
			'FldTable' => '0',
			'FldOrd' => '42',
			'FldSpecType' => 'Generic',
			'FldSpecSource' => '0',
			'FldName' => 'Facebook',
			'FldEng' => 'Facebook',
			'FldForeignTable' => '0',
			'FldForeignMin' => '11',
			'FldForeignMax' => '11',
			'FldForeign2Min' => '0',
			'FldForeign2Max' => '0',
			'FldDataLength' => '0',
			'FldCharSupport' => ',Letters,Keyboard,Numbers,',
			'FldInputMask' => 'http://facebook.com/AAAAAA',
			'FldKeyType' => 'Non',
			'FldKeyStruct' => 'Simple',
			'FldCompareSame' => '6'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 1103,
			'FldDatabase' => '1',
			'FldTable' => '156',
			'FldOrd' => '13',
			'FldSpecSource' => '0',
			'FldName' => 'ArrestWrongful',
			'FldEng' => 'Think arrest was wrongful?',
			'FldDesc' => 'Indicates whether or not the Complainant believes there is an Allegation regarding the wrongful arrest of at least one Civilian. Such Allegation claims are central to Complaints.',
			'FldForeignTable' => '0',
			'FldForeignMin' => '0',
			'FldForeignMax' => '0',
			'FldForeign2Min' => '0',
			'FldForeign2Max' => '0',
			'FldValues' => 'Y;N;?',
			'FldDataLength' => '1',
			'FldCharSupport' => ',Letters,Keyboard,',
			'FldCompareSame' => '878800'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 1104,
			'FldDatabase' => '1',
			'FldTable' => '156',
			'FldOrd' => '15',
			'FldSpecSource' => '0',
			'FldName' => 'ArrestMiranda',
			'FldEng' => 'Officer fail to read Miranda Rights?',
			'FldDesc' => 'Indicates whether or not the Complainant believes there is an Allegation regarding a failure to read Miranda rights during at least one Arrest. Such Allegation claims are central to Complaints.',
			'FldForeignTable' => '0',
			'FldForeignMin' => '0',
			'FldForeignMax' => '0',
			'FldForeign2Min' => '0',
			'FldForeign2Max' => '0',
			'FldValues' => 'Y;N;?',
			'FldDataLength' => '1',
			'FldCharSupport' => ',Letters,Keyboard,',
			'FldCompareSame' => '878800'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 1105,
			'FldDatabase' => '1',
			'FldTable' => '156',
			'FldOrd' => '16',
			'FldSpecSource' => '0',
			'FldName' => 'CitationYN',
			'FldEng' => 'Officer give ticket or citation?',
			'FldDesc' => 'Indicates whether or not an Officer cited anyone during the Incident. This is important for later reloading Complaint forms for silver Allegations with the user\'s previous response.',
			'FldForeignTable' => '0',
			'FldForeignMin' => '0',
			'FldForeignMax' => '0',
			'FldForeign2Min' => '0',
			'FldForeign2Max' => '0',
			'FldValues' => 'Y;N;?',
			'FldDataLength' => '1',
			'FldCharSupport' => ',Letters,Keyboard,',
			'FldCompareSame' => '878800'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 1106,
			'FldDatabase' => '1',
			'FldTable' => '156',
			'FldOrd' => '14',
			'FldSpecSource' => '0',
			'FldName' => 'ArrestRetaliatory',
			'FldEng' => 'Think arrest charges were retaliation?',
			'FldDesc' => 'Indicates whether or not the Complainant believes there is an Allegation regarding retaliatory charges against at least one Civilian. Such Allegation claims are central to Complaints.',
			'FldForeignTable' => '0',
			'FldForeignMin' => '0',
			'FldForeignMax' => '0',
			'FldForeign2Min' => '0',
			'FldForeign2Max' => '0',
			'FldValues' => 'Y;N;?',
			'FldDataLength' => '1',
			'FldCharSupport' => ',Keyboard,',
			'FldCompareSame' => '878800'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 1107,
			'FldDatabase' => '1',
			'FldTable' => '156',
			'FldOrd' => '18',
			'FldSpecSource' => '0',
			'FldName' => 'Procedure',
			'FldEng' => 'Think officer violated policy or procedure?',
			'FldDesc' => 'Indicates whether or not the Complainant believes there is an Allegation regarding Officer actions which did not follow appropriate policy or procedure. Such Allegation claims are central to Complaints.',
			'FldForeignTable' => '0',
			'FldForeignMin' => '0',
			'FldForeignMax' => '0',
			'FldForeign2Min' => '0',
			'FldForeign2Max' => '0',
			'FldValues' => 'Y;N;?',
			'FldDataLength' => '1',
			'FldCharSupport' => ',Letters,Keyboard,',
			'FldCompareSame' => '878800'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 1108,
			'FldDatabase' => '1',
			'FldTable' => '156',
			'FldOrd' => '22',
			'FldSpecSource' => '0',
			'FldName' => 'SexualAssault',
			'FldEng' => 'Think officer sexually assaulted someone?',
			'FldDesc' => 'Indicates whether or not an Officer sexually assaulted anyone during the Incident. This is important for later reloading Complaint forms for silver Allegations with the user\'s previous response.',
			'FldForeignTable' => '0',
			'FldForeignMin' => '0',
			'FldForeignMax' => '0',
			'FldForeign2Min' => '0',
			'FldForeign2Max' => '0',
			'FldValues' => 'Y;N;?',
			'FldDataLength' => '1',
			'FldCharSupport' => ',Letters,Keyboard,',
			'FldCompareSame' => '878800'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 341,
			'FldDatabase' => '1',
			'FldTable' => '122',
			'FldOrd' => '12',
			'FldSpecSource' => '0',
			'FldName' => 'ContrabandDiscovered',
			'FldEng' => 'Officer discover contraband?',
			'FldDesc' => 'Indicates whether or not illegal items were discovered during a Search. Important for identifying search trends.',
			'FldForeignTable' => '0',
			'FldForeignMin' => '11',
			'FldForeignMax' => '11',
			'FldForeign2Min' => '0',
			'FldForeign2Max' => '0',
			'FldValues' => 'Y;N;?',
			'FldDataLength' => '1',
			'FldCharSupport' => ',Letters,Keyboard,',
			'FldKeyType' => 'Non',
			'FldKeyStruct' => 'Simple',
			'FldCompareSame' => '130'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 1109,
			'FldDatabase' => '1',
			'FldTable' => '156',
			'FldOrd' => '20',
			'FldSpecSource' => '0',
			'FldName' => 'Bias',
			'FldEng' => 'Think officer actions were biased?',
			'FldDesc' => 'Indicates whether or not the Complainant believes there is an Allegation regarding policing based on bias. Such Allegation claims are central to Complaints.',
			'FldForeignTable' => '0',
			'FldForeignMin' => '0',
			'FldForeignMax' => '0',
			'FldForeign2Min' => '0',
			'FldForeign2Max' => '0',
			'FldValues' => 'Y;N;?',
			'FldDataLength' => '1',
			'FldCharSupport' => ',Letters,Keyboard,',
			'FldCompareSame' => '878800'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 343,
			'FldDatabase' => '1',
			'FldTable' => '122',
			'FldOrd' => '13',
			'FldSpecSource' => '0',
			'FldName' => 'OfficerWarrant',
			'FldEng' => 'Officer have warrant?',
			'FldDesc' => 'Indicates whether or not an Officer had a warrant for a Search. Important for evaluating possible wrongful search Allegations and for identifying search trends.',
			'FldForeignTable' => '0',
			'FldForeignMin' => '11',
			'FldForeignMax' => '11',
			'FldForeign2Min' => '0',
			'FldForeign2Max' => '0',
			'FldValues' => 'Y;N;?',
			'FldDataLength' => '1',
			'FldCharSupport' => ',Letters,Keyboard,',
			'FldKeyType' => 'Non',
			'FldKeyStruct' => 'Simple',
			'FldCompareSame' => '130'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 1111,
			'FldDatabase' => '1',
			'FldTable' => '156',
			'FldOrd' => '28',
			'FldSpecSource' => '0',
			'FldName' => 'Unbecoming',
			'FldEng' => 'Think officer conduct improper or unprofessional?',
			'FldDesc' => 'Indicates whether or not the Complainant believes there is an Allegation regarding conduct unbecoming of an Officer. Such Allegation claims are central to Complaints.',
			'FldForeignTable' => '0',
			'FldForeignMin' => '0',
			'FldForeignMax' => '0',
			'FldForeign2Min' => '0',
			'FldForeign2Max' => '0',
			'FldValues' => 'Y;N;?',
			'FldDataLength' => '1',
			'FldCharSupport' => ',Letters,Keyboard,',
			'FldCompareSame' => '878800'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 344,
			'FldDatabase' => '1',
			'FldTable' => '122',
			'FldOrd' => '14',
			'FldSpecSource' => '0',
			'FldName' => 'OfficerWarrantSay',
			'FldEng' => 'What did warrant say?',
			'FldDesc' => 'The words on the official warrant. Important for evaluating possible wrongful search Allegations.',
			'FldNotes' => 'User may type actual words on the warrant. Or they may upload a photograph or scan of the warrant as Evidence.',
			'FldForeignTable' => '0',
			'FldForeignMin' => '11',
			'FldForeignMax' => '11',
			'FldForeign2Min' => '0',
			'FldForeign2Max' => '0',
			'FldType' => 'TEXT',
			'FldDataLength' => '0',
			'FldCharSupport' => ',Letters,Keyboard,',
			'FldKeyStruct' => 'Simple',
			'FldOpts' => '7'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 1112,
			'FldDatabase' => '1',
			'FldTable' => '156',
			'FldOrd' => '29',
			'FldSpecSource' => '0',
			'FldName' => 'Discourteous',
			'FldEng' => 'Think officer was discourteous?',
			'FldDesc' => 'Indicates whether or not the Complainant believes there is an Allegation regarding at least one Officer\'s discourtesy. Such Allegation claims are central to Complaints.',
			'FldForeignTable' => '0',
			'FldForeignMin' => '0',
			'FldForeignMax' => '0',
			'FldForeign2Min' => '0',
			'FldForeign2Max' => '0',
			'FldValues' => 'Y;N;?',
			'FldDataLength' => '1',
			'FldCharSupport' => ',Letters,Keyboard,',
			'FldCompareSame' => '878800'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 1113,
			'FldDatabase' => '1',
			'FldTable' => '112',
			'FldOrd' => '33',
			'FldSpecSource' => '0',
			'FldName' => 'HoneyPot',
			'FldEng' => 'Honey Pot (to catch spam bots)',
			'FldDesc' => 'Indicates whether or not a spam bot filled in the form field which human users cannot see. This is important for quickly categorizing Complaints as spam.',
			'FldForeignTable' => '0',
			'FldForeignMin' => '0',
			'FldForeignMax' => '0',
			'FldForeign2Min' => '0',
			'FldForeign2Max' => '0',
			'FldDataLength' => '0',
			'FldCharSupport' => ',',
			'FldKeyType' => ',',
			'FldOpts' => '13'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 1369,
			'FldDatabase' => '1',
			'FldTable' => '106',
			'FldOrd' => '12',
			'FldSpecType' => 'Replica',
			'FldSpecSource' => '922',
			'FldName' => 'Title',
			'FldEng' => 'Title',
			'FldDesc' => 'The job position of an Investigative Agency contact. We might use this in formal communications with Investigative Agency contacts or regarding Investigative Agency contacts.',
			'FldForeignTable' => '0',
			'FldForeignMin' => '11',
			'FldForeignMax' => '11',
			'FldForeign2Min' => '0',
			'FldForeign2Max' => '0',
			'FldDataLength' => '0',
			'FldCharSupport' => ',Letters,Keyboard,Numbers,',
			'FldKeyType' => 'Non',
			'FldKeyStruct' => 'Simple',
			'FldCompareSame' => '130',
			'FldOpts' => '11'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 1114,
			'FldDatabase' => '1',
			'FldTable' => '153',
			'FldOrd' => '1',
			'FldSpecSource' => '0',
			'FldName' => 'GenderOther',
			'FldEng' => 'Gender Other',
			'FldDesc' => 'Other gender classifications of a Civilian or Officer, with suggestions provided by the Definitions for Gender Identity. This category is used to help verify a Civilian or Officer\'s identity.',
			'FldForeignTable' => '0',
			'FldForeignMin' => '0',
			'FldForeignMax' => '0',
			'FldForeign2Min' => '0',
			'FldForeign2Max' => '0',
			'FldDataLength' => '0',
			'FldCharSupport' => ',Letters,Keyboard,',
			'FldOpts' => '7'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 1370,
			'FldDatabase' => '1',
			'FldTable' => '106',
			'FldOrd' => '13',
			'FldSpecSource' => '0',
			'FldName' => 'IDnumber',
			'FldEng' => 'ID Number',
			'FldDesc' => 'A unique number used to identify each Investigative Agency. We assign a number to all active Investigative Agencies and remains with them for the duration of their existence.',
			'FldForeignTable' => '0',
			'FldForeignMin' => '11',
			'FldForeignMax' => '11',
			'FldForeign2Min' => '0',
			'FldForeign2Max' => '0',
			'FldDataLength' => '50',
			'FldCharSupport' => ',Letters,Keyboard,Numbers,',
			'FldKeyStruct' => 'Simple',
			'FldCompareSame' => '6',
			'FldOpts' => '11'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 1115,
			'FldDatabase' => '1',
			'FldTable' => '112',
			'FldOrd' => '11',
			'FldSpecSource' => '0',
			'FldName' => 'OfficerInjured',
			'FldEng' => 'Any officers injured?',
			'FldDesc' => 'Indicates whether or not any Officer was also injured during a specific Use of Force. This is important for tracking an acknowledging the fact that there is more than one side to every story.',
			'FldForeignTable' => '0',
			'FldForeignMin' => '0',
			'FldForeignMax' => '0',
			'FldForeign2Min' => '0',
			'FldForeign2Max' => '0',
			'FldValues' => 'Y;N;?',
			'FldDataLength' => '1',
			'FldCharSupport' => ',Letters,Keyboard,',
			'FldCompareSame' => '878800'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 348,
			'FldDatabase' => '1',
			'FldTable' => '123',
			'FldOrd' => '2',
			'FldSpecSource' => '0',
			'FldName' => 'StatedReason',
			'FldEng' => 'Did officer state a reason for arrest?',
			'FldDesc' => 'Indicates whether or not an Officer stated a reason for Arresting a Civilian. Important for evaluating wrongful arrest Allegations.',
			'FldNotes' => 'Did [the officer] verbally state a reason why he arrested [this Subject]?  ',
			'FldForeignTable' => '0',
			'FldForeignMin' => '11',
			'FldForeignMax' => '11',
			'FldForeign2Min' => '0',
			'FldForeign2Max' => '0',
			'FldValues' => 'Y;N;?',
			'FldDataLength' => '1',
			'FldCharSupport' => ',Letters,Keyboard,',
			'FldKeyType' => 'Non',
			'FldKeyStruct' => 'Simple',
			'FldCompareSame' => '130'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 860,
			'FldDatabase' => '1',
			'FldTable' => '116',
			'FldOrd' => '1',
			'FldSpecSource' => '0',
			'FldName' => 'AgainstAnimal',
			'FldEng' => 'Against Animal',
			'FldDesc' => 'Indicates that this use of Force was directed against a non-human pet or animal. Important for identifying and tracking animal cruelty Allegations.',
			'FldNotes' => 'IF "Yes" force was used against an animal, and "Yes" this is allegation-worthy excessive use of force, THEN this is an Animal Cruelty Allegation.',
			'FldForeignTable' => '0',
			'FldForeignMin' => '11',
			'FldForeignMax' => '11',
			'FldForeign2Min' => '0',
			'FldForeign2Max' => '0',
			'FldValues' => 'Y;N;?',
			'FldDataLength' => '1',
			'FldCharSupport' => ',',
			'FldKeyStruct' => 'Simple',
			'FldCompareSame' => '130'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 1116,
			'FldDatabase' => '1',
			'FldTable' => '112',
			'FldOrd' => '12',
			'FldSpecSource' => '0',
			'FldName' => 'OfficerInjuredDesc',
			'FldEng' => 'Officer Injury Descriptions',
			'FldDesc' => 'Further describes Officers\' injuries incurred during a specific Use of Force. This is important for tracking an acknowledging the fact that there is more than one side to every story.',
			'FldForeignTable' => '0',
			'FldForeignMin' => '0',
			'FldForeignMax' => '0',
			'FldForeign2Min' => '0',
			'FldForeign2Max' => '0',
			'FldDataLength' => '0',
			'FldCharSupport' => ',Letters,Numbers,Keyboard,',
			'FldOpts' => '7'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 1372,
			'FldDatabase' => '1',
			'FldTable' => '106',
			'FldOrd' => '3',
			'FldSpecType' => 'Replica',
			'FldSpecSource' => '920',
			'FldName' => 'DeptID',
			'FldEng' => 'Department ID',
			'FldDesc' => 'The unique number of the Department record related to this Investigative Agency. This information helps us identify the proper Investigative Agency with jurisdiction over an OPC Complaint directed at a specific Police Department.

',
			'FldForeignTable' => '111',
			'FldForeignMin' => '0',
			'FldForeignMax' => 'N',
			'FldForeign2Min' => '11',
			'FldForeign2Max' => '11',
			'FldIsIndex' => '1',
			'FldType' => 'INT',
			'FldDataType' => 'Numeric',
			'FldDataLength' => '11',
			'FldCharSupport' => ',Numbers,',
			'FldKeyType' => ',Foreign,',
			'FldKeyStruct' => 'Simple',
			'FldEditRule' => 'NowAllowed',
			'FldNullSupport' => '0',
			'FldRequired' => '1',
			'FldCompareSame' => '130',
			'FldOpts' => '13'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 349,
			'FldDatabase' => '1',
			'FldTable' => '123',
			'FldOrd' => '3',
			'FldSpecSource' => '0',
			'FldName' => 'StatedReasonDesc',
			'FldEng' => 'What was stated reason for arrest?',
			'FldDesc' => 'The specific reason an Officer gave for making an arrest. Important for evaluating wrongful arrest Allegations.',
			'FldNotes' => 'Before the arrest happened, what specific reasons did [the officer] give for arresting [this Subject]?',
			'FldForeignTable' => '0',
			'FldForeignMin' => '11',
			'FldForeignMax' => '11',
			'FldForeign2Min' => '0',
			'FldForeign2Max' => '0',
			'FldType' => 'TEXT',
			'FldDataLength' => '0',
			'FldCharSupport' => ',Letters,Keyboard,',
			'FldKeyStruct' => 'Simple',
			'FldOpts' => '7'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 861,
			'FldDatabase' => '1',
			'FldTable' => '116',
			'FldOrd' => '2',
			'FldSpecSource' => '0',
			'FldName' => 'AnimalDesc',
			'FldEng' => 'Describe Animal',
			'FldDesc' => 'Narrative description of animal that Officer Force was directed against. Important for verifying animal cruelty Allegations.',
			'FldNotes' => 'Tells us about the animal. For example, what kind of animal is it? Is it a wild animal or stray? Or is it a family pet? Please describe.',
			'FldForeignTable' => '0',
			'FldForeignMin' => '11',
			'FldForeignMax' => '11',
			'FldForeign2Min' => '0',
			'FldForeign2Max' => '0',
			'FldDataLength' => '0',
			'FldCharSupport' => ',Letters,Numbers,',
			'FldKeyType' => 'Non',
			'FldKeyStruct' => 'Simple',
			'FldOpts' => '7'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 1117,
			'FldDatabase' => '1',
			'FldTable' => '156',
			'FldOrd' => '19',
			'FldSpecSource' => '0',
			'FldName' => 'NeglectDuty',
			'FldEng' => 'Think officer neglected duty?',
			'FldDesc' => 'Indicates whether or not the Complainant believes there is an Allegation regarding Officer inactions which did not follow appropriate policy or procedure. Such Allegation claims are central to Complaints.',
			'FldForeignTable' => '0',
			'FldForeignMin' => '0',
			'FldForeignMax' => '0',
			'FldForeign2Min' => '0',
			'FldForeign2Max' => '0',
			'FldValues' => 'Y;N;?',
			'FldDataLength' => '1',
			'FldCharSupport' => ',Letters,Keyboard,',
			'FldCompareSame' => '878800'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 1118,
			'FldDatabase' => '1',
			'FldTable' => '112',
			'FldOrd' => '9',
			'FldSpecSource' => '0',
			'FldName' => 'TriedOtherWays',
			'FldEng' => 'Previously attempted to submit?',
			'FldDesc' => 'Indicates whether or not the Complainant previously attempted to formally submit their police complaint before using OPC. This is important for research about the use of OPC.',
			'FldForeignTable' => '0',
			'FldForeignMin' => '0',
			'FldForeignMax' => '0',
			'FldForeign2Min' => '0',
			'FldForeign2Max' => '0',
			'FldValues' => 'Y;N;?',
			'FldDataLength' => '1',
			'FldCharSupport' => ',Letters,Keyboard,',
			'FldCompareSame' => '878800'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 1119,
			'FldDatabase' => '1',
			'FldTable' => '112',
			'FldOrd' => '10',
			'FldSpecSource' => '0',
			'FldName' => 'TriedOtherWaysDesc',
			'FldEng' => 'What else have you tried?',
			'FldDesc' => 'The Complainant can describe how else they previously attempted to formally submit their police complaint before using OPC. This is important for research about the use of OPC.',
			'FldForeignTable' => '0',
			'FldForeignMin' => '0',
			'FldForeignMax' => '0',
			'FldForeign2Min' => '0',
			'FldForeign2Max' => '0',
			'FldDataLength' => '0',
			'FldCharSupport' => ',Letters,Numbers,Keyboard,',
			'FldOpts' => '7'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 352,
			'FldDatabase' => '1',
			'FldTable' => '123',
			'FldOrd' => '5',
			'FldSpecSource' => '0',
			'FldName' => 'SITA',
			'FldEng' => 'Was this a Search Incident To Arrest? (Admin)',
			'FldDesc' => 'Indicates whether or not Administrators determine that an Officer searched a Subject after an Arrest. Important for tracking searches incident to arrest. ',
			'FldNotes' => 'Commonly known as Search Incident To Arrest (SITA) or the Chimel rule, is a legal principle that allows police to perform a warrantless search of an arrested person, and the area within the arrestee--s immediate control, in the interest of officer safety, the prevention of escape, and the destruction of evidence.',
			'FldForeignTable' => '0',
			'FldForeignMin' => '11',
			'FldForeignMax' => '11',
			'FldForeign2Min' => '0',
			'FldForeign2Max' => '0',
			'FldValues' => 'Y;N;?',
			'FldDataLength' => '1',
			'FldCharSupport' => ',Letters,Keyboard,',
			'FldKeyType' => 'Non',
			'FldKeyStruct' => 'Simple',
			'FldCompareSame' => '130'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 864,
			'FldDatabase' => '1',
			'FldTable' => '115',
			'FldOrd' => '4',
			'FldSpecSource' => '0',
			'FldName' => 'ForcibleEntry',
			'FldEng' => 'Incident began with forcible entry?',
			'FldDesc' => 'Indicates that the Incident involved the use of a forcible entry, SWAT raids, or drug task force. Important for evaluating SWAT incidents and trends.',
			'FldNotes' => 'This should only appear as an option if users selects from Home or Private Residence; Workplace; College Dorm from Scene Type options.',
			'FldForeignMin' => '11',
			'FldForeignMax' => '11',
			'FldForeign2Min' => '0',
			'FldForeign2Max' => '0',
			'FldValues' => 'Y;N;?',
			'FldDataLength' => '1',
			'FldCharSupport' => ',',
			'FldNullSupport' => '0',
			'FldCompareSame' => '878800'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 865,
			'FldDatabase' => '1',
			'FldTable' => '0',
			'FldOrd' => '43',
			'FldSpecType' => 'Generic',
			'FldSpecSource' => '0',
			'FldName' => 'Gender',
			'FldEng' => 'Gender',
			'FldForeignTable' => '0',
			'FldForeignMin' => '11',
			'FldForeignMax' => '11',
			'FldForeign2Min' => '0',
			'FldForeign2Max' => '0',
			'FldValues' => 'M;F;?',
			'FldDataLength' => '1',
			'FldCharSupport' => ',Letters,',
			'FldKeyType' => 'Non',
			'FldKeyStruct' => 'Simple',
			'FldCompareSame' => '130'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 1121,
			'FldDatabase' => '1',
			'FldTable' => '112',
			'FldOrd' => '20',
			'FldSpecSource' => '0',
			'FldName' => 'HowHear',
			'FldEng' => 'How Did You Hear About Us',
			'FldDesc' => 'Indicates how the Complainant heard about OpenPolice.org. This is important for internal understanding of OPC marketing strategies.',
			'FldForeignTable' => '0',
			'FldForeignMin' => '0',
			'FldForeignMax' => '0',
			'FldForeign2Min' => '0',
			'FldForeign2Max' => '0',
			'FldDataLength' => '0',
			'FldCharSupport' => ',Letters,Numbers,Keyboard,',
			'FldCompareSame' => '878800',
			'FldOpts' => '13'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 866,
			'FldDatabase' => '1',
			'FldTable' => '0',
			'FldSpecType' => 'Generic',
			'FldSpecSource' => '0',
			'FldName' => 'ComplaintID',
			'FldEng' => 'Complaint ID',
			'FldDesc' => 'The primary ID of the Complaint record related to the this table\'s record.',
			'FldForeignTable' => '112',
			'FldForeignMin' => '11',
			'FldForeignMax' => '11',
			'FldForeign2Min' => '0',
			'FldForeign2Max' => '0',
			'FldIsIndex' => '1',
			'FldType' => 'INT',
			'FldDataType' => 'Numeric',
			'FldDataLength' => '11',
			'FldCharSupport' => ',Numbers,',
			'FldKeyType' => 'Foreign',
			'FldKeyStruct' => 'Simple',
			'FldValuesEnteredBy' => 'System',
			'FldCompareSame' => '130'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 1122,
			'FldDatabase' => '1',
			'FldTable' => '112',
			'FldOrd' => '13',
			'FldSpecSource' => '0',
			'FldName' => 'AttorneyHas',
			'FldEng' => 'Do you have an attorney?',
			'FldDesc' => 'Indicates whether or not the Complainant is already represented by an attorney. This is important for understanding the incident\'s legal situation and as a safety check to minimize risks.',
			'FldNotes' => 'eg. http://www.aclupa.org/our-work/legal/fileacomplaint/electronic-complaint-form/',
			'FldForeignTable' => '0',
			'FldForeignMin' => '0',
			'FldForeignMax' => '0',
			'FldForeign2Min' => '0',
			'FldForeign2Max' => '0',
			'FldValues' => 'Y;N;?',
			'FldDataLength' => '1',
			'FldCharSupport' => ',Letters,',
			'FldRequired' => '1',
			'FldCompareSame' => '878800'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 867,
			'FldDatabase' => '1',
			'FldTable' => '0',
			'FldOrd' => '1',
			'FldSpecType' => 'Generic',
			'FldSpecSource' => '0',
			'FldName' => 'ComplimentID',
			'FldEng' => 'Compliment ID',
			'FldDesc' => 'The primary ID of the Compliment record related to the this table\'s record.',
			'FldForeignTable' => '134',
			'FldForeignMin' => '11',
			'FldForeignMax' => '11',
			'FldForeign2Min' => '0',
			'FldForeign2Max' => '0',
			'FldIsIndex' => '1',
			'FldType' => 'INT',
			'FldDataType' => 'Numeric',
			'FldDataLength' => '11',
			'FldCharSupport' => ',Numbers,',
			'FldKeyType' => 'Foreign',
			'FldKeyStruct' => 'Simple',
			'FldEditRule' => 'NowNot',
			'FldValuesEnteredBy' => 'System',
			'FldCompareSame' => '130'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 1123,
			'FldDatabase' => '1',
			'FldTable' => '112',
			'FldOrd' => '15',
			'FldSpecSource' => '0',
			'FldName' => 'AttorneyWant',
			'FldEng' => 'Wants An Attorney',
			'FldDesc' => 'Indicates whether or not the Complainant would like an attorney. This is important for understanding the incident\'s legal situation and as a safety check to minimize potential risks of using OPC.',
			'FldForeignTable' => '0',
			'FldForeignMin' => '0',
			'FldForeignMax' => '0',
			'FldForeign2Min' => '0',
			'FldForeign2Max' => '0',
			'FldValues' => 'Y;N;?',
			'FldDataLength' => '1',
			'FldCharSupport' => ',Letters,Keyboard,',
			'FldCompareSame' => '878800'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 868,
			'FldDatabase' => '1',
			'FldTable' => '0',
			'FldOrd' => '44',
			'FldSpecType' => 'Generic',
			'FldSpecSource' => '0',
			'FldName' => 'Age',
			'FldEng' => 'Age',
			'FldForeignTable' => '0',
			'FldForeignMin' => '11',
			'FldForeignMax' => '11',
			'FldForeign2Min' => '0',
			'FldForeign2Max' => '0',
			'FldValues' => '0-15;16-24;24-34;35-44;45-54;55-64;65-74;75-84;85+',
			'FldType' => 'INT',
			'FldDataType' => 'Numeric',
			'FldDataLength' => '3',
			'FldCharSupport' => ',Numbers,',
			'FldKeyType' => 'Non',
			'FldKeyStruct' => 'Simple',
			'FldCompareSame' => '130'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 1124,
			'FldDatabase' => '1',
			'FldTable' => '112',
			'FldOrd' => '17',
			'FldSpecSource' => '0',
			'FldName' => 'AllChargesResolved',
			'FldEng' => 'Have these charges been resolved?',
			'FldDesc' => 'Indicates whether or not all criminal charges have been resolved. This is important for understanding the Incident\'s legal situation and as a safety check to minimize potential risks of using OPC.',
			'FldForeignTable' => '0',
			'FldForeignMin' => '0',
			'FldForeignMax' => '0',
			'FldForeign2Min' => '0',
			'FldForeign2Max' => '0',
			'FldValues' => 'Y;N;?',
			'FldDataLength' => '1',
			'FldCharSupport' => ',Letters,Keyboard,',
			'FldCompareSame' => '878800'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 869,
			'FldDatabase' => '1',
			'FldTable' => '0',
			'FldOrd' => '45',
			'FldSpecType' => 'Generic',
			'FldSpecSource' => '0',
			'FldName' => 'Race',
			'FldEng' => 'Race',
			'FldForeignTable' => '0',
			'FldForeignMin' => '11',
			'FldForeignMax' => '11',
			'FldForeign2Min' => '0',
			'FldForeign2Max' => '0',
			'FldValues' => 'Def::Races',
			'FldType' => 'INT',
			'FldDataType' => 'Numeric',
			'FldDataLength' => '3',
			'FldCharSupport' => ',Numbers,',
			'FldKeyType' => 'Non',
			'FldKeyStruct' => 'Simple',
			'FldCompareSame' => '130'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 1125,
			'FldDatabase' => '1',
			'FldTable' => '112',
			'FldOrd' => '18',
			'FldSpecSource' => '0',
			'FldName' => 'UnresolvedChargesActions',
			'FldEng' => 'Unresolved Charges, But Use OPC Anyway',
			'FldDesc' => 'Indicates whether or not the Complainant has explicitly chosen to use OPC despite legal situations related to the Incident. This is important for understanding the incident\'s legal situation and as a safety check to minimize potential risks of using OPC.',
			'FldForeignTable' => '0',
			'FldForeignMin' => '0',
			'FldForeignMax' => '0',
			'FldForeign2Min' => '0',
			'FldForeign2Max' => '0',
			'FldValues' => 'Def::Unresolved Charges Actions',
			'FldDefault' => '0',
			'FldType' => 'INT',
			'FldDataType' => 'Numeric',
			'FldDataLength' => '3',
			'FldCharSupport' => ',Numbers,',
			'FldCompareSame' => '878800'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 1126,
			'FldDatabase' => '1',
			'FldTable' => '102',
			'FldOrd' => '10',
			'FldSpecSource' => '0',
			'FldName' => 'HadVehicle',
			'FldEng' => 'Using Vehicle at Start',
			'FldDesc' => 'Indicates whether or not the Complainant intends to provide information about the vehicle this Civilian was in. This is important for later reloading Complaint forms with the user\'s previous response.',
			'FldForeignTable' => '0',
			'FldForeignMin' => '0',
			'FldForeignMax' => '0',
			'FldForeign2Min' => '0',
			'FldForeign2Max' => '0',
			'FldValues' => 'Y;N;?',
			'FldDataLength' => '1',
			'FldCharSupport' => ',Letters,Keyboard,',
			'FldCompareSame' => '878800'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 1127,
			'FldDatabase' => '1',
			'FldTable' => '104',
			'FldOrd' => '8',
			'FldSpecSource' => '0',
			'FldName' => 'HadVehicle',
			'FldEng' => 'Using Vehicle at Start',
			'FldDesc' => 'Indicates whether or not the Complainant intends to provide information about the vehicle this Officer was in. This is important for later reloading Complaint forms with the user\'s previous response.',
			'FldForeignTable' => '0',
			'FldForeignMin' => '0',
			'FldForeignMax' => '0',
			'FldForeign2Min' => '0',
			'FldForeign2Max' => '0',
			'FldValues' => 'Y;N;?',
			'FldDataLength' => '1',
			'FldCharSupport' => ',Letters,Keyboard,',
			'FldCompareSame' => '878800'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 616,
			'FldDatabase' => '1',
			'FldTable' => '111',
			'FldOrd' => '5',
			'FldSpecType' => 'Replica',
			'FldSpecSource' => '837',
			'FldName' => 'Email',
			'FldEng' => 'Email',
			'FldDesc' => 'The valid public-facing email address for Police Departments. If we don\'t have a direct email contact with an Internal Affairs Staffer, this will be the primary way we contact Police Departments.',
			'FldNotes' => 'This is the email that would be featured on their OPC web page for this Department. We might include this in addition to a general Internal Affairs email contact, if one exists.',
			'FldForeignTable' => '0',
			'FldForeignMin' => '11',
			'FldForeignMax' => '11',
			'FldForeign2Min' => '0',
			'FldForeign2Max' => '0',
			'FldDataLength' => '0',
			'FldCharSupport' => ',Letters,Keyboard,Numbers,',
			'FldInputMask' => 'AAA@AAA.AAA',
			'FldKeyType' => 'Non',
			'FldKeyStruct' => 'Simple',
			'FldCompareSame' => '6'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 1128,
			'FldDatabase' => '1',
			'FldTable' => '104',
			'FldOrd' => '7',
			'FldSpecSource' => '0',
			'FldName' => 'GiveName',
			'FldEng' => 'Officer identity known?',
			'FldDesc' => 'Indicates whether or not the Complainant intends to provide information about the name and/or badge number(s) of this Officer. This is important for reloading Complaint forms with the user\'s previous response.',
			'FldForeignTable' => '0',
			'FldForeignMin' => '0',
			'FldForeignMax' => '0',
			'FldForeign2Min' => '0',
			'FldForeign2Max' => '0',
			'FldValues' => 'Y;N;?',
			'FldDataLength' => '1',
			'FldCharSupport' => ',Letters,Keyboard,',
			'FldCompareSame' => '878800',
			'FldOpts' => '13'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 1129,
			'FldDatabase' => '1',
			'FldTable' => '102',
			'FldOrd' => '6',
			'FldSpecSource' => '0',
			'FldName' => 'GiveName',
			'FldEng' => 'Name of civilian known?',
			'FldDesc' => 'Indicates whether or not the Complainant intends to provide information about the name of this Civilian. This is important for later reloading Complaint forms with the user\'s previous response.',
			'FldForeignTable' => '0',
			'FldForeignMin' => '0',
			'FldForeignMax' => '0',
			'FldForeign2Min' => '0',
			'FldForeign2Max' => '0',
			'FldValues' => 'Y;N;?',
			'FldDataLength' => '1',
			'FldCharSupport' => ',Letters,Keyboard,',
			'FldCompareSame' => '878800'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 618,
			'FldDatabase' => '1',
			'FldTable' => '111',
			'FldOrd' => '6',
			'FldSpecType' => 'Replica',
			'FldSpecSource' => '839',
			'FldName' => 'PhoneWork',
			'FldEng' => 'Work Phone',
			'FldDesc' => 'The public contact number where Police Departments can be reached.',
			'FldNotes' => 'We might need to add an "extension" field for some work phone numbers.',
			'FldForeignTable' => '0',
			'FldForeignMin' => '11',
			'FldForeignMax' => '11',
			'FldForeign2Min' => '0',
			'FldForeign2Max' => '0',
			'FldDataLength' => '20',
			'FldCharSupport' => ',Letters,Keyboard,Numbers,',
			'FldInputMask' => '###-###-#### [x###]',
			'FldKeyType' => 'Non',
			'FldKeyStruct' => 'Simple'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 1130,
			'FldDatabase' => '1',
			'FldTable' => '102',
			'FldOrd' => '7',
			'FldSpecSource' => '0',
			'FldName' => 'GiveContactInfo',
			'FldEng' => 'Contact information known?',
			'FldDesc' => 'Indicates whether or not the Complainant intends to provide any contact information for this Civilian. This is important for later reloading Complaint forms with the user\'s previous response.',
			'FldForeignTable' => '0',
			'FldForeignMin' => '0',
			'FldForeignMax' => '0',
			'FldForeign2Min' => '0',
			'FldForeign2Max' => '0',
			'FldValues' => 'Y;N;?',
			'FldDataLength' => '1',
			'FldCharSupport' => ',Letters,Keyboard,',
			'FldCompareSame' => '878800'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 620,
			'FldDatabase' => '1',
			'FldTable' => '111',
			'FldOrd' => '7',
			'FldSpecType' => 'Replica',
			'FldSpecSource' => '841',
			'FldName' => 'Address',
			'FldEng' => 'Street Address',
			'FldDesc' => 'The first line of the postal location where a Police Department receives mail. This is an integral component of a Police Department\'s complete address.',
			'FldForeignTable' => '0',
			'FldForeignMin' => '11',
			'FldForeignMax' => '11',
			'FldForeign2Min' => '0',
			'FldForeign2Max' => '0',
			'FldDataLength' => '0',
			'FldCharSupport' => ',Letters,Keyboard,Numbers,',
			'FldKeyType' => 'Non',
			'FldKeyStruct' => 'Simple'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 621,
			'FldDatabase' => '1',
			'FldTable' => '111',
			'FldOrd' => '8',
			'FldSpecType' => 'Replica',
			'FldSpecSource' => '842',
			'FldName' => 'Address2',
			'FldEng' => 'Street Address 2',
			'FldDesc' => 'The second line, if needed, of the postal location where a Police Department receives mail. This is an integral component of a Police Department\'s complete address.',
			'FldForeignTable' => '0',
			'FldForeignMin' => '11',
			'FldForeignMax' => '11',
			'FldForeign2Min' => '0',
			'FldForeign2Max' => '0',
			'FldDataLength' => '0',
			'FldCharSupport' => ',Letters,Keyboard,Numbers,',
			'FldKeyType' => 'Non',
			'FldKeyStruct' => 'Simple'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 877,
			'FldDatabase' => '1',
			'FldTable' => '0',
			'FldOrd' => '47',
			'FldSpecType' => 'Generic',
			'FldSpecSource' => '838',
			'FldName' => 'Height',
			'FldEng' => 'Height',
			'FldNotes' => 'Converted to Inches',
			'FldForeignTable' => '0',
			'FldForeignMin' => '11',
			'FldForeignMax' => '11',
			'FldForeign2Min' => '0',
			'FldForeign2Max' => '0',
			'FldType' => 'INT',
			'FldDataType' => 'Numeric',
			'FldDataLength' => '3',
			'FldCharSupport' => ',Numbers,',
			'FldKeyType' => 'Non',
			'FldKeyStruct' => 'Simple',
			'FldCompareSame' => '6'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 1133,
			'FldDatabase' => '1',
			'FldTable' => '157',
			'FldSpecSource' => '0',
			'FldName' => 'CivID',
			'FldEng' => 'Civilian ID',
			'FldDesc' => 'This helps to link one Civilian to one Allegation, via the Civilian\'s primary ID.',
			'FldForeignTable' => '102',
			'FldForeignMin' => '0',
			'FldForeignMax' => 'N',
			'FldForeign2Min' => '0',
			'FldForeign2Max' => 'N',
			'FldType' => 'INT',
			'FldDataType' => 'Numeric',
			'FldDataLength' => '0',
			'FldCharSupport' => ',Numbers,',
			'FldKeyType' => ',Primary,Foreign,',
			'FldKeyStruct' => 'Composite',
			'FldValuesEnteredBy' => 'System',
			'FldCompareSame' => '878800',
			'FldCompareOther' => '878800',
			'FldOpts' => '13'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 622,
			'FldDatabase' => '1',
			'FldTable' => '111',
			'FldOrd' => '9',
			'FldSpecType' => 'Replica',
			'FldSpecSource' => '843',
			'FldName' => 'AddressCity',
			'FldEng' => 'City',
			'FldDesc' => 'The metropolitan area where a Police Department receives mail. This is an integral component of a Police Department\'s complete address.',
			'FldForeignTable' => '0',
			'FldForeignMin' => '11',
			'FldForeignMax' => '11',
			'FldForeign2Min' => '0',
			'FldForeign2Max' => '0',
			'FldDataLength' => '0',
			'FldCharSupport' => ',Letters,Keyboard,',
			'FldKeyType' => 'Non',
			'FldKeyStruct' => 'Simple',
			'FldCompareSame' => '130'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 1134,
			'FldDatabase' => '1',
			'FldTable' => '157',
			'FldOrd' => '1',
			'FldSpecSource' => '0',
			'FldName' => 'AlleID',
			'FldEng' => 'Allegation ID',
			'FldDesc' => 'This helps to link one Civilian to one Allegation, via the Allegation\'s primary ID.',
			'FldForeignTable' => '113',
			'FldForeignMin' => '0',
			'FldForeignMax' => 'N',
			'FldForeign2Min' => '0',
			'FldForeign2Max' => 'N',
			'FldType' => 'INT',
			'FldDataType' => 'Numeric',
			'FldDataLength' => '0',
			'FldCharSupport' => ',Numbers,',
			'FldKeyType' => ',Primary,Foreign,',
			'FldKeyStruct' => 'Composite',
			'FldValuesEnteredBy' => 'System',
			'FldCompareSame' => '878800',
			'FldCompareOther' => '878800',
			'FldOpts' => '13'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 623,
			'FldDatabase' => '1',
			'FldTable' => '111',
			'FldOrd' => '10',
			'FldSpecType' => 'Replica',
			'FldSpecSource' => '844',
			'FldName' => 'AddressState',
			'FldEng' => 'State',
			'FldDesc' => 'The state or district where a Police Department receives mail. This is an integral component of a Police Department\'s complete address.',
			'FldForeignTable' => '0',
			'FldForeignMin' => '11',
			'FldForeignMax' => '11',
			'FldForeign2Min' => '0',
			'FldForeign2Max' => '0',
			'FldDataLength' => '2',
			'FldCharSupport' => ',Letters,',
			'FldInputMask' => 'AA',
			'FldKeyType' => 'Non',
			'FldKeyStruct' => 'Simple',
			'FldCompareSame' => '6'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 1135,
			'FldDatabase' => '1',
			'FldTable' => '158',
			'FldSpecSource' => '0',
			'FldName' => 'OffID',
			'FldEng' => 'Officer ID',
			'FldDesc' => 'This helps to link one Officer to one Allegation, via the Officer\'s primary ID.',
			'FldForeignTable' => '104',
			'FldForeignMin' => '0',
			'FldForeignMax' => 'N',
			'FldForeign2Min' => '0',
			'FldForeign2Max' => 'N',
			'FldType' => 'INT',
			'FldDataType' => 'Numeric',
			'FldDataLength' => '0',
			'FldCharSupport' => ',Numbers,',
			'FldKeyType' => ',Primary,Foreign,',
			'FldKeyStruct' => 'Composite',
			'FldValuesEnteredBy' => 'System',
			'FldCompareSame' => '878800',
			'FldCompareOther' => '878800',
			'FldOpts' => '13'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 624,
			'FldDatabase' => '1',
			'FldTable' => '111',
			'FldOrd' => '11',
			'FldSpecType' => 'Replica',
			'FldSpecSource' => '845',
			'FldName' => 'AddressZip',
			'FldEng' => 'Zip Code',
			'FldDesc' => 'The postal code where a Police Department receives mail. This is an integral component of a Police Department\'s complete address.',
			'FldForeignTable' => '0',
			'FldForeignMin' => '11',
			'FldForeignMax' => '11',
			'FldForeign2Min' => '0',
			'FldForeign2Max' => '0',
			'FldDataLength' => '10',
			'FldCharSupport' => ',Keyboard,Numbers,',
			'FldInputMask' => '#####[-####]',
			'FldKeyType' => 'Non',
			'FldKeyStruct' => 'Simple',
			'FldCompareSame' => '130'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 1136,
			'FldDatabase' => '1',
			'FldTable' => '158',
			'FldOrd' => '1',
			'FldSpecSource' => '0',
			'FldName' => 'AlleID',
			'FldEng' => 'Allegation ID',
			'FldDesc' => 'This helps to link one Officer to one Allegation, via the Allegation\'s primary ID.',
			'FldForeignTable' => '113',
			'FldForeignMin' => '0',
			'FldForeignMax' => 'N',
			'FldForeign2Min' => '0',
			'FldForeign2Max' => 'N',
			'FldType' => 'INT',
			'FldDataType' => 'Numeric',
			'FldDataLength' => '0',
			'FldCharSupport' => ',Numbers,',
			'FldKeyType' => ',Primary,Foreign,',
			'FldKeyStruct' => 'Composite',
			'FldValuesEnteredBy' => 'System',
			'FldCompareSame' => '878800',
			'FldCompareOther' => '878800',
			'FldOpts' => '13'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 369,
			'FldDatabase' => '1',
			'FldTable' => '123',
			'FldOrd' => '6',
			'FldSpecSource' => '0',
			'FldName' => 'NoChargesFiled',
			'FldEng' => 'Were all charges dropped upon release?',
			'FldDesc' => 'Indicates that Subject was placed under Arrest, but no official charges were filed. Important for identifying and evaluating wrongful arrest Allegations.',
			'FldNotes' => 'Check with Attorney for precise terminology and common usage.',
			'FldForeignTable' => '0',
			'FldForeignMin' => '11',
			'FldForeignMax' => '11',
			'FldForeign2Min' => '0',
			'FldForeign2Max' => '0',
			'FldValues' => 'Y;N;?',
			'FldDataLength' => '1',
			'FldCharSupport' => ',Letters,Keyboard,',
			'FldKeyStruct' => 'Simple',
			'FldCompareSame' => '130'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 370,
			'FldDatabase' => '1',
			'FldTable' => '112',
			'FldOrd' => '3',
			'FldSpecType' => 'Replica',
			'FldSpecSource' => '927',
			'FldName' => 'IncidentID',
			'FldEng' => 'Incident ID',
			'FldDesc' => 'The unique number of the Incident record related to this Complaint. This number helps us identify the Incident that this complaint documents. It might also help us associate additional Complaints with the same Incident.',
			'FldNotes' => 'More than one Complaint record can be associated with a single Incident record.',
			'FldForeignTable' => '114',
			'FldForeignMax' => 'N',
			'FldType' => 'INT',
			'FldDataType' => 'Numeric',
			'FldDataLength' => '11',
			'FldCharSupport' => ',Numbers,',
			'FldKeyType' => ',Foreign,',
			'FldNullSupport' => '0',
			'FldCompareSame' => '878800',
			'FldOpts' => '13'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 371,
			'FldDatabase' => '1',
			'FldTable' => '113',
			'FldSpecType' => 'Replica',
			'FldSpecSource' => '866',
			'FldName' => 'ComplaintID',
			'FldEng' => 'Complaint ID',
			'FldDesc' => 'The unique number of the Complaint record related to this Allegation, vital to associating with all other Complaint data.',
			'FldForeignTable' => '112',
			'FldForeignMin' => '0',
			'FldForeignMax' => 'N',
			'FldForeign2Min' => '11',
			'FldForeign2Max' => '11',
			'FldIsIndex' => '1',
			'FldType' => 'INT',
			'FldDataType' => 'Numeric',
			'FldDataLength' => '11',
			'FldCharSupport' => ',Numbers,',
			'FldKeyType' => ',Foreign,',
			'FldKeyStruct' => 'Simple',
			'FldEditRule' => 'NowAllowed',
			'FldNullSupport' => '0',
			'FldValuesEnteredBy' => 'System',
			'FldRequired' => '1',
			'FldCompareSame' => '130',
			'FldOpts' => '13'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 1139,
			'FldDatabase' => '1',
			'FldTable' => '160',
			'FldSpecSource' => '0',
			'FldName' => 'OffID',
			'FldEng' => 'Officer ID',
			'FldDesc' => 'This helps to link one Officer to one Event (which represents one Stop, Search, Use of Force, or Arrest), via the Officer\'s primary ID.',
			'FldForeignTable' => '104',
			'FldForeignMin' => '0',
			'FldForeignMax' => 'N',
			'FldForeign2Min' => '0',
			'FldForeign2Max' => 'N',
			'FldType' => 'INT',
			'FldDataType' => 'Numeric',
			'FldDataLength' => '0',
			'FldCharSupport' => ',Numbers,',
			'FldKeyType' => ',Primary,Foreign,',
			'FldKeyStruct' => 'Composite',
			'FldValuesEnteredBy' => 'System',
			'FldCompareSame' => '878800',
			'FldCompareOther' => '878800',
			'FldOpts' => '13'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 628,
			'FldDatabase' => '1',
			'FldTable' => '153',
			'FldSpecType' => 'Replica',
			'FldSpecSource' => '865',
			'FldName' => 'Gender',
			'FldEng' => 'Gender',
			'FldDesc' => 'The sex classification of a Civilian or Officer. This category is used to help verify a Civilian or Officer\'s identity.',
			'FldNotes' => 'Depending on who is selecting, this might be self-ascribed or Complainant-selected for another Civilian. Question should read, "What is the gender of the subject of the alleged misconduct?" Options should be Male, Female, and Other (please specify)',
			'FldForeignTable' => '0',
			'FldForeignMin' => '11',
			'FldForeignMax' => '11',
			'FldForeign2Min' => '0',
			'FldForeign2Max' => '0',
			'FldValues' => 'M;F;?',
			'FldDataLength' => '1',
			'FldCharSupport' => ',Letters,',
			'FldKeyStruct' => 'Simple',
			'FldCompareSame' => '130'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 1140,
			'FldDatabase' => '1',
			'FldTable' => '160',
			'FldOrd' => '1',
			'FldSpecSource' => '0',
			'FldName' => 'EveID',
			'FldEng' => 'Event ID',
			'FldDesc' => 'This helps to link one Officer to one Event (which represents one Stop, Search, Use of Force, or Arrest), via the Event\'s primary ID.',
			'FldForeignTable' => '137',
			'FldForeignMin' => '0',
			'FldForeignMax' => 'N',
			'FldForeign2Min' => '0',
			'FldForeign2Max' => 'N',
			'FldType' => 'INT',
			'FldDataType' => 'Numeric',
			'FldDataLength' => '0',
			'FldCharSupport' => ',Numbers,',
			'FldKeyType' => ',Primary,Foreign,',
			'FldKeyStruct' => 'Composite',
			'FldValuesEnteredBy' => 'System',
			'FldCompareSame' => '878800',
			'FldCompareOther' => '878800',
			'FldOpts' => '13'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 373,
			'FldDatabase' => '1',
			'FldTable' => '102',
			'FldSpecType' => 'Replica',
			'FldSpecSource' => '866',
			'FldName' => 'ComplaintID',
			'FldEng' => 'Complaint ID',
			'FldDesc' => 'The unique number of the Complaint record related to this Civilian\'s record. Vital for associating this Civilian with other Complaint data.',
			'FldForeignTable' => '112',
			'FldForeignMin' => '11',
			'FldForeignMax' => 'N',
			'FldForeign2Min' => '0',
			'FldForeign2Max' => '11',
			'FldIsIndex' => '1',
			'FldType' => 'INT',
			'FldDataType' => 'Numeric',
			'FldDataLength' => '11',
			'FldCharSupport' => ',Numbers,',
			'FldKeyType' => ',Foreign,',
			'FldKeyStruct' => 'Simple',
			'FldEditRule' => 'NowNot',
			'FldValuesEnteredBy' => 'System',
			'FldCompareSame' => '130',
			'FldOpts' => '13'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 629,
			'FldDatabase' => '1',
			'FldTable' => '153',
			'FldOrd' => '2',
			'FldSpecType' => 'Replica',
			'FldSpecSource' => '868',
			'FldName' => 'Age',
			'FldEng' => 'Age Range',
			'FldDesc' => 'Estimated age in years of a Civilian or Officer. This information is used to verify a Civilian or Officer\'s identity.',
			'FldNotes' => 'Because the "Date of Birth" field will determine Complainant\'s age. This field should become visible only if a Civilian\'s age is unknown. The "Harmonised Standard 3" age ranges presented here: https://meta.wikimedia.org/wiki/Survey_best_practices#Age',
			'FldForeignMin' => '11',
			'FldForeignMax' => '11',
			'FldForeign2Min' => '0',
			'FldForeign2Max' => '0',
			'FldValues' => 'Def::Age Ranges',
			'FldType' => 'INT',
			'FldDataType' => 'Numeric',
			'FldDataLength' => '3',
			'FldCharSupport' => ',Numbers,',
			'FldNullSupport' => '0',
			'FldCompareSame' => '878800'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 375,
			'FldDatabase' => '1',
			'FldTable' => '114',
			'FldSpecType' => 'Replica',
			'FldSpecSource' => '866',
			'FldName' => 'ComplaintID',
			'FldEng' => 'Complaint ID',
			'FldDesc' => 'The unique number of the Complaint record related to this Incident, vital to associating with all other Complaint data.',
			'FldForeignTable' => '112',
			'FldForeignMin' => '11',
			'FldForeignMax' => '11',
			'FldForeign2Min' => '11',
			'FldForeign2Max' => 'N',
			'FldIsIndex' => '1',
			'FldType' => 'INT',
			'FldDataType' => 'Numeric',
			'FldDataLength' => '11',
			'FldCharSupport' => ',Numbers,',
			'FldKeyType' => ',Foreign,',
			'FldKeyStruct' => 'Simple',
			'FldEditRule' => 'NowAllowed',
			'FldNullSupport' => '0',
			'FldValuesEnteredBy' => 'System',
			'FldRequired' => '1',
			'FldCompareSame' => '130',
			'FldOpts' => '13'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 1143,
			'FldDatabase' => '1',
			'FldTable' => '162',
			'FldSpecSource' => '0',
			'FldName' => 'CivID',
			'FldEng' => 'Civilian ID',
			'FldDesc' => 'This helps to link one Civilian to one Event (which represents one Stop, Search, Use of Force, or Arrest), via the Civilian\'s primary ID.',
			'FldForeignTable' => '102',
			'FldForeignMin' => '0',
			'FldForeignMax' => 'N',
			'FldForeign2Min' => '0',
			'FldForeign2Max' => 'N',
			'FldType' => 'INT',
			'FldDataType' => 'Numeric',
			'FldDataLength' => '0',
			'FldCharSupport' => ',Numbers,',
			'FldKeyType' => ',Primary,Foreign,',
			'FldKeyStruct' => 'Composite',
			'FldValuesEnteredBy' => 'System',
			'FldCompareSame' => '878800',
			'FldCompareOther' => '878800',
			'FldOpts' => '13'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 632,
			'FldDatabase' => '1',
			'FldTable' => '153',
			'FldOrd' => '4',
			'FldSpecType' => 'Replica',
			'FldSpecSource' => '877',
			'FldName' => 'Height',
			'FldEng' => 'Height',
			'FldDesc' => 'Estimated height of a Civilian or Officer in feet and inches. This information might help verify a Civilian or Officer\'s identity.',
			'FldNotes' => 'We should use a tool that indicates feet and inches (not just total inches.) Most people wouldn\'t describe someone as 72 inches. They would say 6 feet. ',
			'FldForeignTable' => '0',
			'FldForeignMin' => '11',
			'FldForeignMax' => '11',
			'FldForeign2Min' => '0',
			'FldForeign2Max' => '0',
			'FldType' => 'INT',
			'FldDataType' => 'Numeric',
			'FldDataLength' => '3',
			'FldCharSupport' => ',Numbers,',
			'FldKeyStruct' => 'Simple',
			'FldCompareSame' => '6'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 1144,
			'FldDatabase' => '1',
			'FldTable' => '162',
			'FldOrd' => '1',
			'FldSpecSource' => '0',
			'FldName' => 'EveID',
			'FldEng' => 'Event ID',
			'FldDesc' => 'This helps to link one Civilian to one Event (which represents one Stop, Search, Use of Force, or Arrest), via the Event\'s primary ID.',
			'FldForeignTable' => '137',
			'FldForeignMin' => '0',
			'FldForeignMax' => 'N',
			'FldForeign2Min' => '0',
			'FldForeign2Max' => 'N',
			'FldType' => 'INT',
			'FldDataType' => 'Numeric',
			'FldDataLength' => '0',
			'FldCharSupport' => ',Numbers,',
			'FldKeyType' => ',Primary,Foreign,',
			'FldKeyStruct' => 'Composite',
			'FldValuesEnteredBy' => 'System',
			'FldCompareSame' => '878800',
			'FldCompareOther' => '878800',
			'FldOpts' => '13'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 889,
			'FldDatabase' => '1',
			'FldTable' => '116',
			'FldOrd' => '5',
			'FldSpecSource' => '0',
			'FldName' => 'GunAmmoType',
			'FldEng' => 'Type of gun ammunition',
			'FldDesc' => 'Category of ammunition an Officer used on a Subject. Important for investigating Allegations of Force and for identifying Force trends.',
			'FldNotes' => 'Only if Force Type is \'Gun\'.',
			'FldForeignTable' => '0',
			'FldForeignMin' => '11',
			'FldForeignMax' => '11',
			'FldForeign2Min' => '0',
			'FldForeign2Max' => '0',
			'FldValues' => 'Def::Gun Ammo Types',
			'FldType' => 'INT',
			'FldDataType' => 'Numeric',
			'FldDataLength' => '3',
			'FldCharSupport' => ',Numbers,',
			'FldKeyStruct' => 'Simple',
			'FldCompareSame' => '130'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 1145,
			'FldDatabase' => '1',
			'FldTable' => '163',
			'FldSpecSource' => '0',
			'FldName' => 'CivID',
			'FldEng' => 'Civilian ID',
			'FldDesc' => 'The unique number of the Civilian record being linked in this record. Vital for associating Civilians with the Vehicle.',
			'FldForeignTable' => '102',
			'FldForeignMin' => '0',
			'FldForeignMax' => '11',
			'FldForeign2Min' => '0',
			'FldForeign2Max' => '11',
			'FldType' => 'INT',
			'FldDataType' => 'Numeric',
			'FldDataLength' => '0',
			'FldCharSupport' => ',Numbers,',
			'FldKeyType' => ',Foreign,',
			'FldCompareSame' => '130',
			'FldOpts' => '13'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 890,
			'FldDatabase' => '1',
			'FldTable' => '116',
			'FldOrd' => '6',
			'FldSpecSource' => '0',
			'FldName' => 'GunDesc',
			'FldEng' => 'Gun Description',
			'FldDesc' => 'Narrative details of gun Officer used on Suspect. Important for investigating Allegations of Force and for identifying Force trends.',
			'FldNotes' => 'Only if Force Type is \'Gun\'.',
			'FldForeignTable' => '0',
			'FldForeignMin' => '11',
			'FldForeignMax' => '11',
			'FldForeign2Min' => '0',
			'FldForeign2Max' => '0',
			'FldDataLength' => '0',
			'FldCharSupport' => ',Letters,Keyboard,Numbers,',
			'FldKeyType' => 'Non',
			'FldKeyStruct' => 'Simple',
			'FldOpts' => '7'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 1146,
			'FldDatabase' => '1',
			'FldTable' => '163',
			'FldOrd' => '1',
			'FldSpecSource' => '0',
			'FldName' => 'VehicID',
			'FldEng' => 'Vehicle ID',
			'FldDesc' => 'The unique number of the Vehicle record being linked in this record. Vital for associating Civilians with the Vehicle.',
			'FldForeignTable' => '152',
			'FldForeignMin' => '0',
			'FldForeignMax' => 'N',
			'FldForeign2Min' => '11',
			'FldForeign2Max' => '11',
			'FldType' => 'INT',
			'FldDataType' => 'Numeric',
			'FldDataLength' => '0',
			'FldCharSupport' => ',Numbers,',
			'FldKeyType' => ',Foreign,',
			'FldCompareSame' => '130',
			'FldOpts' => '13'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 1147,
			'FldDatabase' => '1',
			'FldTable' => '163',
			'FldOrd' => '2',
			'FldSpecSource' => '0',
			'FldName' => 'Role',
			'FldEng' => 'Vehicle Role',
			'FldDesc' => 'When a Vehicle is associated with multiple Civilians, this information is important for identifier for which person was driving a Vehicle.',
			'FldForeignMin' => 'N',
			'FldForeignMax' => 'N',
			'FldForeign2Min' => 'N',
			'FldForeign2Max' => 'N',
			'FldValues' => 'Def::Vehicle Roles',
			'FldType' => 'INT',
			'FldDataType' => 'Numeric',
			'FldDataLength' => '0',
			'FldCharSupport' => ',Numbers,',
			'FldNullSupport' => '0',
			'FldCompareSame' => '878800'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 1148,
			'FldDatabase' => '1',
			'FldTable' => '112',
			'FldOrd' => '32',
			'FldSpecSource' => '0',
			'FldName' => 'TreeVersion',
			'FldEng' => 'Tree Version',
			'FldDesc' => 'Indicates which precise version number of this software was running at the time of this Complaint\'s submission. This is important for internal use, quality control, and potential debugging.',
			'FldForeignTable' => '0',
			'FldForeignMin' => '0',
			'FldForeignMax' => '0',
			'FldForeign2Min' => '0',
			'FldForeign2Max' => '0',
			'FldDataLength' => '50',
			'FldCharSupport' => ',Letters,Numbers,Keyboard,',
			'FldCompareSame' => '54925',
			'FldOpts' => '13'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 1150,
			'FldDatabase' => '1',
			'FldTable' => '112',
			'FldOrd' => '14',
			'FldSpecSource' => '0',
			'FldName' => 'AttorneyOKedOPC',
			'FldEng' => 'Attorney Condoned Publishing via OPC',
			'FldDesc' => 'Indicates whether or not the Complainant\'s attorney explicitly approved their use of OpenPolice.org. This is an important safety check to minimize potential risks of using OPC.',
			'FldForeignTable' => '0',
			'FldForeignMin' => '0',
			'FldForeignMax' => '0',
			'FldForeign2Min' => '0',
			'FldForeign2Max' => '0',
			'FldValues' => 'Y;N;?',
			'FldDataLength' => '1',
			'FldCharSupport' => ',Letters,Keyboard,',
			'FldCompareSame' => '54925'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 1151,
			'FldDatabase' => '1',
			'FldTable' => '112',
			'FldOrd' => '16',
			'FldSpecSource' => '0',
			'FldName' => 'AnyoneCharged',
			'FldEng' => 'Anyone involved charged with crime?',
			'FldDesc' => 'Indicates whether or not any Civilians were charged with a crime. This is important for understanding the Incident\'s legal situation and as a safety check to minimize potential risks of using OPC.',
			'FldForeignMin' => '0',
			'FldForeignMax' => '0',
			'FldForeign2Min' => '0',
			'FldForeign2Max' => '0',
			'FldValues' => 'Y;N;?',
			'FldDataLength' => '1',
			'FldCharSupport' => ',Letters,Keyboard,',
			'FldNullSupport' => '0',
			'FldCompareSame' => '54925'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 386,
			'FldDatabase' => '1',
			'FldTable' => '113',
			'FldOrd' => '1',
			'FldSpecSource' => '0',
			'FldName' => 'Type',
			'FldEng' => 'Allegation Type',
			'FldDesc' => 'The specific misconduct accusations cited by Complainants against one or more Officers related to a single Incident. Essential for statistical purposes and for prioritizing new Complaints. ',
			'FldNotes' => 'Asked at the end during Phase 4: Policy or Procedure, Courtesy, Intimidating Display Of Weapon, Sexual Assault, Conduct Unbecoming an Officer (Neglect of Duty is part of Policy/Procedure)',
			'FldForeignTable' => '0',
			'FldForeignMin' => '11',
			'FldForeignMax' => '11',
			'FldForeign2Min' => '0',
			'FldForeign2Max' => '0',
			'FldValues' => 'Def::Allegation Type',
			'FldType' => 'INT',
			'FldDataType' => 'Numeric',
			'FldDataLength' => '3',
			'FldCharSupport' => ',Numbers,',
			'FldKeyType' => 'Non',
			'FldKeyStruct' => 'Simple',
			'FldNullSupport' => '0',
			'FldCompareSame' => '130'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 1154,
			'FldDatabase' => '1',
			'FldTable' => '137',
			'FldOrd' => '2',
			'FldSpecSource' => '0',
			'FldName' => 'Type',
			'FldEng' => 'Event Type',
			'FldDesc' => 'Indicates whether this record is the type of Event representing a Stop, Search, Use of Force, or Arrest. This is important for determining how to handle this Event throughout the system.',
			'FldForeignTable' => '0',
			'FldForeignMin' => '0',
			'FldForeignMax' => '0',
			'FldForeign2Min' => '0',
			'FldForeign2Max' => '0',
			'FldValues' => 'Stops;Searches;Force;Arrests',
			'FldDataLength' => '0',
			'FldCharSupport' => ',',
			'FldCompareSame' => '878800'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 387,
			'FldDatabase' => '1',
			'FldTable' => '113',
			'FldOrd' => '4',
			'FldSpecSource' => '0',
			'FldName' => 'Findings',
			'FldEng' => 'Allegation Findings',
			'FldDesc' => 'The official final disposition of an Allegation. Important for tracking responsiveness of Police Departments, Investigative Agencies, and Complainants.',
			'FldNotes' => 'Final Allegation status is categorized by Admins after reviewing official department documentation.',
			'FldForeignTable' => '0',
			'FldForeignMin' => '11',
			'FldForeignMax' => '11',
			'FldForeign2Min' => '0',
			'FldForeign2Max' => '0',
			'FldValues' => 'Def::Allegation Findings',
			'FldType' => 'INT',
			'FldDataType' => 'Numeric',
			'FldDataLength' => '3',
			'FldCharSupport' => ',Numbers,',
			'FldKeyStruct' => 'Simple',
			'FldCompareSame' => '130'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 1157,
			'FldDatabase' => '1',
			'FldTable' => '156',
			'FldOrd' => '25',
			'FldSpecSource' => '0',
			'FldName' => 'WrongfulEntry',
			'FldEng' => 'Officer enter private space without warrant?',
			'FldDesc' => 'Indicates whether or not an Officer entered a space without a warrant. This is important for determining the details of justified entry on private property.',
			'FldForeignTable' => '0',
			'FldForeignMin' => '0',
			'FldForeignMax' => '0',
			'FldForeign2Min' => '0',
			'FldForeign2Max' => '0',
			'FldValues' => 'Y;N;?',
			'FldDataLength' => '1',
			'FldCharSupport' => ',Letters,Keyboard,',
			'FldCompareSame' => '878800'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 902,
			'FldDatabase' => '1',
			'FldTable' => '0',
			'FldOrd' => '52',
			'FldSpecType' => 'Generic',
			'FldSpecSource' => '0',
			'FldName' => 'HairDescription',
			'FldEng' => 'Hair Description',
			'FldForeignTable' => '0',
			'FldForeignMin' => '11',
			'FldForeignMax' => '11',
			'FldForeign2Min' => '0',
			'FldForeign2Max' => '0',
			'FldDataLength' => '0',
			'FldCharSupport' => ',Letters,Keyboard,',
			'FldKeyType' => 'Non',
			'FldKeyStruct' => 'Simple'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 647,
			'FldDatabase' => '1',
			'FldTable' => '153',
			'FldOrd' => '12',
			'FldSpecType' => 'Replica',
			'FldSpecSource' => '912',
			'FldName' => 'GeneralDesc',
			'FldEng' => 'Physical Description',
			'FldDesc' => 'The attributes of any prominent physical characteristics on a Civilian or Officer. This information might help verify a Civilian or Officer\'s identity.',
			'FldForeignMin' => '11',
			'FldForeignMax' => '11',
			'FldForeign2Min' => '0',
			'FldForeign2Max' => '0',
			'FldDataLength' => '0',
			'FldCharSupport' => ',Letters,Keyboard,',
			'FldNullSupport' => '0',
			'FldOpts' => '7'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 648,
			'FldDatabase' => '1',
			'FldTable' => '152',
			'FldOrd' => '2',
			'FldSpecType' => 'Replica',
			'FldSpecSource' => '913',
			'FldName' => 'Transportation',
			'FldEng' => 'Type of Vehicle',
			'FldDesc' => 'Indicates what type of vehicle was involved during this Incident.',
			'FldForeignMin' => '11',
			'FldForeignMax' => '11',
			'FldForeign2Min' => '0',
			'FldForeign2Max' => '0',
			'FldValues' => 'Def::Transportation Officer',
			'FldType' => 'INT',
			'FldDataType' => 'Numeric',
			'FldDataLength' => '3',
			'FldCharSupport' => ',Numbers,',
			'FldNullSupport' => '0',
			'FldCompareSame' => '878800'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 904,
			'FldDatabase' => '1',
			'FldTable' => '0',
			'FldOrd' => '54',
			'FldSpecType' => 'Generic',
			'FldSpecSource' => '0',
			'FldName' => 'HairFacialDesc',
			'FldEng' => 'Facial Hair Description',
			'FldForeignTable' => '0',
			'FldForeignMin' => '11',
			'FldForeignMax' => '11',
			'FldForeign2Min' => '0',
			'FldForeign2Max' => '0',
			'FldDataLength' => '0',
			'FldCharSupport' => ',Letters,Keyboard,',
			'FldKeyType' => 'Non',
			'FldKeyStruct' => 'Simple'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 393,
			'FldDatabase' => '1',
			'FldTable' => '112',
			'FldOrd' => '5',
			'FldSpecSource' => '0',
			'FldName' => 'Privacy',
			'FldEng' => 'Privacy Setting',
			'FldDesc' => 'User-selected category for Complaint records. This defines what personally identifiable information (PII) is publicly shared.',
			'FldNotes' => 'Should we move privacy settings at the end of the Complaint process for now (in the Simulation/Implementation)? (We can later test whether users prefer this selection to appear earlier or later in the process.)

Wikipedia Article on the topic: https://en.wikipedia.org/wiki/Personally_identifiable_information',
			'FldForeignTable' => '0',
			'FldForeignMin' => '11',
			'FldForeignMax' => '11',
			'FldForeign2Min' => '0',
			'FldForeign2Max' => '0',
			'FldValues' => 'Def::Privacy Types',
			'FldType' => 'INT',
			'FldDataType' => 'Numeric',
			'FldDataLength' => '3',
			'FldCharSupport' => ',Numbers,',
			'FldKeyStruct' => 'Simple',
			'FldCompareSame' => '130'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 649,
			'FldDatabase' => '1',
			'FldTable' => '152',
			'FldOrd' => '4',
			'FldSpecType' => 'Replica',
			'FldSpecSource' => '914',
			'FldName' => 'VehicleMake',
			'FldEng' => 'Vehicle Make',
			'FldDesc' => 'The company that manufactured a Civilian\'s vehicle. This information might help verify a Civilian\'s identity.',
			'FldNotes' => 'Vehicle makes include Toyota, Ford, Honda, Chevrolet, etc.',
			'FldForeignTable' => '0',
			'FldForeignMin' => '11',
			'FldForeignMax' => '11',
			'FldForeign2Min' => '0',
			'FldForeign2Max' => '0',
			'FldDataLength' => '0',
			'FldCharSupport' => ',Letters,Keyboard,',
			'FldKeyType' => 'Non',
			'FldKeyStruct' => 'Simple',
			'FldCompareSame' => '130',
			'FldOpts' => '7'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 905,
			'FldDatabase' => '1',
			'FldTable' => '0',
			'FldOrd' => '55',
			'FldSpecType' => 'Generic',
			'FldSpecSource' => '0',
			'FldName' => 'Eyes',
			'FldEng' => 'Eyes Description',
			'FldForeignTable' => '0',
			'FldForeignMin' => '11',
			'FldForeignMax' => '11',
			'FldForeign2Min' => '0',
			'FldForeign2Max' => '0',
			'FldDataLength' => '0',
			'FldCharSupport' => ',Letters,Keyboard,',
			'FldKeyType' => 'Non',
			'FldKeyStruct' => 'Simple'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 650,
			'FldDatabase' => '1',
			'FldTable' => '152',
			'FldOrd' => '5',
			'FldSpecType' => 'Replica',
			'FldSpecSource' => '915',
			'FldName' => 'VehicleModel',
			'FldEng' => 'Vehicle Model',
			'FldDesc' => 'The name or brand of the Civilian\'s vehicle. This information might help verify a Civilian\'s identity.',
			'FldNotes' => 'Vehicle models include Toyota Camry, Ford F-Series, Chevrolet Silverado, etc.',
			'FldForeignTable' => '0',
			'FldForeignMin' => '11',
			'FldForeignMax' => '11',
			'FldForeign2Min' => '0',
			'FldForeign2Max' => '0',
			'FldDataLength' => '0',
			'FldCharSupport' => ',Letters,Keyboard,',
			'FldKeyType' => 'Non',
			'FldKeyStruct' => 'Simple',
			'FldCompareSame' => '130',
			'FldOpts' => '7'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 651,
			'FldDatabase' => '1',
			'FldTable' => '152',
			'FldOrd' => '6',
			'FldSpecType' => 'Replica',
			'FldSpecSource' => '916',
			'FldName' => 'VehicleDesc',
			'FldEng' => 'Vehicle Description',
			'FldDesc' => 'Additional attributes of the Civilian\'s vehicle. This information might help verify a Civilian\'s identity.',
			'FldNotes' => 'What color was the vehicle? Did it have any distinguishing characteristics, such as dents, customizations, etc?',
			'FldForeignTable' => '0',
			'FldForeignMin' => '11',
			'FldForeignMax' => '11',
			'FldForeign2Min' => '0',
			'FldForeign2Max' => '0',
			'FldDataLength' => '0',
			'FldCharSupport' => ',Letters,Keyboard,',
			'FldKeyType' => 'Non',
			'FldKeyStruct' => 'Simple',
			'FldOpts' => '7'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 1163,
			'FldDatabase' => '1',
			'FldTable' => '123',
			'FldOrd' => '1',
			'FldSpecSource' => '0',
			'FldName' => 'ChargesFiled',
			'FldEng' => 'Were any charges filed?',
			'FldDesc' => 'Indicates whether or not any charges were filed as a part of this specific Arrest. This is important for determining the risk involved with this Complaint, as well as revealing fields to describe the specific Charges filed.',
			'FldForeignTable' => '0',
			'FldForeignMin' => '0',
			'FldForeignMax' => '0',
			'FldForeign2Min' => '0',
			'FldForeign2Max' => '0',
			'FldValues' => 'Y;N;?',
			'FldDataLength' => '1',
			'FldCharSupport' => ',Letters,Keyboard,',
			'FldCompareSame' => '878800'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 396,
			'FldDatabase' => '1',
			'FldTable' => '104',
			'FldSpecSource' => '0',
			'FldName' => 'VerifiedID',
			'FldEng' => 'Verified Officer Record ID',
			'FldDesc' => 'The unique number of the Verified Officer Record related to this Officer\'s record. Vital for associating Officer with multiple Complaints and Departments.',
			'FldForeignTable' => '187',
			'FldForeignMin' => '0',
			'FldForeignMax' => 'N',
			'FldType' => 'INT',
			'FldDataType' => 'Numeric',
			'FldDataLength' => '11',
			'FldCharSupport' => ',Numbers,',
			'FldKeyType' => ',Foreign,',
			'FldNullSupport' => '0',
			'FldCompareSame' => '878800'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 652,
			'FldDatabase' => '1',
			'FldTable' => '152',
			'FldOrd' => '7',
			'FldSpecType' => 'Replica',
			'FldSpecSource' => '917',
			'FldName' => 'VehicleLicence',
			'FldEng' => 'License Plate Number',
			'FldDesc' => 'The tag numbers on the Civilian\'s vehicle. This information might help verify a Civilian\'s identity.',
			'FldForeignTable' => '0',
			'FldForeignMin' => '11',
			'FldForeignMax' => '11',
			'FldForeign2Min' => '0',
			'FldForeign2Max' => '0',
			'FldDataLength' => '0',
			'FldCharSupport' => ',Letters,Keyboard,',
			'FldKeyType' => 'Non',
			'FldKeyStruct' => 'Simple',
			'FldCompareSame' => '130',
			'FldOpts' => '11'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 908,
			'FldDatabase' => '1',
			'FldTable' => '0',
			'FldOrd' => '58',
			'FldSpecType' => 'Generic',
			'FldSpecSource' => '0',
			'FldName' => 'DistinguishingMarksDesc',
			'FldEng' => 'Distinguishing Marks Description',
			'FldForeignTable' => '0',
			'FldForeignMin' => '11',
			'FldForeignMax' => '11',
			'FldForeign2Min' => '0',
			'FldForeign2Max' => '0',
			'FldDataLength' => '0',
			'FldCharSupport' => ',Letters,Keyboard,',
			'FldKeyType' => 'Non',
			'FldKeyStruct' => 'Simple'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 397,
			'FldDatabase' => '1',
			'FldTable' => '104',
			'FldOrd' => '3',
			'FldSpecSource' => '0',
			'FldName' => 'Role',
			'FldEng' => 'Officer\'s role in this incident',
			'FldDesc' => 'Indicates category of an Officer. This information is essential for understanding whether a given Officer was a Subject of an Allegation or a Witness to the Allegation.',
			'FldForeignTable' => '0',
			'FldForeignMin' => '11',
			'FldForeignMax' => '11',
			'FldForeign2Min' => '0',
			'FldForeign2Max' => '0',
			'FldValues' => 'Subject Officer;Witness Officer',
			'FldDataLength' => '0',
			'FldCharSupport' => ',Letters,Keyboard,',
			'FldKeyType' => 'Non',
			'FldKeyStruct' => 'Simple',
			'FldCompareSame' => '130'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 909,
			'FldDatabase' => '1',
			'FldTable' => '0',
			'FldOrd' => '59',
			'FldSpecType' => 'Generic',
			'FldSpecSource' => '0',
			'FldName' => 'VoiceDesc',
			'FldEng' => 'Voice Description',
			'FldForeignTable' => '0',
			'FldForeignMin' => '11',
			'FldForeignMax' => '11',
			'FldForeign2Min' => '0',
			'FldForeign2Max' => '0',
			'FldDataLength' => '0',
			'FldCharSupport' => ',Letters,Keyboard,',
			'FldKeyType' => 'Non',
			'FldKeyStruct' => 'Simple'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 1165,
			'FldDatabase' => '1',
			'FldTable' => '156',
			'FldOrd' => '17',
			'FldSpecSource' => '0',
			'FldName' => 'CitationExcessive',
			'FldEng' => 'Think citation charges were excessive?',
			'FldDesc' => 'Indicates whether or not the Complainant believes there is an Allegation regarding retaliatory citation charges against at least one Civilian. Such Allegation claims are central to Complaints.',
			'FldForeignTable' => '0',
			'FldForeignMin' => '0',
			'FldForeignMax' => '0',
			'FldForeign2Min' => '0',
			'FldForeign2Max' => '0',
			'FldValues' => 'Y;N;?',
			'FldDataLength' => '1',
			'FldCharSupport' => ',Letters,Keyboard,',
			'FldCompareSame' => '878800'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 910,
			'FldDatabase' => '1',
			'FldTable' => '0',
			'FldOrd' => '60',
			'FldSpecType' => 'Generic',
			'FldSpecSource' => '0',
			'FldName' => 'ClothesDesc',
			'FldEng' => 'Clothes Description',
			'FldForeignTable' => '0',
			'FldForeignMin' => '11',
			'FldForeignMax' => '11',
			'FldForeign2Min' => '0',
			'FldForeign2Max' => '0',
			'FldDataLength' => '0',
			'FldCharSupport' => ',Letters,Keyboard,',
			'FldKeyType' => 'Non',
			'FldKeyStruct' => 'Simple'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 1166,
			'FldDatabase' => '1',
			'FldTable' => '123',
			'FldOrd' => '7',
			'FldSpecSource' => '0',
			'FldName' => 'Strip',
			'FldEng' => 'Strip search done at station?',
			'FldDesc' => 'Indicates whether or not an Officer performed a strip search on a Subject at the police station. Important for evaluating possible wrongful search Allegation and identifying search trends.',
			'FldForeignTable' => '0',
			'FldForeignMin' => '0',
			'FldForeignMax' => '0',
			'FldForeign2Min' => '0',
			'FldForeign2Max' => '0',
			'FldValues' => 'Y;N;?',
			'FldDataLength' => '1',
			'FldCharSupport' => ',Letters,Keyboard,',
			'FldCompareSame' => '878800'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 1167,
			'FldDatabase' => '1',
			'FldTable' => '123',
			'FldOrd' => '8',
			'FldSpecSource' => '0',
			'FldName' => 'StripSearchDesc',
			'FldEng' => 'Strip search description',
			'FldDesc' => 'Narrative details about the nature of the strip search. Important for identifying particularly egregious wrongful search Allegations -- including cavity searches. ',
			'FldForeignTable' => '0',
			'FldForeignMin' => '0',
			'FldForeignMax' => '0',
			'FldForeign2Min' => '0',
			'FldForeign2Max' => '0',
			'FldDataLength' => '0',
			'FldCharSupport' => ',Letters,Numbers,Keyboard,',
			'FldOpts' => '7'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 912,
			'FldDatabase' => '1',
			'FldTable' => '0',
			'FldOrd' => '62',
			'FldSpecType' => 'Generic',
			'FldSpecSource' => '0',
			'FldName' => 'DisabilitiesDesc',
			'FldEng' => 'Disabilities Description',
			'FldForeignTable' => '0',
			'FldForeignMin' => '11',
			'FldForeignMax' => '11',
			'FldForeign2Min' => '0',
			'FldForeign2Max' => '0',
			'FldDataLength' => '0',
			'FldCharSupport' => ',Letters,Keyboard,',
			'FldKeyType' => 'Non',
			'FldKeyStruct' => 'Simple'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 1168,
			'FldDatabase' => '1',
			'FldTable' => '164',
			'FldSpecSource' => '0',
			'FldName' => 'PhysDescID',
			'FldEng' => 'Physical Description ID',
			'FldDesc' => 'The primary Physical Description record number connected to this race association. Important for multiple races to a single Civilian or Officer.',
			'FldForeignTable' => '153',
			'FldForeignMin' => '0',
			'FldForeignMax' => 'N',
			'FldForeign2Min' => '11',
			'FldForeign2Max' => '11',
			'FldType' => 'INT',
			'FldDataType' => 'Numeric',
			'FldDataLength' => '0',
			'FldCharSupport' => ',Numbers,',
			'FldKeyType' => ',Foreign,',
			'FldCompareSame' => '878800',
			'FldOpts' => '13'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 401,
			'FldDatabase' => '1',
			'FldTable' => '112',
			'FldOrd' => '25',
			'FldSpecType' => 'Replica',
			'FldSpecSource' => '929',
			'FldName' => 'AdminID',
			'FldEng' => 'Primary Admin ID',
			'FldDesc' => 'The unique number of the Administrator record related to this Complaint. This number helps us identify which Administrator is the point of contact for this Complaint.',
			'FldNotes' => 'OPC staff in charge of Complaint ',
			'FldForeignTable' => '108',
			'FldForeignMin' => '0',
			'FldForeignMax' => 'N',
			'FldForeign2Min' => '0',
			'FldForeign2Max' => '11',
			'FldIsIndex' => '1',
			'FldType' => 'INT',
			'FldDataType' => 'Numeric',
			'FldDataLength' => '11',
			'FldCharSupport' => ',Numbers,',
			'FldKeyType' => 'Foreign',
			'FldKeyStruct' => 'Simple',
			'FldCompareSame' => '130',
			'FldOpts' => '13'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 913,
			'FldDatabase' => '1',
			'FldTable' => '0',
			'FldOrd' => '63',
			'FldSpecType' => 'Generic',
			'FldSpecSource' => '0',
			'FldName' => 'Transportation',
			'FldEng' => 'Transportation',
			'FldForeignTable' => '0',
			'FldForeignMin' => '11',
			'FldForeignMax' => '11',
			'FldForeign2Min' => '0',
			'FldForeign2Max' => '0',
			'FldValues' => 'Foot;Car;Van;Bike;Boat;Motorcycle;Helicopter',
			'FldDataLength' => '1',
			'FldCharSupport' => ',Letters,',
			'FldKeyType' => 'Non',
			'FldKeyStruct' => 'Simple',
			'FldCompareSame' => '130'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 1169,
			'FldDatabase' => '1',
			'FldTable' => '164',
			'FldOrd' => '1',
			'FldSpecSource' => '0',
			'FldName' => 'Race',
			'FldEng' => 'Race',
			'FldDesc' => 'The Complainant-selected or self-ascribed racial classification of a Civilian or Officer. This classification helps verify the identity of Subject of Complaints and is useful for determining possible patterns or practices of race-based policing.',
			'FldNotes' => 'Depending on who is selecting, this might be self-ascribed or Complainant-selected for another Civilian. We will use the Census Bureau\'s classifications: http://www.census.gov/topics/population/race/about.html',
			'FldForeignTable' => '0',
			'FldForeignMin' => '0',
			'FldForeignMax' => '0',
			'FldForeign2Min' => '0',
			'FldForeign2Max' => '0',
			'FldValues' => 'Def::Races',
			'FldType' => 'INT',
			'FldDataType' => 'Numeric',
			'FldDataLength' => '0',
			'FldCharSupport' => ',Numbers,',
			'FldCompareSame' => '878800'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 914,
			'FldDatabase' => '1',
			'FldTable' => '0',
			'FldOrd' => '64',
			'FldSpecType' => 'Generic',
			'FldSpecSource' => '0',
			'FldName' => 'VehicleMake',
			'FldEng' => 'Vehicle Make',
			'FldForeignTable' => '0',
			'FldForeignMin' => '11',
			'FldForeignMax' => '11',
			'FldForeign2Min' => '0',
			'FldForeign2Max' => '0',
			'FldDataLength' => '0',
			'FldCharSupport' => ',Letters,Keyboard,',
			'FldKeyType' => 'Non',
			'FldKeyStruct' => 'Simple',
			'FldCompareSame' => '130'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 1170,
			'FldDatabase' => '1',
			'FldTable' => '111',
			'FldOrd' => '3',
			'FldSpecSource' => '0',
			'FldName' => 'Status',
			'FldEng' => 'Activity Status',
			'FldDesc' => 'The current activity status of the Department, 1 for active, 0 for inactive. This vital for identifying Departments which have been closed since the creation of the original data set.',
			'FldForeignMin' => '0',
			'FldForeignMax' => '0',
			'FldForeign2Min' => '0',
			'FldForeign2Max' => '0',
			'FldValues' => 'Def::Department Status',
			'FldType' => 'INT',
			'FldDataType' => 'Numeric',
			'FldDataLength' => '11',
			'FldCharSupport' => ',Numbers,',
			'FldNullSupport' => '0',
			'FldCompareSame' => '878800'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 915,
			'FldDatabase' => '1',
			'FldTable' => '0',
			'FldOrd' => '65',
			'FldSpecType' => 'Generic',
			'FldSpecSource' => '0',
			'FldName' => 'VehicleModel',
			'FldEng' => 'Vehicle Model',
			'FldForeignTable' => '0',
			'FldForeignMin' => '11',
			'FldForeignMax' => '11',
			'FldForeign2Min' => '0',
			'FldForeign2Max' => '0',
			'FldDataLength' => '0',
			'FldCharSupport' => ',Letters,Keyboard,',
			'FldKeyType' => 'Non',
			'FldKeyStruct' => 'Simple',
			'FldCompareSame' => '130'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 1171,
			'FldDatabase' => '1',
			'FldTable' => '115',
			'FldOrd' => '1',
			'FldSpecSource' => '0',
			'FldName' => 'IsVehicle',
			'FldEng' => 'Incident began with vehicle stop?',
			'FldDesc' => 'Whether or not an Incident began with a vehicle, which includes cars, motorcycles, bicycles, and boats. This provides important contextual information about the the nature of the Incident to better evaluate the Incident and Allegations.',
			'FldForeignTable' => '0',
			'FldForeignMin' => '0',
			'FldForeignMax' => '0',
			'FldForeign2Min' => '0',
			'FldForeign2Max' => '0',
			'FldValues' => 'Y;N;?',
			'FldDataLength' => '1',
			'FldCharSupport' => ',Letters,Keyboard,',
			'FldCompareSame' => '878800'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 404,
			'FldDatabase' => '1',
			'FldTable' => '123',
			'FldOrd' => '4',
			'FldSpecSource' => '0',
			'FldName' => 'Miranda',
			'FldEng' => 'Did the officer read Miranda rights?',
			'FldDesc' => 'Indicates whether or not an Officer read a Subject their Miranda rights during Arrest. Important for evaluating possible procedure Allegation.',
			'FldNotes' => 'Failure to read subject Miranda rights turns on a "procedure" violation, and a value of Yes here is equivalent to an Allegation.',
			'FldForeignTable' => '0',
			'FldForeignMin' => '11',
			'FldForeignMax' => '11',
			'FldForeign2Min' => '0',
			'FldForeign2Max' => '0',
			'FldValues' => 'Y;N;?',
			'FldDataLength' => '1',
			'FldCharSupport' => ',Letters,Keyboard,',
			'FldKeyStruct' => 'Simple',
			'FldCompareSame' => '130'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 916,
			'FldDatabase' => '1',
			'FldTable' => '0',
			'FldOrd' => '66',
			'FldSpecType' => 'Generic',
			'FldSpecSource' => '0',
			'FldName' => 'VehicleDesc',
			'FldEng' => 'Vehicle Description',
			'FldForeignTable' => '0',
			'FldForeignMin' => '11',
			'FldForeignMax' => '11',
			'FldForeign2Min' => '0',
			'FldForeign2Max' => '0',
			'FldDataLength' => '0',
			'FldCharSupport' => ',Letters,Keyboard,',
			'FldKeyType' => 'Non',
			'FldKeyStruct' => 'Simple'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 1172,
			'FldDatabase' => '1',
			'FldTable' => '106',
			'FldOrd' => '17',
			'FldSpecSource' => '0',
			'FldName' => 'YouTube',
			'FldEng' => 'YouTube URL',
			'FldDesc' => 'This is the URL address of a Agency\'s YouTube page. If available, this will be included in each Agency\'s OPC page so that members of public see this aspect of the department\'s web presence.',
			'FldForeignTable' => '0',
			'FldForeignMin' => '0',
			'FldForeignMax' => '0',
			'FldForeign2Min' => '0',
			'FldForeign2Max' => '0',
			'FldDataLength' => '0',
			'FldCharSupport' => ',Letters,Numbers,Keyboard,',
			'FldCompareSame' => '878800'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 405,
			'FldDatabase' => '1',
			'FldTable' => '112',
			'FldOrd' => '1',
			'FldSpecSource' => '0',
			'FldName' => 'Status',
			'FldEng' => 'OPC Complaint Status',
			'FldDesc' => 'The current progress of a "complete" or "incomplete" Complaint within the OPC system. We use this information internally to determine next Administrator actions to guide a Complaint to the final status of "closed."',
			'FldNotes' => 'AKA Disposition of Complaint. <a href="extras.php?flows=1" target="_blank" class="f12">see Work Flows</a>.',
			'FldForeignTable' => '0',
			'FldForeignMin' => '11',
			'FldForeignMax' => '11',
			'FldForeign2Min' => '0',
			'FldForeign2Max' => '0',
			'FldValues' => 'Def::Complaint Status',
			'FldIsIndex' => '1',
			'FldType' => 'INT',
			'FldDataType' => 'Numeric',
			'FldDataLength' => '3',
			'FldCharSupport' => ',Numbers,',
			'FldKeyStruct' => 'Simple',
			'FldEditRule' => 'NowAllowed',
			'FldNullSupport' => '0',
			'FldRequired' => '1',
			'FldCompareSame' => '130'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 917,
			'FldDatabase' => '1',
			'FldTable' => '0',
			'FldOrd' => '67',
			'FldSpecType' => 'Generic',
			'FldSpecSource' => '0',
			'FldName' => 'VehicleLicence',
			'FldEng' => 'Vehicle Licence Number',
			'FldForeignTable' => '0',
			'FldForeignMin' => '11',
			'FldForeignMax' => '11',
			'FldForeign2Min' => '0',
			'FldForeign2Max' => '0',
			'FldDataLength' => '0',
			'FldCharSupport' => ',Letters,Keyboard,',
			'FldKeyType' => 'Non',
			'FldKeyStruct' => 'Simple',
			'FldCompareSame' => '130'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 1173,
			'FldDatabase' => '1',
			'FldTable' => '102',
			'FldOrd' => '11',
			'FldSpecSource' => '0',
			'FldName' => 'Chase',
			'FldEng' => 'Chased by police?',
			'FldDesc' => 'Indicates whether or not Subject was chased by an Officer. Important for evaluating Allegations of Excessive Force and tracking Force trends.',
			'FldForeignMin' => '0',
			'FldForeignMax' => '0',
			'FldForeign2Min' => '0',
			'FldForeign2Max' => '0',
			'FldValues' => 'Y;N;?',
			'FldDataLength' => '1',
			'FldCharSupport' => ',Letters,Keyboard,',
			'FldNullSupport' => '0',
			'FldCompareSame' => '878800'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 918,
			'FldDatabase' => '1',
			'FldTable' => '0',
			'FldOrd' => '68',
			'FldSpecType' => 'Generic',
			'FldSpecSource' => '0',
			'FldName' => 'CameraRecord',
			'FldEng' => 'Recorded Event?',
			'FldForeignTable' => '0',
			'FldForeignMin' => '11',
			'FldForeignMax' => '11',
			'FldForeign2Min' => '0',
			'FldForeign2Max' => '0',
			'FldValues' => 'Y;N;?',
			'FldDataLength' => '1',
			'FldCharSupport' => ',Letters,',
			'FldKeyType' => 'Non',
			'FldKeyStruct' => 'Simple',
			'FldCompareSame' => '130'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 1174,
			'FldDatabase' => '1',
			'FldTable' => '102',
			'FldOrd' => '12',
			'FldSpecSource' => '0',
			'FldName' => 'ChaseType',
			'FldEng' => 'Type of chase',
			'FldDesc' => 'Indicates whether the Subject\'s chase took place on foot, in vehicles, or both. Important for evaluating Allegations of Excessive Force and tracking Force trends.',
			'FldForeignMin' => '0',
			'FldForeignMax' => '0',
			'FldForeign2Min' => '0',
			'FldForeign2Max' => '0',
			'FldValues' => 'Def::Chase Types',
			'FldType' => 'INT',
			'FldDataType' => 'Numeric',
			'FldDataLength' => '0',
			'FldCharSupport' => ',Numbers,',
			'FldNullSupport' => '0',
			'FldCompareSame' => '878800'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 1175,
			'FldDatabase' => '1',
			'FldTable' => '152',
			'FldOrd' => '3',
			'FldSpecSource' => '0',
			'FldName' => 'Unmarked',
			'FldEng' => 'Vehicle Unmarked or Undercover?',
			'FldDesc' => 'Indicates whether or not an Officer\'s vehicle was an unmarked car, meaning it looks like a normal vehicle with no badges, graphics, or visible police lights. This is important for tracking trends of Officer behavior.',
			'FldForeignMin' => '0',
			'FldForeignMax' => '0',
			'FldForeign2Min' => '0',
			'FldForeign2Max' => '0',
			'FldValues' => 'Y;N;?',
			'FldDataLength' => '1',
			'FldCharSupport' => ',Letters,Keyboard,',
			'FldNullSupport' => '0',
			'FldCompareSame' => '878800'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 920,
			'FldDatabase' => '1',
			'FldTable' => '0',
			'FldOrd' => '2',
			'FldSpecType' => 'Generic',
			'FldSpecSource' => '0',
			'FldName' => 'DeptID',
			'FldEng' => 'Department ID',
			'FldDesc' => 'The primary ID of the Department record related to the this table\'s record.',
			'FldForeignTable' => '111',
			'FldForeignMin' => '11',
			'FldForeignMax' => '11',
			'FldForeign2Min' => '0',
			'FldForeign2Max' => '0',
			'FldIsIndex' => '1',
			'FldType' => 'INT',
			'FldDataType' => 'Numeric',
			'FldDataLength' => '11',
			'FldCharSupport' => ',Numbers,',
			'FldKeyType' => 'Foreign',
			'FldKeyStruct' => 'Simple',
			'FldCompareSame' => '130'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 1176,
			'FldDatabase' => '1',
			'FldTable' => '104',
			'FldOrd' => '16',
			'FldSpecSource' => '0',
			'FldName' => 'Uniform',
			'FldEng' => 'Wearing uniform?',
			'FldDesc' => 'Indicates whether or not Officer was wearing a uniform during the Incident. Particularly important for investigating Allegations against Officers in plain clothes.',
			'FldForeignMin' => '0',
			'FldForeignMax' => '0',
			'FldForeign2Min' => '0',
			'FldForeign2Max' => '0',
			'FldValues' => 'Y;N;?',
			'FldDataLength' => '1',
			'FldCharSupport' => ',Letters,Keyboard,',
			'FldNullSupport' => '0',
			'FldCompareSame' => '878800'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 921,
			'FldDatabase' => '1',
			'FldTable' => '0',
			'FldOrd' => '22',
			'FldSpecType' => 'Generic',
			'FldSpecSource' => '0',
			'FldName' => 'AuthUserID',
			'FldEng' => 'User Authentication ID',
			'FldDesc' => 'The primary ID of the System User record related to the this table\'s record.',
			'FldForeignTable' => '167',
			'FldForeignMin' => '11',
			'FldForeignMax' => '11',
			'FldForeign2Min' => '0',
			'FldForeign2Max' => '0',
			'FldType' => 'INT',
			'FldDataType' => 'Numeric',
			'FldDataLength' => '11',
			'FldCharSupport' => ',Numbers,',
			'FldKeyType' => 'Foreign',
			'FldKeyStruct' => 'Simple',
			'FldCompareSame' => '130'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 1177,
			'FldDatabase' => '1',
			'FldTable' => '112',
			'FldOrd' => '34',
			'FldSpecSource' => '0',
			'FldName' => 'IsMobile',
			'FldEng' => 'Using Mobile Device',
			'FldDesc' => 'Indicates whether or not this Complaint was started on a mobile device. This is important for tracking trends of usage, and potential debugging.',
			'FldForeignTable' => '0',
			'FldForeignMin' => '0',
			'FldForeignMax' => '0',
			'FldForeign2Min' => '0',
			'FldForeign2Max' => '0',
			'FldValues' => '0;1',
			'FldType' => 'INT',
			'FldDataType' => 'Numeric',
			'FldDataLength' => '1',
			'FldCharSupport' => ',Numbers,',
			'FldCompareSame' => '878800'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 922,
			'FldDatabase' => '1',
			'FldTable' => '0',
			'FldOrd' => '69',
			'FldSpecType' => 'Generic',
			'FldSpecSource' => '0',
			'FldName' => 'Title',
			'FldEng' => 'Title',
			'FldDesc' => 'Title of this person\'s role in their organization.',
			'FldForeignTable' => '0',
			'FldForeignMin' => '11',
			'FldForeignMax' => '11',
			'FldForeign2Min' => '0',
			'FldForeign2Max' => '0',
			'FldDataLength' => '0',
			'FldCharSupport' => ',Letters,Keyboard,Numbers,',
			'FldKeyType' => 'Non',
			'FldKeyStruct' => 'Simple',
			'FldCompareSame' => '130'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 1178,
			'FldDatabase' => '1',
			'FldTable' => '165',
			'FldSpecSource' => '0',
			'FldName' => 'ComID',
			'FldEng' => 'Complaint ID',
			'FldDesc' => 'The unique number of the Complaint record related to these uses of force against an officer. Vital for associating multiple secondary types of force used with a single Use of Force during an Incident.',
			'FldForeignTable' => '112',
			'FldForeignMin' => '0',
			'FldForeignMax' => 'N',
			'FldType' => 'INT',
			'FldDataType' => 'Numeric',
			'FldDataLength' => '0',
			'FldCharSupport' => ',Numbers,',
			'FldKeyType' => ',Foreign,',
			'FldNullSupport' => '0',
			'FldCompareSame' => '878800'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 923,
			'FldDatabase' => '1',
			'FldTable' => '0',
			'FldOrd' => '70',
			'FldSpecType' => 'Generic',
			'FldSpecSource' => '0',
			'FldName' => 'CompanyName',
			'FldEng' => 'Company Name',
			'FldForeignTable' => '0',
			'FldForeignMin' => '11',
			'FldForeignMax' => '11',
			'FldForeign2Min' => '0',
			'FldForeign2Max' => '0',
			'FldDataLength' => '0',
			'FldCharSupport' => ',Letters,Keyboard,Numbers,',
			'FldKeyType' => 'Non',
			'FldKeyStruct' => 'Simple',
			'FldCompareSame' => '6'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 1179,
			'FldDatabase' => '1',
			'FldTable' => '165',
			'FldOrd' => '1',
			'FldSpecSource' => '0',
			'FldName' => 'BodyWeapon',
			'FldEng' => 'Civilian body weapon use against officer',
			'FldDesc' => 'The Definition ID number of the type of Body Weapon used by the Civilian against the Officer. Vital for associating multiple Body Weapons with a single Use of Force during an Incident.',
			'FldForeignMin' => '0',
			'FldForeignMax' => '0',
			'FldForeign2Min' => '0',
			'FldForeign2Max' => '0',
			'FldValues' => 'Def::Force Type - Body Weapons',
			'FldType' => 'INT',
			'FldDataType' => 'Numeric',
			'FldDataLength' => '0',
			'FldCharSupport' => ',Numbers,',
			'FldNullSupport' => '0',
			'FldCompareSame' => '878800'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 924,
			'FldDatabase' => '1',
			'FldTable' => '0',
			'FldOrd' => '71',
			'FldSpecType' => 'Generic',
			'FldSpecSource' => '0',
			'FldName' => 'CompanyWebsite',
			'FldEng' => 'Company Website',
			'FldForeignTable' => '0',
			'FldForeignMin' => '11',
			'FldForeignMax' => '11',
			'FldForeign2Min' => '0',
			'FldForeign2Max' => '0',
			'FldDataLength' => '0',
			'FldCharSupport' => ',Letters,Keyboard,Numbers,',
			'FldKeyType' => 'Non',
			'FldKeyStruct' => 'Simple',
			'FldCompareSame' => '6'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 925,
			'FldDatabase' => '1',
			'FldTable' => '0',
			'FldOrd' => '4',
			'FldSpecType' => 'Generic',
			'FldSpecSource' => '0',
			'FldName' => 'OversightID',
			'FldEng' => 'Oversight ID',
			'FldDesc' => 'The primary ID of the Oversight record related to the this table\'s record.',
			'FldForeignTable' => '106',
			'FldForeignMin' => '11',
			'FldForeignMax' => '11',
			'FldForeign2Min' => '0',
			'FldForeign2Max' => '0',
			'FldType' => 'INT',
			'FldDataType' => 'Numeric',
			'FldDataLength' => '11',
			'FldCharSupport' => ',Numbers,',
			'FldKeyType' => 'Foreign',
			'FldKeyStruct' => 'Simple',
			'FldCompareSame' => '130'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 1181,
			'FldDatabase' => '1',
			'FldTable' => '102',
			'FldOrd' => '13',
			'FldSpecSource' => '0',
			'FldName' => 'VictimWhatWeapon',
			'FldEng' => 'Did subject have weapon?',
			'FldDesc' => 'Indicates what type of weapon the Victim of this Use of Force had at the time of the Incident (including \'No weapon\' and \'Not sure\'). This is important for determining if the Officer used Unreasonable Force.',
			'FldForeignMin' => '0',
			'FldForeignMax' => '0',
			'FldForeign2Min' => '0',
			'FldForeign2Max' => '0',
			'FldValues' => 'Def::Civilian Weapons',
			'FldType' => 'INT',
			'FldDataType' => 'Numeric',
			'FldDataLength' => '0',
			'FldCharSupport' => ',Numbers,',
			'FldNullSupport' => '0',
			'FldCompareSame' => '878800'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 926,
			'FldDatabase' => '1',
			'FldTable' => '0',
			'FldOrd' => '72',
			'FldSpecType' => 'Generic',
			'FldSpecSource' => '0',
			'FldName' => 'Verified',
			'FldEng' => 'Contact Info Last Verified',
			'FldNotes' => 'NULL value means unverified.',
			'FldForeignTable' => '0',
			'FldForeignMin' => '11',
			'FldForeignMax' => '11',
			'FldForeign2Min' => '0',
			'FldForeign2Max' => '0',
			'FldType' => 'DATETIME',
			'FldDataType' => 'DateTime',
			'FldDataLength' => '0',
			'FldCharSupport' => ',Keyboard,Numbers,',
			'FldDisplayFormat' => 'YYYY-MM-DD HH:MM:SS',
			'FldKeyType' => 'Non',
			'FldKeyStruct' => 'Simple',
			'FldCompareSame' => '6'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 1182,
			'FldDatabase' => '1',
			'FldTable' => '102',
			'FldOrd' => '14',
			'FldSpecSource' => '0',
			'FldName' => 'VictimUseWeapon',
			'FldEng' => 'Did subject use the weapon?',
			'FldDesc' => 'Indicates how the Victim used a weapon during this Use of Force. This is important for determining if the Officer used Unreasonable Force.',
			'FldForeignTable' => '0',
			'FldForeignMin' => '0',
			'FldForeignMax' => '0',
			'FldForeign2Min' => '0',
			'FldForeign2Max' => '0',
			'FldValues' => 'Def::Intimidating Displays Of Weapon',
			'FldType' => 'INT',
			'FldDataType' => 'Numeric',
			'FldDataLength' => '0',
			'FldCharSupport' => ',Numbers,',
			'FldCompareSame' => '878800'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 927,
			'FldDatabase' => '1',
			'FldTable' => '0',
			'FldOrd' => '9',
			'FldSpecType' => 'Generic',
			'FldSpecSource' => '0',
			'FldName' => 'IncidentID',
			'FldEng' => 'Incident ID',
			'FldDesc' => 'The primary ID of the Incident record related to the this table\'s record.',
			'FldForeignTable' => '114',
			'FldForeignMin' => '11',
			'FldForeignMax' => '11',
			'FldForeign2Min' => '0',
			'FldForeign2Max' => '0',
			'FldIsIndex' => '1',
			'FldType' => 'INT',
			'FldDataType' => 'Numeric',
			'FldDataLength' => '11',
			'FldCharSupport' => ',Numbers,',
			'FldKeyType' => 'Foreign',
			'FldKeyStruct' => 'Simple',
			'FldCompareSame' => '130'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 416,
			'FldDatabase' => '1',
			'FldTable' => '106',
			'FldOrd' => '2',
			'FldSpecType' => 'Replica',
			'FldSpecSource' => '921',
			'FldName' => 'UserID',
			'FldEng' => 'User ID',
			'FldDesc' => 'The primary User Authentication number connected to this Investigative Agency. This number allows Investigative Agency contacts to log into the OPC system.',
			'FldForeignTable' => '167',
			'FldForeignMin' => '0',
			'FldForeignMax' => '11',
			'FldForeign2Min' => '0',
			'FldForeign2Max' => '11',
			'FldType' => 'INT',
			'FldDataType' => 'Numeric',
			'FldDataLength' => '11',
			'FldCharSupport' => ',Numbers,',
			'FldKeyType' => ',Foreign,',
			'FldKeyStruct' => 'Simple',
			'FldCompareSame' => '130',
			'FldOpts' => '13'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 928,
			'FldDatabase' => '1',
			'FldTable' => '0',
			'FldOrd' => '25',
			'FldSpecType' => 'Generic',
			'FldSpecSource' => '0',
			'FldName' => 'CustomerID',
			'FldEng' => 'Customer ID',
			'FldDesc' => 'The primary ID of the Customer record related to the this table\'s record.',
			'FldForeignTable' => '110',
			'FldForeignMin' => '11',
			'FldForeignMax' => '11',
			'FldForeign2Min' => '0',
			'FldForeign2Max' => '0',
			'FldIsIndex' => '1',
			'FldType' => 'INT',
			'FldDataType' => 'Numeric',
			'FldDataLength' => '11',
			'FldCharSupport' => ',Numbers,',
			'FldKeyType' => 'Foreign',
			'FldKeyStruct' => 'Simple',
			'FldCompareSame' => '130'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 929,
			'FldDatabase' => '1',
			'FldTable' => '0',
			'FldOrd' => '23',
			'FldSpecType' => 'Generic',
			'FldSpecSource' => '0',
			'FldName' => 'AdminID',
			'FldEng' => 'Primary Admin ID',
			'FldDesc' => 'The primary ID of the Administrator record related to the this table\'s record.',
			'FldNotes' => 'OPC staff in charge of Complaint ',
			'FldForeignTable' => '108',
			'FldForeignMin' => '11',
			'FldForeignMax' => '11',
			'FldForeign2Min' => '0',
			'FldForeign2Max' => '0',
			'FldIsIndex' => '1',
			'FldType' => 'INT',
			'FldDataType' => 'Numeric',
			'FldDataLength' => '11',
			'FldCharSupport' => ',Numbers,',
			'FldKeyType' => 'Foreign',
			'FldKeyStruct' => 'Simple',
			'FldCompareSame' => '130'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 418,
			'FldDatabase' => '1',
			'FldTable' => '108',
			'FldSpecType' => 'Replica',
			'FldSpecSource' => '921',
			'FldName' => 'UserID',
			'FldEng' => 'User ID',
			'FldDesc' => 'The primary User Authentication number connected to an Administrator\'s record. This number allows Administrators to log into the OPC system.',
			'FldForeignTable' => '167',
			'FldForeignMin' => '0',
			'FldForeignMax' => '11',
			'FldForeign2Min' => '11',
			'FldForeign2Max' => '11',
			'FldType' => 'INT',
			'FldDataType' => 'Numeric',
			'FldDataLength' => '11',
			'FldCharSupport' => ',Numbers,',
			'FldKeyType' => ',Foreign,',
			'FldKeyStruct' => 'Simple',
			'FldEditRule' => 'NowAllowed',
			'FldNullSupport' => '0',
			'FldValuesEnteredBy' => 'System',
			'FldRequired' => '1',
			'FldCompareSame' => '130',
			'FldOpts' => '13'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 419,
			'FldDatabase' => '1',
			'FldTable' => '110',
			'FldOrd' => '2',
			'FldSpecType' => 'Replica',
			'FldSpecSource' => '921',
			'FldName' => 'UserID',
			'FldEng' => 'User ID',
			'FldDesc' => 'The primary User Authentication number connected to a Customer\'s record. This number allows Customers to log into the OPC system.',
			'FldForeignTable' => '167',
			'FldForeignMin' => '0',
			'FldForeignMax' => '11',
			'FldForeign2Min' => '0',
			'FldForeign2Max' => '11',
			'FldType' => 'INT',
			'FldDataType' => 'Numeric',
			'FldDataLength' => '11',
			'FldCharSupport' => ',Numbers,',
			'FldKeyType' => ',Foreign,',
			'FldKeyStruct' => 'Simple',
			'FldCompareSame' => '130',
			'FldOpts' => '13'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 932,
			'FldDatabase' => '1',
			'FldTable' => '0',
			'FldOrd' => '13',
			'FldSpecType' => 'Generic',
			'FldSpecSource' => '0',
			'FldName' => 'StopID',
			'FldEng' => 'Related Stop ID',
			'FldDesc' => 'The primary ID of the Stop record related to the this table\'s record.',
			'FldForeignTable' => '121',
			'FldForeignMin' => '11',
			'FldForeignMax' => '11',
			'FldForeign2Min' => '0',
			'FldForeign2Max' => '0',
			'FldType' => 'INT',
			'FldDataType' => 'Numeric',
			'FldDataLength' => '11',
			'FldCharSupport' => ',Numbers,',
			'FldKeyType' => 'Foreign',
			'FldKeyStruct' => 'Simple',
			'FldCompareSame' => '130'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 933,
			'FldDatabase' => '1',
			'FldTable' => '0',
			'FldOrd' => '14',
			'FldSpecType' => 'Generic',
			'FldSpecSource' => '0',
			'FldName' => 'SearchID',
			'FldEng' => 'Related Search ID',
			'FldDesc' => 'The primary ID of the Search record related to the this table\'s record.',
			'FldForeignTable' => '122',
			'FldForeignMin' => '11',
			'FldForeignMax' => '11',
			'FldForeign2Min' => '0',
			'FldForeign2Max' => '0',
			'FldType' => 'INT',
			'FldDataType' => 'Numeric',
			'FldDataLength' => '11',
			'FldCharSupport' => ',Numbers,',
			'FldKeyType' => 'Foreign',
			'FldKeyStruct' => 'Simple',
			'FldCompareSame' => '130'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 422,
			'FldDatabase' => '1',
			'FldTable' => '111',
			'FldSpecSource' => '0',
			'FldName' => 'Name',
			'FldEng' => 'Department Name',
			'FldDesc' => 'The official name of the law enforcement agency. This is an essential component of a Police Department\'s complete address.',
			'FldForeignTable' => '0',
			'FldForeignMin' => '11',
			'FldForeignMax' => '11',
			'FldForeign2Min' => '0',
			'FldForeign2Max' => '0',
			'FldDataLength' => '0',
			'FldCharSupport' => ',Letters,Keyboard,',
			'FldKeyStruct' => 'Simple',
			'FldEditRule' => 'NowAllowed',
			'FldNullSupport' => '0',
			'FldRequired' => '1',
			'FldCompareSame' => '6'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 934,
			'FldDatabase' => '1',
			'FldTable' => '0',
			'FldOrd' => '15',
			'FldSpecType' => 'Generic',
			'FldSpecSource' => '0',
			'FldName' => 'PropertyID',
			'FldEng' => 'Related Property ID',
			'FldDesc' => 'The primary ID of the Property record related to the this table\'s record.',
			'FldForeignTable' => '118',
			'FldForeignMin' => '11',
			'FldForeignMax' => '11',
			'FldForeign2Min' => '0',
			'FldForeign2Max' => '0',
			'FldType' => 'INT',
			'FldDataType' => 'Numeric',
			'FldDataLength' => '11',
			'FldCharSupport' => ',Numbers,',
			'FldKeyType' => 'Foreign',
			'FldKeyStruct' => 'Simple',
			'FldCompareSame' => '130'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 935,
			'FldDatabase' => '1',
			'FldTable' => '0',
			'FldOrd' => '16',
			'FldSpecType' => 'Generic',
			'FldSpecSource' => '0',
			'FldName' => 'ForceID',
			'FldEng' => 'Related Force ID',
			'FldDesc' => 'The primary ID of the Force record related to the this table\'s record.',
			'FldForeignTable' => '116',
			'FldForeignMin' => '11',
			'FldForeignMax' => '11',
			'FldForeign2Min' => '0',
			'FldForeign2Max' => '0',
			'FldType' => 'INT',
			'FldDataType' => 'Numeric',
			'FldDataLength' => '11',
			'FldCharSupport' => ',Numbers,',
			'FldKeyType' => 'Foreign',
			'FldKeyStruct' => 'Simple',
			'FldCompareSame' => '130'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 936,
			'FldDatabase' => '1',
			'FldTable' => '0',
			'FldOrd' => '20',
			'FldSpecType' => 'Generic',
			'FldSpecSource' => '0',
			'FldName' => 'ArrestID',
			'FldEng' => 'Related Arrest ID',
			'FldDesc' => 'The primary ID of the Arrest record related to the this table\'s record.',
			'FldForeignTable' => '123',
			'FldForeignMin' => '11',
			'FldForeignMax' => '11',
			'FldForeign2Min' => '0',
			'FldForeign2Max' => '0',
			'FldType' => 'INT',
			'FldDataType' => 'Numeric',
			'FldDataLength' => '11',
			'FldCharSupport' => ',Numbers,',
			'FldKeyType' => 'Foreign',
			'FldKeyStruct' => 'Simple',
			'FldCompareSame' => '130'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 938,
			'FldDatabase' => '1',
			'FldTable' => '0',
			'FldOrd' => '73',
			'FldSpecType' => 'Generic',
			'FldSpecSource' => '0',
			'FldName' => 'TimeStart',
			'FldEng' => 'Start Time',
			'FldForeignTable' => '0',
			'FldForeignMin' => '11',
			'FldForeignMax' => '11',
			'FldForeign2Min' => '0',
			'FldForeign2Max' => '0',
			'FldType' => 'DATETIME',
			'FldDataType' => 'DateTime',
			'FldDataLength' => '0',
			'FldCharSupport' => ',Keyboard,Numbers,',
			'FldDisplayFormat' => 'YYYY-MM-DD HH:MM:SS',
			'FldKeyType' => 'Non',
			'FldKeyStruct' => 'Simple',
			'FldCompareSame' => '6'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 939,
			'FldDatabase' => '1',
			'FldTable' => '0',
			'FldOrd' => '74',
			'FldSpecType' => 'Generic',
			'FldSpecSource' => '0',
			'FldName' => 'TimeEnd',
			'FldEng' => 'End Time',
			'FldForeignTable' => '0',
			'FldForeignMin' => '11',
			'FldForeignMax' => '11',
			'FldForeign2Min' => '0',
			'FldForeign2Max' => '0',
			'FldType' => 'DATETIME',
			'FldDataType' => 'DateTime',
			'FldDataLength' => '0',
			'FldCharSupport' => ',Keyboard,Numbers,',
			'FldDisplayFormat' => 'YYYY-MM-DD HH:MM:SS',
			'FldKeyType' => 'Non',
			'FldKeyStruct' => 'Simple',
			'FldCompareSame' => '6'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 940,
			'FldDatabase' => '1',
			'FldTable' => '0',
			'FldOrd' => '75',
			'FldSpecType' => 'Generic',
			'FldSpecSource' => '0',
			'FldName' => 'Duration',
			'FldEng' => 'Duration',
			'FldDesc' => 'In Minutes, calculated based on Start Time and End Time.',
			'FldForeignTable' => '0',
			'FldForeignMin' => '11',
			'FldForeignMax' => '11',
			'FldForeign2Min' => '0',
			'FldForeign2Max' => '0',
			'FldType' => 'INT',
			'FldDataType' => 'Numeric',
			'FldDataLength' => '5',
			'FldCharSupport' => ',Numbers,',
			'FldKeyType' => 'Non',
			'FldKeyStruct' => 'Simple',
			'FldCompareSame' => '6'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 941,
			'FldDatabase' => '1',
			'FldTable' => '0',
			'FldOrd' => '11',
			'FldSpecType' => 'Generic',
			'FldSpecSource' => '0',
			'FldName' => 'AllegationID',
			'FldEng' => 'Related Allegation ID',
			'FldDesc' => 'The primary ID of the Allegation record related to the this table\'s record.',
			'FldForeignTable' => '113',
			'FldForeignMin' => '11',
			'FldForeignMax' => '11',
			'FldForeign2Min' => '0',
			'FldForeign2Max' => '0',
			'FldIsIndex' => '1',
			'FldType' => 'INT',
			'FldDataType' => 'Numeric',
			'FldDataLength' => '11',
			'FldCharSupport' => ',Numbers,',
			'FldKeyType' => 'Foreign',
			'FldKeyStruct' => 'Simple',
			'FldCompareSame' => '130'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 430,
			'FldDatabase' => '1',
			'FldTable' => '111',
			'FldOrd' => '14',
			'FldSpecSource' => '0',
			'FldName' => 'TotOfficers',
			'FldEng' => 'Total Number of Employees',
			'FldDesc' => 'The total number of sworn Officers employed by a Police Department. This information will be used for comparative statistical purposes and to determine the most likely Department on-scene during a particular Incident.',
			'FldNotes' => 'For example, if a User doesn\'t know which Police Department employed a given Subject Officer, the field list for Police Departments would begin by listing the local department with the highest number of total sworn officers.',
			'FldForeignTable' => '0',
			'FldForeignMin' => '11',
			'FldForeignMax' => '11',
			'FldForeign2Min' => '0',
			'FldForeign2Max' => '0',
			'FldType' => 'INT',
			'FldDataType' => 'Numeric',
			'FldDataLength' => '11',
			'FldCharSupport' => ',Numbers,',
			'FldKeyStruct' => 'Simple',
			'FldCompareSame' => '6',
			'FldOperateSame' => '10010',
			'FldOperateOther' => '10010',
			'FldOperateValue' => '10010'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 431,
			'FldDatabase' => '1',
			'FldTable' => '111',
			'FldOrd' => '15',
			'FldSpecSource' => '0',
			'FldName' => 'JurisdictionPopulation',
			'FldEng' => 'Jurisdiction Population',
			'FldDesc' => 'The total number of people who live within the geographical boundaries of a Police Department. This information will help identify policing trends and for comparative statistical purposes.',
			'FldForeignTable' => '0',
			'FldForeignMin' => '11',
			'FldForeignMax' => '11',
			'FldForeign2Min' => '0',
			'FldForeign2Max' => '0',
			'FldType' => 'INT',
			'FldDataType' => 'Numeric',
			'FldDataLength' => '11',
			'FldCharSupport' => ',Numbers,',
			'FldKeyStruct' => 'Simple',
			'FldNullSupport' => '0',
			'FldCompareSame' => '6',
			'FldOperateSame' => '10010',
			'FldOperateOther' => '10010',
			'FldOperateValue' => '10010'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 432,
			'FldDatabase' => '1',
			'FldTable' => '111',
			'FldOrd' => '16',
			'FldSpecSource' => '0',
			'FldName' => 'JurisdictionGPS',
			'FldEng' => 'Jurisdiction GPS',
			'FldDesc' => 'A series of GPS coordinates, representing the geographical polygon of a department\'s jurisdiction. Important for identifying the Police Department attached to a Complaint -- especially when Complainants are unsure.',
			'FldForeignTable' => '0',
			'FldForeignMin' => '11',
			'FldForeignMax' => '11',
			'FldForeign2Min' => '0',
			'FldForeign2Max' => '0',
			'FldType' => 'TEXT',
			'FldDataLength' => '0',
			'FldCharSupport' => ',Keyboard,Numbers,',
			'FldKeyStruct' => 'Simple'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 944,
			'FldDatabase' => '1',
			'FldTable' => '0',
			'FldOrd' => '10',
			'FldSpecType' => 'Generic',
			'FldSpecSource' => '0',
			'FldName' => 'SceneID',
			'FldEng' => 'Scene ID',
			'FldDesc' => 'The primary ID of the Scene record related to the this table\'s record.',
			'FldNotes' => 'For optionally associating Photographs, Diagrams, Documents, or Videos with a Scene.',
			'FldForeignTable' => '115',
			'FldForeignMin' => '11',
			'FldForeignMax' => '11',
			'FldForeign2Min' => '0',
			'FldForeign2Max' => '0',
			'FldType' => 'INT',
			'FldDataType' => 'Numeric',
			'FldDataLength' => '11',
			'FldCharSupport' => ',Numbers,',
			'FldKeyType' => 'Foreign',
			'FldKeyStruct' => 'Simple',
			'FldCompareSame' => '130'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 945,
			'FldDatabase' => '1',
			'FldTable' => '0',
			'FldOrd' => '17',
			'FldSpecType' => 'Generic',
			'FldSpecSource' => '0',
			'FldName' => 'InjuryID',
			'FldEng' => 'Injury ID',
			'FldDesc' => 'The primary ID of the Injury record related to the this table\'s record.',
			'FldNotes' => 'For optionally associating Photographs, Diagrams, Documents, or Videos with an Injury.',
			'FldForeignTable' => '117',
			'FldForeignMin' => '11',
			'FldForeignMax' => '11',
			'FldForeign2Min' => '0',
			'FldForeign2Max' => '0',
			'FldType' => 'INT',
			'FldDataType' => 'Numeric',
			'FldDataLength' => '11',
			'FldCharSupport' => ',Numbers,',
			'FldKeyType' => 'Foreign',
			'FldKeyStruct' => 'Simple',
			'FldCompareSame' => '130'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 947,
			'FldDatabase' => '1',
			'FldTable' => '0',
			'FldOrd' => '5',
			'FldSpecType' => 'Generic',
			'FldSpecSource' => '0',
			'FldName' => 'CivilianID',
			'FldEng' => 'Civilian ID',
			'FldDesc' => 'The primary ID of the Civilian record related to the this table\'s record.',
			'FldForeignTable' => '102',
			'FldForeignMin' => '11',
			'FldForeignMax' => '11',
			'FldForeign2Min' => '0',
			'FldForeign2Max' => '0',
			'FldType' => 'INT',
			'FldDataType' => 'Numeric',
			'FldDataLength' => '11',
			'FldCharSupport' => ',Numbers,',
			'FldKeyType' => 'Foreign',
			'FldKeyStruct' => 'Simple',
			'FldCompareSame' => '130'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 948,
			'FldDatabase' => '1',
			'FldTable' => '0',
			'FldOrd' => '18',
			'FldSpecType' => 'Generic',
			'FldSpecSource' => '0',
			'FldName' => 'EvidenceID',
			'FldEng' => 'Evidence ID',
			'FldDesc' => 'The primary ID of the Evidence record related to the this table\'s record.',
			'FldForeignTable' => '119',
			'FldForeignMin' => '11',
			'FldForeignMax' => '11',
			'FldForeign2Min' => '0',
			'FldForeign2Max' => '0',
			'FldDefault' => 'NULL',
			'FldIsIndex' => '1',
			'FldType' => 'INT',
			'FldDataType' => 'Numeric',
			'FldDataLength' => '11',
			'FldCharSupport' => ',Numbers,',
			'FldKeyType' => 'Foreign',
			'FldKeyStruct' => 'Simple',
			'FldCompareSame' => '130'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 949,
			'FldDatabase' => '1',
			'FldTable' => '0',
			'FldOrd' => '6',
			'FldSpecType' => 'Generic',
			'FldSpecSource' => '0',
			'FldName' => 'OfficerID',
			'FldEng' => 'Officer ID',
			'FldDesc' => 'The primary ID of the Officer record related to the this table\'s record.',
			'FldForeignTable' => '104',
			'FldForeignMin' => '11',
			'FldForeignMax' => '11',
			'FldForeign2Min' => '0',
			'FldForeign2Max' => '0',
			'FldType' => 'INT',
			'FldDataType' => 'Numeric',
			'FldDataLength' => '11',
			'FldCharSupport' => ',Numbers,',
			'FldKeyType' => 'Foreign',
			'FldKeyStruct' => 'Simple',
			'FldCompareSame' => '130'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 950,
			'FldDatabase' => '1',
			'FldTable' => '0',
			'FldOrd' => '19',
			'FldSpecType' => 'Generic',
			'FldSpecSource' => '0',
			'FldName' => 'OrderID',
			'FldEng' => 'Order ID',
			'FldDesc' => 'The primary ID of the Order record related to the this table\'s record.',
			'FldForeignTable' => '120',
			'FldForeignMin' => '11',
			'FldForeignMax' => '11',
			'FldForeign2Min' => '0',
			'FldForeign2Max' => '0',
			'FldType' => 'INT',
			'FldDataType' => 'Numeric',
			'FldDataLength' => '11',
			'FldCharSupport' => ',Numbers,',
			'FldKeyType' => 'Foreign',
			'FldKeyStruct' => 'Simple',
			'FldCompareSame' => '130'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 951,
			'FldDatabase' => '1',
			'FldTable' => '0',
			'FldOrd' => '76',
			'FldSpecType' => 'Generic',
			'FldSpecSource' => '0',
			'FldName' => 'IP',
			'FldEng' => 'IP Address',
			'FldNotes' => 'IP addresses may want to be encrypted.',
			'FldForeignTable' => '0',
			'FldForeignMin' => '11',
			'FldForeignMax' => '11',
			'FldForeign2Min' => '0',
			'FldForeign2Max' => '0',
			'FldDataLength' => '50',
			'FldCharSupport' => ',Letters,Keyboard,',
			'FldKeyType' => 'Non',
			'FldKeyStruct' => 'Simple',
			'FldCompareSame' => '130'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 952,
			'FldDatabase' => '1',
			'FldTable' => '0',
			'FldOrd' => '77',
			'FldSpecType' => 'Generic',
			'FldSpecSource' => '0',
			'FldName' => 'Name',
			'FldEng' => 'Username',
			'FldForeignTable' => '0',
			'FldForeignMin' => '11',
			'FldForeignMax' => '11',
			'FldForeign2Min' => '0',
			'FldForeign2Max' => '0',
			'FldDataLength' => '0',
			'FldCharSupport' => ',Letters,Keyboard,Numbers,',
			'FldKeyType' => 'Non',
			'FldKeyStruct' => 'Simple',
			'FldCompareSame' => '6'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 953,
			'FldDatabase' => '1',
			'FldTable' => '0',
			'FldOrd' => '78',
			'FldSpecType' => 'Generic',
			'FldSpecSource' => '0',
			'FldName' => 'Password',
			'FldEng' => 'Password',
			'FldNotes' => 'Encrypted',
			'FldForeignTable' => '0',
			'FldForeignMin' => '11',
			'FldForeignMax' => '11',
			'FldForeign2Min' => '0',
			'FldForeign2Max' => '0',
			'FldDataLength' => '0',
			'FldCharSupport' => ',Letters,Keyboard,Numbers,',
			'FldKeyType' => 'Non',
			'FldKeyStruct' => 'Simple',
			'FldCompareSame' => '130'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 954,
			'FldDatabase' => '1',
			'FldTable' => '0',
			'FldOrd' => '79',
			'FldSpecType' => 'Generic',
			'FldSpecSource' => '0',
			'FldName' => 'LastLogin',
			'FldEng' => 'Last Login',
			'FldForeignTable' => '0',
			'FldForeignMin' => '11',
			'FldForeignMax' => '11',
			'FldForeign2Min' => '0',
			'FldForeign2Max' => '0',
			'FldType' => 'DATETIME',
			'FldDataType' => 'DateTime',
			'FldDataLength' => '0',
			'FldCharSupport' => ',Keyboard,Numbers,',
			'FldDisplayFormat' => 'YYYY-MM-DD HH:MM:SS',
			'FldKeyType' => 'Non',
			'FldKeyStruct' => 'Simple',
			'FldCompareSame' => '6'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 955,
			'FldDatabase' => '1',
			'FldTable' => '0',
			'FldOrd' => '80',
			'FldSpecType' => 'Generic',
			'FldSpecSource' => '0',
			'FldName' => 'OfficerRank',
			'FldEng' => 'Officer Rank',
			'FldForeignTable' => '0',
			'FldForeignMin' => '11',
			'FldForeignMax' => '11',
			'FldForeign2Min' => '0',
			'FldForeign2Max' => '0',
			'FldValues' => 'Police Officer;Detective;Corporal;Sergeant;Lieutenant;Captain;Staff Inspector;Inspector;Chief Inspector;Deputy Commissioner;Commissioner;?',
			'FldDataLength' => '0',
			'FldCharSupport' => ',Letters,Keyboard,Numbers,',
			'FldKeyType' => 'Non',
			'FldKeyStruct' => 'Simple',
			'FldCompareSame' => '130'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 956,
			'FldDatabase' => '1',
			'FldTable' => '0',
			'FldOrd' => '81',
			'FldSpecType' => 'Generic',
			'FldSpecSource' => '0',
			'FldName' => 'BadgeNumber',
			'FldEng' => 'Badge Number',
			'FldForeignTable' => '0',
			'FldForeignMin' => '11',
			'FldForeignMax' => '11',
			'FldForeign2Min' => '0',
			'FldForeign2Max' => '0',
			'FldType' => 'INT',
			'FldDataType' => 'Numeric',
			'FldDataLength' => '11',
			'FldCharSupport' => ',Numbers,',
			'FldKeyType' => 'Non',
			'FldKeyStruct' => 'Simple',
			'FldCompareSame' => '6'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 957,
			'FldDatabase' => '1',
			'FldTable' => '0',
			'FldOrd' => '82',
			'FldSpecType' => 'Generic',
			'FldSpecSource' => '0',
			'FldName' => 'Timestamp',
			'FldEng' => 'Timestamp',
			'FldForeignTable' => '0',
			'FldForeignMin' => '11',
			'FldForeignMax' => '11',
			'FldForeign2Min' => '0',
			'FldForeign2Max' => '0',
			'FldDefault' => 'NOW()',
			'FldType' => 'DATETIME',
			'FldDataType' => 'DateTime',
			'FldDataLength' => '0',
			'FldCharSupport' => ',Keyboard,Numbers,',
			'FldDisplayFormat' => 'YYYY-MM-DD HH:MM:SS',
			'FldKeyType' => 'Non',
			'FldKeyStruct' => 'Simple',
			'FldCompareSame' => '6'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 190,
			'FldDatabase' => '1',
			'FldTable' => '29',
			'FldName' => 'UserID',
			'FldEng' => 'User ID',
			'FldDesc' => 'Indicates the unique User ID number of the User owning the data stored in this record for this Experience.',
			'FldForeignTable' => '167',
			'FldForeignMin' => '11',
			'FldForeignMax' => '11',
			'FldForeign2Min' => '11',
			'FldForeign2Max' => '11',
			'FldType' => 'INT',
			'FldDataType' => 'Numeric',
			'FldCharSupport' => ',Numbers,',
			'FldKeyType' => ',Foreign,',
			'FldOpts' => '39'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 191,
			'FldDatabase' => '1',
			'FldTable' => '29',
			'FldName' => 'SubmissionProgress',
			'FldEng' => 'Experience Node Progress',
			'FldDesc' => 'Indicates the unique Node ID number of the last Experience Node loaded during this User\'s Experience.',
			'FldForeignTable' => '0',
			'FldForeignMin' => '11',
			'FldForeignMax' => '11',
			'FldForeign2Min' => '11',
			'FldForeign2Max' => '11',
			'FldType' => 'INT',
			'FldDataType' => 'Numeric',
			'FldCharSupport' => ',Numbers,',
			'FldOpts' => '39'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 959,
			'FldDatabase' => '1',
			'FldTable' => '0',
			'FldOrd' => '12',
			'FldSpecType' => 'Generic',
			'FldSpecSource' => '0',
			'FldName' => 'EventSequenceID',
			'FldEng' => 'Event Sequence ID',
			'FldDesc' => 'The primary ID of the Event Sequence record related to the this table\'s record.',
			'FldForeignTable' => '137',
			'FldForeignMin' => '0',
			'FldForeignMax' => '11',
			'FldForeign2Min' => '0',
			'FldForeign2Max' => '0',
			'FldType' => 'INT',
			'FldDataType' => 'Numeric',
			'FldDataLength' => '11',
			'FldCharSupport' => ',Numbers,',
			'FldKeyType' => 'Foreign',
			'FldKeyStruct' => 'Simple',
			'FldCompareSame' => '130'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 192,
			'FldDatabase' => '1',
			'FldTable' => '29',
			'FldName' => 'VersionAB',
			'FldEng' => 'A/B Testing Version',
			'FldDesc' => 'Stores a complex string reflecting all A/B Testing variations in effect at the time of this User\'s Experience of this Node.',
			'FldForeignTable' => '0',
			'FldForeignMin' => '11',
			'FldForeignMax' => '11',
			'FldForeign2Min' => '11',
			'FldForeign2Max' => '11',
			'FldOpts' => '39'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 960,
			'FldDatabase' => '1',
			'FldTable' => '113',
			'FldOrd' => '2',
			'FldSpecType' => 'Replica',
			'FldSpecSource' => '959',
			'FldName' => 'EventSequenceID',
			'FldEng' => 'Event Sequence ID',
			'FldDesc' => 'The unique number of the Incident Event record related to this Allegation. This is important for linking the Allegation to a specific Stop, Search, Use of Force, or Arrest.',
			'FldForeignTable' => '137',
			'FldForeignMin' => '0',
			'FldForeignMax' => 'N',
			'FldForeign2Min' => '0',
			'FldForeign2Max' => '11',
			'FldType' => 'INT',
			'FldDataType' => 'Numeric',
			'FldDataLength' => '11',
			'FldCharSupport' => ',Numbers,',
			'FldKeyType' => 'Foreign',
			'FldKeyStruct' => 'Simple',
			'FldCompareSame' => '130',
			'FldOpts' => '13'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 706,
			'FldDatabase' => '1',
			'FldTable' => '112',
			'FldOrd' => '2',
			'FldSpecSource' => '0',
			'FldName' => 'Type',
			'FldEng' => 'OPC Complaint Type',
			'FldDesc' => 'The Administrator-selected category for newly-submitted Complaint records. Essential for determining where and how new Complaint records are stored and shared.',
			'FldForeignTable' => '0',
			'FldForeignMin' => '11',
			'FldForeignMax' => '11',
			'FldForeign2Min' => '0',
			'FldForeign2Max' => '0',
			'FldValues' => 'Def::OPC Staff/Internal Complaint Type',
			'FldIsIndex' => '1',
			'FldType' => 'INT',
			'FldDataType' => 'Numeric',
			'FldDataLength' => '3',
			'FldCharSupport' => ',Numbers,',
			'FldKeyStruct' => 'Simple',
			'FldEditRule' => 'NowAllowed',
			'FldNullSupport' => '0',
			'FldRequired' => '1',
			'FldCompareSame' => '130'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 962,
			'FldDatabase' => '1',
			'FldTable' => '121',
			'FldOrd' => '12',
			'FldSpecSource' => '0',
			'FldName' => 'OfficerRefuseID',
			'FldEng' => 'Officer refused to give ID?',
			'FldDesc' => 'Indicates whether or not the Officer shared their name and/or badge number after Subject requested it. Important for identifying possible violation of Department procedure.',
			'FldNotes' => 'We might use this opportunity to let Complainants know that insisting Officers share their badge number isn\'t always a smart move.

Tip: It\'s okay if you didn\'t get the badge or vehicle number. An officer--s identity can usually be established with a time, location, and physical description.',
			'FldForeignTable' => '0',
			'FldForeignMin' => '0',
			'FldForeignMax' => '0',
			'FldForeign2Min' => '0',
			'FldForeign2Max' => '0',
			'FldValues' => 'Y;N;?',
			'FldDataLength' => '1',
			'FldCharSupport' => ',Letters,',
			'FldKeyType' => 'Non',
			'FldCompareSame' => '130'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 707,
			'FldDatabase' => '1',
			'FldTable' => '145',
			'FldOrd' => '8',
			'FldSpecSource' => '0',
			'FldName' => 'OversightReportEvidenceID',
			'FldEng' => 'Investigative Agency Findings Report',
			'FldDesc' => 'The Evidence record storing the final determination letter submitted by the Investigative Agency regarding an OPC-submitted Complaint. This report provides essential information for tracking how Investigative Agencies respond to citizen complaints.',
			'FldNotes' => 'Complainants must scan these reports and upload them to their Complaint as Evidence.',
			'FldForeignMin' => '0',
			'FldForeignMax' => '11',
			'FldForeign2Min' => '0',
			'FldForeign2Max' => '11',
			'FldType' => 'INT',
			'FldDataType' => 'Numeric',
			'FldDataLength' => '11',
			'FldCharSupport' => ',Numbers,',
			'FldKeyType' => ',Foreign,',
			'FldNullSupport' => '0',
			'FldCompareSame' => '6'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 963,
			'FldDatabase' => '1',
			'FldTable' => '111',
			'FldOrd' => '12',
			'FldSpecSource' => '0',
			'FldName' => 'AddressCounty',
			'FldEng' => 'County',
			'FldDesc' => 'The state region where a local Police Department is headquartered or has jurisdiction. This information helps us track which Police Departments have jurisdiction over a specific Incident location.',
			'FldNotes' => 'Not applicable to Departments with Federal and Statewide jurisdictions.',
			'FldForeignTable' => '0',
			'FldForeignMin' => '0',
			'FldForeignMax' => '0',
			'FldForeign2Min' => '0',
			'FldForeign2Max' => '0',
			'FldDataLength' => '100',
			'FldCharSupport' => ',Letters,Keyboard,',
			'FldKeyType' => 'Non',
			'FldKeyStruct' => 'Simple',
			'FldCompareSame' => '6'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 1219,
			'FldDatabase' => '1',
			'FldTable' => '154',
			'FldOrd' => '5',
			'FldSpecType' => 'Replica',
			'FldSpecSource' => '834',
			'FldName' => 'NamePrefix',
			'FldEng' => 'Name Prefix',
			'FldDesc' => 'Letters placed before a person\'s first name that we use in all formal communications with persons or regarding Complaints.',
			'FldNotes' => 'Use only if selected. Field may otherwise be left blank',
			'FldForeignTable' => '0',
			'FldForeignMin' => '11',
			'FldForeignMax' => '11',
			'FldForeign2Min' => '0',
			'FldForeign2Max' => '0',
			'FldDataLength' => '20',
			'FldCharSupport' => ',Letters,Keyboard,',
			'FldKeyStruct' => 'Simple',
			'FldCompareSame' => '6',
			'FldOpts' => '7'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 964,
			'FldDatabase' => '1',
			'FldTable' => '104',
			'FldOrd' => '9',
			'FldSpecType' => 'Replica',
			'FldSpecSource' => '967',
			'FldName' => 'Precinct',
			'FldEng' => 'Department Precinct/District',
			'FldDesc' => 'The district within a city or municipality where an Officer is assigned. This information might help us  verify an Officer\'s identity.',
			'FldNotes' => 'Most Departments will NOT have precinct. However, precincts or districts usually exist in big cities.',
			'FldForeignTable' => '0',
			'FldForeignMin' => '0',
			'FldForeignMax' => '0',
			'FldForeign2Min' => '0',
			'FldForeign2Max' => '0',
			'FldDataLength' => '0',
			'FldCharSupport' => ',Letters,Keyboard,Numbers,',
			'FldKeyStruct' => 'Simple',
			'FldCompareSame' => '130',
			'FldOpts' => '7'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 1220,
			'FldDatabase' => '1',
			'FldTable' => '154',
			'FldOrd' => '6',
			'FldSpecType' => 'Replica',
			'FldSpecSource' => '830',
			'FldName' => 'NameFirst',
			'FldEng' => 'First Name',
			'FldDesc' => 'The legal given name of persons that we use in all formal communications with persons or regarding Complaints.',
			'FldForeignTable' => '0',
			'FldForeignMin' => '11',
			'FldForeignMax' => '11',
			'FldForeign2Min' => '0',
			'FldForeign2Max' => '0',
			'FldDataLength' => '0',
			'FldCharSupport' => ',Letters,Keyboard,',
			'FldKeyStruct' => 'Simple',
			'FldCompareSame' => '6',
			'FldOpts' => '7'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 965,
			'FldDatabase' => '1',
			'FldTable' => '0',
			'FldOrd' => '83',
			'FldSpecType' => 'Generic',
			'FldSpecSource' => '0',
			'FldName' => 'IDnumber',
			'FldEng' => 'Additional ID#',
			'FldNotes' => 'Eg. in New York, officers have a consistent Tax ID.',
			'FldForeignTable' => '0',
			'FldForeignMin' => '11',
			'FldForeignMax' => '11',
			'FldForeign2Min' => '0',
			'FldForeign2Max' => '0',
			'FldType' => 'INT',
			'FldDataType' => 'Numeric',
			'FldDataLength' => '11',
			'FldCharSupport' => ',Numbers,',
			'FldKeyType' => 'Non',
			'FldKeyStruct' => 'Simple',
			'FldCompareSame' => '6'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 1221,
			'FldDatabase' => '1',
			'FldTable' => '154',
			'FldOrd' => '8',
			'FldSpecType' => 'Replica',
			'FldSpecSource' => '832',
			'FldName' => 'NameMiddle',
			'FldEng' => 'Middle Name',
			'FldDesc' => 'The name of a person, placed between their first name and before their surname, that we use in all formal communications with persons or regarding Complaints.',
			'FldNotes' => 'Use only if selected. Field may otherwise be left blank',
			'FldForeignTable' => '0',
			'FldForeignMin' => '11',
			'FldForeignMax' => '11',
			'FldForeign2Min' => '0',
			'FldForeign2Max' => '0',
			'FldDataLength' => '0',
			'FldCharSupport' => ',Letters,Keyboard,',
			'FldKeyStruct' => 'Simple',
			'FldCompareSame' => '6',
			'FldOpts' => '7'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 1222,
			'FldDatabase' => '1',
			'FldTable' => '154',
			'FldOrd' => '9',
			'FldSpecType' => 'Replica',
			'FldSpecSource' => '835',
			'FldName' => 'NameLast',
			'FldEng' => 'Last Name',
			'FldDesc' => 'The legal surname of persons that we use in formal communications with or regarding Complaints.',
			'FldForeignTable' => '0',
			'FldForeignMin' => '11',
			'FldForeignMax' => '11',
			'FldForeign2Min' => '0',
			'FldForeign2Max' => '0',
			'FldDataLength' => '0',
			'FldCharSupport' => ',Letters,Keyboard,',
			'FldKeyStruct' => 'Simple',
			'FldCompareSame' => '6',
			'FldOpts' => '7'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 967,
			'FldDatabase' => '1',
			'FldTable' => '0',
			'FldOrd' => '84',
			'FldSpecType' => 'Generic',
			'FldSpecSource' => '0',
			'FldName' => 'Precinct',
			'FldEng' => 'Department Precinct',
			'FldForeignTable' => '0',
			'FldForeignMin' => '0',
			'FldForeignMax' => '0',
			'FldForeign2Min' => '0',
			'FldForeign2Max' => '0',
			'FldDataLength' => '0',
			'FldCharSupport' => ',Letters,Keyboard,Numbers,',
			'FldKeyType' => 'Non',
			'FldKeyStruct' => 'Simple',
			'FldCompareSame' => '2'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 1223,
			'FldDatabase' => '1',
			'FldTable' => '154',
			'FldOrd' => '10',
			'FldSpecType' => 'Replica',
			'FldSpecSource' => '833',
			'FldName' => 'NameSuffix',
			'FldEng' => 'Name Suffix',
			'FldDesc' => 'Letters added after a person\'s last name related to this record -- which provide additional information about their title or inherited name -- that we use in all formal communications with persons or regarding Complaints.',
			'FldForeignTable' => '0',
			'FldForeignMin' => '11',
			'FldForeignMax' => '11',
			'FldForeign2Min' => '0',
			'FldForeign2Max' => '0',
			'FldDataLength' => '20',
			'FldCharSupport' => ',Letters,Keyboard,',
			'FldKeyStruct' => 'Simple',
			'FldCompareSame' => '6',
			'FldOpts' => '7'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 457,
			'FldDatabase' => '1',
			'FldTable' => '125',
			'FldSpecType' => 'Replica',
			'FldSpecSource' => '921',
			'FldName' => 'UserID',
			'FldEng' => 'User ID',
			'FldDesc' => 'The primary User Authentication number connected to this Privilege Profile, vital to associating permissions with a specific System User.',
			'FldForeignTable' => '167',
			'FldForeignMin' => '0',
			'FldForeignMax' => 'N',
			'FldForeign2Min' => '11',
			'FldForeign2Max' => '11',
			'FldType' => 'INT',
			'FldDataType' => 'Numeric',
			'FldDataLength' => '11',
			'FldCharSupport' => ',Numbers,',
			'FldKeyType' => ',Primary,Foreign,',
			'FldKeyStruct' => 'Composite',
			'FldCompareSame' => '130',
			'FldOpts' => '13'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 969,
			'FldDatabase' => '1',
			'FldTable' => '114',
			'FldOrd' => '8',
			'FldSpecSource' => '0',
			'FldName' => 'Landmarks',
			'FldEng' => 'Nearby Landmarks',
			'FldDesc' => 'An easily-recognized place, object, or feature that can help establish a precise Incident location. Useful for identifying locations where an address alone won\'t suffice.',
			'FldNotes' => 'e.g. near a memorial inside a large park.',
			'FldForeignTable' => '0',
			'FldForeignMin' => '0',
			'FldForeignMax' => '0',
			'FldForeign2Min' => '0',
			'FldForeign2Max' => '0',
			'FldDataLength' => '0',
			'FldCharSupport' => ',Letters,Keyboard,Numbers,',
			'FldKeyType' => 'Non',
			'FldKeyStruct' => 'Simple',
			'FldOpts' => '7'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 458,
			'FldDatabase' => '1',
			'FldTable' => '125',
			'FldOrd' => '1',
			'FldSpecType' => 'Replica',
			'FldSpecSource' => '866',
			'FldName' => 'ComplaintID',
			'FldEng' => 'Complaint ID',
			'FldDesc' => 'The unique number of the Complaint record related to this Privilege Profile, vital to associating permissions with a specific Complaint (instead of an entire Department).',
			'FldForeignTable' => '112',
			'FldForeignMin' => '0',
			'FldForeignMax' => 'N',
			'FldForeign2Min' => '0',
			'FldForeign2Max' => '11',
			'FldIsIndex' => '1',
			'FldType' => 'INT',
			'FldDataType' => 'Numeric',
			'FldDataLength' => '11',
			'FldCharSupport' => ',Numbers,',
			'FldKeyType' => ',Primary,Foreign,',
			'FldKeyStruct' => 'Composite',
			'FldValuesEnteredBy' => 'System',
			'FldCompareSame' => '130',
			'FldOpts' => '13'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 970,
			'FldDatabase' => '1',
			'FldTable' => '104',
			'FldOrd' => '13',
			'FldSpecSource' => '0',
			'FldName' => 'DashCam',
			'FldEng' => 'Vehicle dash cam?',
			'FldDesc' => 'Indicates whether or not the Officer\'s vehicle had a dashcam. Essential for obtaining possible video Evidence of the Incident.',
			'FldNotes' => 'The Complainant won\'t likely know if there was a dashcam. This is intended as a prompt to urge Complainants to seek this information on their own or with an Attorney\'s help. 

On 9/17, we decided not to include this in the UI specs because most complainants will 1) not know if there is a dash cam; 2) won\'t be able to access any available footage without lawyer; and 3) this could be an unnecessary and complex distraction for users.',
			'FldForeignMin' => '0',
			'FldForeignMax' => '0',
			'FldForeign2Min' => '0',
			'FldForeign2Max' => '0',
			'FldValues' => 'Y;N;?',
			'FldDataLength' => '1',
			'FldCharSupport' => ',',
			'FldNullSupport' => '0',
			'FldCompareSame' => '878800'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 971,
			'FldDatabase' => '1',
			'FldTable' => '0',
			'FldOrd' => '28',
			'FldSpecType' => 'Generic',
			'FldSpecSource' => '0',
			'FldName' => 'Nickname',
			'FldEng' => 'Nickname',
			'FldDesc' => 'Preferred first name of a Complainant that we only use in personal communications with Complainants.',
			'FldNotes' => 'Use only if selected. Field may otherwise be left blank',
			'FldForeignTable' => '0',
			'FldForeignMin' => '0',
			'FldForeignMax' => '0',
			'FldForeign2Min' => '0',
			'FldForeign2Max' => '0',
			'FldDataLength' => '0',
			'FldCharSupport' => ',Letters,Keyboard,Numbers,',
			'FldKeyType' => 'Non',
			'FldCompareSame' => '6'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 973,
			'FldDatabase' => '1',
			'FldTable' => '154',
			'FldOrd' => '7',
			'FldSpecType' => 'Replica',
			'FldSpecSource' => '971',
			'FldName' => 'Nickname',
			'FldEng' => 'Nickname',
			'FldDesc' => 'Preferred first name of persons that we may use in less-formal communications with them. Important for maintaining cordial relationships with these key contacts.',
			'FldNotes' => 'Use only if selected. Field may otherwise be left blank. For people directly involved in a police incident (Victims, Witnesses, Officers), the Nickname field is really for the sake of user experience while taking the survey.',
			'FldForeignMin' => '0',
			'FldForeignMax' => '0',
			'FldForeign2Min' => '0',
			'FldForeign2Max' => '0',
			'FldDataLength' => '0',
			'FldCharSupport' => ',Letters,Numbers,Keyboard,',
			'FldNullSupport' => '0',
			'FldCompareSame' => '6',
			'FldOpts' => '7'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 208,
			'FldDatabase' => '1',
			'FldTable' => '110',
			'FldOrd' => '6',
			'FldSpecType' => 'Replica',
			'FldSpecSource' => '923',
			'FldName' => 'CompanyName',
			'FldEng' => 'Company Name',
			'FldDesc' => 'The full name of the business or or organization a Customer represents. This is an integral component of a Customer\'s complete address.',
			'FldForeignTable' => '0',
			'FldForeignMin' => '11',
			'FldForeignMax' => '11',
			'FldForeign2Min' => '0',
			'FldForeign2Max' => '0',
			'FldDataLength' => '0',
			'FldCharSupport' => ',Letters,Keyboard,Numbers,',
			'FldKeyType' => 'Non',
			'FldKeyStruct' => 'Simple',
			'FldCompareSame' => '6'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 209,
			'FldDatabase' => '1',
			'FldTable' => '110',
			'FldOrd' => '8',
			'FldSpecType' => 'Replica',
			'FldSpecSource' => '924',
			'FldName' => 'CompanyWebsite',
			'FldEng' => 'Website',
			'FldDesc' => 'The home page of a Customer\'s business or organization. Might include important updated information about Customers.',
			'FldForeignTable' => '0',
			'FldForeignMin' => '11',
			'FldForeignMax' => '11',
			'FldForeign2Min' => '0',
			'FldForeign2Max' => '0',
			'FldDataLength' => '0',
			'FldCharSupport' => ',Letters,Keyboard,Numbers,',
			'FldKeyType' => 'Non',
			'FldKeyStruct' => 'Simple',
			'FldCompareSame' => '6'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 977,
			'FldDatabase' => '1',
			'FldTable' => '106',
			'FldOrd' => '8',
			'FldSpecType' => 'Replica',
			'FldSpecSource' => '971',
			'FldName' => 'Nickname',
			'FldEng' => 'Nickname',
			'FldDesc' => 'Preferred first name of Investigative Agency contacts that we use in less-formal communications with them. Important for maintaining cordial relationships with these key contacts.',
			'FldNotes' => 'Use only if selected. Field may otherwise be left blank',
			'FldForeignTable' => '0',
			'FldForeignMin' => '0',
			'FldForeignMax' => '0',
			'FldForeign2Min' => '0',
			'FldForeign2Max' => '0',
			'FldDataLength' => '0',
			'FldCharSupport' => ',Letters,Keyboard,Numbers,',
			'FldKeyType' => 'Non',
			'FldCompareSame' => '6',
			'FldOpts' => '11'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 1233,
			'FldDatabase' => '1',
			'FldTable' => '154',
			'FldOrd' => '20',
			'FldSpecType' => 'Replica',
			'FldSpecSource' => '846',
			'FldName' => 'Birthday',
			'FldEng' => 'Date of Birth',
			'FldDesc' => 'The month, day, and year a person was born. This information is used to help verify a person\'s identity.',
			'FldNotes' => 'If Date of Birth is unknown, the "Age" field will become visible, which offers age ranges to be selected.',
			'FldForeignTable' => '0',
			'FldForeignMin' => '11',
			'FldForeignMax' => '11',
			'FldForeign2Min' => '0',
			'FldForeign2Max' => '0',
			'FldType' => 'DATE',
			'FldDataType' => 'DateTime',
			'FldDataLength' => '0',
			'FldCharSupport' => ',Keyboard,Numbers,',
			'FldInputMask' => 'YYYY-MM-DD',
			'FldKeyStruct' => 'Simple',
			'FldCompareSame' => '6',
			'FldCompareOther' => '6',
			'FldCompareValue' => '6',
			'FldOpts' => '11'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 210,
			'FldDatabase' => '1',
			'FldTable' => '110',
			'FldOrd' => '7',
			'FldSpecType' => 'Replica',
			'FldSpecSource' => '922',
			'FldName' => 'Title',
			'FldEng' => 'Title',
			'FldDesc' => 'The job position of a Customer within an organization. We might use this in formal communications with Customers or regarding Customers.',
			'FldForeignTable' => '0',
			'FldForeignMin' => '11',
			'FldForeignMax' => '11',
			'FldForeign2Min' => '0',
			'FldForeign2Max' => '0',
			'FldDataLength' => '0',
			'FldCharSupport' => ',Letters,Keyboard,Numbers,',
			'FldKeyType' => 'Non',
			'FldKeyStruct' => 'Simple',
			'FldCompareSame' => '130'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 984,
			'FldDatabase' => '1',
			'FldTable' => '102',
			'FldOrd' => '2',
			'FldSpecSource' => '0',
			'FldName' => 'IsCreator',
			'FldEng' => 'Creator of this complaint?',
			'FldDesc' => 'Indicates that this Civilian is the person who created the Complaint or Compliment. This information helps us identity Complainants who are also Subjects or Witnesses.',
			'FldForeignTable' => '0',
			'FldForeignMin' => '0',
			'FldForeignMax' => '0',
			'FldForeign2Min' => '0',
			'FldForeign2Max' => '0',
			'FldValues' => 'Y;N',
			'FldDefault' => 'N',
			'FldDataLength' => '1',
			'FldCharSupport' => ',Letters,',
			'FldEditRule' => 'NowAllowed',
			'FldNullSupport' => '0',
			'FldRequired' => '1',
			'FldCompareSame' => '878800'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 217,
			'FldDatabase' => '1',
			'FldTable' => '106',
			'FldOrd' => '29',
			'FldSpecSource' => '0',
			'FldName' => 'SubmitDeadline',
			'FldEng' => 'Days Until Submission Deadline',
			'FldDesc' => 'Indicates that there is a policy stipulating a maximum number of days between when the Incident occurred and when a Complaint must be submitted [or received?] by an Investigative Agency in order for it to be properly investigated. This information might help OPC Administrators prioritize the review of new complaints. For Departments without a time limit for submitting Complaints, this field is stored as -1.',
			'FldNotes' => 'This is used to calculate deadlines for each Complaint in the Administrator tools.',
			'FldForeignTable' => '0',
			'FldForeignMin' => '11',
			'FldForeignMax' => '11',
			'FldForeign2Min' => '0',
			'FldForeign2Max' => '0',
			'FldType' => 'INT',
			'FldDataType' => 'Numeric',
			'FldDataLength' => '11',
			'FldCharSupport' => ',Numbers,',
			'FldKeyStruct' => 'Simple',
			'FldCompareSame' => '6'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 985,
			'FldDatabase' => '1',
			'FldTable' => '102',
			'FldOrd' => '1',
			'FldSpecType' => 'Replica',
			'FldSpecSource' => '921',
			'FldName' => 'UserID',
			'FldEng' => 'User ID',
			'FldDesc' => 'The primary User Authentication number connected to a Civilian\'s record. Important for allowing Complainants to log into OPC to complete Complaints or update Complaints.',
			'FldForeignTable' => '167',
			'FldForeignMin' => '0',
			'FldForeignMax' => '11',
			'FldForeign2Min' => '0',
			'FldForeign2Max' => '11',
			'FldType' => 'INT',
			'FldDataType' => 'Numeric',
			'FldDataLength' => '11',
			'FldCharSupport' => ',Numbers,',
			'FldKeyType' => ',Foreign,',
			'FldKeyStruct' => 'Simple',
			'FldCompareSame' => '130',
			'FldOpts' => '13'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 987,
			'FldDatabase' => '1',
			'FldTable' => '106',
			'FldSpecSource' => '0',
			'FldName' => 'Type',
			'FldEng' => 'Oversight Type',
			'FldDesc' => 'Indicates category of Investigative Agency. This information is essential for determining if a given Investigative Agency is either an Internal Affairs Department or a Citizen Investigative Agency. (They cannot be both.)',
			'FldForeignTable' => '0',
			'FldForeignMin' => '0',
			'FldForeignMax' => '0',
			'FldForeign2Min' => '0',
			'FldForeign2Max' => '0',
			'FldValues' => 'Def::Investigative Agency Types',
			'FldType' => 'INT',
			'FldDataType' => 'Numeric',
			'FldDataLength' => '3',
			'FldCharSupport' => ',Numbers,',
			'FldEditRule' => 'NowAllowed',
			'FldNullSupport' => '0',
			'FldRequired' => '1',
			'FldCompareSame' => '130'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 988,
			'FldDatabase' => '1',
			'FldTable' => '110',
			'FldSpecSource' => '0',
			'FldName' => 'Type',
			'FldEng' => 'Partner Role',
			'FldDesc' => 'The role of this Partner. This information helps us keep track of who is using our product and identify potential marketing opportunities for new Partners.',
			'FldForeignMin' => '0',
			'FldForeignMax' => '0',
			'FldForeign2Min' => '0',
			'FldForeign2Max' => '0',
			'FldValues' => 'Def::Customer Types',
			'FldType' => 'INT',
			'FldDataType' => 'Numeric',
			'FldDataLength' => '3',
			'FldCharSupport' => ',Numbers,',
			'FldNullSupport' => '0',
			'FldCompareSame' => '878800'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 222,
			'FldDatabase' => '1',
			'FldTable' => '112',
			'FldOrd' => '26',
			'FldSpecType' => 'Replica',
			'FldSpecSource' => '0',
			'FldName' => 'AttID',
			'FldEng' => 'Requested Partner ID',
			'FldDesc' => 'Indicates the unique Partner ID number of the person or organization requested by this Complainant.',
			'FldForeignTable' => '110',
			'FldForeignMin' => '0',
			'FldForeignMax' => 'N',
			'FldForeign2Min' => '0',
			'FldForeign2Max' => '11',
			'FldType' => 'INT',
			'FldDataType' => 'Numeric',
			'FldDataLength' => '11',
			'FldCharSupport' => ',Numbers,',
			'FldKeyType' => ',Foreign,',
			'FldNullSupport' => '0',
			'FldCompareSame' => '878800'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 990,
			'FldDatabase' => '1',
			'FldTable' => '102',
			'FldOrd' => '3',
			'FldSpecSource' => '0',
			'FldName' => 'Role',
			'FldEng' => 'Civilian\'s role in incident?',
			'FldDesc' => 'Indicates category of a Civilian. This information is essential for understanding whether a given Civilian was a Subject of an Allegation or a Witness to the Allegation.',
			'FldNotes' => 'People cannot be both a Subject and a Witness to an Incident. If considered both, then they are a Subject.',
			'FldForeignMin' => '0',
			'FldForeignMax' => '0',
			'FldForeign2Min' => '0',
			'FldForeign2Max' => '0',
			'FldValues' => 'Witness;Subject;Neither;Upset',
			'FldDataLength' => '10',
			'FldCharSupport' => ',Letters,',
			'FldNullSupport' => '0',
			'FldCompareSame' => '878800'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 223,
			'FldDatabase' => '1',
			'FldTable' => '145',
			'FldOrd' => '3',
			'FldSpecSource' => '0',
			'FldName' => 'Submitted',
			'FldEng' => 'Submitted to Investigative Agency',
			'FldDesc' => 'Indicates date and time when an electronic Complaint was sent to an appropriate Investigative Agency. This is an essential for tracking an Investigative Agency\'s response -- or non-response -- rates to OPC-submitted Complaints.',
			'FldForeignMin' => '11',
			'FldForeignMax' => '11',
			'FldForeign2Min' => '0',
			'FldForeign2Max' => '0',
			'FldDefault' => 'NULL',
			'FldType' => 'DATETIME',
			'FldDataType' => 'DateTime',
			'FldDataLength' => '0',
			'FldCharSupport' => ',Numbers,Keyboard,',
			'FldDisplayFormat' => 'YYYY-MM-DD HH:MM:SS',
			'FldNullSupport' => '0',
			'FldCompareSame' => '6'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 479,
			'FldDatabase' => '1',
			'FldTable' => '126',
			'FldSpecType' => 'Replica',
			'FldSpecSource' => '921',
			'FldName' => 'UserID',
			'FldEng' => 'User ID',
			'FldDesc' => 'The primary User Authentication number connected to this Action, vital for tracking System User behavior and system security.',
			'FldForeignTable' => '167',
			'FldForeignMin' => '0',
			'FldForeignMax' => 'N',
			'FldForeign2Min' => '11',
			'FldForeign2Max' => '11',
			'FldType' => 'INT',
			'FldDataType' => 'Numeric',
			'FldDataLength' => '11',
			'FldCharSupport' => ',Numbers,',
			'FldKeyType' => ',Foreign,',
			'FldKeyStruct' => 'Simple',
			'FldEditRule' => 'NowNot',
			'FldNullSupport' => '0',
			'FldRequired' => '1',
			'FldCompareSame' => '130',
			'FldOpts' => '13'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 991,
			'FldDatabase' => '1',
			'FldTable' => '106',
			'FldOrd' => '4',
			'FldSpecSource' => '0',
			'FldName' => 'AgncName',
			'FldEng' => 'Agency Name',
			'FldDesc' => 'The official name of an Investigative Agency. This is an essential component of a Investigative Agency\'s complete address.',
			'FldForeignTable' => '0',
			'FldForeignMin' => '0',
			'FldForeignMax' => '0',
			'FldForeign2Min' => '0',
			'FldForeign2Max' => '0',
			'FldDataLength' => '0',
			'FldCharSupport' => ',Letters,Keyboard,Numbers,',
			'FldKeyStruct' => 'Simple',
			'FldEditRule' => 'NowAllowed',
			'FldNullSupport' => '0',
			'FldRequired' => '1',
			'FldCompareSame' => '6'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 224,
			'FldDatabase' => '1',
			'FldTable' => '145',
			'FldOrd' => '5',
			'FldSpecSource' => '0',
			'FldName' => 'Received',
			'FldEng' => 'Received by Investigative Agency',
			'FldDesc' => 'Indicates date and time when an electronic Complaint was received by an appropriate Investigative Agency. This is essential for tracking an Investigative Agency\'s  response time when acknowledging receipt of OPC-submitted Complaints.',
			'FldNotes' => 'We don\'t yet know how many departments will opt to electronically indicate that they\'ve received OpenPolice.org complaints. In fact, many will likely skip this process and directly contact Complainants.',
			'FldForeignMin' => '11',
			'FldForeignMax' => '11',
			'FldForeign2Min' => '0',
			'FldForeign2Max' => '0',
			'FldDefault' => 'NULL',
			'FldType' => 'DATETIME',
			'FldDataType' => 'DateTime',
			'FldDataLength' => '0',
			'FldCharSupport' => ',Numbers,Keyboard,',
			'FldDisplayFormat' => 'YYYY-MM-DD HH:MM:SS',
			'FldNullSupport' => '0',
			'FldCompareSame' => '6'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 225,
			'FldDatabase' => '1',
			'FldTable' => '145',
			'FldOrd' => '2',
			'FldSpecType' => 'Replica',
			'FldSpecSource' => '925',
			'FldName' => 'OverID',
			'FldEng' => 'Oversight ID',
			'FldDesc' => 'The unique number of the Investigative Agency record involved with this Complaint. This number helps track the investigative progress of any Investigative Agencies who have jurisdiction over this Complaint.',
			'FldForeignTable' => '106',
			'FldForeignMin' => '0',
			'FldForeignMax' => 'N',
			'FldForeign2Min' => '11',
			'FldForeign2Max' => '11',
			'FldIsIndex' => '1',
			'FldType' => 'INT',
			'FldDataType' => 'Numeric',
			'FldDataLength' => '11',
			'FldCharSupport' => ',Numbers,',
			'FldKeyType' => ',Primary,Foreign,',
			'FldKeyStruct' => 'Composite',
			'FldEditRule' => 'NowNot',
			'FldNullSupport' => '0',
			'FldValuesEnteredBy' => 'System',
			'FldRequired' => '1',
			'FldCompareSame' => '130',
			'FldOpts' => '13'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 481,
			'FldDatabase' => '1',
			'FldTable' => '126',
			'FldOrd' => '2',
			'FldSpecSource' => '0',
			'FldName' => 'Table',
			'FldEng' => 'Table Edited',
			'FldDesc' => 'Name of the table whose contents are being altered by a System User (usually an Administrator), at any point after a Complaint has been submitted. This is important tracking the table being altered.',
			'FldForeignTable' => '0',
			'FldForeignMin' => '11',
			'FldForeignMax' => '11',
			'FldForeign2Min' => '0',
			'FldForeign2Max' => '0',
			'FldDataLength' => '0',
			'FldCharSupport' => ',Letters,Keyboard,',
			'FldKeyType' => 'Non',
			'FldKeyStruct' => 'Simple',
			'FldCompareSame' => '6'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 993,
			'FldDatabase' => '1',
			'FldTable' => '106',
			'FldOrd' => '14',
			'FldSpecType' => 'Replica',
			'FldSpecSource' => '924',
			'FldName' => 'Website',
			'FldEng' => 'Website',
			'FldDesc' => 'The page URL of the Civilian Investigative Agency or Internal Affairs Department. Ideally provides clear information about the Police Department\'s complaint process.',
			'FldNotes' => 'IMPORTANT: Investigative Agencies include both Civilian Oversight Agencies (COAs) and Internal Affairs (IA) Departments. If a Police Department has a NACOLE-approved COA, use their URL instead of the Department\'s IA URL.
https://nacole.org/resources/u-s-oversight-agency-websites/

Keep in mind that a .gov URL with clear-cut police complaint information will frequently be absent or difficult to find. If that\'s the case, OPC\'s web form must clearly indicate this absence.',
			'FldForeignTable' => '0',
			'FldForeignMin' => '11',
			'FldForeignMax' => '11',
			'FldForeign2Min' => '0',
			'FldForeign2Max' => '0',
			'FldDataLength' => '0',
			'FldCharSupport' => ',Letters,Keyboard,Numbers,',
			'FldKeyType' => 'Non',
			'FldKeyStruct' => 'Simple',
			'FldCompareSame' => '6'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 482,
			'FldDatabase' => '1',
			'FldTable' => '126',
			'FldOrd' => '3',
			'FldSpecSource' => '0',
			'FldName' => 'RecordID',
			'FldEng' => 'Table Record ID',
			'FldDesc' => 'The unique primary ID number of the record in the table whose contents are being altered by a System User (usually an Administrator), at any point after a Complaint has been submitted. This is important tracking the specific record being altered.',
			'FldForeignTable' => '0',
			'FldForeignMin' => '11',
			'FldForeignMax' => '11',
			'FldForeign2Min' => '0',
			'FldForeign2Max' => '0',
			'FldType' => 'INT',
			'FldDataType' => 'Numeric',
			'FldDataLength' => '11',
			'FldCharSupport' => ',Numbers,',
			'FldKeyType' => 'Non',
			'FldKeyStruct' => 'Simple',
			'FldCompareSame' => '6'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 994,
			'FldDatabase' => '1',
			'FldTable' => '0',
			'FldOrd' => '1000',
			'FldSpecType' => 'Generic',
			'FldSpecSource' => '0',
			'FldName' => 'BodyType',
			'FldEng' => 'Body Type',
			'FldForeignTable' => '0',
			'FldForeignMin' => '0',
			'FldForeignMax' => '0',
			'FldForeign2Min' => '0',
			'FldForeign2Max' => '0',
			'FldValues' => 'Slim/Slender;Medium/Average;Athletic/Muscular;Large/Fat',
			'FldDataLength' => '20',
			'FldCharSupport' => ',Letters,Keyboard,',
			'FldKeyType' => 'Non',
			'FldKeyStruct' => 'Simple',
			'FldCompareSame' => '130'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 483,
			'FldDatabase' => '1',
			'FldTable' => '126',
			'FldOrd' => '4',
			'FldSpecSource' => '0',
			'FldName' => 'OldData',
			'FldEng' => 'Old Data Values',
			'FldDesc' => 'A data dump of the initial value of all the table record\'s fields\' contents, or at least those with values being changed by a System User. This is vital to provide breadcrumbs to correct potential problems.',
			'FldNotes' => 'Data formatting TBD, but could be like JSON or XML.',
			'FldForeignTable' => '0',
			'FldForeignMin' => '11',
			'FldForeignMax' => '11',
			'FldForeign2Min' => '0',
			'FldForeign2Max' => '0',
			'FldType' => 'TEXT',
			'FldDataLength' => '0',
			'FldCharSupport' => ',Letters,Keyboard,',
			'FldKeyType' => 'Non',
			'FldKeyStruct' => 'Simple',
			'FldCompareSame' => '6'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 995,
			'FldDatabase' => '1',
			'FldTable' => '153',
			'FldOrd' => '5',
			'FldSpecType' => 'Replica',
			'FldSpecSource' => '994',
			'FldName' => 'BodyType',
			'FldEng' => 'Body Type',
			'FldDesc' => 'General category of a Civilian or Officer\'s body shape. This information might help verify a Civilian or Officer\'s identity.',
			'FldForeignTable' => '0',
			'FldForeignMin' => '0',
			'FldForeignMax' => '0',
			'FldForeign2Min' => '0',
			'FldForeign2Max' => '0',
			'FldValues' => 'Def::Body Types',
			'FldType' => 'INT',
			'FldDataType' => 'Numeric',
			'FldDataLength' => '3',
			'FldCharSupport' => ',Numbers,',
			'FldKeyStruct' => 'Simple',
			'FldCompareSame' => '130'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 484,
			'FldDatabase' => '1',
			'FldTable' => '126',
			'FldOrd' => '5',
			'FldSpecSource' => '0',
			'FldName' => 'NewData',
			'FldEng' => 'New Data Values',
			'FldDesc' => 'A data dump of the newly updated values of all the table record\'s fields\' contents, or at least those with values being changed by a System User. This is vital to provide breadcrumbs to correct potential problems.',
			'FldNotes' => 'Data formatting TBD, but could be like JSON or XML.',
			'FldForeignTable' => '0',
			'FldForeignMin' => '11',
			'FldForeignMax' => '11',
			'FldForeign2Min' => '0',
			'FldForeign2Max' => '0',
			'FldType' => 'TEXT',
			'FldDataLength' => '0',
			'FldCharSupport' => ',Letters,Keyboard,',
			'FldKeyType' => 'Non',
			'FldKeyStruct' => 'Simple',
			'FldCompareSame' => '6'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 485,
			'FldDatabase' => '1',
			'FldTable' => '133',
			'FldOrd' => '2',
			'FldSpecSource' => '0',
			'FldName' => 'Action',
			'FldEng' => 'Login Action',
			'FldDesc' => 'The type of login activity being tracked, vital for behavior logging and potentially providing security validation.',
			'FldForeignTable' => '0',
			'FldForeignMin' => '11',
			'FldForeignMax' => '11',
			'FldForeign2Min' => '0',
			'FldForeign2Max' => '0',
			'FldValues' => 'Successful Login;Unsuccessful Login Attempt(s);Logout',
			'FldDataLength' => '0',
			'FldCharSupport' => ',Letters,Keyboard,',
			'FldKeyType' => 'Non',
			'FldKeyStruct' => 'Simple',
			'FldCompareSame' => '130'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 997,
			'FldDatabase' => '1',
			'FldTable' => '0',
			'FldOrd' => '1000',
			'FldSpecType' => 'Generic',
			'FldSpecSource' => '0',
			'FldName' => 'LinkedIn',
			'FldEng' => 'LinkedIn',
			'FldDesc' => 'The URL link to a Customer\'s LinkedIn profile page. This information helps us keep track of who is using our product and identify potential marketing opportunities for new Customers.',
			'FldForeignTable' => '0',
			'FldForeignMin' => '0',
			'FldForeignMax' => '0',
			'FldForeign2Min' => '0',
			'FldForeign2Max' => '0',
			'FldDataLength' => '0',
			'FldCharSupport' => ',Letters,Keyboard,Numbers,',
			'FldKeyType' => 'Non',
			'FldCompareSame' => '130'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 230,
			'FldDatabase' => '1',
			'FldTable' => '112',
			'FldOrd' => '22',
			'FldSpecSource' => '0',
			'FldName' => 'OfficerDisciplined',
			'FldEng' => 'Officer Disciplined',
			'FldDesc' => 'Indicates whether or not any Subject Officers associated with a Complaint have received any formal punishment for their actions. Important for for statistical purposes and for bringing sense of justice and closure to Civilians.',
			'FldNotes' => 'The likelihood of an individual complaint allegation being sustained is very low. However, the likelihood of obtaining officer discipline data relating to a specific sustained complaint is extremely remote.',
			'FldForeignTable' => '0',
			'FldForeignMin' => '11',
			'FldForeignMax' => '11',
			'FldForeign2Min' => '0',
			'FldForeign2Max' => '0',
			'FldValues' => 'Y;N;?',
			'FldDataLength' => '1',
			'FldCharSupport' => ',Letters,Keyboard,',
			'FldKeyStruct' => 'Simple',
			'FldCompareSame' => '130'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 486,
			'FldDatabase' => '1',
			'FldTable' => '133',
			'FldOrd' => '1',
			'FldSpecType' => 'Replica',
			'FldSpecSource' => '957',
			'FldName' => 'Timestamp',
			'FldEng' => 'Timestamp',
			'FldDesc' => 'The date and time of a System User login, vital for tracking System User behavior and potentially providing security validation.',
			'FldForeignTable' => '0',
			'FldForeignMin' => '11',
			'FldForeignMax' => '11',
			'FldForeign2Min' => '0',
			'FldForeign2Max' => '0',
			'FldDefault' => 'NOW()',
			'FldType' => 'DATETIME',
			'FldDataType' => 'DateTime',
			'FldDataLength' => '0',
			'FldCharSupport' => ',Keyboard,Numbers,',
			'FldDisplayFormat' => 'YYYY-MM-DD HH:MM:SS',
			'FldKeyType' => 'Non',
			'FldKeyStruct' => 'Simple',
			'FldCompareSame' => '6'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 998,
			'FldDatabase' => '1',
			'FldTable' => '144',
			'FldOrd' => '1000',
			'FldSpecType' => 'Replica',
			'FldSpecSource' => '866',
			'FldName' => 'ComplaintID',
			'FldEng' => 'Complaint ID',
			'FldDesc' => 'The unique number of the Complaint record, vital to associating with all other Complaint data.',
			'FldForeignTable' => '112',
			'FldForeignMin' => '0',
			'FldForeignMax' => 'N',
			'FldType' => 'INT',
			'FldDataType' => 'Numeric',
			'FldDataLength' => '11',
			'FldCharSupport' => ',Numbers,',
			'FldKeyType' => ',Primary,Foreign,',
			'FldNullSupport' => '0',
			'FldCompareSame' => '878800',
			'FldOpts' => '13'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 231,
			'FldDatabase' => '1',
			'FldTable' => '112',
			'FldOrd' => '23',
			'FldSpecSource' => '0',
			'FldName' => 'OfficerDisciplineType',
			'FldEng' => 'Officer Discipline Type',
			'FldDesc' => 'Indicates the category of formal punishment any Subject Officers associated with a Complaint have received. Important for statistical purposes and for bringing sense of justice and closure to Civilians.',
			'FldForeignTable' => '0',
			'FldForeignMin' => '11',
			'FldForeignMax' => '11',
			'FldForeign2Min' => '0',
			'FldForeign2Max' => '0',
			'FldValues' => 'Def::Officer Discipline Types',
			'FldType' => 'INT',
			'FldDataType' => 'Numeric',
			'FldDataLength' => '3',
			'FldCharSupport' => ',Numbers,',
			'FldKeyStruct' => 'Simple',
			'FldCompareSame' => '130'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 487,
			'FldDatabase' => '1',
			'FldTable' => '133',
			'FldSpecType' => 'Replica',
			'FldSpecSource' => '921',
			'FldName' => 'UserID',
			'FldEng' => 'User ID',
			'FldDesc' => 'The primary User Authentication number connected to this Login activity, vital for tracking System User behavior and system security.',
			'FldForeignTable' => '167',
			'FldForeignMin' => '0',
			'FldForeignMax' => 'N',
			'FldForeign2Min' => '11',
			'FldForeign2Max' => '11',
			'FldType' => 'INT',
			'FldDataType' => 'Numeric',
			'FldDataLength' => '11',
			'FldCharSupport' => ',Numbers,',
			'FldKeyType' => ',Foreign,',
			'FldKeyStruct' => 'Simple',
			'FldCompareSame' => '130'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 999,
			'FldDatabase' => '1',
			'FldTable' => '144',
			'FldOrd' => '1000',
			'FldSpecType' => 'Replica',
			'FldSpecSource' => '920',
			'FldName' => 'DeptID',
			'FldEng' => 'Department ID',
			'FldDesc' => 'The unique number of the Department record related to this Complaint. This number helps us identify which Department this Complaint is directed and therefore which Investigative Agency should be contacted.',
			'FldForeignTable' => '111',
			'FldForeignMin' => '0',
			'FldForeignMax' => 'N',
			'FldForeign2Min' => '11',
			'FldForeign2Max' => '11',
			'FldIsIndex' => '1',
			'FldType' => 'INT',
			'FldDataType' => 'Numeric',
			'FldDataLength' => '11',
			'FldCharSupport' => ',Numbers,',
			'FldKeyType' => ',Primary,Foreign,',
			'FldKeyStruct' => 'Composite',
			'FldEditRule' => 'NowNot',
			'FldNullSupport' => '0',
			'FldValuesEnteredBy' => 'System',
			'FldRequired' => '1',
			'FldCompareSame' => '130',
			'FldOpts' => '13'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 232,
			'FldDatabase' => '1',
			'FldTable' => '112',
			'FldOrd' => '24',
			'FldSpecSource' => '0',
			'FldName' => 'MediaLinks',
			'FldEng' => 'Media Links',
			'FldDesc' => 'The URL address of a news report containing information related to this Complaint. Important for tracking and verifying new information related to a Complaint\'s Allegations.',
			'FldNotes' => 'Proper news story selection criteria here: http://www.policemisconduct.net/about/news-feed-faq/

Must be careful not to let people post links to their personal blogs, because that won\'t include objective information.',
			'FldForeignTable' => '0',
			'FldForeignMin' => '11',
			'FldForeignMax' => '11',
			'FldForeign2Min' => '0',
			'FldForeign2Max' => '0',
			'FldType' => 'TEXT',
			'FldDataLength' => '0',
			'FldCharSupport' => ',Letters,Keyboard,',
			'FldKeyType' => 'Non',
			'FldKeyStruct' => 'Simple',
			'FldCompareSame' => '6'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 488,
			'FldDatabase' => '1',
			'FldTable' => '133',
			'FldOrd' => '4',
			'FldSpecType' => 'Replica',
			'FldSpecSource' => '951',
			'FldName' => 'IP',
			'FldEng' => 'IP Address',
			'FldDesc' => 'The encrypted IP address address of the login (attempts) to this System User\'s account, vital for security precautions and protections.',
			'FldNotes' => 'Perhaps non-Civilian Users\' IP addresses should not be encrypted.',
			'FldForeignTable' => '0',
			'FldForeignMin' => '11',
			'FldForeignMax' => '11',
			'FldForeign2Min' => '0',
			'FldForeign2Max' => '0',
			'FldDataLength' => '50',
			'FldCharSupport' => ',Letters,Keyboard,',
			'FldKeyType' => 'Non',
			'FldKeyStruct' => 'Simple',
			'FldCompareSame' => '130'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 1000,
			'FldDatabase' => '1',
			'FldTable' => '145',
			'FldSpecType' => 'Replica',
			'FldSpecSource' => '866',
			'FldName' => 'ComplaintID',
			'FldEng' => 'Complaint ID',
			'FldDesc' => 'The unique number of the Complaint record, vital to associating with all other Complaint data, vital to associating with all other Complaint data.',
			'FldForeignTable' => '112',
			'FldForeignMin' => '11',
			'FldForeignMax' => 'N',
			'FldForeign2Min' => '11',
			'FldForeign2Max' => '11',
			'FldIsIndex' => '1',
			'FldType' => 'INT',
			'FldDataType' => 'Numeric',
			'FldDataLength' => '11',
			'FldCharSupport' => ',Numbers,',
			'FldKeyType' => ',Primary,Foreign,',
			'FldKeyStruct' => 'Composite',
			'FldEditRule' => 'NowNot',
			'FldNullSupport' => '0',
			'FldValuesEnteredBy' => 'System',
			'FldRequired' => '1',
			'FldCompareSame' => '130',
			'FldOpts' => '13'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 489,
			'FldDatabase' => '1',
			'FldTable' => '133',
			'FldOrd' => '3',
			'FldSpecSource' => '0',
			'FldName' => 'TotAttempts',
			'FldEng' => 'Number of Login Attempts',
			'FldDesc' => 'The number of login attempts made before successfully logging in, or without success, vital for security precautions and protections.',
			'FldNotes' => 'Number of attempts within some time frame, TBD.',
			'FldForeignTable' => '0',
			'FldForeignMin' => '11',
			'FldForeignMax' => '11',
			'FldForeign2Min' => '0',
			'FldForeign2Max' => '0',
			'FldType' => 'INT',
			'FldDataType' => 'Numeric',
			'FldDataLength' => '11',
			'FldCharSupport' => ',Numbers,',
			'FldKeyType' => 'Non',
			'FldKeyStruct' => 'Simple',
			'FldCompareSame' => '6'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 1001,
			'FldDatabase' => '1',
			'FldTable' => '0',
			'FldOrd' => '1000',
			'FldSpecType' => 'Generic',
			'FldSpecSource' => '0',
			'FldName' => 'WebComplaintInfo',
			'FldEng' => 'Website Complaint Information',
			'FldForeignTable' => '0',
			'FldForeignMin' => '0',
			'FldForeignMax' => '0',
			'FldForeign2Min' => '0',
			'FldForeign2Max' => '0',
			'FldDataLength' => '0',
			'FldCharSupport' => ',Letters,Keyboard,Numbers,',
			'FldKeyType' => 'Non',
			'FldCompareSame' => '130'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 234,
			'FldDatabase' => '1',
			'FldTable' => '145',
			'FldOrd' => '9',
			'FldSpecSource' => '0',
			'FldName' => 'AgencyComplaintNumber',
			'FldEng' => 'Investigative Agency Complaint Number',
			'FldDesc' => 'A unique number used to identify Complaints. It is assigned by the Investigative Agency investigating an OPC-generated Complaint.',
			'FldForeignMin' => '11',
			'FldForeignMax' => '11',
			'FldForeign2Min' => '0',
			'FldForeign2Max' => '0',
			'FldType' => 'INT',
			'FldDataType' => 'Numeric',
			'FldDataLength' => '11',
			'FldCharSupport' => ',Numbers,',
			'FldNullSupport' => '0',
			'FldCompareSame' => '6'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 1003,
			'FldDatabase' => '1',
			'FldTable' => '106',
			'FldOrd' => '18',
			'FldSpecSource' => '0',
			'FldName' => 'HomepageComplaintLink',
			'FldEng' => 'Homepage Complaint Link?',
			'FldDesc' => 'Indicates whether or not a Police Department--s main homepage has a visible link to complaint information. (It should, but most will not.)',
			'FldForeignTable' => '0',
			'FldForeignMin' => '0',
			'FldForeignMax' => '0',
			'FldForeign2Min' => '0',
			'FldForeign2Max' => '0',
			'FldValues' => 'Y;N',
			'FldDataLength' => '1',
			'FldCharSupport' => ',Letters,',
			'FldCompareSame' => '130'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 1004,
			'FldDatabase' => '1',
			'FldTable' => '106',
			'FldOrd' => '19',
			'FldSpecType' => 'Replica',
			'FldSpecSource' => '1001',
			'FldName' => 'WebComplaintInfo',
			'FldEng' => 'Website Complaint Information URL',
			'FldDesc' => 'Indicates whether or not the designated Investigative Agency URL (if there is one) has clear-cut info on how about how the complaints process works. (Most will not.)',
			'FldForeignTable' => '0',
			'FldForeignMin' => '0',
			'FldForeignMax' => '0',
			'FldForeign2Min' => '0',
			'FldForeign2Max' => '0',
			'FldDataLength' => '0',
			'FldCharSupport' => ',Letters,Keyboard,Numbers,',
			'FldKeyType' => 'Non',
			'FldCompareSame' => '130'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 1005,
			'FldDatabase' => '1',
			'FldTable' => '122',
			'FldOrd' => '10',
			'FldSpecSource' => '0',
			'FldName' => 'StripSearchDesc',
			'FldEng' => 'Strip search description',
			'FldDesc' => 'Narrative details about the nature of the strip search (not including at the police station). Important for identifying particularly egregious wrongful search Allegations ï¿½ including cavity searches. ',
			'FldNotes' => 'We understand that this isn\'t easy, but please provide as much detail as you can about the strip search. The more information you provide, the better we can help address your complaint. ',
			'FldForeignTable' => '0',
			'FldForeignMin' => '0',
			'FldForeignMax' => '0',
			'FldForeign2Min' => '0',
			'FldForeign2Max' => '0',
			'FldDataLength' => '0',
			'FldCharSupport' => ',Letters,Numbers,Keyboard,',
			'FldOpts' => '7'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 1006,
			'FldDatabase' => '1',
			'FldTable' => '104',
			'FldOrd' => '15',
			'FldSpecSource' => '0',
			'FldName' => 'DutyStatus',
			'FldEng' => 'Duty status during incident',
			'FldDesc' => 'Category indicates whether Officer was on-duty or off-duty during Incident. Particularly important for investigating Allegations against off-duty officers.',
			'FldForeignTable' => '0',
			'FldForeignMin' => '0',
			'FldForeignMax' => '0',
			'FldForeign2Min' => '0',
			'FldForeign2Max' => '0',
			'FldValues' => 'On-Duty;Off-Duty;?',
			'FldDataLength' => '10',
			'FldCharSupport' => ',Letters,Keyboard,',
			'FldKeyType' => 'Non',
			'FldCompareSame' => '130'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 1007,
			'FldDatabase' => '1',
			'FldTable' => '152',
			'FldOrd' => '8',
			'FldSpecSource' => '0',
			'FldName' => 'VehicleNumber',
			'FldEng' => 'Vehicle Number',
			'FldDesc' => 'A unique vehicle ID number. Important for verifying an Officer\'s identity or Department.',
			'FldNotes' => 'This is not the same as License Number.',
			'FldForeignTable' => '0',
			'FldForeignMin' => '0',
			'FldForeignMax' => '0',
			'FldForeign2Min' => '0',
			'FldForeign2Max' => '0',
			'FldDataLength' => '20',
			'FldCharSupport' => ',Letters,Keyboard,Numbers,',
			'FldKeyType' => 'Non',
			'FldCompareSame' => '6',
			'FldOpts' => '7'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 240,
			'FldDatabase' => '1',
			'FldTable' => '114',
			'FldOrd' => '1',
			'FldSpecType' => 'Replica',
			'FldSpecSource' => '841',
			'FldName' => 'Address',
			'FldEng' => 'Street Address',
			'FldDesc' => 'The first line of the postal location at or near where an Incident occurred. This is an integral component of a complete Incident location address.',
			'FldNotes' => 'Could we indicate highway mile markers or exits in the address field -- or should that be part of a separate field? Incident address locations should only include locations within the 50 U.S. states and the District of Columbia.',
			'FldForeignTable' => '0',
			'FldForeignMin' => '11',
			'FldForeignMax' => '11',
			'FldForeign2Min' => '0',
			'FldForeign2Max' => '0',
			'FldDataLength' => '0',
			'FldCharSupport' => ',Letters,Keyboard,Numbers,',
			'FldKeyType' => 'Non',
			'FldKeyStruct' => 'Simple',
			'FldOpts' => '7'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 1008,
			'FldDatabase' => '1',
			'FldTable' => '104',
			'FldOrd' => '18',
			'FldSpecSource' => '0',
			'FldName' => 'AdditionalDetails',
			'FldEng' => 'Additional Details',
			'FldDesc' => 'Supplemental narrative details about Officers involved in Incident. Important for verifying an Officer\'s identity or Department.',
			'FldNotes' => 'This field only used for light/bronze version of user experience.',
			'FldForeignTable' => '0',
			'FldForeignMin' => '0',
			'FldForeignMax' => '0',
			'FldForeign2Min' => '0',
			'FldForeign2Max' => '0',
			'FldType' => 'TEXT',
			'FldDataLength' => '0',
			'FldCharSupport' => ',Letters,Keyboard,Numbers,',
			'FldKeyType' => 'Non',
			'FldOpts' => '7'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 1265,
			'FldDatabase' => '1',
			'FldTable' => '106',
			'FldOrd' => '6',
			'FldSpecType' => 'Replica',
			'FldSpecSource' => '834',
			'FldName' => 'NamePrefix',
			'FldEng' => 'Name Prefix',
			'FldDesc' => 'Letters placed before an Investigative Agency contact\'s first name that we use in all formal communications with Investigative Agency contacts or regarding Investigative Agency contacts.',
			'FldNotes' => 'Use only if selected. Field may otherwise be left blank',
			'FldForeignTable' => '0',
			'FldForeignMin' => '11',
			'FldForeignMax' => '11',
			'FldForeign2Min' => '0',
			'FldForeign2Max' => '0',
			'FldDataLength' => '20',
			'FldCharSupport' => ',Letters,Keyboard,',
			'FldKeyType' => 'Non',
			'FldKeyStruct' => 'Simple',
			'FldCompareSame' => '6',
			'FldOpts' => '11'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 1266,
			'FldDatabase' => '1',
			'FldTable' => '106',
			'FldOrd' => '7',
			'FldSpecType' => 'Replica',
			'FldSpecSource' => '830',
			'FldName' => 'NameFirst',
			'FldEng' => 'First Name',
			'FldDesc' => 'The legal given name of an Investigative Agency contact that we use to identify them. We also use this in all formal communications with Investigative Agency contacts and regarding Investigative Agency contacts.',
			'FldForeignTable' => '0',
			'FldForeignMin' => '11',
			'FldForeignMax' => '11',
			'FldForeign2Min' => '0',
			'FldForeign2Max' => '0',
			'FldDataLength' => '0',
			'FldCharSupport' => ',Letters,Keyboard,',
			'FldKeyType' => 'Non',
			'FldKeyStruct' => 'Simple',
			'FldCompareSame' => '6',
			'FldOpts' => '11'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 1011,
			'FldDatabase' => '1',
			'FldTable' => '146',
			'FldOrd' => '1',
			'FldSpecType' => 'Replica',
			'FldSpecSource' => '935',
			'FldName' => 'SubjectID',
			'FldEng' => 'Subject ID',
			'FldDesc' => 'Indicates which Subject received Injury Care tracked in this record. Important for identifying and matching specific uses of Force with specific Injuries received during an Incident.',
			'FldForeignTable' => '102',
			'FldForeignMin' => '0',
			'FldForeignMax' => 'N',
			'FldForeign2Min' => '11',
			'FldForeign2Max' => '11',
			'FldType' => 'INT',
			'FldDataType' => 'Numeric',
			'FldDataLength' => '11',
			'FldCharSupport' => ',Numbers,',
			'FldKeyType' => ',Foreign,',
			'FldKeyStruct' => 'Simple',
			'FldCompareSame' => '130',
			'FldOpts' => '13'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 1267,
			'FldDatabase' => '1',
			'FldTable' => '106',
			'FldOrd' => '9',
			'FldSpecType' => 'Replica',
			'FldSpecSource' => '832',
			'FldName' => 'NameMiddle',
			'FldEng' => 'Middle Name',
			'FldDesc' => 'The name of an Investigative Agency contact, placed between their first name and before their surname, that we use in all formal communications with Investigative Agency contacts or regarding Investigative Agency contacts.',
			'FldNotes' => 'Use only if selected. Field may otherwise be left blank',
			'FldForeignTable' => '0',
			'FldForeignMin' => '11',
			'FldForeignMax' => '11',
			'FldForeign2Min' => '0',
			'FldForeign2Max' => '0',
			'FldDataLength' => '100',
			'FldCharSupport' => ',Letters,Keyboard,',
			'FldKeyType' => 'Non',
			'FldKeyStruct' => 'Simple',
			'FldCompareSame' => '6',
			'FldOpts' => '11'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 1012,
			'FldDatabase' => '1',
			'FldTable' => '116',
			'FldSpecType' => 'Replica',
			'FldSpecSource' => '959',
			'FldName' => 'EventSequenceID',
			'FldEng' => 'Event Sequence ID',
			'FldDesc' => 'The primary ID of the Incident Event record related to this Force record. This is important for establishing this Force\'s position in the chronology of events, and associating one or more Civilians and one or more Officers with this Force.',
			'FldForeignTable' => '137',
			'FldForeignMin' => '0',
			'FldForeignMax' => '11',
			'FldForeign2Min' => '11',
			'FldForeign2Max' => '11',
			'FldType' => 'INT',
			'FldDataType' => 'Numeric',
			'FldDataLength' => '11',
			'FldCharSupport' => ',Numbers,',
			'FldKeyType' => ',Foreign,',
			'FldKeyStruct' => 'Simple',
			'FldEditRule' => 'NowAllowed',
			'FldNullSupport' => '0',
			'FldValuesEnteredBy' => 'System',
			'FldRequired' => '1',
			'FldCompareSame' => '130',
			'FldOpts' => '13'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 1268,
			'FldDatabase' => '1',
			'FldTable' => '106',
			'FldOrd' => '10',
			'FldSpecType' => 'Replica',
			'FldSpecSource' => '835',
			'FldName' => 'NameLast',
			'FldEng' => 'Last Name',
			'FldDesc' => 'The legal surname of an Investigative Agency contact that we use in formal communications with or regarding an Investigative Agency contact.',
			'FldForeignTable' => '0',
			'FldForeignMin' => '11',
			'FldForeignMax' => '11',
			'FldForeign2Min' => '0',
			'FldForeign2Max' => '0',
			'FldDataLength' => '0',
			'FldCharSupport' => ',Letters,Keyboard,',
			'FldKeyType' => 'Non',
			'FldKeyStruct' => 'Simple',
			'FldCompareSame' => '6',
			'FldOpts' => '11'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 245,
			'FldDatabase' => '1',
			'FldTable' => '114',
			'FldOrd' => '10',
			'FldSpecType' => 'Replica',
			'FldSpecSource' => '938',
			'FldName' => 'TimeStart',
			'FldEng' => 'Start Time',
			'FldDesc' => 'The date, hour, and minute when a single Incident begins. This information is vital for verifying an Incident or merging Incident data from other sources.',
			'FldNotes' => 'Morgan: We might need a Business rule indicating that the Incident "Start Time" and "End Time" can\'t be more than 24 hours apart. Specifically, we don\'t want Complainants reporting allegations from multiple Incidents lumping them into a months or years-long Incident timeframe.',
			'FldForeignTable' => '0',
			'FldForeignMin' => '11',
			'FldForeignMax' => '11',
			'FldForeign2Min' => '0',
			'FldForeign2Max' => '0',
			'FldType' => 'DATETIME',
			'FldDataType' => 'DateTime',
			'FldDataLength' => '0',
			'FldCharSupport' => ',Keyboard,Numbers,',
			'FldDisplayFormat' => 'YYYY-MM-DD HH:MM:SS',
			'FldKeyType' => 'Non',
			'FldKeyStruct' => 'Simple',
			'FldRequired' => '1',
			'FldCompareSame' => '6'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 501,
			'FldDatabase' => '1',
			'FldTable' => '125',
			'FldOrd' => '2',
			'FldSpecType' => 'Replica',
			'FldSpecSource' => '920',
			'FldName' => 'DeptID',
			'FldEng' => 'Department ID',
			'FldDesc' => 'The unique number of the Department record related to this Privilege Profile, vital to associating permissions with all Complaints tied to a Police Department (instead of a single Complaint).',
			'FldForeignTable' => '111',
			'FldForeignMin' => '0',
			'FldForeignMax' => 'N',
			'FldForeign2Min' => '0',
			'FldForeign2Max' => '11',
			'FldIsIndex' => '1',
			'FldType' => 'INT',
			'FldDataType' => 'Numeric',
			'FldDataLength' => '11',
			'FldCharSupport' => ',Numbers,',
			'FldKeyType' => ',Primary,Foreign,',
			'FldKeyStruct' => 'Composite',
			'FldCompareSame' => '130',
			'FldOpts' => '13'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 1013,
			'FldDatabase' => '1',
			'FldTable' => '123',
			'FldSpecType' => 'Replica',
			'FldSpecSource' => '959',
			'FldName' => 'EventSequenceID',
			'FldEng' => 'Event Sequence ID',
			'FldDesc' => 'The primary ID of the Incident Event record related to this Arrest record. This is important for establishing this Arrest\'s position in the chronology of events, and associating one or more Civilians and one or more Officers with this Arrest.',
			'FldForeignTable' => '137',
			'FldForeignMin' => '0',
			'FldForeignMax' => '11',
			'FldForeign2Min' => '11',
			'FldForeign2Max' => '11',
			'FldType' => 'INT',
			'FldDataType' => 'Numeric',
			'FldDataLength' => '11',
			'FldCharSupport' => ',Numbers,',
			'FldKeyType' => ',Foreign,',
			'FldKeyStruct' => 'Simple',
			'FldEditRule' => 'NowAllowed',
			'FldNullSupport' => '0',
			'FldRequired' => '1',
			'FldCompareSame' => '130',
			'FldOpts' => '13'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 1269,
			'FldDatabase' => '1',
			'FldTable' => '106',
			'FldOrd' => '11',
			'FldSpecType' => 'Replica',
			'FldSpecSource' => '833',
			'FldName' => 'NameSuffix',
			'FldEng' => 'Name Suffix',
			'FldDesc' => 'Letters added after an Investigative Agency contact\'s last name -- which provide additional information about their title or inherited name -- that we use in all formal communications with Investigative Agency contacts or regarding Investigative Agency contacts.',
			'FldForeignTable' => '0',
			'FldForeignMin' => '11',
			'FldForeignMax' => '11',
			'FldForeign2Min' => '0',
			'FldForeign2Max' => '0',
			'FldDataLength' => '20',
			'FldCharSupport' => ',Letters,Keyboard,',
			'FldKeyType' => 'Non',
			'FldKeyStruct' => 'Simple',
			'FldCompareSame' => '6',
			'FldOpts' => '11'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 246,
			'FldDatabase' => '1',
			'FldTable' => '114',
			'FldOrd' => '11',
			'FldSpecType' => 'Replica',
			'FldSpecSource' => '939',
			'FldName' => 'TimeEnd',
			'FldEng' => 'End Time',
			'FldDesc' => 'The date, hour, and minute when a single Incident ends. This information is vital for verifying an Incident occurrence or merging Incident data from other sources.',
			'FldForeignTable' => '0',
			'FldForeignMin' => '11',
			'FldForeignMax' => '11',
			'FldForeign2Min' => '0',
			'FldForeign2Max' => '0',
			'FldType' => 'DATETIME',
			'FldDataType' => 'DateTime',
			'FldDataLength' => '0',
			'FldCharSupport' => ',Keyboard,Numbers,',
			'FldDisplayFormat' => 'YYYY-MM-DD HH:MM:SS',
			'FldKeyType' => 'Non',
			'FldKeyStruct' => 'Simple',
			'FldCompareSame' => '6'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 502,
			'FldDatabase' => '1',
			'FldTable' => '125',
			'FldOrd' => '4',
			'FldSpecSource' => '0',
			'FldName' => 'AccessLevel',
			'FldEng' => 'Data Access Level',
			'FldDesc' => 'The permission specifications for this record\'s User\'s access to either one Complaint or one Department\'s Complaints. This is vital for determining exactly what privacy rules apply for a given User attempting to access a given Complaint.',
			'FldNotes' => 'Details TBD, with approximate categories suggested for now.',
			'FldForeignTable' => '0',
			'FldForeignMin' => '11',
			'FldForeignMax' => '11',
			'FldForeign2Min' => '0',
			'FldForeign2Max' => '0',
			'FldValues' => 'View w/out Names;View;Edit;Manage',
			'FldDataLength' => '0',
			'FldCharSupport' => ',Letters,Keyboard,',
			'FldKeyType' => 'Non',
			'FldKeyStruct' => 'Simple',
			'FldCompareSame' => '130',
			'FldOpts' => '11'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 1014,
			'FldDatabase' => '1',
			'FldTable' => '122',
			'FldSpecType' => 'Replica',
			'FldSpecSource' => '959',
			'FldName' => 'EventSequenceID',
			'FldEng' => 'Event Sequence ID',
			'FldDesc' => 'The primary ID of the Incident Event record related to this Search record. This is important for establishing this Search\'s position in the chronology of events, and associating one or more Civilians and one or more Officers with this Search.',
			'FldForeignTable' => '137',
			'FldForeignMin' => '0',
			'FldForeignMax' => '11',
			'FldForeign2Min' => '11',
			'FldForeign2Max' => '11',
			'FldType' => 'INT',
			'FldDataType' => 'Numeric',
			'FldDataLength' => '11',
			'FldCharSupport' => ',Numbers,',
			'FldKeyType' => ',Foreign,',
			'FldKeyStruct' => 'Simple',
			'FldEditRule' => 'NowAllowed',
			'FldNullSupport' => '0',
			'FldRequired' => '1',
			'FldCompareSame' => '130',
			'FldOpts' => '13'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 247,
			'FldDatabase' => '1',
			'FldTable' => '114',
			'FldOrd' => '12',
			'FldSpecType' => 'Replica',
			'FldSpecSource' => '940',
			'FldName' => 'Duration',
			'FldEng' => 'Duration',
			'FldDesc' => 'The total calculated minutes of of a single Incident.  This information is vital for verifying an Incident occurrence or merging Incident data from other sources.',
			'FldNotes' => 'calculated based on Incident Start Time and Incident End Time.',
			'FldForeignTable' => '0',
			'FldForeignMin' => '11',
			'FldForeignMax' => '11',
			'FldForeign2Min' => '0',
			'FldForeign2Max' => '0',
			'FldType' => 'INT',
			'FldDataType' => 'Numeric',
			'FldDataLength' => '5',
			'FldCharSupport' => ',Numbers,',
			'FldKeyType' => 'Non',
			'FldKeyStruct' => 'Simple',
			'FldCompareSame' => '6'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 1015,
			'FldDatabase' => '1',
			'FldTable' => '121',
			'FldSpecType' => 'Replica',
			'FldSpecSource' => '959',
			'FldName' => 'EventSequenceID',
			'FldEng' => 'Event Sequence ID',
			'FldDesc' => 'The primary ID of the Incident Event record related to this Stops record. This is important for establishing this Stop\'s position in the chronology of events, and associating one or more Civilians and one or more Officers with this Stop.',
			'FldForeignTable' => '137',
			'FldForeignMin' => '0',
			'FldForeignMax' => '11',
			'FldForeign2Min' => '11',
			'FldForeign2Max' => '11',
			'FldType' => 'INT',
			'FldDataType' => 'Numeric',
			'FldDataLength' => '11',
			'FldCharSupport' => ',Numbers,',
			'FldKeyType' => ',Foreign,',
			'FldKeyStruct' => 'Simple',
			'FldEditRule' => 'NowAllowed',
			'FldNullSupport' => '0',
			'FldRequired' => '1',
			'FldCompareSame' => '130',
			'FldOpts' => '13'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 1016,
			'FldDatabase' => '1',
			'FldTable' => '146',
			'FldOrd' => '4',
			'FldSpecSource' => '0',
			'FldName' => 'GotMedical',
			'FldEng' => 'Received Medical Care',
			'FldDesc' => 'Indicates whether or not an Injured Civilian received medical care from a licensed medical practitioner. Essential for urging Injured Civilians to seek medical care who haven\'t received it yet.',
			'FldNotes' => 'Implementation Note: We must urge users with fresh Injuries to seek medical care if they haven\'t yet. Because official medical records are essential for substantiating Force Allegations.',
			'FldForeignTable' => '0',
			'FldForeignMin' => '0',
			'FldForeignMax' => '0',
			'FldForeign2Min' => '0',
			'FldForeign2Max' => '0',
			'FldValues' => 'Y;N;?',
			'FldDataLength' => '1',
			'FldCharSupport' => ',Letters,',
			'FldKeyType' => 'Non',
			'FldCompareSame' => '130'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 249,
			'FldDatabase' => '1',
			'FldTable' => '115',
			'FldOrd' => '2',
			'FldSpecSource' => '0',
			'FldName' => 'Type',
			'FldEng' => 'Scene Type',
			'FldDesc' => 'Category of possible settings where an Incident occurred. This selection provides important contextual information about the location of the Incident, which helps us better evaluate the Incident and Allegations.',
			'FldNotes' => 'Which of the following best describes the scene of the incident? If the incident includes multiple locations, pick the one where you first witnessed police contact.',
			'FldForeignTable' => '0',
			'FldForeignMin' => '11',
			'FldForeignMax' => '11',
			'FldForeign2Min' => '0',
			'FldForeign2Max' => '0',
			'FldValues' => 'Def::Scene Type',
			'FldType' => 'INT',
			'FldDataType' => 'Numeric',
			'FldDataLength' => '3',
			'FldCharSupport' => ',Numbers,',
			'FldKeyStruct' => 'Simple',
			'FldEditRule' => 'NowAllowed',
			'FldCompareSame' => '130'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 250,
			'FldDatabase' => '1',
			'FldTable' => '115',
			'FldOrd' => '3',
			'FldSpecSource' => '0',
			'FldName' => 'Description',
			'FldEng' => 'Description',
			'FldDesc' => 'Narrative details about the setting where an Incident occurred. Beyond mere time and location, scene information adds an important contextual backdrop behind specific Incident events.',
			'FldForeignTable' => '0',
			'FldForeignMin' => '11',
			'FldForeignMax' => '11',
			'FldForeign2Min' => '0',
			'FldForeign2Max' => '0',
			'FldType' => 'TEXT',
			'FldDataLength' => '0',
			'FldCharSupport' => ',Letters,Keyboard,',
			'FldKeyStruct' => 'Simple',
			'FldOpts' => '7'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 1022,
			'FldDatabase' => '1',
			'FldTable' => '112',
			'FldOrd' => '29',
			'FldSpecSource' => '0',
			'FldName' => 'RecordSubmitted',
			'FldEng' => 'Submitted to OpenPolice.org',
			'FldDesc' => 'Date and time when this Complaint was completed and submitted to the OPC database.',
			'FldForeignTable' => '0',
			'FldForeignMin' => 'N',
			'FldForeignMax' => 'N',
			'FldForeign2Min' => 'N',
			'FldForeign2Max' => 'N',
			'FldIsIndex' => '1',
			'FldType' => 'DATETIME',
			'FldDataType' => 'DateTime',
			'FldDataLength' => '0',
			'FldCharSupport' => ',Keyboard,Numbers,',
			'FldInputMask' => 'YYYY-MM-DD HH:MM:SS',
			'FldEditRule' => 'LateNot',
			'FldCompareSame' => '6'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 1373,
			'FldDatabase' => '1',
			'FldTable' => '102',
			'FldOrd' => '16',
			'FldSpecSource' => '0',
			'FldName' => 'UsedProfanity',
			'FldEng' => 'Used profanity?',
			'FldDesc' => 'Indicates whether or not this Civilian used profanity during the Incident. This information might help establish credibility of the Complainant.',
			'FldForeignMin' => 'N',
			'FldForeignMax' => 'N',
			'FldForeign2Min' => 'N',
			'FldForeign2Max' => 'N',
			'FldValues' => 'Y;N;?',
			'FldDataLength' => '1',
			'FldCharSupport' => ',Letters,Keyboard,',
			'FldKeyType' => ',',
			'FldNullSupport' => '0',
			'FldCompareSame' => '878800'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 1374,
			'FldDatabase' => '1',
			'FldTable' => '104',
			'FldOrd' => '17',
			'FldSpecSource' => '0',
			'FldName' => 'UsedProfanity',
			'FldEng' => 'Used profanity?',
			'FldDesc' => 'Indicates whether or not this Officer used profanity during the Incident. This information helps flag a certain type of discourtesy.',
			'FldForeignMin' => 'N',
			'FldForeignMax' => 'N',
			'FldForeign2Min' => 'N',
			'FldForeign2Max' => 'N',
			'FldValues' => 'Y;N;?',
			'FldDataLength' => '1',
			'FldCharSupport' => ',Letters,Keyboard,',
			'FldKeyType' => ',',
			'FldNullSupport' => '0',
			'FldCompareSame' => '878800'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 1375,
			'FldDatabase' => '1',
			'FldTable' => '121',
			'FldOrd' => '28',
			'FldSpecSource' => '0',
			'FldName' => 'BreathCannabis',
			'FldEng' => 'Officer gave marijuana breath test?',
			'FldDesc' => 'Indicates whether or not an Officer administered a marijuana breath test.',
			'FldForeignMin' => 'N',
			'FldForeignMax' => 'N',
			'FldForeign2Min' => 'N',
			'FldForeign2Max' => 'N',
			'FldValues' => 'Y;N;?',
			'FldDataLength' => '1',
			'FldCharSupport' => ',Letters,Keyboard,',
			'FldKeyType' => ',',
			'FldNullSupport' => '0',
			'FldCompareSame' => '878800'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 1376,
			'FldDatabase' => '1',
			'FldTable' => '121',
			'FldOrd' => '29',
			'FldSpecSource' => '0',
			'FldName' => 'BreathCannabisFailed',
			'FldEng' => 'Officer say subject failed marijuana breath test?',
			'FldDesc' => 'Indicates whether or not an Officer administered a marijuana breath test, and claimed someone failed.',
			'FldForeignMin' => 'N',
			'FldForeignMax' => 'N',
			'FldForeign2Min' => 'N',
			'FldForeign2Max' => 'N',
			'FldValues' => 'Y;N;?',
			'FldDataLength' => '1',
			'FldCharSupport' => ',Letters,Keyboard,',
			'FldKeyType' => ',',
			'FldNullSupport' => '0',
			'FldCompareSame' => '878800'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 1377,
			'FldDatabase' => '1',
			'FldTable' => '121',
			'FldOrd' => '27',
			'FldSpecSource' => '0',
			'FldName' => 'BreathAlcoholFailed',
			'FldEng' => 'Officer say subject failed alcohol breath test?',
			'FldDesc' => 'Indicates whether or not an Officer administered an alcohol breath test, and claimed someone failed.',
			'FldForeignMin' => 'N',
			'FldForeignMax' => 'N',
			'FldForeign2Min' => 'N',
			'FldForeign2Max' => 'N',
			'FldValues' => 'Y;N;?',
			'FldDataLength' => '1',
			'FldCharSupport' => ',Letters,Keyboard,',
			'FldKeyType' => ',',
			'FldNullSupport' => '0',
			'FldCompareSame' => '878800'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 1378,
			'FldDatabase' => '1',
			'FldTable' => '121',
			'FldOrd' => '26',
			'FldSpecSource' => '0',
			'FldName' => 'BreathAlcohol',
			'FldEng' => 'Officer gave alcohol breath test?',
			'FldDesc' => 'Indicates whether or not an Officer administered an alcohol breath test.',
			'FldForeignMin' => 'N',
			'FldForeignMax' => 'N',
			'FldForeign2Min' => 'N',
			'FldForeign2Max' => 'N',
			'FldValues' => 'Y;N;?',
			'FldDataLength' => '1',
			'FldCharSupport' => ',Letters,Keyboard,',
			'FldKeyType' => ',',
			'FldNullSupport' => '0',
			'FldCompareSame' => '878800'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 1379,
			'FldDatabase' => '1',
			'FldTable' => '121',
			'FldOrd' => '30',
			'FldSpecSource' => '0',
			'FldName' => 'SalivaTest',
			'FldEng' => 'Officer collected saliva?',
			'FldDesc' => 'Indicates whether or not an Officer collected someone\'s saliva.',
			'FldForeignMin' => 'N',
			'FldForeignMax' => 'N',
			'FldForeign2Min' => 'N',
			'FldForeign2Max' => 'N',
			'FldValues' => 'Y;N;?',
			'FldDataLength' => '0',
			'FldCharSupport' => ',Letters,Keyboard,',
			'FldKeyType' => ',',
			'FldNullSupport' => '0',
			'FldCompareSame' => '878800'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 1380,
			'FldDatabase' => '1',
			'FldTable' => '121',
			'FldOrd' => '31',
			'FldSpecSource' => '0',
			'FldName' => 'SobrietyOther',
			'FldEng' => 'Officer gave other sobriety tests?',
			'FldDesc' => 'Indicates whether or not an Officer administered other sobriety tests.',
			'FldForeignMin' => 'N',
			'FldForeignMax' => 'N',
			'FldForeign2Min' => 'N',
			'FldForeign2Max' => 'N',
			'FldValues' => 'Y;N;?',
			'FldDataLength' => '1',
			'FldCharSupport' => ',Letters,Keyboard,',
			'FldKeyType' => ',',
			'FldNullSupport' => '0',
			'FldCompareSame' => '878800'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 1381,
			'FldDatabase' => '1',
			'FldTable' => '121',
			'FldOrd' => '32',
			'FldSpecSource' => '0',
			'FldName' => 'SobrietyOtherDescribe',
			'FldEng' => 'Description of other sobriety tests',
			'FldDesc' => 'Description of other sobriety tests administered by Officer.',
			'FldForeignMin' => 'N',
			'FldForeignMax' => 'N',
			'FldForeign2Min' => 'N',
			'FldForeign2Max' => 'N',
			'FldDataLength' => '0',
			'FldKeyType' => ',',
			'FldNullSupport' => '0',
			'FldOpts' => '7'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 1382,
			'FldDatabase' => '1',
			'FldTable' => '112',
			'FldOrd' => '21',
			'FldSpecSource' => '0',
			'FldName' => 'Feedback',
			'FldEng' => 'Got suggestions or feedback for us?',
			'FldDesc' => 'Indicates any suggestions or feedback the user has for us at the end of the process. This is important to let us know if we missed anything, etc.',
			'FldForeignMin' => 'N',
			'FldForeignMax' => 'N',
			'FldForeign2Min' => 'N',
			'FldForeign2Max' => 'N',
			'FldType' => 'TEXT',
			'FldDataLength' => '0',
			'FldCharSupport' => ',Letters,Numbers,Keyboard,',
			'FldKeyType' => ',',
			'FldNullSupport' => '0',
			'FldOpts' => '13'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 1451,
			'FldDatabase' => '1',
			'FldTable' => '111',
			'FldOrd' => '100',
			'FldSpecType' => 'Replica',
			'FldSpecSource' => '0',
			'FldName' => 'UserID',
			'FldEng' => 'User ID',
			'FldDesc' => 'Indicates the unique User ID number of the User owning the data stored in this record for this Experience.',
			'FldForeignTable' => '167',
			'FldForeignMin' => '0',
			'FldForeignMax' => 'N',
			'FldForeign2Min' => '0',
			'FldType' => 'INT',
			'FldDataType' => 'Numeric',
			'FldDataLength' => '0',
			'FldCharSupport' => ',Numbers,',
			'FldKeyType' => ',Foreign,',
			'FldNullSupport' => '0',
			'FldCompareSame' => '878800',
			'FldOpts' => '13'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 1452,
			'FldDatabase' => '1',
			'FldTable' => '111',
			'FldOrd' => '100',
			'FldSpecType' => 'Replica',
			'FldName' => 'SubmissionProgress',
			'FldEng' => 'Experience Node Progress',
			'FldDesc' => 'Indicates the unique Node ID number of the last Experience Node loaded during this User\'s Experience.',
			'FldForeignMin' => '11',
			'FldForeignMax' => '11',
			'FldForeign2Min' => '11',
			'FldForeign2Max' => '11',
			'FldType' => 'INT',
			'FldDataType' => 'Numeric',
			'FldCharSupport' => ',Numbers,',
			'FldOpts' => '39'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 1453,
			'FldDatabase' => '1',
			'FldTable' => '111',
			'FldOrd' => '100',
			'FldSpecType' => 'Replica',
			'FldName' => 'TreeVersion',
			'FldEng' => 'Tree Version Number',
			'FldDesc' => 'Stores the current version number of this User Experience, important for tracking bugs.',
			'FldForeignMin' => '11',
			'FldForeignMax' => '11',
			'FldForeign2Min' => '11',
			'FldForeign2Max' => '11',
			'FldOpts' => '39'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 1454,
			'FldDatabase' => '1',
			'FldTable' => '111',
			'FldOrd' => '100',
			'FldSpecType' => 'Replica',
			'FldName' => 'VersionAB',
			'FldEng' => 'A/B Testing Version',
			'FldDesc' => 'Stores a complex string reflecting all A/B Testing variations in effect at the time of this User\'s Experience of this Node.',
			'FldForeignMin' => '11',
			'FldForeignMax' => '11',
			'FldForeign2Min' => '11',
			'FldForeign2Max' => '11',
			'FldOpts' => '39'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 1455,
			'FldDatabase' => '1',
			'FldTable' => '111',
			'FldOrd' => '100',
			'FldSpecType' => 'Replica',
			'FldName' => 'UniqueStr',
			'FldEng' => 'Unique String For Record',
			'FldDesc' => 'This unique string is for cases when including the record ID number is not appropriate.',
			'FldForeignMin' => '11',
			'FldForeignMax' => '11',
			'FldForeign2Min' => '11',
			'FldForeign2Max' => '11',
			'FldOpts' => '39'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 1456,
			'FldDatabase' => '1',
			'FldTable' => '111',
			'FldOrd' => '100',
			'FldSpecType' => 'Replica',
			'FldName' => 'IPaddy',
			'FldEng' => 'IP Address',
			'FldDesc' => 'Encrypted IP address of the current user.',
			'FldForeignMin' => '11',
			'FldForeignMax' => '11',
			'FldForeign2Min' => '11',
			'FldForeign2Max' => '11',
			'FldOpts' => '39'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 1457,
			'FldDatabase' => '1',
			'FldTable' => '111',
			'FldOrd' => '100',
			'FldSpecType' => 'Replica',
			'FldName' => 'IsMobile',
			'FldEng' => 'Using Mobile Device',
			'FldDesc' => 'Indicates whether or not the current user is interacting via a mobile deviced.',
			'FldForeignMin' => '11',
			'FldForeignMax' => '11',
			'FldForeign2Min' => '11',
			'FldForeign2Max' => '11',
			'FldOpts' => '39'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 1389,
			'FldDatabase' => '1',
			'FldTable' => '112',
			'FldSpecType' => 'Replica',
			'FldSpecSource' => '0',
			'FldName' => 'UserID',
			'FldEng' => 'User ID',
			'FldDesc' => 'Indicates the unique User ID number of the User owning the data stored in this record for this Experience.',
			'FldForeignTable' => '167',
			'FldForeignMin' => '0',
			'FldForeignMax' => 'N',
			'FldForeign2Min' => '0',
			'FldType' => 'INT',
			'FldDataType' => 'Numeric',
			'FldDataLength' => '0',
			'FldCharSupport' => ',Numbers,',
			'FldKeyType' => ',Foreign,',
			'FldNullSupport' => '0',
			'FldOpts' => '13'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 1390,
			'FldDatabase' => '1',
			'FldTable' => '112',
			'FldOrd' => '31',
			'FldSpecType' => 'Replica',
			'FldName' => 'VersionAB',
			'FldEng' => 'A/B Testing Version',
			'FldDesc' => 'Stores a complex string reflecting all A/B Testing variations in effect at the time of this User\'s Experience of this Node.',
			'FldForeignMin' => '11',
			'FldForeignMax' => '11',
			'FldForeign2Min' => '11',
			'FldForeign2Max' => '11',
			'FldOpts' => '39'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 1391,
			'FldDatabase' => '1',
			'FldTable' => '168',
			'FldSpecType' => 'Replica',
			'FldName' => 'UserID',
			'FldEng' => 'User ID',
			'FldDesc' => 'Indicates the unique User ID number of the User owning the data stored in this record for this Experience.',
			'FldForeignTable' => '167',
			'FldForeignMin' => '11',
			'FldForeignMax' => '11',
			'FldForeign2Min' => '11',
			'FldForeign2Max' => '11',
			'FldType' => 'INT',
			'FldDataType' => 'Numeric',
			'FldCharSupport' => ',Numbers,',
			'FldKeyType' => ',Foreign,',
			'FldOpts' => '39'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 1392,
			'FldDatabase' => '1',
			'FldTable' => '168',
			'FldSpecType' => 'Replica',
			'FldName' => 'SubmissionProgress',
			'FldEng' => 'Experience Node Progress',
			'FldDesc' => 'Indicates the unique Node ID number of the last Experience Node loaded during this User\'s Experience.',
			'FldForeignMin' => '11',
			'FldForeignMax' => '11',
			'FldForeign2Min' => '11',
			'FldForeign2Max' => '11',
			'FldType' => 'INT',
			'FldDataType' => 'Numeric',
			'FldCharSupport' => ',Numbers,',
			'FldOpts' => '39'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 1393,
			'FldDatabase' => '1',
			'FldTable' => '168',
			'FldSpecType' => 'Replica',
			'FldName' => 'TreeVersion',
			'FldEng' => 'Tree Version Number',
			'FldDesc' => 'Stores the current version number of this User Experience, important for tracking bugs.',
			'FldForeignMin' => '11',
			'FldForeignMax' => '11',
			'FldForeign2Min' => '11',
			'FldForeign2Max' => '11',
			'FldOpts' => '39'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 1394,
			'FldDatabase' => '1',
			'FldTable' => '168',
			'FldSpecType' => 'Replica',
			'FldName' => 'VersionAB',
			'FldEng' => 'A/B Testing Version',
			'FldDesc' => 'Stores a complex string reflecting all A/B Testing variations in effect at the time of this User\'s Experience of this Node.',
			'FldForeignMin' => '11',
			'FldForeignMax' => '11',
			'FldForeign2Min' => '11',
			'FldForeign2Max' => '11',
			'FldOpts' => '39'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 1395,
			'FldDatabase' => '1',
			'FldTable' => '168',
			'FldSpecType' => 'Replica',
			'FldName' => 'UniqueStr',
			'FldEng' => 'Unique String For Record',
			'FldDesc' => 'This unique string is for cases when including the record ID number is not appropriate.',
			'FldForeignMin' => '11',
			'FldForeignMax' => '11',
			'FldForeign2Min' => '11',
			'FldForeign2Max' => '11',
			'FldOpts' => '39'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 1396,
			'FldDatabase' => '1',
			'FldTable' => '168',
			'FldSpecType' => 'Replica',
			'FldName' => 'IPaddy',
			'FldEng' => 'IP Address',
			'FldDesc' => 'Encrypted IP address of the current user.',
			'FldForeignMin' => '11',
			'FldForeignMax' => '11',
			'FldForeign2Min' => '11',
			'FldForeign2Max' => '11',
			'FldOpts' => '39'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 1397,
			'FldDatabase' => '1',
			'FldTable' => '168',
			'FldSpecType' => 'Replica',
			'FldName' => 'IsMobile',
			'FldEng' => 'Using Mobile Device',
			'FldDesc' => 'Indicates whether or not the current user is interacting via a mobile deviced.',
			'FldForeignMin' => '11',
			'FldForeignMax' => '11',
			'FldForeign2Min' => '11',
			'FldForeign2Max' => '11',
			'FldOpts' => '39'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 1399,
			'FldDatabase' => '1',
			'FldTable' => '156',
			'FldOrd' => '21',
			'FldSpecSource' => '0',
			'FldName' => 'SexualHarass',
			'FldEng' => 'Think officer sexually harassed someone?',
			'FldDesc' => 'Indicates whether or not an Officer sexually harassed anyone during the Incident. This is important for later reloading Complaint forms for silver Allegations with the user\'s previous response.',
			'FldForeignMin' => 'N',
			'FldForeignMax' => 'N',
			'FldForeign2Min' => 'N',
			'FldForeign2Max' => 'N',
			'FldValues' => 'Y;N;?',
			'FldDataLength' => '1',
			'FldCharSupport' => ',Letters,Keyboard,',
			'FldKeyType' => ',',
			'FldNullSupport' => '0',
			'FldCompareSame' => '878800'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 1400,
			'FldDatabase' => '1',
			'FldTable' => '104',
			'FldOrd' => '19',
			'FldSpecSource' => '0',
			'FldName' => 'GaveCompliment',
			'FldEng' => 'Received compliments?',
			'FldDesc' => 'Indicates whether or not the Complainant completed a Compliment page for this Officer.',
			'FldForeignMin' => 'N',
			'FldForeignMax' => 'N',
			'FldForeign2Min' => 'N',
			'FldForeign2Max' => 'N',
			'FldValues' => 'Y;N',
			'FldDataLength' => '1',
			'FldCharSupport' => ',Letters,',
			'FldKeyType' => ',',
			'FldNullSupport' => '0',
			'FldCompareSame' => '878800'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 1401,
			'FldDatabase' => '1',
			'FldTable' => '169',
			'FldOrd' => '1',
			'FldSpecSource' => '0',
			'FldName' => 'OffID',
			'FldEng' => 'Officer ID',
			'FldDesc' => 'The unique number of the Officer record being linked in this record. Vital for associating an Officer with this row\'s Compliments.',
			'FldForeignTable' => '104',
			'FldForeignMin' => '0',
			'FldType' => 'INT',
			'FldDataType' => 'Numeric',
			'FldDataLength' => '11',
			'FldCharSupport' => ',Numbers,',
			'FldKeyType' => ',Foreign,',
			'FldNullSupport' => '0',
			'FldCompareSame' => '878800'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 1402,
			'FldDatabase' => '1',
			'FldTable' => '169',
			'FldOrd' => '2',
			'FldSpecSource' => '0',
			'FldName' => 'Valor',
			'FldEng' => 'Officer display valor?',
			'FldDesc' => 'Indicates whether or not the officer showed extraordinary courage in the face of danger.',
			'FldForeignMin' => 'N',
			'FldForeignMax' => 'N',
			'FldForeign2Min' => 'N',
			'FldForeign2Max' => 'N',
			'FldValues' => 'Y;N;?',
			'FldDataLength' => '1',
			'FldCharSupport' => ',Letters,Keyboard,',
			'FldKeyType' => ',',
			'FldNullSupport' => '0',
			'FldCompareSame' => '878800'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 1403,
			'FldDatabase' => '1',
			'FldTable' => '169',
			'FldOrd' => '3',
			'FldSpecSource' => '0',
			'FldName' => 'Lifesaving',
			'FldEng' => 'Officer apply medial aid?',
			'FldDesc' => 'Indicates whether or not the officer applied medical aid exceeding the normal call of duty.',
			'FldForeignMin' => 'N',
			'FldForeignMax' => 'N',
			'FldForeign2Min' => 'N',
			'FldForeign2Max' => 'N',
			'FldValues' => 'Y;N;?',
			'FldDataLength' => '1',
			'FldCharSupport' => ',Letters,Keyboard,',
			'FldKeyType' => ',',
			'FldNullSupport' => '0',
			'FldCompareSame' => '878800'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 1404,
			'FldDatabase' => '1',
			'FldTable' => '169',
			'FldOrd' => '4',
			'FldSpecSource' => '0',
			'FldName' => 'Deescalation',
			'FldEng' => 'Officer de-escalate tense situation?',
			'FldDesc' => 'Indicates whether or not the officer skillfully calmed down a tense situation, using minimal or no force.',
			'FldForeignMin' => 'N',
			'FldForeignMax' => 'N',
			'FldForeign2Min' => 'N',
			'FldForeign2Max' => 'N',
			'FldValues' => 'Y;N;?',
			'FldDataLength' => '1',
			'FldCharSupport' => ',Letters,Keyboard,',
			'FldKeyType' => ',',
			'FldNullSupport' => '0',
			'FldCompareSame' => '878800'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 1405,
			'FldDatabase' => '1',
			'FldTable' => '169',
			'FldOrd' => '5',
			'FldSpecSource' => '0',
			'FldName' => 'Professionalism',
			'FldEng' => 'Officer was courteous?',
			'FldDesc' => 'Indicates whether or not the officer behaved in a courteous, respectful, and straightforward manner.',
			'FldForeignMin' => 'N',
			'FldForeignMax' => 'N',
			'FldForeign2Min' => 'N',
			'FldForeign2Max' => 'N',
			'FldValues' => 'Y;N;?',
			'FldDataLength' => '1',
			'FldCharSupport' => ',Letters,Keyboard,',
			'FldKeyType' => ',',
			'FldNullSupport' => '0',
			'FldCompareSame' => '878800'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 1406,
			'FldDatabase' => '1',
			'FldTable' => '169',
			'FldOrd' => '6',
			'FldSpecSource' => '0',
			'FldName' => 'Fairness',
			'FldEng' => 'Officer was fair?',
			'FldDesc' => 'Indicates whether or not the officerï¿½s use of power was reasonable, appropriate, and free from bias.',
			'FldForeignMin' => 'N',
			'FldForeignMax' => 'N',
			'FldForeign2Min' => 'N',
			'FldForeign2Max' => 'N',
			'FldValues' => 'Y;N;?',
			'FldDataLength' => '1',
			'FldCharSupport' => ',Letters,Keyboard,',
			'FldKeyType' => ',',
			'FldNullSupport' => '0',
			'FldCompareSame' => '878800'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 1407,
			'FldDatabase' => '1',
			'FldTable' => '169',
			'FldOrd' => '7',
			'FldSpecSource' => '0',
			'FldName' => 'Constitutional',
			'FldEng' => 'Officer respected constitutional rights?',
			'FldDesc' => 'Indicates whether or not the officerï¿½s words and actions showed respect for the Bill of Rights.',
			'FldForeignMin' => 'N',
			'FldForeignMax' => 'N',
			'FldForeign2Min' => 'N',
			'FldForeign2Max' => 'N',
			'FldValues' => 'Y;N;?',
			'FldDataLength' => '1',
			'FldCharSupport' => ',Letters,Keyboard,',
			'FldKeyType' => ',',
			'FldNullSupport' => '0',
			'FldCompareSame' => '878800'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 1408,
			'FldDatabase' => '1',
			'FldTable' => '169',
			'FldOrd' => '8',
			'FldSpecSource' => '0',
			'FldName' => 'Compassion',
			'FldEng' => 'Officer was compassionate?',
			'FldDesc' => 'Indicates whether or not the officer displayed empathy and generosity beyond the call of duty.',
			'FldForeignMin' => 'N',
			'FldForeignMax' => 'N',
			'FldForeign2Min' => 'N',
			'FldForeign2Max' => 'N',
			'FldValues' => 'Y;N;?',
			'FldDataLength' => '1',
			'FldCharSupport' => ',Letters,Keyboard,',
			'FldKeyType' => ',',
			'FldNullSupport' => '0',
			'FldCompareSame' => '878800'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 1409,
			'FldDatabase' => '1',
			'FldTable' => '169',
			'FldOrd' => '9',
			'FldSpecSource' => '0',
			'FldName' => 'Community',
			'FldEng' => 'Officer positively engaged community? ',
			'FldDesc' => 'Indicates whether or not the officer engaged the community to build bonds of trust.',
			'FldForeignMin' => 'N',
			'FldForeignMax' => 'N',
			'FldForeign2Min' => 'N',
			'FldForeign2Max' => 'N',
			'FldValues' => 'Y;N;?',
			'FldDataLength' => '1',
			'FldCharSupport' => ',Letters,Keyboard,',
			'FldKeyType' => ',',
			'FldNullSupport' => '0',
			'FldCompareSame' => '878800'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 1410,
			'FldDatabase' => '1',
			'FldTable' => '170',
			'FldSpecSource' => '0',
			'FldName' => 'UserID',
			'FldEng' => 'User ID',
			'FldDesc' => 'Indicates the unique User ID number of the User owning the data stored in this record for this Experience.',
			'FldForeignTable' => '167',
			'FldForeignMin' => '0',
			'FldForeignMax' => 'N',
			'FldForeign2Min' => '0',
			'FldType' => 'INT',
			'FldDataType' => 'Numeric',
			'FldDataLength' => '11',
			'FldCharSupport' => ',Numbers,',
			'FldKeyType' => ',Foreign,',
			'FldNullSupport' => '0',
			'FldCompareSame' => '878800',
			'FldOpts' => '13'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 1411,
			'FldDatabase' => '1',
			'FldTable' => '170',
			'FldOrd' => '13',
			'FldSpecType' => 'Replica',
			'FldSpecSource' => '0',
			'FldName' => 'VersionAB',
			'FldEng' => 'A/B Testing Version',
			'FldDesc' => 'Stores a complex string reflecting all A/B Testing variations in effect at the time of this User\'s Experience of this Node.',
			'FldForeignMin' => 'N',
			'FldForeignMax' => 'N',
			'FldForeign2Min' => 'N',
			'FldForeign2Max' => 'N',
			'FldDataLength' => '0',
			'FldNullSupport' => '0'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 1412,
			'FldDatabase' => '1',
			'FldTable' => '170',
			'FldOrd' => '1',
			'FldSpecSource' => '0',
			'FldName' => 'Status',
			'FldEng' => 'OPC Complaint Status',
			'FldDesc' => 'The current progress of a "complete" or "incomplete" Compliment within the OPC system. We use this information internally to determine next Administrator actions to guide a Compliment to the final status of "closed."',
			'FldForeignMin' => 'N',
			'FldForeignMax' => 'N',
			'FldForeign2Min' => 'N',
			'FldForeign2Max' => 'N',
			'FldValues' => 'Def::Compliment Status',
			'FldType' => 'INT',
			'FldDataType' => 'Numeric',
			'FldDataLength' => '0',
			'FldCharSupport' => ',Numbers,',
			'FldKeyType' => ',',
			'FldNullSupport' => '0',
			'FldCompareSame' => '878800'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 1413,
			'FldDatabase' => '1',
			'FldTable' => '170',
			'FldOrd' => '2',
			'FldSpecSource' => '0',
			'FldName' => 'Type',
			'FldEng' => 'OPC Complaint Type',
			'FldDesc' => 'The Administrator-selected category for newly-submitted Compliment records. Essential for determining where and how new Compliment records are stored and shared.',
			'FldForeignMin' => 'N',
			'FldForeignMax' => 'N',
			'FldForeign2Min' => 'N',
			'FldForeign2Max' => 'N',
			'FldType' => 'INT',
			'FldDataType' => 'Numeric',
			'FldDataLength' => '3',
			'FldCharSupport' => ',Numbers,',
			'FldKeyType' => ',',
			'FldNullSupport' => '0',
			'FldCompareSame' => '878800'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 1414,
			'FldDatabase' => '1',
			'FldTable' => '170',
			'FldOrd' => '12',
			'FldSpecSource' => '0',
			'FldName' => 'SubmissionProgress',
			'FldEng' => 'Submission Progress',
			'FldDesc' => 'Indicates current progress of an "incomplete" Compliment. Important for identifying problem areas which might cause Compliments to be left unfinished.',
			'FldForeignMin' => 'N',
			'FldForeignMax' => 'N',
			'FldForeign2Min' => 'N',
			'FldForeign2Max' => 'N',
			'FldDataLength' => '0',
			'FldCharSupport' => ',Letters,Numbers,Keyboard,',
			'FldKeyType' => ',',
			'FldNullSupport' => '0',
			'FldCompareSame' => '6'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 1415,
			'FldDatabase' => '1',
			'FldTable' => '170',
			'FldOrd' => '14',
			'FldSpecSource' => '0',
			'FldName' => 'TreeVersion',
			'FldEng' => 'Tree Version',
			'FldDesc' => 'Indicates which precise version number of this software was running at the time of this Compliment\'s submission. This is important for internal use, quality control, and potential debugging.',
			'FldForeignMin' => 'N',
			'FldForeignMax' => 'N',
			'FldForeign2Min' => 'N',
			'FldForeign2Max' => 'N',
			'FldDataLength' => '50',
			'FldCharSupport' => ',Letters,Numbers,Keyboard,',
			'FldKeyType' => ',',
			'FldNullSupport' => '0',
			'FldCompareSame' => '878800'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 1416,
			'FldDatabase' => '1',
			'FldTable' => '170',
			'FldOrd' => '3',
			'FldSpecSource' => '0',
			'FldName' => 'IncidentID',
			'FldEng' => 'Incident ID',
			'FldDesc' => 'The unique number of the Incident record related to this Compliment. This number helps us identify the Incident that this Compliment documents.',
			'FldForeignTable' => '114',
			'FldType' => 'INT',
			'FldDataType' => 'Numeric',
			'FldDataLength' => '11',
			'FldCharSupport' => ',Numbers,',
			'FldKeyType' => ',Foreign,',
			'FldNullSupport' => '0',
			'FldCompareSame' => '878800',
			'FldOpts' => '13'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 1417,
			'FldDatabase' => '1',
			'FldTable' => '170',
			'FldOrd' => '4',
			'FldSpecSource' => '0',
			'FldName' => 'SceneID',
			'FldEng' => 'Scene ID',
			'FldDesc' => 'The unique number of the Scene record related to this Compliment. This number helps us identify the Scene that this compliment documents.',
			'FldForeignTable' => '115',
			'FldType' => 'INT',
			'FldDataType' => 'Numeric',
			'FldDataLength' => '11',
			'FldCharSupport' => ',Numbers,',
			'FldKeyType' => ',Foreign,',
			'FldNullSupport' => '0',
			'FldCompareSame' => '878800',
			'FldOpts' => '13'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 1418,
			'FldDatabase' => '1',
			'FldTable' => '112',
			'FldOrd' => '4',
			'FldSpecSource' => '0',
			'FldName' => 'SceneID',
			'FldEng' => 'Scene ID',
			'FldDesc' => 'The unique number of the Scene record related to this Complaint. This number helps us identify the Scene that this Complaint documents.',
			'FldForeignTable' => '115',
			'FldType' => 'INT',
			'FldDataType' => 'Numeric',
			'FldDataLength' => '0',
			'FldCharSupport' => ',Numbers,',
			'FldKeyType' => ',Foreign,',
			'FldNullSupport' => '0',
			'FldCompareSame' => '878800',
			'FldOpts' => '13'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 1419,
			'FldDatabase' => '1',
			'FldTable' => '170',
			'FldOrd' => '5',
			'FldSpecSource' => '0',
			'FldName' => 'Privacy',
			'FldEng' => 'Privacy Setting',
			'FldDesc' => 'User-selected category for Compliment records. This defines what personally identifiable information (PII) is publicly shared.',
			'FldForeignMin' => 'N',
			'FldForeignMax' => 'N',
			'FldForeign2Min' => 'N',
			'FldForeign2Max' => 'N',
			'FldValues' => 'Def::Privacy Types',
			'FldType' => 'INT',
			'FldDataType' => 'Numeric',
			'FldDataLength' => '0',
			'FldCharSupport' => ',Numbers,',
			'FldKeyType' => ',',
			'FldNullSupport' => '0',
			'FldCompareSame' => '878800'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 1420,
			'FldDatabase' => '1',
			'FldTable' => '170',
			'FldOrd' => '6',
			'FldSpecSource' => '0',
			'FldName' => 'Summary',
			'FldEng' => 'Summary (Narrative)',
			'FldDesc' => 'The Complainant narrative describes the chronological sequence of key Incident events and Commendations. This story brings to life to an otherwise clinical and legalistic Compliment document.',
			'FldForeignMin' => 'N',
			'FldForeignMax' => 'N',
			'FldForeign2Min' => 'N',
			'FldForeign2Max' => 'N',
			'FldType' => 'TEXT',
			'FldDataLength' => '0',
			'FldKeyType' => ',',
			'FldNullSupport' => '0'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 1421,
			'FldDatabase' => '1',
			'FldTable' => '170',
			'FldOrd' => '7',
			'FldSpecSource' => '0',
			'FldName' => 'HowHear',
			'FldEng' => 'How did you hear about OPC?',
			'FldDesc' => 'Indicates how the Complainant heard about OpenPolice.org. This is important for internal understanding of OPC marketing strategies.',
			'FldForeignMin' => 'N',
			'FldForeignMax' => 'N',
			'FldForeign2Min' => 'N',
			'FldForeign2Max' => 'N',
			'FldDataLength' => '0',
			'FldCharSupport' => ',Letters,Numbers,Keyboard,',
			'FldKeyType' => ',',
			'FldNullSupport' => '0',
			'FldCompareSame' => '878800'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 1422,
			'FldDatabase' => '1',
			'FldTable' => '170',
			'FldOrd' => '8',
			'FldSpecSource' => '0',
			'FldName' => 'Feedback',
			'FldEng' => 'User Suggestions and Feedback',
			'FldDesc' => 'Indicates any suggestions or feedback the user has for us at the end of the process. This is important to let us know if we missed anything, etc.',
			'FldForeignMin' => 'N',
			'FldForeignMax' => 'N',
			'FldForeign2Min' => 'N',
			'FldForeign2Max' => 'N',
			'FldType' => 'TEXT',
			'FldDataLength' => '0',
			'FldKeyType' => ',',
			'FldNullSupport' => '0'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 1423,
			'FldDatabase' => '1',
			'FldTable' => '170',
			'FldOrd' => '9',
			'FldSpecSource' => '0',
			'FldName' => 'Slug',
			'FldEng' => 'URL Slug',
			'FldDesc' => 'This defines the version of the Compliment\'s Social Media Headline which is compatible and ideal to be used as part of a website URL. This is vital for creating public pages of the website which are intuitive and professional.',
			'FldForeignMin' => 'N',
			'FldForeignMax' => 'N',
			'FldForeign2Min' => 'N',
			'FldForeign2Max' => 'N',
			'FldDataLength' => '0',
			'FldCharSupport' => ',Letters,Numbers,Keyboard,',
			'FldKeyType' => ',',
			'FldNullSupport' => '0',
			'FldCompareSame' => '6'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 1424,
			'FldDatabase' => '1',
			'FldTable' => '170',
			'FldOrd' => '10',
			'FldSpecSource' => '0',
			'FldName' => 'Notes',
			'FldEng' => 'Compliment Notes',
			'FldDesc' => 'Additional annotations related to this Compliment. Might add additional information or context regarding the Compliment.',
			'FldForeignMin' => 'N',
			'FldForeignMax' => 'N',
			'FldForeign2Min' => 'N',
			'FldForeign2Max' => 'N',
			'FldType' => 'TEXT',
			'FldDataLength' => '0',
			'FldKeyType' => ',',
			'FldNullSupport' => '0'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 1425,
			'FldDatabase' => '1',
			'FldTable' => '170',
			'FldOrd' => '11',
			'FldSpecSource' => '0',
			'FldName' => 'RecordSubmitted',
			'FldEng' => 'Record Submitted to OpenPolice.org',
			'FldDesc' => 'Date and time when this Compliment was completed and submitted to the OPC database.',
			'FldForeignMin' => 'N',
			'FldForeignMax' => 'N',
			'FldForeign2Min' => 'N',
			'FldForeign2Max' => 'N',
			'FldType' => 'DATETIME',
			'FldDataType' => 'DateTime',
			'FldDataLength' => '0',
			'FldCharSupport' => ',Numbers,Keyboard,',
			'FldKeyType' => ',',
			'FldNullSupport' => '0',
			'FldCompareSame' => '6'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 1426,
			'FldDatabase' => '1',
			'FldTable' => '170',
			'FldOrd' => '15',
			'FldSpecSource' => '0',
			'FldName' => 'HoneyPot',
			'FldEng' => 'Honey Pot (to catch spam bots)',
			'FldDesc' => 'Indicates whether or not a spam bot filled in the form field which human users cannot see. This is important for quickly categorizing Compliments as spam.',
			'FldForeignMin' => 'N',
			'FldForeignMax' => 'N',
			'FldForeign2Min' => 'N',
			'FldForeign2Max' => 'N',
			'FldDataLength' => '0',
			'FldCharSupport' => ',Letters,Numbers,Keyboard,',
			'FldKeyType' => ',',
			'FldNullSupport' => '0',
			'FldOpts' => '13'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 1427,
			'FldDatabase' => '1',
			'FldTable' => '170',
			'FldOrd' => '16',
			'FldSpecSource' => '0',
			'FldName' => 'IsMobile',
			'FldEng' => 'Using Mobile Device',
			'FldDesc' => 'Indicates whether or not this Compliment was started on a mobile device. This is important for tracking trends of usage, and potential debugging.',
			'FldForeignMin' => 'N',
			'FldForeignMax' => 'N',
			'FldForeign2Min' => 'N',
			'FldForeign2Max' => 'N',
			'FldValues' => '0;1',
			'FldType' => 'INT',
			'FldDataType' => 'Numeric',
			'FldDataLength' => '0',
			'FldCharSupport' => ',Numbers,',
			'FldKeyType' => ',',
			'FldNullSupport' => '0',
			'FldCompareSame' => '878800'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 1428,
			'FldDatabase' => '1',
			'FldTable' => '170',
			'FldOrd' => '17',
			'FldSpecSource' => '0',
			'FldName' => 'UniqueStr',
			'FldEng' => 'Unique String',
			'FldDesc' => 'This unique, randomly generated string can be important for creating custom URLs which are more secure than using the Compliment ID#.',
			'FldForeignMin' => 'N',
			'FldForeignMax' => 'N',
			'FldForeign2Min' => 'N',
			'FldForeign2Max' => 'N',
			'FldDataLength' => '20',
			'FldCharSupport' => ',Letters,Numbers,',
			'FldKeyType' => ',',
			'FldNullSupport' => '0',
			'FldOpts' => '11'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 1429,
			'FldDatabase' => '1',
			'FldTable' => '170',
			'FldOrd' => '18',
			'FldSpecSource' => '0',
			'FldName' => 'IPaddy',
			'FldEng' => 'IP Address (encrypted)',
			'FldDesc' => 'This logs an encrypted copy of the Complainants IP Address. This is important for checking if multiple Compliments were submitted from the same location, especially when filtering Compliments categorized as spam or abuse.',
			'FldForeignMin' => 'N',
			'FldForeignMax' => 'N',
			'FldForeign2Min' => 'N',
			'FldForeign2Max' => 'N',
			'FldDataLength' => '0',
			'FldCharSupport' => ',Letters,Numbers,Keyboard,',
			'FldKeyType' => ',',
			'FldNullSupport' => '0',
			'FldCompareSame' => '878800',
			'FldOpts' => '11'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 1431,
			'FldDatabase' => '1',
			'FldTable' => '171',
			'FldSpecSource' => '0',
			'FldName' => 'ComplimentID',
			'FldEng' => 'Compliment ID',
			'FldDesc' => 'The unique number of the Compliment record, vital to associating with all other Compliment data.',
			'FldForeignTable' => '170',
			'FldForeignMin' => '0',
			'FldForeignMax' => 'N',
			'FldType' => 'INT',
			'FldDataType' => 'Numeric',
			'FldDataLength' => '0',
			'FldCharSupport' => ',Numbers,',
			'FldKeyType' => ',Foreign,',
			'FldNullSupport' => '0',
			'FldCompareSame' => '878800',
			'FldOpts' => '13'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 1432,
			'FldDatabase' => '1',
			'FldTable' => '171',
			'FldOrd' => '1',
			'FldSpecSource' => '0',
			'FldName' => 'DeptID',
			'FldEng' => 'Department ID',
			'FldDesc' => 'The unique number of the Department record related to this Complaint. This number helps us identify which Department this Complaint is directed and therefore which Investigative Agency should be contacted.',
			'FldForeignTable' => '111',
			'FldForeignMin' => '0',
			'FldForeignMax' => 'N',
			'FldType' => 'INT',
			'FldDataType' => 'Numeric',
			'FldDataLength' => '0',
			'FldCharSupport' => ',Numbers,',
			'FldKeyType' => ',Foreign,',
			'FldNullSupport' => '0',
			'FldCompareSame' => '878800',
			'FldOpts' => '13'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 1433,
			'FldDatabase' => '1',
			'FldTable' => '114',
			'FldOrd' => '13',
			'FldSpecSource' => '0',
			'FldName' => 'Public',
			'FldEng' => 'Publicly Mapped',
			'FldDesc' => 'Indicates whether or not the Complainant wants the address of this Incident made public for mapping and research purposes.',
			'FldForeignMin' => 'N',
			'FldForeignMax' => 'N',
			'FldForeign2Min' => 'N',
			'FldForeign2Max' => 'N',
			'FldValues' => '0;1',
			'FldType' => 'INT',
			'FldDataType' => 'Numeric',
			'FldDataLength' => '1',
			'FldCharSupport' => ',Numbers,',
			'FldKeyType' => ',',
			'FldNullSupport' => '0',
			'FldCompareSame' => '878800'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 1434,
			'FldDatabase' => '1',
			'FldTable' => '112',
			'FldOrd' => '37',
			'FldSpecSource' => '0',
			'FldName' => 'PublicID',
			'FldEng' => 'Public ID Number',
			'FldDesc' => 'Indicates the unique identification number for referring to this complaint in public and in URLs. Important for making public IDs counting only completed Complaints, not every partial submission.',
			'FldForeignMin' => 'N',
			'FldForeignMax' => 'N',
			'FldForeign2Min' => 'N',
			'FldForeign2Max' => 'N',
			'FldType' => 'INT',
			'FldDataType' => 'Numeric',
			'FldDataLength' => '0',
			'FldCharSupport' => ',Numbers,',
			'FldKeyType' => ',',
			'FldNullSupport' => '0',
			'FldCompareSame' => '6'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 1435,
			'FldDatabase' => '1',
			'FldTable' => '170',
			'FldOrd' => '19',
			'FldSpecSource' => '0',
			'FldName' => 'PublicID',
			'FldEng' => 'Public ID Number',
			'FldDesc' => 'Indicates the unique identification number for referring to this Compliment in public and in URLs. Important for making public IDs counting only completed Compliments, not every partial submission.',
			'FldForeignMin' => 'N',
			'FldForeignMax' => 'N',
			'FldForeign2Min' => 'N',
			'FldForeign2Max' => 'N',
			'FldType' => 'INT',
			'FldDataType' => 'Numeric',
			'FldDataLength' => '0',
			'FldCharSupport' => ',Numbers,',
			'FldKeyType' => ',',
			'FldNullSupport' => '0',
			'FldCompareSame' => '6'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 1436,
			'FldDatabase' => '1',
			'FldTable' => '102',
			'FldOrd' => '17',
			'FldSpecSource' => '0',
			'FldName' => 'HasInjury',
			'FldEng' => 'Received injuries from use of force?',
			'FldDesc' => 'Indicates whether or not Subject has at least one Injury from the Use of Force. Important for asking followup questions.',
			'FldForeignMin' => 'N',
			'FldForeignMax' => 'N',
			'FldForeign2Min' => 'N',
			'FldForeign2Max' => 'N',
			'FldValues' => 'Y;N;?',
			'FldDataLength' => '1',
			'FldCharSupport' => ',Letters,Keyboard,',
			'FldKeyType' => ',',
			'FldNullSupport' => '0',
			'FldCompareSame' => '878800'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 1437,
			'FldDatabase' => '1',
			'FldTable' => '102',
			'FldOrd' => '18',
			'FldSpecSource' => '0',
			'FldName' => 'HasInjuryCare',
			'FldEng' => 'Received medical care?',
			'FldDesc' => 'Indicates whether or not Subject received Medical Care for any Injuries from the Use of Force. Important for asking followup questions.',
			'FldForeignMin' => 'N',
			'FldForeignMax' => 'N',
			'FldForeign2Min' => 'N',
			'FldForeign2Max' => 'N',
			'FldValues' => 'Y;N;?',
			'FldDataLength' => '1',
			'FldCharSupport' => ',Letters,Keyboard,',
			'FldKeyType' => ',',
			'FldNullSupport' => '0',
			'FldCompareSame' => '878800'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 1438,
			'FldDatabase' => '1',
			'FldTable' => '117',
			'FldOrd' => '5',
			'FldSpecSource' => '0',
			'FldName' => 'Done',
			'FldEng' => 'Injury Form Done',
			'FldDesc' => 'Indicates whether or not the Complainant has gone through this Injury record yet.',
			'FldForeignMin' => 'N',
			'FldForeignMax' => 'N',
			'FldForeign2Min' => 'N',
			'FldForeign2Max' => 'N',
			'FldValues' => '0;1',
			'FldType' => 'INT',
			'FldDataType' => 'Numeric',
			'FldDataLength' => '1',
			'FldCharSupport' => ',Numbers,',
			'FldKeyType' => ',',
			'FldNullSupport' => '0',
			'FldCompareSame' => '878800'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 1439,
			'FldDatabase' => '1',
			'FldTable' => '146',
			'FldOrd' => '17',
			'FldSpecSource' => '0',
			'FldName' => 'Done',
			'FldEng' => 'Injury Care Form Done',
			'FldDesc' => 'Indicates whether or not the Complainant has gone through this Injury Care record yet.',
			'FldForeignMin' => 'N',
			'FldForeignMax' => 'N',
			'FldForeign2Min' => 'N',
			'FldForeign2Max' => 'N',
			'FldValues' => '0;1',
			'FldType' => 'INT',
			'FldDataType' => 'Numeric',
			'FldDataLength' => '1',
			'FldCharSupport' => ',',
			'FldKeyType' => ',',
			'FldNullSupport' => '0',
			'FldCompareSame' => '878800',
			'FldOpts' => '13'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 1440,
			'FldDatabase' => '1',
			'FldTable' => '156',
			'FldOrd' => '12',
			'FldSpecSource' => '0',
			'FldName' => 'PropertyDamage',
			'FldEng' => 'Think property damage wrongful?',
			'FldDesc' => 'Indicates whether or not the Complainant believes there is an Allegation regarding the wrongful destruction of at least one Civilian\'s property. Such Allegation claims are central to Complaints.',
			'FldForeignMin' => 'N',
			'FldForeignMax' => 'N',
			'FldForeign2Min' => 'N',
			'FldForeign2Max' => 'N',
			'FldValues' => 'Y;N;?',
			'FldDataLength' => '1',
			'FldCharSupport' => ',Letters,Keyboard,',
			'FldKeyType' => ',',
			'FldNullSupport' => '0',
			'FldCompareSame' => '878800'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 1442,
			'FldDatabase' => '1',
			'FldTable' => '115',
			'FldOrd' => '7',
			'FldSpecSource' => '0',
			'FldName' => 'IsVehicleAccident',
			'FldEng' => 'Incident began with traffic accident?',
			'FldDesc' => 'Whether or not an Incident began with a vehicle accident. This provides important contextual information about the the nature of the Incident to better evaluate the Incident and Allegations.',
			'FldForeignMin' => 'N',
			'FldForeignMax' => 'N',
			'FldForeign2Min' => 'N',
			'FldForeign2Max' => 'N',
			'FldValues' => 'Y;N;?',
			'FldDataLength' => '1',
			'FldCharSupport' => ',Letters,Keyboard,',
			'FldKeyType' => ',',
			'FldNullSupport' => '0',
			'FldCompareSame' => '878800'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 1443,
			'FldDatabase' => '1',
			'FldTable' => '154',
			'FldOrd' => '22',
			'FldSpecSource' => '0',
			'FldName' => 'UserID',
			'FldEng' => 'User ID',
			'FldDesc' => 'Indicates the unique User ID number of the User owning the data stored in this record for this Contact Info.',
			'FldForeignTable' => '167',
			'FldForeignMin' => '0',
			'FldForeign2Min' => '0',
			'FldType' => 'INT',
			'FldDataType' => 'Numeric',
			'FldDataLength' => '0',
			'FldCharSupport' => ',Numbers,',
			'FldKeyType' => ',Foreign,',
			'FldNullSupport' => '0',
			'FldCompareSame' => '878800',
			'FldOpts' => '13'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 1458,
			'FldDatabase' => '1',
			'FldTable' => '172',
			'FldSpecSource' => '0',
			'FldName' => 'UserID',
			'FldEng' => 'User ID',
			'FldDesc' => 'Indicates the unique User ID number of the User editing the original Departments record.',
			'FldForeignMin' => 'N',
			'FldForeignMax' => 'N',
			'FldForeign2Min' => 'N',
			'FldForeign2Max' => 'N',
			'FldType' => 'INT',
			'FldDataType' => 'Numeric',
			'FldDataLength' => '11',
			'FldCharSupport' => ',Numbers,',
			'FldKeyType' => ',Foreign,',
			'FldNullSupport' => '0',
			'FldCompareSame' => '878800',
			'FldOpts' => '13'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 1459,
			'FldDatabase' => '1',
			'FldTable' => '172',
			'FldOrd' => '1',
			'FldSpecSource' => '0',
			'FldName' => 'Duration',
			'FldEng' => 'Duration of Edit',
			'FldDesc' => 'How many seconds the user spent editing this record.',
			'FldForeignMin' => 'N',
			'FldForeignMax' => 'N',
			'FldForeign2Min' => 'N',
			'FldForeign2Max' => 'N',
			'FldType' => 'INT',
			'FldDataType' => 'Numeric',
			'FldDataLength' => '0',
			'FldCharSupport' => ',Numbers,',
			'FldKeyType' => ',',
			'FldNullSupport' => '0',
			'FldCompareSame' => '6'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 1460,
			'FldDatabase' => '1',
			'FldTable' => '173',
			'FldSpecSource' => '0',
			'FldName' => 'ZedDeptID',
			'FldEng' => 'Department Edit Record ID',
			'FldDesc' => 'The unique ID number of the edit record tied to this extended edit record.',
			'FldForeignTable' => '172',
			'FldForeignMax' => '2',
			'FldType' => 'INT',
			'FldDataType' => 'Numeric',
			'FldDataLength' => '0',
			'FldCharSupport' => ',Numbers,',
			'FldKeyType' => ',Foreign,',
			'FldNullSupport' => '0',
			'FldCompareSame' => '878800',
			'FldOpts' => '13'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 1461,
			'FldDatabase' => '1',
			'FldTable' => '173',
			'FldOrd' => '1',
			'FldSpecSource' => '0',
			'FldName' => 'OnlineResearch',
			'FldEng' => 'Completed Online Research',
			'FldDesc' => 'Indicates whether or not the volunteer completed the online portion of the police department research process.',
			'FldForeignMin' => 'N',
			'FldForeignMax' => 'N',
			'FldForeign2Min' => 'N',
			'FldForeign2Max' => 'N',
			'FldValues' => '0;1',
			'FldType' => 'INT',
			'FldDataType' => 'Numeric',
			'FldDataLength' => '1',
			'FldCharSupport' => ',Numbers,',
			'FldKeyType' => ',',
			'FldNullSupport' => '0',
			'FldCompareSame' => '878800'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 1462,
			'FldDatabase' => '1',
			'FldTable' => '173',
			'FldOrd' => '2',
			'FldSpecSource' => '0',
			'FldName' => 'MadeDeptCall',
			'FldEng' => 'Made Department Call',
			'FldDesc' => 'Indicates whether or not the volunteer completed the research with a phone call to the police department.',
			'FldForeignMin' => 'N',
			'FldForeignMax' => 'N',
			'FldForeign2Min' => 'N',
			'FldForeign2Max' => 'N',
			'FldValues' => '0;1',
			'FldType' => 'INT',
			'FldDataType' => 'Numeric',
			'FldDataLength' => '1',
			'FldCharSupport' => ',Numbers,',
			'FldKeyType' => ',',
			'FldNullSupport' => '0',
			'FldCompareSame' => '878800'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 1463,
			'FldDatabase' => '1',
			'FldTable' => '173',
			'FldOrd' => '3',
			'FldSpecSource' => '0',
			'FldName' => 'MadeIACall',
			'FldEng' => 'Made Internal Affairs Call',
			'FldDesc' => 'Indicates whether or not the volunteer completed the research with a phone call to the internal affairs office.',
			'FldForeignMin' => 'N',
			'FldForeignMax' => 'N',
			'FldForeign2Min' => 'N',
			'FldForeign2Max' => 'N',
			'FldValues' => '0;1',
			'FldType' => 'INT',
			'FldDataType' => 'Numeric',
			'FldDataLength' => '1',
			'FldCharSupport' => ',Numbers,',
			'FldKeyType' => ',',
			'FldNullSupport' => '0',
			'FldCompareSame' => '878800'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 1464,
			'FldDatabase' => '1',
			'FldTable' => '173',
			'FldOrd' => '4',
			'FldSpecSource' => '0',
			'FldName' => 'Notes',
			'FldEng' => 'Volunteer Notes',
			'FldDesc' => 'Provides a space for a volunteer to leave any significant notes about this department (or research attempt) for future volunteers or staff.',
			'FldForeignMin' => 'N',
			'FldForeignMax' => 'N',
			'FldForeign2Min' => 'N',
			'FldForeign2Max' => 'N',
			'FldType' => 'TEXT',
			'FldDataLength' => '0',
			'FldCharSupport' => ',Letters,Numbers,Keyboard,',
			'FldKeyType' => ',',
			'FldNullSupport' => '0'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 1465,
			'FldDatabase' => '1',
			'FldTable' => '174',
			'FldSpecSource' => '0',
			'FldName' => 'Date',
			'FldEng' => 'Date',
			'FldDesc' => 'Indicates the date for which this record\'s totals are cached.',
			'FldForeignMin' => 'N',
			'FldForeignMax' => 'N',
			'FldForeign2Min' => 'N',
			'FldForeign2Max' => 'N',
			'FldType' => 'DATE',
			'FldDataType' => 'DateTime',
			'FldDataLength' => '0',
			'FldCharSupport' => ',Numbers,Keyboard,',
			'FldKeyType' => ',',
			'FldNullSupport' => '0',
			'FldCompareSame' => '6'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 1466,
			'FldDatabase' => '1',
			'FldTable' => '174',
			'FldOrd' => '1',
			'FldSpecSource' => '0',
			'FldName' => 'Signups',
			'FldEng' => 'Total Signups',
			'FldDesc' => 'Indicates the total number of new volunteer signups on this date.',
			'FldForeignMin' => 'N',
			'FldForeignMax' => 'N',
			'FldForeign2Min' => 'N',
			'FldForeign2Max' => 'N',
			'FldDefault' => '0',
			'FldType' => 'INT',
			'FldDataType' => 'Numeric',
			'FldDataLength' => '0',
			'FldCharSupport' => ',Numbers,',
			'FldKeyType' => ',',
			'FldNullSupport' => '0',
			'FldCompareSame' => '6'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 1467,
			'FldDatabase' => '1',
			'FldTable' => '174',
			'FldOrd' => '2',
			'FldSpecSource' => '0',
			'FldName' => 'Logins',
			'FldEng' => 'Total Logins',
			'FldDesc' => 'Indicates the total number of new volunteer logins on this date.',
			'FldForeignMin' => 'N',
			'FldForeignMax' => 'N',
			'FldForeign2Min' => 'N',
			'FldForeign2Max' => 'N',
			'FldDefault' => '0',
			'FldType' => 'INT',
			'FldDataType' => 'Numeric',
			'FldDataLength' => '0',
			'FldCharSupport' => ',Numbers,',
			'FldKeyType' => ',',
			'FldNullSupport' => '0',
			'FldCompareSame' => '6'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 1468,
			'FldDatabase' => '1',
			'FldTable' => '174',
			'FldOrd' => '3',
			'FldSpecSource' => '0',
			'FldName' => 'UsersUnique',
			'FldEng' => 'Total Unique Research Users',
			'FldDesc' => 'Indicates the total number of unique volunteers making research edits on this date.',
			'FldForeignMin' => 'N',
			'FldForeignMax' => 'N',
			'FldForeign2Min' => 'N',
			'FldForeign2Max' => 'N',
			'FldDefault' => '0',
			'FldType' => 'INT',
			'FldDataType' => 'Numeric',
			'FldDataLength' => '0',
			'FldCharSupport' => ',Numbers,',
			'FldKeyType' => ',',
			'FldNullSupport' => '0',
			'FldCompareSame' => '6'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 1469,
			'FldDatabase' => '1',
			'FldTable' => '174',
			'FldOrd' => '4',
			'FldSpecSource' => '0',
			'FldName' => 'DeptsUnique',
			'FldEng' => 'Total Unique Department Researched',
			'FldDesc' => 'Indicates the total number of unique departments receiving research edits on this date.',
			'FldForeignMin' => 'N',
			'FldForeignMax' => 'N',
			'FldForeign2Min' => 'N',
			'FldForeign2Max' => 'N',
			'FldDefault' => '0',
			'FldType' => 'INT',
			'FldDataType' => 'Numeric',
			'FldDataLength' => '0',
			'FldCharSupport' => ',Numbers,',
			'FldKeyType' => ',',
			'FldNullSupport' => '0',
			'FldCompareSame' => '6'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 1470,
			'FldDatabase' => '1',
			'FldTable' => '174',
			'FldOrd' => '5',
			'FldSpecSource' => '0',
			'FldName' => 'OnlineResearch',
			'FldEng' => 'Total Online Research Edits',
			'FldDesc' => 'Indicates the total number of online research edits on this date.',
			'FldForeignMin' => 'N',
			'FldForeignMax' => 'N',
			'FldForeign2Min' => 'N',
			'FldForeign2Max' => 'N',
			'FldDefault' => '0',
			'FldType' => 'INT',
			'FldDataType' => 'Numeric',
			'FldDataLength' => '0',
			'FldCharSupport' => ',Numbers,',
			'FldKeyType' => ',',
			'FldNullSupport' => '0',
			'FldCompareSame' => '6'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 1475,
			'FldDatabase' => '1',
			'FldTable' => '174',
			'FldOrd' => '10',
			'FldSpecSource' => '0',
			'FldName' => 'OnlineResearchV',
			'FldEng' => 'Total Online Research Volunteer Edits',
			'FldDesc' => 'Indicates the total number of online research edits by volunteers on this date.',
			'FldForeignMin' => 'N',
			'FldForeignMax' => 'N',
			'FldForeign2Min' => 'N',
			'FldForeign2Max' => 'N',
			'FldDefault' => '0',
			'FldType' => 'INT',
			'FldDataType' => 'Numeric',
			'FldDataLength' => '0',
			'FldCharSupport' => ',Numbers,',
			'FldKeyType' => ',',
			'FldNullSupport' => '0',
			'FldCompareSame' => '6'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 1471,
			'FldDatabase' => '1',
			'FldTable' => '174',
			'FldOrd' => '6',
			'FldSpecSource' => '0',
			'FldName' => 'CallsDept',
			'FldEng' => 'Total Department Call Edits',
			'FldDesc' => 'Indicates the total number of department call edits on this date.',
			'FldForeignMin' => 'N',
			'FldForeignMax' => 'N',
			'FldForeign2Min' => 'N',
			'FldForeign2Max' => 'N',
			'FldDefault' => '0',
			'FldType' => 'INT',
			'FldDataType' => 'Numeric',
			'FldDataLength' => '0',
			'FldCharSupport' => ',Numbers,',
			'FldKeyType' => ',',
			'FldNullSupport' => '0',
			'FldCompareSame' => '6'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 1476,
			'FldDatabase' => '1',
			'FldTable' => '174',
			'FldOrd' => '11',
			'FldSpecSource' => '0',
			'FldName' => 'CallsDeptV',
			'FldEng' => 'Total Department Call Volunteer Edits',
			'FldDesc' => 'Indicates the total number of department call edits by volunteers on this date.',
			'FldForeignMin' => 'N',
			'FldForeignMax' => 'N',
			'FldForeign2Min' => 'N',
			'FldForeign2Max' => 'N',
			'FldDefault' => '0',
			'FldType' => 'INT',
			'FldDataType' => 'Numeric',
			'FldDataLength' => '0',
			'FldCharSupport' => ',Numbers,',
			'FldKeyType' => ',',
			'FldNullSupport' => '0',
			'FldCompareSame' => '6'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 1472,
			'FldDatabase' => '1',
			'FldTable' => '174',
			'FldOrd' => '7',
			'FldSpecSource' => '0',
			'FldName' => 'CallsIA',
			'FldEng' => 'Total Internal Affairs Call Edits',
			'FldDesc' => 'Indicates the total number of internal affairs call edits on this date.',
			'FldForeignMin' => 'N',
			'FldForeignMax' => 'N',
			'FldForeign2Min' => 'N',
			'FldForeign2Max' => 'N',
			'FldDefault' => '0',
			'FldType' => 'INT',
			'FldDataType' => 'Numeric',
			'FldDataLength' => '0',
			'FldCharSupport' => ',Numbers,',
			'FldKeyType' => ',',
			'FldNullSupport' => '0',
			'FldCompareSame' => '6'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 1477,
			'FldDatabase' => '1',
			'FldTable' => '174',
			'FldOrd' => '12',
			'FldSpecSource' => '0',
			'FldName' => 'CallsIAV',
			'FldEng' => 'Total Internal Affairs Call Volunteer Edits',
			'FldDesc' => 'Indicates the total number of internal affairs call edits by volunteers on this date.',
			'FldForeignMin' => 'N',
			'FldForeignMax' => 'N',
			'FldForeign2Min' => 'N',
			'FldForeign2Max' => 'N',
			'FldDefault' => '0',
			'FldType' => 'INT',
			'FldDataType' => 'Numeric',
			'FldDataLength' => '0',
			'FldCharSupport' => ',Numbers,',
			'FldKeyType' => ',',
			'FldNullSupport' => '0',
			'FldCompareSame' => '6'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 1473,
			'FldDatabase' => '1',
			'FldTable' => '174',
			'FldOrd' => '8',
			'FldSpecSource' => '0',
			'FldName' => 'CallsTot',
			'FldEng' => 'Total Call Edits',
			'FldDesc' => 'Indicates the total number of department and internal affairs call edits on this date.',
			'FldForeignMin' => 'N',
			'FldForeignMax' => 'N',
			'FldForeign2Min' => 'N',
			'FldForeign2Max' => 'N',
			'FldDefault' => '0',
			'FldType' => 'INT',
			'FldDataType' => 'Numeric',
			'FldDataLength' => '0',
			'FldCharSupport' => ',Numbers,',
			'FldKeyType' => ',',
			'FldNullSupport' => '0',
			'FldCompareSame' => '6'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 1478,
			'FldDatabase' => '1',
			'FldTable' => '174',
			'FldOrd' => '13',
			'FldSpecSource' => '0',
			'FldName' => 'CallsTotV',
			'FldEng' => 'Total Call Volunteer Edits',
			'FldDesc' => 'Indicates the total number of department and internal affairs call edits by volunteers on this date.',
			'FldForeignMin' => 'N',
			'FldForeignMax' => 'N',
			'FldForeign2Min' => 'N',
			'FldForeign2Max' => 'N',
			'FldDefault' => '0',
			'FldType' => 'INT',
			'FldDataType' => 'Numeric',
			'FldDataLength' => '0',
			'FldCharSupport' => ',Numbers,',
			'FldKeyType' => ',',
			'FldNullSupport' => '0',
			'FldCompareSame' => '6'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 1474,
			'FldDatabase' => '1',
			'FldTable' => '174',
			'FldOrd' => '9',
			'FldSpecSource' => '0',
			'FldName' => 'TotalEdits',
			'FldEng' => 'Total Edits Saved',
			'FldDesc' => 'Indicates the total number of edits saved on this date.',
			'FldForeignMin' => 'N',
			'FldForeignMax' => 'N',
			'FldForeign2Min' => 'N',
			'FldForeign2Max' => 'N',
			'FldDefault' => '0',
			'FldType' => 'INT',
			'FldDataType' => 'Numeric',
			'FldDataLength' => '0',
			'FldCharSupport' => ',Numbers,',
			'FldKeyType' => ',',
			'FldNullSupport' => '0',
			'FldCompareSame' => '6'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 1479,
			'FldDatabase' => '1',
			'FldTable' => '174',
			'FldOrd' => '14',
			'FldSpecSource' => '0',
			'FldName' => 'TotalEditsV',
			'FldEng' => 'Total Edits Saved by Volunteers',
			'FldDesc' => 'Indicates the total number of edits by volunteers saved on this date.',
			'FldForeignMin' => 'N',
			'FldForeignMax' => 'N',
			'FldForeign2Min' => 'N',
			'FldForeign2Max' => 'N',
			'FldDefault' => '0',
			'FldType' => 'INT',
			'FldDataType' => 'Numeric',
			'FldDataLength' => '0',
			'FldCharSupport' => ',Numbers,',
			'FldKeyType' => ',',
			'FldNullSupport' => '0',
			'FldCompareSame' => '6'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 1480,
			'FldDatabase' => '1',
			'FldTable' => '176',
			'FldSpecSource' => '0',
			'FldName' => 'UserID',
			'FldEng' => 'User ID',
			'FldDesc' => 'Indicates the unique User ID number of the User record this table extends.',
			'FldForeignTable' => '167',
			'FldType' => 'INT',
			'FldDataType' => 'Numeric',
			'FldDataLength' => '0',
			'FldCharSupport' => ',Numbers,',
			'FldKeyType' => ',Foreign,',
			'FldNullSupport' => '0',
			'FldCompareSame' => '878800',
			'FldOpts' => '13'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 1481,
			'FldDatabase' => '1',
			'FldTable' => '176',
			'FldOrd' => '1',
			'FldSpecSource' => '0',
			'FldName' => 'PersonContactID',
			'FldEng' => 'Person Contact Record ID',
			'FldDesc' => 'Indicates the unique Person Contact ID number for the record used to store this system User\'s personal information within OPC\'s data table.',
			'FldForeignTable' => '154',
			'FldType' => 'INT',
			'FldDataType' => 'Numeric',
			'FldDataLength' => '0',
			'FldCharSupport' => ',Numbers,',
			'FldKeyType' => ',Foreign,',
			'FldNullSupport' => '0',
			'FldCompareSame' => '878800',
			'FldOpts' => '13'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 1482,
			'FldDatabase' => '1',
			'FldTable' => '176',
			'FldOrd' => '2',
			'FldSpecSource' => '0',
			'FldName' => 'Stars',
			'FldEng' => 'Stars Total',
			'FldDesc' => 'Indicates the total number of stars this volunteer has earned.',
			'FldForeignMin' => 'N',
			'FldForeignMax' => 'N',
			'FldForeign2Min' => 'N',
			'FldForeign2Max' => 'N',
			'FldDefault' => '0',
			'FldType' => 'INT',
			'FldDataType' => 'Numeric',
			'FldDataLength' => '0',
			'FldCharSupport' => ',Numbers,',
			'FldKeyType' => ',',
			'FldNullSupport' => '0',
			'FldCompareSame' => '6'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 1483,
			'FldDatabase' => '1',
			'FldTable' => '176',
			'FldOrd' => '3',
			'FldSpecSource' => '0',
			'FldName' => 'Stars1',
			'FldEng' => 'Stars from Online Research',
			'FldDesc' => 'Indicates the total number of stars this volunteer has earned from completing online research.',
			'FldForeignMin' => 'N',
			'FldForeignMax' => 'N',
			'FldForeign2Min' => 'N',
			'FldForeign2Max' => 'N',
			'FldDefault' => '0',
			'FldType' => 'INT',
			'FldDataType' => 'Numeric',
			'FldDataLength' => '0',
			'FldCharSupport' => ',Numbers,',
			'FldKeyType' => ',',
			'FldNullSupport' => '0',
			'FldCompareSame' => '6'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 1484,
			'FldDatabase' => '1',
			'FldTable' => '176',
			'FldOrd' => '4',
			'FldSpecSource' => '0',
			'FldName' => 'Stars2',
			'FldEng' => 'Stars from Department Calls',
			'FldDesc' => 'Indicates the total number of stars this volunteer has earned from calling and speaking with police departments.',
			'FldForeignMin' => 'N',
			'FldForeignMax' => 'N',
			'FldForeign2Min' => 'N',
			'FldForeign2Max' => 'N',
			'FldDefault' => '0',
			'FldType' => 'INT',
			'FldDataType' => 'Numeric',
			'FldDataLength' => '0',
			'FldCharSupport' => ',Numbers,',
			'FldKeyType' => ',',
			'FldNullSupport' => '0',
			'FldCompareSame' => '6'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 1485,
			'FldDatabase' => '1',
			'FldTable' => '176',
			'FldOrd' => '5',
			'FldSpecSource' => '0',
			'FldName' => 'Stars3',
			'FldEng' => 'Stars from Interal Affairs Calls',
			'FldDesc' => 'Indicates the total number of stars this volunteer has earned from calling and speaking with internal affairs offices.',
			'FldForeignMin' => 'N',
			'FldForeignMax' => 'N',
			'FldForeign2Min' => 'N',
			'FldForeign2Max' => 'N',
			'FldDefault' => '0',
			'FldType' => 'INT',
			'FldDataType' => 'Numeric',
			'FldDataLength' => '0',
			'FldCharSupport' => ',Numbers,',
			'FldKeyType' => ',',
			'FldNullSupport' => '0',
			'FldCompareSame' => '6'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 1486,
			'FldDatabase' => '1',
			'FldTable' => '176',
			'FldOrd' => '6',
			'FldSpecSource' => '0',
			'FldName' => 'Depts',
			'FldEng' => 'Unique Departments',
			'FldDesc' => 'Indicates the number of unique police departments for which this volunteer contributed research.',
			'FldForeignMin' => 'N',
			'FldForeignMax' => 'N',
			'FldForeign2Min' => 'N',
			'FldForeign2Max' => 'N',
			'FldDefault' => '0',
			'FldType' => 'INT',
			'FldDataType' => 'Numeric',
			'FldDataLength' => '0',
			'FldCharSupport' => ',Numbers,',
			'FldKeyType' => ',',
			'FldNullSupport' => '0',
			'FldCompareSame' => '6'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 1487,
			'FldDatabase' => '1',
			'FldTable' => '176',
			'FldOrd' => '7',
			'FldSpecSource' => '0',
			'FldName' => 'AvgTimeDept',
			'FldEng' => 'Average Time Researching Department',
			'FldDesc' => 'Indicates average time (in seconds) this volunteer spend editing each department they worked on.',
			'FldForeignMin' => 'N',
			'FldForeignMax' => 'N',
			'FldForeign2Min' => 'N',
			'FldForeign2Max' => 'N',
			'FldDefault' => '0',
			'FldType' => 'INT',
			'FldDataType' => 'Numeric',
			'FldDataLength' => '0',
			'FldCharSupport' => ',Numbers,',
			'FldKeyType' => ',',
			'FldNullSupport' => '0',
			'FldCompareSame' => '6'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 1488,
			'FldDatabase' => '1',
			'FldTable' => '177',
			'FldSpecSource' => '0',
			'FldName' => 'Complaint',
			'FldEng' => 'Complaint ID',
			'FldDesc' => 'Indicates the unique Complaint ID number of the Complaint being reviewed.',
			'FldForeignTable' => '112',
			'FldForeignMin' => '0',
			'FldForeignMax' => 'N',
			'FldType' => 'INT',
			'FldDataType' => 'Numeric',
			'FldDataLength' => '0',
			'FldCharSupport' => ',Numbers,',
			'FldKeyType' => ',Foreign,',
			'FldNullSupport' => '0',
			'FldCompareSame' => '878800',
			'FldOpts' => '13'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 1489,
			'FldDatabase' => '1',
			'FldTable' => '177',
			'FldOrd' => '1',
			'FldSpecSource' => '0',
			'FldName' => 'User',
			'FldEng' => 'User ID',
			'FldDesc' => 'Indicates the unique User ID number for the person performing this Complaint review.',
			'FldForeignTable' => '167',
			'FldForeignMin' => '0',
			'FldForeignMax' => 'N',
			'FldType' => 'INT',
			'FldDataType' => 'Numeric',
			'FldDataLength' => '0',
			'FldCharSupport' => ',Numbers,',
			'FldKeyType' => ',Foreign,',
			'FldNullSupport' => '0',
			'FldCompareSame' => '878800',
			'FldOpts' => '13'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 1490,
			'FldDatabase' => '1',
			'FldTable' => '177',
			'FldOrd' => '2',
			'FldSpecSource' => '0',
			'FldName' => 'Date',
			'FldEng' => 'Review Date',
			'FldDesc' => 'Indicates the date when this Complaint review was submitted.',
			'FldForeignMin' => 'N',
			'FldForeignMax' => 'N',
			'FldForeign2Min' => 'N',
			'FldForeign2Max' => 'N',
			'FldType' => 'DATE',
			'FldDataType' => 'DateTime',
			'FldDataLength' => '0',
			'FldCharSupport' => ',Numbers,Keyboard,',
			'FldKeyType' => ',',
			'FldNullSupport' => '0',
			'FldCompareSame' => '6'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 1491,
			'FldDatabase' => '1',
			'FldTable' => '177',
			'FldOrd' => '3',
			'FldSpecSource' => '0',
			'FldName' => 'Type',
			'FldEng' => 'Review Type',
			'FldDesc' => 'Indicates which type of Complaint review is being submitted.',
			'FldForeignMin' => 'N',
			'FldForeignMax' => 'N',
			'FldForeign2Min' => 'N',
			'FldForeign2Max' => 'N',
			'FldDataLength' => '10',
			'FldCharSupport' => ',Letters,Numbers,Keyboard,',
			'FldKeyType' => ',',
			'FldNullSupport' => '0',
			'FldCompareSame' => '878800'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 1492,
			'FldDatabase' => '1',
			'FldTable' => '177',
			'FldOrd' => '5',
			'FldSpecSource' => '0',
			'FldName' => 'Status',
			'FldEng' => 'Review Status',
			'FldDesc' => 'Indicates which new status has been chosen for this Complaint, if the current User has permissions.',
			'FldForeignMin' => 'N',
			'FldForeignMax' => 'N',
			'FldForeign2Min' => 'N',
			'FldForeign2Max' => 'N',
			'FldDataLength' => '50',
			'FldCharSupport' => ',Letters,Numbers,Keyboard,',
			'FldKeyType' => ',',
			'FldNullSupport' => '0',
			'FldCompareSame' => '878800'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 1493,
			'FldDatabase' => '1',
			'FldTable' => '177',
			'FldOrd' => '4',
			'FldSpecSource' => '0',
			'FldName' => 'ComplaintType',
			'FldEng' => 'Complaint Type',
			'FldDesc' => 'Indicates the type of Complaint confirmed in this review.',
			'FldForeignMin' => 'N',
			'FldForeignMax' => 'N',
			'FldForeign2Min' => 'N',
			'FldForeign2Max' => 'N',
			'FldValues' => 'Def::OPC Staff/Internal Complaint Type',
			'FldType' => 'INT',
			'FldDataType' => 'Numeric',
			'FldDataLength' => '0',
			'FldCharSupport' => ',Numbers,',
			'FldKeyType' => ',',
			'FldNullSupport' => '0',
			'FldCompareSame' => '878800'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 1494,
			'FldDatabase' => '1',
			'FldTable' => '177',
			'FldOrd' => '7',
			'FldSpecSource' => '0',
			'FldName' => 'Note',
			'FldEng' => 'User Note',
			'FldDesc' => 'Indicates any other notes or information the current User wants to share with their review.',
			'FldForeignMin' => 'N',
			'FldForeignMax' => 'N',
			'FldForeign2Min' => 'N',
			'FldForeign2Max' => 'N',
			'FldType' => 'TEXT',
			'FldDataLength' => '0',
			'FldKeyType' => ',',
			'FldNullSupport' => '0'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 1495,
			'FldDatabase' => '1',
			'FldTable' => '177',
			'FldOrd' => '8',
			'FldSpecSource' => '0',
			'FldName' => 'OneIncident',
			'FldEng' => 'Focused On One Incident',
			'FldDesc' => 'Indicates whether or not this Complaint remained focused on one Incident.',
			'FldForeignMin' => 'N',
			'FldForeignMax' => 'N',
			'FldForeign2Min' => 'N',
			'FldForeign2Max' => 'N',
			'FldValues' => '0;1',
			'FldType' => 'INT',
			'FldDataType' => 'Numeric',
			'FldDataLength' => '1',
			'FldCharSupport' => ',Numbers,',
			'FldKeyType' => ',',
			'FldNullSupport' => '0',
			'FldCompareSame' => '878800'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 1496,
			'FldDatabase' => '1',
			'FldTable' => '177',
			'FldOrd' => '9',
			'FldSpecSource' => '0',
			'FldName' => 'CivilianContact',
			'FldEng' => 'Has Civilian Contact',
			'FldDesc' => 'Indicates whether or not this Complaint includes at least one civilian contact for investigation.',
			'FldForeignMin' => 'N',
			'FldForeignMax' => 'N',
			'FldForeign2Min' => 'N',
			'FldForeign2Max' => 'N',
			'FldValues' => '0;1',
			'FldType' => 'INT',
			'FldDataType' => 'Numeric',
			'FldDataLength' => '1',
			'FldCharSupport' => ',Numbers,',
			'FldKeyType' => ',',
			'FldNullSupport' => '0',
			'FldCompareSame' => '878800'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 1497,
			'FldDatabase' => '1',
			'FldTable' => '177',
			'FldOrd' => '10',
			'FldSpecSource' => '0',
			'FldName' => 'OneOfficer',
			'FldEng' => 'At Least One Officer',
			'FldDesc' => 'Indicates whether or not this Complaint includes information about at least one officer to be investigated.',
			'FldForeignMin' => 'N',
			'FldForeignMax' => 'N',
			'FldForeign2Min' => 'N',
			'FldForeign2Max' => 'N',
			'FldValues' => '0;1',
			'FldType' => 'INT',
			'FldDataType' => 'Numeric',
			'FldDataLength' => '1',
			'FldCharSupport' => ',Numbers,',
			'FldKeyType' => ',',
			'FldNullSupport' => '0',
			'FldCompareSame' => '878800'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 1498,
			'FldDatabase' => '1',
			'FldTable' => '177',
			'FldOrd' => '11',
			'FldSpecSource' => '0',
			'FldName' => 'OneAllegation',
			'FldEng' => 'Has At Least One Allegation',
			'FldDesc' => 'Indicates whether or not this Complaint includes at least one Allegation for investigation, and is a story about police misconduct.',
			'FldForeignMin' => 'N',
			'FldForeignMax' => 'N',
			'FldForeign2Min' => 'N',
			'FldForeign2Max' => 'N',
			'FldValues' => '0;1',
			'FldType' => 'INT',
			'FldDataType' => 'Numeric',
			'FldDataLength' => '1',
			'FldCharSupport' => ',Numbers,',
			'FldKeyType' => ',',
			'FldNullSupport' => '0',
			'FldCompareSame' => '878800'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 1499,
			'FldDatabase' => '1',
			'FldTable' => '177',
			'FldOrd' => '12',
			'FldSpecSource' => '0',
			'FldName' => 'EvidenceUploaded',
			'FldEng' => 'Has Evidence Uploaded',
			'FldDesc' => 'Indicates whether or not this Complaint includes some uploaded evidence supporting their Allegations.',
			'FldForeignMin' => 'N',
			'FldForeignMax' => 'N',
			'FldForeign2Min' => 'N',
			'FldForeign2Max' => 'N',
			'FldValues' => '0;1',
			'FldType' => 'INT',
			'FldDataType' => 'Numeric',
			'FldDataLength' => '1',
			'FldCharSupport' => ',Numbers,',
			'FldKeyType' => ',',
			'FldNullSupport' => '0',
			'FldCompareSame' => '878800'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 1500,
			'FldDatabase' => '1',
			'FldTable' => '177',
			'FldOrd' => '13',
			'FldSpecSource' => '0',
			'FldName' => 'EnglishSkill',
			'FldEng' => 'English Skill Level',
			'FldDesc' => 'Indicates the reviewer\'s opinion about the Complainant\'s skill level with English writing.',
			'FldForeignMin' => 'N',
			'FldForeignMax' => 'N',
			'FldForeign2Min' => 'N',
			'FldForeign2Max' => 'N',
			'FldValues' => '0;1;2;3;4',
			'FldType' => 'INT',
			'FldDataType' => 'Numeric',
			'FldDataLength' => '1',
			'FldCharSupport' => ',Numbers,',
			'FldKeyType' => ',',
			'FldNullSupport' => '0',
			'FldCompareSame' => '6'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 1501,
			'FldDatabase' => '1',
			'FldTable' => '177',
			'FldOrd' => '14',
			'FldSpecSource' => '0',
			'FldName' => 'Readability',
			'FldEng' => 'Readability Level',
			'FldDesc' => 'Indicates the reviewer\'s opinion about how easy it was to read the Complaint.',
			'FldForeignMin' => 'N',
			'FldForeignMax' => 'N',
			'FldForeign2Min' => 'N',
			'FldForeign2Max' => 'N',
			'FldValues' => '0;1;2;3;4',
			'FldType' => 'INT',
			'FldDataType' => 'Numeric',
			'FldDataLength' => '1',
			'FldCharSupport' => ',Numbers,',
			'FldKeyType' => ',',
			'FldNullSupport' => '0',
			'FldCompareSame' => '6'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 1502,
			'FldDatabase' => '1',
			'FldTable' => '177',
			'FldOrd' => '15',
			'FldSpecSource' => '0',
			'FldName' => 'Consistency',
			'FldEng' => 'Consistency Level',
			'FldDesc' => 'Indicates the reviewer\'s opinion about the Complainant\'s level of consistency, meaning freedom from variation or contradiction.',
			'FldForeignMin' => 'N',
			'FldForeignMax' => 'N',
			'FldForeign2Min' => 'N',
			'FldForeign2Max' => 'N',
			'FldValues' => '0;1;2;3;4',
			'FldType' => 'INT',
			'FldDataType' => 'Numeric',
			'FldDataLength' => '1',
			'FldCharSupport' => ',Numbers,',
			'FldKeyType' => ',',
			'FldNullSupport' => '0',
			'FldCompareSame' => '6'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 1503,
			'FldDatabase' => '1',
			'FldTable' => '177',
			'FldOrd' => '16',
			'FldSpecSource' => '0',
			'FldName' => 'Realistic',
			'FldEng' => 'Seems Realistic',
			'FldDesc' => 'Indicates the reviewer\'s opinion about how realistic the Complainant\'s story is.',
			'FldForeignMin' => 'N',
			'FldForeignMax' => 'N',
			'FldForeign2Min' => 'N',
			'FldForeign2Max' => 'N',
			'FldValues' => '0;1;2;3;4',
			'FldType' => 'INT',
			'FldDataType' => 'Numeric',
			'FldDataLength' => '1',
			'FldCharSupport' => ',Numbers,',
			'FldKeyType' => ',',
			'FldNullSupport' => '0',
			'FldCompareSame' => '6'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 1504,
			'FldDatabase' => '1',
			'FldTable' => '177',
			'FldOrd' => '17',
			'FldSpecSource' => '0',
			'FldName' => 'Outrage',
			'FldEng' => 'Outrage Level',
			'FldDesc' => 'Indicates the reviewer\'s personal level of outrage about their understanding of the Incident.',
			'FldForeignMin' => 'N',
			'FldForeignMax' => 'N',
			'FldForeign2Min' => 'N',
			'FldForeign2Max' => 'N',
			'FldValues' => '0;1;2;3;4',
			'FldType' => 'INT',
			'FldDataType' => 'Numeric',
			'FldDataLength' => '1',
			'FldCharSupport' => ',Numbers,',
			'FldKeyType' => ',',
			'FldNullSupport' => '0',
			'FldCompareSame' => '6'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 1505,
			'FldDatabase' => '1',
			'FldTable' => '177',
			'FldOrd' => '6',
			'FldSpecSource' => '0',
			'FldName' => 'Next Action',
			'FldEng' => 'Next Action After Review',
			'FldDesc' => 'Indicates the reviewers recommended next action for this Complaint.',
			'FldForeignMin' => 'N',
			'FldForeignMax' => 'N',
			'FldForeign2Min' => 'N',
			'FldForeign2Max' => 'N',
			'FldDataLength' => '0',
			'FldCharSupport' => ',Letters,Numbers,Keyboard,',
			'FldKeyType' => ',',
			'FldNullSupport' => '0',
			'FldCompareSame' => '6'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 1506,
			'FldDatabase' => '1',
			'FldTable' => '177',
			'FldOrd' => '18',
			'FldSpecSource' => '0',
			'FldName' => 'ExplicitLang',
			'FldEng' => 'Explicit Language Used',
			'FldDesc' => 'Indicates whether or not the reviewer thinks this Complaint contains explicit language.',
			'FldForeignMin' => 'N',
			'FldForeignMax' => 'N',
			'FldForeign2Min' => 'N',
			'FldForeign2Max' => 'N',
			'FldValues' => '0;1',
			'FldType' => 'INT',
			'FldDataType' => 'Numeric',
			'FldDataLength' => '1',
			'FldCharSupport' => ',Numbers,',
			'FldKeyType' => ',',
			'FldNullSupport' => '0',
			'FldCompareSame' => '878800'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 1507,
			'FldDatabase' => '1',
			'FldTable' => '177',
			'FldOrd' => '19',
			'FldSpecSource' => '0',
			'FldName' => 'GraphicContent',
			'FldEng' => 'Contains Graphic Content',
			'FldDesc' => 'Indicates whether or not the reviewer thinks this Complaint contains particularly graphic content.',
			'FldForeignMin' => 'N',
			'FldForeignMax' => 'N',
			'FldForeign2Min' => 'N',
			'FldForeign2Max' => 'N',
			'FldValues' => '0;1',
			'FldType' => 'INT',
			'FldDataType' => 'Numeric',
			'FldDataLength' => '1',
			'FldCharSupport' => ',Numbers,',
			'FldKeyType' => ',',
			'FldNullSupport' => '0',
			'FldCompareSame' => '878800'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 1508,
			'FldDatabase' => '1',
			'FldTable' => '112',
			'FldOrd' => '8',
			'FldSpecSource' => '0',
			'FldName' => 'AllegList',
			'FldEng' => 'List of Allegations',
			'FldDesc' => 'Caches a simple written list of this Complaint\'s allegations, separated by commas.',
			'FldForeignMin' => 'N',
			'FldForeignMax' => 'N',
			'FldForeign2Min' => 'N',
			'FldForeign2Max' => 'N',
			'FldType' => 'TEXT',
			'FldDataLength' => '0',
			'FldCharSupport' => ',Letters,Numbers,Keyboard,',
			'FldKeyType' => ',',
			'FldNullSupport' => '0',
			'FldCompareSame' => '6'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 1509,
			'FldDatabase' => '1',
			'FldTable' => '152',
			'FldOrd' => '1',
			'FldSpecSource' => '0',
			'FldName' => 'IsCivilian',
			'FldEng' => 'Was Civilian Vehicle',
			'FldDesc' => 'Indicates whether or not this record describes a Civilian Vehicle. Otherwise, this record belongs to an Officer\'s Vehicle.',
			'FldForeignMin' => 'N',
			'FldForeignMax' => 'N',
			'FldForeign2Min' => 'N',
			'FldForeign2Max' => 'N',
			'FldValues' => '0;1',
			'FldType' => 'INT',
			'FldDataType' => 'Numeric',
			'FldDataLength' => '1',
			'FldCharSupport' => ',Numbers,',
			'FldKeyType' => ',',
			'FldNullSupport' => '0',
			'FldCompareSame' => '878800'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 1510,
			'FldDatabase' => '1',
			'FldTable' => '152',
			'FldSpecSource' => '0',
			'FldName' => 'ComplaintID',
			'FldEng' => 'Complaint ID',
			'FldDesc' => 'The unique number of the Complaint record related to this Incident, vital to associating with all other Complaint data.',
			'FldForeignTable' => '112',
			'FldForeignMin' => '0',
			'FldForeignMax' => 'N',
			'FldType' => 'INT',
			'FldDataType' => 'Numeric',
			'FldDataLength' => '0',
			'FldCharSupport' => ',Numbers,',
			'FldKeyType' => ',Foreign,',
			'FldNullSupport' => '0',
			'FldCompareSame' => '878800'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 1511,
			'FldDatabase' => '1',
			'FldTable' => '178',
			'FldOrd' => '2',
			'FldSpecSource' => '0',
			'FldName' => 'Part',
			'FldEng' => 'Part(s) of body injured',
			'FldDesc' => 'This describes the part of the body where Injuries occurred. This is important for providing investigators documentation regarding Civilian health.',
			'FldForeignMin' => 'N',
			'FldForeignMax' => 'N',
			'FldForeign2Min' => 'N',
			'FldForeign2Max' => 'N',
			'FldValues' => 'Def::Body Part',
			'FldType' => 'INT',
			'FldDataType' => 'Numeric',
			'FldDataLength' => '3',
			'FldCharSupport' => ',Numbers,',
			'FldKeyType' => ',',
			'FldNullSupport' => '0',
			'FldCompareSame' => '878800'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 1512,
			'FldDatabase' => '1',
			'FldTable' => '145',
			'FldOrd' => '1',
			'FldSpecSource' => '0',
			'FldName' => 'DeptID',
			'FldEng' => 'Department ID',
			'FldDesc' => 'The unique number of the Police Department record involved with this Complaint. This number helps track the investigative progress of the Investigative Agencies where this Complaint has been filed.',
			'FldForeignTable' => '111',
			'FldForeignMin' => '0',
			'FldForeignMax' => 'N',
			'FldType' => 'INT',
			'FldDataType' => 'Numeric',
			'FldDataLength' => '0',
			'FldCharSupport' => ',Numbers,',
			'FldKeyType' => ',Foreign,',
			'FldNullSupport' => '0',
			'FldCompareSame' => '878800',
			'FldOpts' => '13'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 1513,
			'FldDatabase' => '1',
			'FldTable' => '138',
			'FldSpecSource' => '0',
			'FldName' => 'CivID',
			'FldEng' => 'Civilian ID',
			'FldDesc' => 'The unique number of the Victim\'s Civilian record who has received this Arrest or Stop Charge.',
			'FldForeignTable' => '102',
			'FldForeignMin' => '0',
			'FldForeignMax' => 'N',
			'FldType' => 'INT',
			'FldDataType' => 'Numeric',
			'FldDataLength' => '0',
			'FldCharSupport' => ',Numbers,',
			'FldKeyType' => ',Foreign,',
			'FldNullSupport' => '0',
			'FldCompareSame' => '878800'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 1521,
			'FldDatabase' => '1',
			'FldTable' => '111',
			'FldOrd' => '101',
			'FldSpecSource' => '0',
			'FldName' => 'AddressLat',
			'FldEng' => 'Geolocation Latitude',
			'FldDesc' => 'The geographic coordinate that specifies the north-south position of the point on the Earth\'s surface where a Police Department is located.',
			'FldForeignMin' => 'N',
			'FldForeignMax' => 'N',
			'FldForeign2Min' => 'N',
			'FldForeign2Max' => 'N',
			'FldType' => 'DOUBLE',
			'FldDataType' => 'Numeric',
			'FldDataLength' => '0',
			'FldDataDecimals' => '10',
			'FldCharSupport' => ',Numbers,Keyboard,',
			'FldKeyType' => ',',
			'FldNullSupport' => '0',
			'FldCompareSame' => '6'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 1522,
			'FldDatabase' => '1',
			'FldTable' => '111',
			'FldOrd' => '102',
			'FldSpecSource' => '0',
			'FldName' => 'AddressLng',
			'FldEng' => 'Geolocation Longitude',
			'FldDesc' => 'The geographic coordinate that specifies the east-west position of the point on the Earth\'s surface where a Police Department is located.',
			'FldForeignMin' => 'N',
			'FldForeignMax' => 'N',
			'FldForeign2Min' => 'N',
			'FldForeign2Max' => 'N',
			'FldType' => 'DOUBLE',
			'FldDataType' => 'Numeric',
			'FldDataLength' => '0',
			'FldDataDecimals' => '10',
			'FldCharSupport' => ',Numbers,Keyboard,',
			'FldKeyType' => ',',
			'FldNullSupport' => '0',
			'FldCompareSame' => '6'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 1523,
			'FldDatabase' => '1',
			'FldTable' => '110',
			'FldOrd' => '4',
			'FldSpecSource' => '0',
			'FldName' => 'Bio',
			'FldEng' => 'Bio Paragraph',
			'FldDesc' => 'A brief description of the attorney and their practice. This is an integral component of a Customer\'s profile.',
			'FldForeignMin' => 'N',
			'FldForeignMax' => 'N',
			'FldForeign2Min' => 'N',
			'FldForeign2Max' => 'N',
			'FldDataLength' => '0',
			'FldKeyType' => ',',
			'FldNullSupport' => '0',
			'FldCompareSame' => '6'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 1524,
			'FldDatabase' => '1',
			'FldTable' => '180',
			'FldSpecSource' => '0',
			'FldName' => 'PartnerID',
			'FldEng' => 'Partner ID',
			'FldDesc' => 'The primary Partner ID number connected to an Attorney\'s record. This number allows Partners to load their complaint filters.',
			'FldForeignTable' => '110',
			'FldForeignMin' => '0',
			'FldForeignMax' => 'N',
			'FldType' => 'INT',
			'FldDataType' => 'Numeric',
			'FldDataLength' => '0',
			'FldCharSupport' => ',Numbers,',
			'FldKeyType' => ',Foreign,',
			'FldNullSupport' => '0',
			'FldCompareSame' => '878800',
			'FldOpts' => '13'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 1525,
			'FldDatabase' => '1',
			'FldTable' => '179',
			'FldOrd' => '1',
			'FldSpecSource' => '0',
			'FldName' => 'Filter',
			'FldEng' => 'Filter Condition',
			'FldDesc' => 'Indicates the type of filter as one of the requirements for a case to be qualified as a match.',
			'FldForeignMin' => 'N',
			'FldForeignMax' => 'N',
			'FldForeign2Min' => 'N',
			'FldForeign2Max' => 'N',
			'FldValues' => 'Def::Attorney Complaint Filters',
			'FldType' => 'INT',
			'FldDataType' => 'Numeric',
			'FldDataLength' => '0',
			'FldCharSupport' => ',Numbers,',
			'FldKeyType' => ',',
			'FldNullSupport' => '0',
			'FldCompareSame' => '878800'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 1526,
			'FldDatabase' => '1',
			'FldTable' => '179',
			'FldSpecSource' => '0',
			'FldName' => 'CaseID',
			'FldEng' => 'Case Type ID',
			'FldDesc' => 'The primary Partner Case Type ID number connected to an Attorney\'s Case Type record. This number allows Partners to load their complaint filters.',
			'FldForeignTable' => '180',
			'FldForeignMin' => '0',
			'FldForeignMax' => 'N',
			'FldType' => 'INT',
			'FldDataType' => 'Numeric',
			'FldDataLength' => '0',
			'FldCharSupport' => ',Numbers,',
			'FldKeyType' => ',Foreign,',
			'FldNullSupport' => '0',
			'FldCompareSame' => '878800',
			'FldOpts' => '13'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 1539,
			'FldDatabase' => '1',
			'FldTable' => '110',
			'FldOrd' => '15',
			'FldSpecType' => 'Replica',
			'FldName' => 'SubmissionProgress',
			'FldEng' => 'Experience Node Progress',
			'FldDesc' => 'Indicates the unique Node ID number of the last Experience Node loaded during this User\'s Experience.',
			'FldForeignMin' => '11',
			'FldForeignMax' => '11',
			'FldForeign2Min' => '11',
			'FldForeign2Max' => '11',
			'FldType' => 'INT',
			'FldDataType' => 'Numeric',
			'FldCharSupport' => ',Numbers,',
			'FldOpts' => '39'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 1540,
			'FldDatabase' => '1',
			'FldTable' => '110',
			'FldOrd' => '17',
			'FldSpecType' => 'Replica',
			'FldName' => 'TreeVersion',
			'FldEng' => 'Tree Version Number',
			'FldDesc' => 'Stores the current version number of this User Experience, important for tracking bugs.',
			'FldForeignMin' => '11',
			'FldForeignMax' => '11',
			'FldForeign2Min' => '11',
			'FldForeign2Max' => '11',
			'FldOpts' => '39'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 1541,
			'FldDatabase' => '1',
			'FldTable' => '110',
			'FldOrd' => '14',
			'FldSpecType' => 'Replica',
			'FldName' => 'VersionAB',
			'FldEng' => 'A/B Testing Version',
			'FldDesc' => 'Stores a complex string reflecting all A/B Testing variations in effect at the time of this User\'s Experience of this Node.',
			'FldForeignMin' => '11',
			'FldForeignMax' => '11',
			'FldForeign2Min' => '11',
			'FldForeign2Max' => '11',
			'FldOpts' => '39'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 1542,
			'FldDatabase' => '1',
			'FldTable' => '110',
			'FldOrd' => '18',
			'FldSpecType' => 'Replica',
			'FldName' => 'UniqueStr',
			'FldEng' => 'Unique String For Record',
			'FldDesc' => 'This unique string is for cases when including the record ID number is not appropriate.',
			'FldForeignMin' => '11',
			'FldForeignMax' => '11',
			'FldForeign2Min' => '11',
			'FldForeign2Max' => '11',
			'FldOpts' => '39'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 1543,
			'FldDatabase' => '1',
			'FldTable' => '110',
			'FldOrd' => '16',
			'FldSpecType' => 'Replica',
			'FldName' => 'IPaddy',
			'FldEng' => 'IP Address',
			'FldDesc' => 'Encrypted IP address of the current user.',
			'FldForeignMin' => '11',
			'FldForeignMax' => '11',
			'FldForeign2Min' => '11',
			'FldForeign2Max' => '11',
			'FldOpts' => '39'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 1544,
			'FldDatabase' => '1',
			'FldTable' => '110',
			'FldOrd' => '19',
			'FldSpecType' => 'Replica',
			'FldName' => 'IsMobile',
			'FldEng' => 'Using Mobile Device',
			'FldDesc' => 'Indicates whether or not the current user is interacting via a mobile deviced.',
			'FldForeignMin' => '11',
			'FldForeignMax' => '11',
			'FldForeign2Min' => '11',
			'FldForeign2Max' => '11',
			'FldOpts' => '39'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 1545,
			'FldDatabase' => '1',
			'FldTable' => '110',
			'FldOrd' => '1',
			'FldSpecSource' => '0',
			'FldName' => 'Status',
			'FldEng' => 'Is Active?',
			'FldDesc' => 'Indicates whether or not this Partner is currently an active participant in OpenPolice.org. A value of zero will remove the partner from public listings.',
			'FldForeignMin' => 'N',
			'FldForeignMax' => 'N',
			'FldForeign2Min' => 'N',
			'FldForeign2Max' => 'N',
			'FldValues' => '0;1',
			'FldDefault' => '1',
			'FldType' => 'INT',
			'FldDataType' => 'Numeric',
			'FldDataLength' => '1',
			'FldCharSupport' => ',Numbers,',
			'FldKeyType' => ',',
			'FldNullSupport' => '0',
			'FldCompareSame' => '878800'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 1546,
			'FldDatabase' => '1',
			'FldTable' => '110',
			'FldOrd' => '9',
			'FldSpecSource' => '0',
			'FldName' => 'BioUrl',
			'FldEng' => 'Attorney Online Bio',
			'FldDesc' => 'The primary online bio for this attorney, often from their company/firm\'s website. Might include important information for site users.',
			'FldForeignMin' => 'N',
			'FldForeignMax' => 'N',
			'FldForeign2Min' => 'N',
			'FldForeign2Max' => 'N',
			'FldType' => 'TEXT',
			'FldDataLength' => '0',
			'FldKeyType' => ',',
			'FldNullSupport' => '0'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 1547,
			'FldDatabase' => '1',
			'FldTable' => '110',
			'FldOrd' => '5',
			'FldSpecSource' => '0',
			'FldName' => 'Slug',
			'FldEng' => 'URL Slug',
			'FldDesc' => 'This defines the version of the attorney\'s name which is compatible and ideal to be used as part of a website URL. This is vital for creating public pages of the website which are intuitive and professional.',
			'FldForeignMin' => 'N',
			'FldForeignMax' => 'N',
			'FldForeign2Min' => 'N',
			'FldForeign2Max' => 'N',
			'FldDataLength' => '0',
			'FldCharSupport' => ',Letters,Numbers,Keyboard,',
			'FldKeyType' => ',',
			'FldNullSupport' => '0',
			'FldCompareSame' => '6'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 1548,
			'FldDatabase' => '1',
			'FldTable' => '110',
			'FldOrd' => '13',
			'FldSpecSource' => '0',
			'FldName' => 'Alerts',
			'FldEng' => 'Referral Alert Perference',
			'FldDesc' => 'Indicates how often, if at all, the partner wishes to be alerted about complaints which meet their selected conditions.',
			'FldForeignMin' => 'N',
			'FldForeignMax' => 'N',
			'FldForeign2Min' => 'N',
			'FldForeign2Max' => 'N',
			'FldValues' => 'Def::Attorney Referral Alerts',
			'FldType' => 'INT',
			'FldDataType' => 'Numeric',
			'FldDataLength' => '0',
			'FldCharSupport' => ',Numbers,',
			'FldKeyType' => ',',
			'FldNullSupport' => '0',
			'FldCompareSame' => '878800'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 1549,
			'FldDatabase' => '1',
			'FldTable' => '181',
			'FldSpecSource' => '0',
			'FldName' => 'PartID',
			'FldEng' => 'Partner ID',
			'FldDesc' => 'The primary Partner record number connected to a Customer\'s record. Important for linking their active states.',
			'FldForeignTable' => '110',
			'FldForeignMax' => 'N',
			'FldType' => 'INT',
			'FldDataType' => 'Numeric',
			'FldDataLength' => '0',
			'FldCharSupport' => ',Numbers,',
			'FldKeyType' => ',Foreign,',
			'FldNullSupport' => '0',
			'FldCompareSame' => '878800',
			'FldOpts' => '13'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 1550,
			'FldDatabase' => '1',
			'FldTable' => '181',
			'FldOrd' => '1',
			'FldSpecSource' => '0',
			'FldName' => 'State',
			'FldEng' => 'State',
			'FldDesc' => 'Indicates the abbreviation for one state where this Partner is active. Important for associating multiple states with one Partner.',
			'FldForeignMin' => 'N',
			'FldForeignMax' => 'N',
			'FldForeign2Min' => 'N',
			'FldForeign2Max' => 'N',
			'FldDataLength' => '2',
			'FldCharSupport' => ',Letters,',
			'FldKeyType' => ',',
			'FldNullSupport' => '0',
			'FldCompareSame' => '6'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 1551,
			'FldDatabase' => '1',
			'FldTable' => '110',
			'FldOrd' => '12',
			'FldSpecSource' => '0',
			'FldName' => 'PhotoUrl',
			'FldEng' => 'Photo Url',
			'FldDesc' => 'URL for the primary bio photo for this attorney, often from their company/firm\'s website. This makes their profile page much more interesting.',
			'FldForeignMin' => 'N',
			'FldForeignMax' => 'N',
			'FldForeign2Min' => 'N',
			'FldForeign2Max' => 'N',
			'FldDataLength' => '0',
			'FldCharSupport' => ',Letters,Numbers,Keyboard,',
			'FldKeyType' => ',',
			'FldNullSupport' => '0',
			'FldCompareSame' => '6'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 1552,
			'FldDatabase' => '1',
			'FldTable' => '112',
			'FldOrd' => '19',
			'FldSpecSource' => '0',
			'FldName' => 'FileLawsuit',
			'FldEng' => 'Someong Filing Lawsuit?',
			'FldDesc' => 'Indicates whether or not someone involved in this incident is thinking about filing a lawsuit against the police. If they respond yes, this will place complainants in the lawyer track.',
			'FldForeignMin' => 'N',
			'FldForeignMax' => 'N',
			'FldForeign2Min' => 'N',
			'FldForeign2Max' => 'N',
			'FldValues' => 'Y;N;?',
			'FldDataLength' => '1',
			'FldCharSupport' => ',Letters,Keyboard,',
			'FldKeyType' => ',',
			'FldNullSupport' => '0',
			'FldCompareSame' => '878800'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 1555,
			'FldDatabase' => '1',
			'FldTable' => '110',
			'FldOrd' => '10',
			'FldSpecSource' => '0',
			'FldName' => 'HelpReqs',
			'FldEng' => 'Assistance Requirements',
			'FldDesc' => 'A brief description of the organization\'s requirements for requesting assistance. This is an integral component of a Customer\'s profile and intake process.',
			'FldForeignMin' => 'N',
			'FldForeignMax' => 'N',
			'FldForeign2Min' => 'N',
			'FldForeign2Max' => 'N',
			'FldType' => 'TEXT',
			'FldDataLength' => '0',
			'FldKeyType' => ',',
			'FldNullSupport' => '0'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 1556,
			'FldDatabase' => '1',
			'FldTable' => '182',
			'FldSpecSource' => '0',
			'FldName' => 'PartID',
			'FldEng' => 'Part ID',
			'FldDesc' => 'The primary Partner record number connected to a Capacity. Important for filtering organizations for a given situation.',
			'FldForeignTable' => '110',
			'FldForeignMin' => '0',
			'FldForeignMax' => 'N',
			'FldType' => 'INT',
			'FldDataType' => 'Numeric',
			'FldDataLength' => '0',
			'FldCharSupport' => ',Numbers,',
			'FldKeyType' => ',Foreign,',
			'FldNullSupport' => '0',
			'FldCompareSame' => '878800',
			'FldOpts' => '13'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 1557,
			'FldDatabase' => '1',
			'FldTable' => '182',
			'FldOrd' => '1',
			'FldSpecSource' => '0',
			'FldName' => 'Capacity',
			'FldEng' => 'Organizational Capacity',
			'FldDesc' => 'Indicates the Capacity with which this Partner Organization can potentially help OPC users. Important for associating multiple Capacities with one Partner.',
			'FldForeignMin' => 'N',
			'FldForeignMax' => 'N',
			'FldForeign2Min' => 'N',
			'FldForeign2Max' => 'N',
			'FldValues' => 'Def::Organization Capacities',
			'FldType' => 'INT',
			'FldDataType' => 'Numeric',
			'FldDataLength' => '0',
			'FldCharSupport' => ',Numbers,',
			'FldKeyType' => ',',
			'FldNullSupport' => '0',
			'FldCompareSame' => '54925'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 1558,
			'FldDatabase' => '1',
			'FldTable' => '110',
			'FldOrd' => '11',
			'FldSpecSource' => '0',
			'FldName' => 'GeoDesc',
			'FldEng' => 'Description of Geographic Service Area',
			'FldDesc' => 'Indicates whatever description the Partner finds appropriate to more specifically describe the geographic area where they offer services. Important for enabling all site Users to find better matches for the help they need.',
			'FldForeignMin' => 'N',
			'FldForeignMax' => 'N',
			'FldForeign2Min' => 'N',
			'FldForeign2Max' => 'N',
			'FldDataLength' => '0',
			'FldKeyType' => ',',
			'FldNullSupport' => '0'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 1560,
			'FldDatabase' => '1',
			'FldTable' => '155',
			'FldOrd' => '2',
			'FldSpecSource' => '0',
			'FldName' => 'Role',
			'FldEng' => 'Vehicle Role',
			'FldDesc' => 'When a Vehicle is associated with multiple Officers, this information can be important for identifier for which person was driving a Vehicle.',
			'FldForeignMin' => 'N',
			'FldForeignMax' => 'N',
			'FldForeign2Min' => 'N',
			'FldForeign2Max' => 'N',
			'FldValues' => 'Def::Vehicle Roles',
			'FldType' => 'INT',
			'FldDataType' => 'Numeric',
			'FldDataLength' => '0',
			'FldCharSupport' => ',Numbers,',
			'FldKeyType' => ',',
			'FldNullSupport' => '0',
			'FldCompareSame' => '878800'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 1561,
			'FldDatabase' => '1',
			'FldTable' => '183',
			'FldSpecSource' => '0',
			'FldName' => 'OversightID',
			'FldEng' => 'Oversight ID',
			'FldDesc' => 'The unique number of the Investigative Agency with this Oversight Model.',
			'FldForeignMin' => 'N',
			'FldForeignMax' => 'N',
			'FldForeign2Min' => 'N',
			'FldForeign2Max' => 'N',
			'FldType' => 'INT',
			'FldDataType' => 'Numeric',
			'FldDataLength' => '0',
			'FldCharSupport' => ',Numbers,',
			'FldKeyType' => ',Foreign,',
			'FldNullSupport' => '0',
			'FldCompareSame' => '878800',
			'FldOpts' => '13'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 1562,
			'FldDatabase' => '1',
			'FldTable' => '156',
			'FldOrd' => '26',
			'FldSpecSource' => '0',
			'FldName' => 'RepeatContact',
			'FldEng' => 'Incident part of repeated or continued contact with the same officer?',
			'FldDesc' => 'Indicates whether or not this incident part of repeated or continued contact with the same officer. This is important to determine if they should be asked about ongoing/continued harassment.',
			'FldForeignMin' => 'N',
			'FldForeignMax' => 'N',
			'FldForeign2Min' => 'N',
			'FldForeign2Max' => 'N',
			'FldValues' => 'Y;N;?',
			'FldDataLength' => '1',
			'FldCharSupport' => ',Letters,Keyboard,',
			'FldKeyType' => ',',
			'FldNullSupport' => '0',
			'FldCompareSame' => '878800'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 1563,
			'FldDatabase' => '1',
			'FldTable' => '156',
			'FldOrd' => '27',
			'FldSpecSource' => '0',
			'FldName' => 'RepeatHarass',
			'FldEng' => 'Incident is part of repeated harassment?',
			'FldDesc' => 'Indicates whether or not the complainant thinks an officer continued to contact someone without lawful justification.',
			'FldForeignMin' => 'N',
			'FldForeignMax' => 'N',
			'FldForeign2Min' => 'N',
			'FldForeign2Max' => 'N',
			'FldValues' => 'Y;N;?',
			'FldDataLength' => '1',
			'FldCharSupport' => ',Letters,Keyboard,',
			'FldKeyType' => ',',
			'FldNullSupport' => '0',
			'FldCompareSame' => '878800'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 1564,
			'FldDatabase' => '1',
			'FldTable' => '184',
			'FldSpecSource' => '0',
			'FldName' => 'Email',
			'FldEng' => 'Email Address',
			'FldDesc' => 'Indicates the email address of the beta tester to be used for contact.',
			'FldForeignMin' => 'N',
			'FldForeignMax' => 'N',
			'FldForeign2Min' => 'N',
			'FldForeign2Max' => 'N',
			'FldDataLength' => '0',
			'FldKeyType' => ',',
			'FldNullSupport' => '0',
			'FldCompareSame' => '6'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 1565,
			'FldDatabase' => '1',
			'FldTable' => '184',
			'FldOrd' => '1',
			'FldSpecSource' => '0',
			'FldName' => 'Name',
			'FldEng' => 'First Name',
			'FldDesc' => 'Indicates the first name of the complainant signing up to beta test.',
			'FldForeignMin' => 'N',
			'FldForeignMax' => 'N',
			'FldForeign2Min' => 'N',
			'FldForeign2Max' => 'N',
			'FldDataLength' => '0',
			'FldCharSupport' => ',Letters,Numbers,Keyboard,',
			'FldKeyType' => ',',
			'FldNullSupport' => '0',
			'FldCompareSame' => '6'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 1566,
			'FldDatabase' => '1',
			'FldTable' => '184',
			'FldOrd' => '4',
			'FldSpecSource' => '0',
			'FldName' => 'Narrative',
			'FldEng' => 'Incident Narrative',
			'FldDesc' => 'Indicates the complainant\'s brief preview of their incident description.',
			'FldForeignMin' => 'N',
			'FldForeignMax' => 'N',
			'FldForeign2Min' => 'N',
			'FldForeign2Max' => 'N',
			'FldType' => 'TEXT',
			'FldDataLength' => '0',
			'FldKeyType' => ',',
			'FldNullSupport' => '0'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 1567,
			'FldDatabase' => '1',
			'FldTable' => '184',
			'FldOrd' => '7',
			'FldSpecType' => 'Replica',
			'FldName' => 'UserID',
			'FldEng' => 'User ID',
			'FldDesc' => 'Indicates the unique User ID number of the User owning the data stored in this record for this Experience.',
			'FldForeignTable' => '167',
			'FldForeignMin' => '11',
			'FldForeignMax' => '11',
			'FldForeign2Min' => '11',
			'FldForeign2Max' => '11',
			'FldType' => 'INT',
			'FldDataType' => 'Numeric',
			'FldCharSupport' => ',Numbers,',
			'FldKeyType' => ',Foreign,',
			'FldOpts' => '39'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 1568,
			'FldDatabase' => '1',
			'FldTable' => '184',
			'FldOrd' => '9',
			'FldSpecType' => 'Replica',
			'FldName' => 'SubmissionProgress',
			'FldEng' => 'Experience Node Progress',
			'FldDesc' => 'Indicates the unique Node ID number of the last Experience Node loaded during this User\'s Experience.',
			'FldForeignMin' => '11',
			'FldForeignMax' => '11',
			'FldForeign2Min' => '11',
			'FldForeign2Max' => '11',
			'FldType' => 'INT',
			'FldDataType' => 'Numeric',
			'FldCharSupport' => ',Numbers,',
			'FldOpts' => '39'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 1569,
			'FldDatabase' => '1',
			'FldTable' => '184',
			'FldOrd' => '11',
			'FldSpecType' => 'Replica',
			'FldName' => 'TreeVersion',
			'FldEng' => 'Tree Version Number',
			'FldDesc' => 'Stores the current version number of this User Experience, important for tracking bugs.',
			'FldForeignMin' => '11',
			'FldForeignMax' => '11',
			'FldForeign2Min' => '11',
			'FldForeign2Max' => '11',
			'FldOpts' => '39'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 1570,
			'FldDatabase' => '1',
			'FldTable' => '184',
			'FldOrd' => '8',
			'FldSpecType' => 'Replica',
			'FldName' => 'VersionAB',
			'FldEng' => 'A/B Testing Version',
			'FldDesc' => 'Stores a complex string reflecting all A/B Testing variations in effect at the time of this User\'s Experience of this Node.',
			'FldForeignMin' => '11',
			'FldForeignMax' => '11',
			'FldForeign2Min' => '11',
			'FldForeign2Max' => '11',
			'FldOpts' => '39'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 1571,
			'FldDatabase' => '1',
			'FldTable' => '184',
			'FldOrd' => '12',
			'FldSpecType' => 'Replica',
			'FldName' => 'UniqueStr',
			'FldEng' => 'Unique String For Record',
			'FldDesc' => 'This unique string is for cases when including the record ID number is not appropriate.',
			'FldForeignMin' => '11',
			'FldForeignMax' => '11',
			'FldForeign2Min' => '11',
			'FldForeign2Max' => '11',
			'FldOpts' => '39'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 1572,
			'FldDatabase' => '1',
			'FldTable' => '184',
			'FldOrd' => '10',
			'FldSpecType' => 'Replica',
			'FldName' => 'IPaddy',
			'FldEng' => 'IP Address',
			'FldDesc' => 'Encrypted IP address of the current user.',
			'FldForeignMin' => '11',
			'FldForeignMax' => '11',
			'FldForeign2Min' => '11',
			'FldForeign2Max' => '11',
			'FldOpts' => '39'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 1573,
			'FldDatabase' => '1',
			'FldTable' => '184',
			'FldOrd' => '13',
			'FldSpecType' => 'Replica',
			'FldName' => 'IsMobile',
			'FldEng' => 'Using Mobile Device',
			'FldDesc' => 'Indicates whether or not the current user is interacting via a mobile deviced.',
			'FldForeignMin' => '11',
			'FldForeignMax' => '11',
			'FldForeign2Min' => '11',
			'FldForeign2Max' => '11',
			'FldOpts' => '39'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 1574,
			'FldDatabase' => '1',
			'FldTable' => '184',
			'FldOrd' => '2',
			'FldSpecSource' => '0',
			'FldName' => 'LastName',
			'FldEng' => 'Last Name',
			'FldDesc' => 'Indicates the last name of the complainant signing up to beta test.',
			'FldForeignMin' => 'N',
			'FldForeignMax' => 'N',
			'FldForeign2Min' => 'N',
			'FldForeign2Max' => 'N',
			'FldDataLength' => '0',
			'FldKeyType' => ',',
			'FldNullSupport' => '0',
			'FldCompareSame' => '6'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 1575,
			'FldDatabase' => '1',
			'FldTable' => '184',
			'FldOrd' => '5',
			'FldSpecSource' => '0',
			'FldName' => 'HowHear',
			'FldEng' => 'Referred From',
			'FldDesc' => 'Indicates where this beta tester got the link to the beta test signup, maybe via Newsletter, Facebook, YouTube, etc.',
			'FldForeignMin' => 'N',
			'FldForeignMax' => 'N',
			'FldForeign2Min' => 'N',
			'FldForeign2Max' => 'N',
			'FldDataLength' => '0',
			'FldCharSupport' => ',Letters,Numbers,Keyboard,',
			'FldKeyType' => ',',
			'FldNullSupport' => '0',
			'FldCompareSame' => '6'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 1576,
			'FldDatabase' => '1',
			'FldTable' => '184',
			'FldOrd' => '6',
			'FldSpecSource' => '0',
			'FldName' => 'Invited',
			'FldEng' => 'Date Invited',
			'FldDesc' => 'Indicates the date and time this beta test user was invited to use OPC.',
			'FldForeignMin' => 'N',
			'FldForeignMax' => 'N',
			'FldForeign2Min' => 'N',
			'FldForeign2Max' => 'N',
			'FldType' => 'DATE',
			'FldDataType' => 'DateTime',
			'FldDataLength' => '0',
			'FldCharSupport' => ',Numbers,Keyboard,',
			'FldKeyType' => ',',
			'FldNullSupport' => '0',
			'FldCompareSame' => '6',
			'FldCompareOther' => '6',
			'FldCompareValue' => '6'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 1577,
			'FldDatabase' => '1',
			'FldTable' => '184',
			'FldOrd' => '3',
			'FldSpecSource' => '0',
			'FldName' => 'Year',
			'FldEng' => 'Year',
			'FldDesc' => 'Indicates what year the beta test user\'s incident happened.',
			'FldForeignMin' => 'N',
			'FldForeignMax' => 'N',
			'FldForeign2Min' => 'N',
			'FldForeign2Max' => 'N',
			'FldType' => 'INT',
			'FldDataType' => 'Numeric',
			'FldDataLength' => '4',
			'FldCharSupport' => ',Numbers,',
			'FldKeyType' => ',',
			'FldNullSupport' => '0',
			'FldCompareSame' => '6',
			'FldCompareOther' => '6',
			'FldCompareValue' => '6'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 1578,
			'FldDatabase' => '1',
			'FldTable' => '170',
			'FldOrd' => '20',
			'FldSpecSource' => '0',
			'FldName' => 'IsDemo',
			'FldEng' => 'Is Demo/Test Run',
			'FldDesc' => 'Indicates whether or not this user started the compliment process just to demo it.',
			'FldForeignMin' => 'N',
			'FldForeignMax' => 'N',
			'FldForeign2Min' => 'N',
			'FldForeign2Max' => 'N',
			'FldValues' => '0;1',
			'FldDefault' => '0',
			'FldType' => 'INT',
			'FldDataType' => 'Numeric',
			'FldDataLength' => '1',
			'FldCharSupport' => ',Numbers,',
			'FldKeyType' => ',',
			'FldNullSupport' => '0',
			'FldCompareSame' => '878800'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 1579,
			'FldDatabase' => '1',
			'FldTable' => '112',
			'FldOrd' => '38',
			'FldSpecSource' => '0',
			'FldName' => 'IsDemo',
			'FldEng' => 'Is Demo/Test Run',
			'FldDesc' => 'Indicates whether or not this user started the complaint process just to demo it.',
			'FldForeignMin' => 'N',
			'FldForeignMax' => 'N',
			'FldForeign2Min' => 'N',
			'FldForeign2Max' => 'N',
			'FldValues' => '0;1',
			'FldDefault' => '0',
			'FldType' => 'INT',
			'FldDataType' => 'Numeric',
			'FldDataLength' => '1',
			'FldCharSupport' => ',Numbers,',
			'FldKeyType' => ',',
			'FldNullSupport' => '0',
			'FldCompareSame' => '878800'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 1580,
			'FldDatabase' => '1',
			'FldTable' => '106',
			'FldOrd' => '38',
			'FldSpecSource' => '0',
			'FldName' => 'KeepEmailPrivate',
			'FldEng' => 'Keep Email Private?',
			'FldDesc' => 'Indicates whether or not this oversight agency is using an email address for OPC which is not otherwise public. This hides it from the public department page.',
			'FldForeignMin' => 'N',
			'FldForeignMax' => 'N',
			'FldForeign2Min' => 'N',
			'FldForeign2Max' => 'N',
			'FldValues' => '0;1',
			'FldDefault' => '0',
			'FldType' => 'INT',
			'FldDataLength' => '1',
			'FldCharSupport' => ',Numbers,',
			'FldKeyType' => ',',
			'FldNullSupport' => '0',
			'FldCompareSame' => '878800'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 1583,
			'FldDatabase' => '1',
			'FldTable' => '185',
			'FldSpecSource' => '0',
			'FldName' => 'ComplimentID',
			'FldEng' => 'Compliment ID',
			'FldDesc' => 'The unique number of the Compliment record related to this Civilian\'s record. Vital for associating this Civilian with other Compliment data.',
			'FldForeignTable' => '170',
			'FldForeignMax' => 'N',
			'FldType' => 'INT',
			'FldDataType' => 'Numeric',
			'FldDataLength' => '0',
			'FldCharSupport' => ',Numbers,',
			'FldKeyType' => ',Foreign,',
			'FldNullSupport' => '0',
			'FldCompareSame' => '878800'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 1584,
			'FldDatabase' => '1',
			'FldTable' => '185',
			'FldOrd' => '1',
			'FldSpecSource' => '0',
			'FldName' => 'UserID',
			'FldEng' => 'User ID',
			'FldDesc' => 'The primary User Authentication number connected to a Civilian\'s record. Important for allowing users to log into OPC to complete Compliments or update Compliments.',
			'FldForeignTable' => '167',
			'FldForeignMin' => '0',
			'FldForeignMax' => 'N',
			'FldForeign2Min' => '0',
			'FldType' => 'INT',
			'FldDataType' => 'Numeric',
			'FldDataLength' => '0',
			'FldCharSupport' => ',Numbers,',
			'FldKeyType' => ',Foreign,',
			'FldNullSupport' => '0',
			'FldCompareSame' => '878800'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 1585,
			'FldDatabase' => '1',
			'FldTable' => '185',
			'FldOrd' => '2',
			'FldSpecSource' => '0',
			'FldName' => 'IsCreator',
			'FldEng' => 'Creator of this complaint?',
			'FldDesc' => 'Indicates that this Civilian is the person who created the Compliment. This information helps us identity Complainants who are also Subjects or Witnesses.',
			'FldForeignMin' => 'N',
			'FldForeignMax' => 'N',
			'FldForeign2Min' => 'N',
			'FldForeign2Max' => 'N',
			'FldValues' => 'Y;N',
			'FldDefault' => 'N',
			'FldDataLength' => '1',
			'FldCharSupport' => ',Letters,',
			'FldKeyType' => ',',
			'FldNullSupport' => '0',
			'FldCompareSame' => '878800',
			'FldCompareValue' => '878800'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 1586,
			'FldDatabase' => '1',
			'FldTable' => '185',
			'FldOrd' => '3',
			'FldSpecSource' => '0',
			'FldName' => 'Role',
			'FldEng' => 'Civilian\'s role in incident?',
			'FldDesc' => 'Indicates category of a Civilian. This information is essential for understanding whether a given Civilian was a Subject of an Commendation or a Witness to the Commendation.',
			'FldForeignMin' => 'N',
			'FldForeignMax' => 'N',
			'FldForeign2Min' => 'N',
			'FldForeign2Max' => 'N',
			'FldValues' => 'Witness;Subject;Neither;Impressed',
			'FldDataLength' => '10',
			'FldCharSupport' => ',Letters,',
			'FldKeyType' => ',',
			'FldNullSupport' => '0',
			'FldCompareSame' => '878800',
			'FldCompareValue' => '878800'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 1587,
			'FldDatabase' => '1',
			'FldTable' => '185',
			'FldOrd' => '4',
			'FldSpecSource' => '0',
			'FldName' => 'PersonID',
			'FldEng' => 'Person Contact Info ID',
			'FldDesc' => 'The primary Person Contact record number connected to a Civilian\'s record. Important for linking name and basic contact information to a Civilian.',
			'FldForeignTable' => '154',
			'FldType' => 'INT',
			'FldDataType' => 'Numeric',
			'FldDataLength' => '0',
			'FldCharSupport' => ',Numbers,',
			'FldKeyType' => ',Foreign,',
			'FldNullSupport' => '0',
			'FldCompareSame' => '878800',
			'FldCompareOther' => '878800'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 1588,
			'FldDatabase' => '1',
			'FldTable' => '185',
			'FldOrd' => '5',
			'FldSpecSource' => '0',
			'FldName' => 'PhysDescID',
			'FldEng' => 'Physical Description ID',
			'FldDesc' => 'The primary Physical Description record number connected to a Civilian\'s record. Important for linking name and basic contact information to a Civilian.',
			'FldForeignTable' => '153',
			'FldType' => 'INT',
			'FldDataType' => 'Numeric',
			'FldDataLength' => '0',
			'FldCharSupport' => ',Numbers,',
			'FldKeyType' => ',Foreign,',
			'FldNullSupport' => '0',
			'FldCompareSame' => '878800',
			'FldCompareOther' => '878800'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 1589,
			'FldDatabase' => '1',
			'FldTable' => '169',
			'FldSpecSource' => '0',
			'FldName' => 'ComplimentID',
			'FldEng' => 'Compliment ID',
			'FldDesc' => 'The unique number of the Compliment record related to this Officer\'s record. Vital for associating Officer with all other Compliment data.',
			'FldForeignTable' => '170',
			'FldForeignMax' => 'N',
			'FldType' => 'INT',
			'FldDataType' => 'Numeric',
			'FldDataLength' => '0',
			'FldCharSupport' => ',Numbers,',
			'FldKeyType' => ',Foreign,',
			'FldNullSupport' => '0',
			'FldCompareSame' => '878800',
			'FldCompareOther' => '878800'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 1590,
			'FldDatabase' => '1',
			'FldTable' => '186',
			'FldSpecSource' => '0',
			'FldName' => 'ComplimentID',
			'FldEng' => 'Compliment ID',
			'FldDesc' => 'The unique number of the Compliment record, vital to associating with all other Compliment data, vital to associating with all other Compliment data.',
			'FldForeignTable' => '170',
			'FldForeignMin' => '0',
			'FldForeignMax' => 'N',
			'FldType' => 'INT',
			'FldDataType' => 'Numeric',
			'FldDataLength' => '0',
			'FldCharSupport' => ',Numbers,',
			'FldKeyType' => ',Foreign,',
			'FldNullSupport' => '0',
			'FldCompareSame' => '878800',
			'FldCompareOther' => '878800'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 1591,
			'FldDatabase' => '1',
			'FldTable' => '186',
			'FldOrd' => '1',
			'FldSpecSource' => '0',
			'FldName' => 'DeptID',
			'FldEng' => 'Department ID',
			'FldDesc' => 'The unique number of the Police Department record involved with this Compliment. This number helps track the investigative progress of the Investigative Agencies where this Compliment has been filed.',
			'FldForeignTable' => '111',
			'FldForeignMin' => '0',
			'FldForeignMax' => 'N',
			'FldType' => 'INT',
			'FldDataType' => 'Numeric',
			'FldDataLength' => '0',
			'FldCharSupport' => ',Numbers,',
			'FldKeyType' => ',Foreign,',
			'FldNullSupport' => '0',
			'FldCompareSame' => '878800',
			'FldCompareOther' => '878800'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 1592,
			'FldDatabase' => '1',
			'FldTable' => '186',
			'FldOrd' => '2',
			'FldSpecSource' => '0',
			'FldName' => 'OverID',
			'FldEng' => 'Oversight ID',
			'FldDesc' => 'The unique number of the Investigative Agency record involved with this Compliment. This number helps track the investigative progress of any Investigative Agencies who have jurisdiction over this Compliment.',
			'FldForeignTable' => '106',
			'FldForeignMin' => '0',
			'FldForeignMax' => 'N',
			'FldType' => 'INT',
			'FldDataType' => 'Numeric',
			'FldDataLength' => '0',
			'FldCharSupport' => ',Numbers,',
			'FldKeyType' => ',Foreign,',
			'FldNullSupport' => '0',
			'FldCompareSame' => '878800',
			'FldCompareOther' => '878800'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 1593,
			'FldDatabase' => '1',
			'FldTable' => '186',
			'FldOrd' => '3',
			'FldSpecSource' => '0',
			'FldName' => 'Submitted',
			'FldEng' => 'Submitted to Investigative Agency',
			'FldDesc' => 'Indicates date and time when an electronic Compliment was sent to an appropriate Investigative Agency. This is an essential for tracking an Investigative Agency\'s response -- or non-response -- rates to OPC-submitted Compliments.',
			'FldForeignMin' => 'N',
			'FldForeignMax' => 'N',
			'FldForeign2Min' => 'N',
			'FldForeign2Max' => 'N',
			'FldType' => 'DATETIME',
			'FldDataType' => 'DateTime',
			'FldDataLength' => '0',
			'FldCharSupport' => ',Numbers,Keyboard,',
			'FldKeyType' => ',',
			'FldNullSupport' => '0',
			'FldCompareSame' => '6',
			'FldCompareOther' => '6',
			'FldCompareValue' => '6'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 1594,
			'FldDatabase' => '1',
			'FldTable' => '186',
			'FldOrd' => '4',
			'FldSpecSource' => '0',
			'FldName' => 'Received',
			'FldEng' => 'Received by Investigative Agency',
			'FldDesc' => 'Indicates date and time when an electronic Compliment was received by an appropriate Investigative Agency. This is essential for tracking an Investigative Agency\'s response time when acknowledging receipt of OPC-submitted Compliments.',
			'FldForeignMin' => 'N',
			'FldForeignMax' => 'N',
			'FldForeign2Min' => 'N',
			'FldForeign2Max' => 'N',
			'FldType' => 'DATETIME',
			'FldDataType' => 'DateTime',
			'FldDataLength' => '0',
			'FldCharSupport' => ',Numbers,Keyboard,',
			'FldKeyType' => ',',
			'FldNullSupport' => '0',
			'FldCompareSame' => '6',
			'FldCompareOther' => '6',
			'FldCompareValue' => '6'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 1595,
			'FldDatabase' => '1',
			'FldTable' => '112',
			'FldOrd' => '39',
			'FldSpecSource' => '0',
			'FldName' => 'ShareData',
			'FldEng' => 'Share with Trusted Other Databases',
			'FldDesc' => 'Indicates whether or not the Complainant consents to share their Complaint data with other databases trusted by OPC.',
			'FldForeignMin' => 'N',
			'FldForeignMax' => 'N',
			'FldForeign2Min' => 'N',
			'FldForeign2Max' => 'N',
			'FldValues' => '0;1',
			'FldType' => 'INT',
			'FldDataType' => 'Numeric',
			'FldDataLength' => '1',
			'FldCharSupport' => ',Numbers,',
			'FldKeyType' => ',',
			'FldNullSupport' => '0',
			'FldCompareSame' => '878800',
			'FldCompareValue' => '878800'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 1596,
			'FldDatabase' => '1',
			'FldTable' => '170',
			'FldOrd' => '21',
			'FldSpecSource' => '0',
			'FldName' => 'ShareData',
			'FldEng' => 'Share with Trusted Other Databases',
			'FldDesc' => 'Indicates whether or not the Complimentor consents to share their Compliment data with other databases trusted by OPC.',
			'FldForeignMin' => 'N',
			'FldForeignMax' => 'N',
			'FldForeign2Min' => 'N',
			'FldForeign2Max' => 'N',
			'FldValues' => '0;1',
			'FldType' => 'INT',
			'FldDataType' => 'Numeric',
			'FldDataLength' => '1',
			'FldCharSupport' => ',Numbers,',
			'FldKeyType' => ',',
			'FldNullSupport' => '0',
			'FldCompareSame' => '878800',
			'FldCompareValue' => '878800'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 1600,
			'FldDatabase' => '1',
			'FldTable' => '187',
			'FldOrd' => '1',
			'FldSpecSource' => '0',
			'FldName' => 'PersonID',
			'FldEng' => 'Person Contact Info ID',
			'FldDesc' => 'The primary Person Contact record number connected to this Verified Officer Record. Important for linking name and basic contact information to a Verified Officer.',
			'FldForeignTable' => '154',
			'FldType' => 'INT',
			'FldDataType' => 'Numeric',
			'FldDataLength' => '11',
			'FldCharSupport' => ',Numbers,',
			'FldKeyType' => ',Foreign,',
			'FldNullSupport' => '0',
			'FldCompareSame' => '878800'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 1601,
			'FldDatabase' => '1',
			'FldTable' => '187',
			'FldSpecSource' => '0',
			'FldName' => 'Status',
			'FldEng' => 'Verification Status',
			'FldDesc' => 'Indicates whether or not this Officer has been verified as employed by a Department listed in at least one Complaint. This is vital for tracking which Officers\' employment has been confirmed by OpenPolice.org staff.',
			'FldForeignMin' => 'N',
			'FldForeignMax' => 'N',
			'FldForeign2Min' => 'N',
			'FldForeign2Max' => 'N',
			'FldValues' => 'Def::Verified Officer Status',
			'FldType' => 'INT',
			'FldDataType' => 'Numeric',
			'FldDataLength' => '0',
			'FldCharSupport' => ',Numbers,',
			'FldKeyType' => ',',
			'FldNullSupport' => '0',
			'FldCompareSame' => '878800'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 1602,
			'FldDatabase' => '1',
			'FldTable' => '187',
			'FldOrd' => '12',
			'FldSpecType' => 'Replica',
			'FldName' => 'UserID',
			'FldEng' => 'User ID',
			'FldDesc' => 'Indicates the unique User ID number of the User owning the data stored in this record for this Experience.',
			'FldForeignTable' => '167',
			'FldForeignMin' => '11',
			'FldForeignMax' => '11',
			'FldForeign2Min' => '11',
			'FldForeign2Max' => '11',
			'FldType' => 'INT',
			'FldDataType' => 'Numeric',
			'FldCharSupport' => ',Numbers,',
			'FldKeyType' => ',Foreign,',
			'FldOpts' => '39'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 1603,
			'FldDatabase' => '1',
			'FldTable' => '187',
			'FldOrd' => '7',
			'FldSpecType' => 'Replica',
			'FldName' => 'SubmissionProgress',
			'FldEng' => 'Experience Node Progress',
			'FldDesc' => 'Indicates the unique Node ID number of the last Experience Node loaded during this User\'s Experience.',
			'FldForeignMin' => '11',
			'FldForeignMax' => '11',
			'FldForeign2Min' => '11',
			'FldForeign2Max' => '11',
			'FldType' => 'INT',
			'FldDataType' => 'Numeric',
			'FldCharSupport' => ',Numbers,',
			'FldOpts' => '39'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 1604,
			'FldDatabase' => '1',
			'FldTable' => '187',
			'FldOrd' => '9',
			'FldSpecType' => 'Replica',
			'FldName' => 'TreeVersion',
			'FldEng' => 'Tree Version Number',
			'FldDesc' => 'Stores the current version number of this User Experience, important for tracking bugs.',
			'FldForeignMin' => '11',
			'FldForeignMax' => '11',
			'FldForeign2Min' => '11',
			'FldForeign2Max' => '11',
			'FldOpts' => '39'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 1605,
			'FldDatabase' => '1',
			'FldTable' => '187',
			'FldOrd' => '8',
			'FldSpecType' => 'Replica',
			'FldName' => 'VersionAB',
			'FldEng' => 'A/B Testing Version',
			'FldDesc' => 'Stores a complex string reflecting all A/B Testing variations in effect at the time of this User\'s Experience of this Node.',
			'FldForeignMin' => '11',
			'FldForeignMax' => '11',
			'FldForeign2Min' => '11',
			'FldForeign2Max' => '11',
			'FldOpts' => '39'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 1606,
			'FldDatabase' => '1',
			'FldTable' => '187',
			'FldOrd' => '6',
			'FldSpecType' => 'Replica',
			'FldName' => 'UniqueStr',
			'FldEng' => 'Unique String For Record',
			'FldDesc' => 'This unique string is for cases when including the record ID number is not appropriate.',
			'FldForeignMin' => '11',
			'FldForeignMax' => '11',
			'FldForeign2Min' => '11',
			'FldForeign2Max' => '11',
			'FldOpts' => '39'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 1607,
			'FldDatabase' => '1',
			'FldTable' => '187',
			'FldOrd' => '10',
			'FldSpecType' => 'Replica',
			'FldName' => 'IPaddy',
			'FldEng' => 'IP Address',
			'FldDesc' => 'Encrypted IP address of the current user.',
			'FldForeignMin' => '11',
			'FldForeignMax' => '11',
			'FldForeign2Min' => '11',
			'FldForeign2Max' => '11',
			'FldOpts' => '39'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 1608,
			'FldDatabase' => '1',
			'FldTable' => '187',
			'FldOrd' => '11',
			'FldSpecType' => 'Replica',
			'FldName' => 'IsMobile',
			'FldEng' => 'Using Mobile Device',
			'FldDesc' => 'Indicates whether or not the current user is interacting via a mobile deviced.',
			'FldForeignMin' => '11',
			'FldForeignMax' => '11',
			'FldForeign2Min' => '11',
			'FldForeign2Max' => '11',
			'FldOpts' => '39'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 1609,
			'FldDatabase' => '1',
			'FldTable' => '187',
			'FldOrd' => '2',
			'FldSpecSource' => '0',
			'FldName' => 'CntComplaints',
			'FldEng' => 'Number of Published Complaints',
			'FldDesc' => 'Indicates the total number of Complaints which have made it through any published status.',
			'FldForeignMin' => 'N',
			'FldForeignMax' => 'N',
			'FldForeign2Min' => 'N',
			'FldForeign2Max' => 'N',
			'FldDefault' => '0',
			'FldType' => 'INT',
			'FldDataType' => 'Numeric',
			'FldDataLength' => '11',
			'FldCharSupport' => ',Numbers,',
			'FldKeyType' => ',',
			'FldNullSupport' => '0',
			'FldCompareSame' => '6'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 1610,
			'FldDatabase' => '1',
			'FldTable' => '187',
			'FldOrd' => '3',
			'FldSpecSource' => '0',
			'FldName' => 'CntAllegations',
			'FldEng' => 'Number of Published Allegations',
			'FldDesc' => 'Indicates the total number of Complaint Allegations which have made it through any published status.',
			'FldForeignMin' => 'N',
			'FldForeignMax' => 'N',
			'FldForeign2Min' => 'N',
			'FldForeign2Max' => 'N',
			'FldDefault' => '0',
			'FldType' => 'INT',
			'FldDataType' => 'Numeric',
			'FldDataLength' => '0',
			'FldCharSupport' => ',Numbers,',
			'FldKeyType' => ',',
			'FldNullSupport' => '0',
			'FldCompareSame' => '6'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 1611,
			'FldDatabase' => '1',
			'FldTable' => '188',
			'FldSpecSource' => '0',
			'FldName' => 'OfficerID',
			'FldEng' => 'Verified Officer Record ID',
			'FldDesc' => 'The unique number of the Verified Officer Record, vital to associating with all other Complaint data.',
			'FldForeignTable' => '187',
			'FldForeignMax' => 'N',
			'FldType' => 'INT',
			'FldDataType' => 'Numeric',
			'FldDataLength' => '0',
			'FldCharSupport' => ',Numbers,',
			'FldKeyType' => ',Foreign,',
			'FldNullSupport' => '0',
			'FldCompareSame' => '878800'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 1612,
			'FldDatabase' => '1',
			'FldTable' => '188',
			'FldOrd' => '1',
			'FldSpecSource' => '0',
			'FldName' => 'DeptID',
			'FldEng' => 'Department ID',
			'FldDesc' => 'The unique number of the Department record related to this Officer, critical for identifying Officers that moved to multiple Departments.',
			'FldForeignTable' => '111',
			'FldForeignMin' => '0',
			'FldForeignMax' => 'N',
			'FldType' => 'INT',
			'FldDataType' => 'Numeric',
			'FldDataLength' => '0',
			'FldCharSupport' => ',Numbers,',
			'FldKeyType' => ',Foreign,',
			'FldNullSupport' => '0',
			'FldCompareSame' => '878800'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 1613,
			'FldDatabase' => '1',
			'FldTable' => '188',
			'FldOrd' => '2',
			'FldSpecSource' => '0',
			'FldName' => 'DateVerified',
			'FldEng' => 'Date Employment Verified',
			'FldDesc' => 'Indicates the date when an Officer was verified as being employed at this Department.',
			'FldForeignMin' => 'N',
			'FldForeignMax' => 'N',
			'FldForeign2Min' => 'N',
			'FldForeign2Max' => 'N',
			'FldType' => 'DATE',
			'FldDataType' => 'DateTime',
			'FldDataLength' => '0',
			'FldCharSupport' => ',Numbers,Keyboard,',
			'FldKeyType' => ',',
			'FldNullSupport' => '0',
			'FldCompareSame' => '6',
			'FldCompareOther' => '6',
			'FldCompareValue' => '6'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 1614,
			'FldDatabase' => '1',
			'FldTable' => '187',
			'FldOrd' => '4',
			'FldSpecSource' => '0',
			'FldName' => 'CntCompliments',
			'FldEng' => 'Number of Published Compliments',
			'FldDesc' => 'Indicates the total number of Compliments which have made it through any published status.',
			'FldForeignMin' => 'N',
			'FldForeignMax' => 'N',
			'FldForeign2Min' => 'N',
			'FldForeign2Max' => 'N',
			'FldDefault' => '0',
			'FldType' => 'INT',
			'FldDataType' => 'Numeric',
			'FldDataLength' => '0',
			'FldCharSupport' => ',Numbers,',
			'FldKeyType' => ',',
			'FldNullSupport' => '0',
			'FldCompareSame' => '6'
		]);
		DB::table('SL_Fields')->insert([
			'FldID' => 1615,
			'FldDatabase' => '1',
			'FldTable' => '187',
			'FldOrd' => '5',
			'FldSpecSource' => '0',
			'FldName' => 'CntCommends',
			'FldEng' => 'Number of Published Commendations',
			'FldDesc' => 'Indicates the total number of Compliment Commendations which have made it through any published status.',
			'FldForeignMin' => 'N',
			'FldForeignMax' => 'N',
			'FldForeign2Min' => 'N',
			'FldForeign2Max' => 'N',
			'FldDefault' => '0',
			'FldType' => 'INT',
			'FldDataType' => 'Numeric',
			'FldDataLength' => '0',
			'FldCharSupport' => ',Numbers,',
			'FldKeyType' => ',',
			'FldNullSupport' => '0',
			'FldCompareSame' => '6'
		]);
	
	DB::table('SL_Definitions')->insert([
			'DefID' => 256,
			'DefDatabase' => '1',
			'DefSubset' => 'Injury Types',
			'DefIsActive' => '0',
			'DefValue' => 'Fatal injuries',
			'DefDescription' => 'LEVEL 1 (most serious) Injury list from https://www.sanjoseca.gov/DocumentCenter/View/55841'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 1,
			'DefDatabase' => '1',
			'DefSet' => 'System Settings',
			'DefSubset' => 'cust-abbr',
			'DefDescription' => 'OpenPolice'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 257,
			'DefDatabase' => '1',
			'DefSubset' => 'Injury Types',
			'DefOrder' => '1',
			'DefIsActive' => '0',
			'DefValue' => 'Major bone broken',
			'DefDescription' => 'LEVEL 1 (most serious)'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 2,
			'DefDatabase' => '1',
			'DefSet' => 'System Settings',
			'DefSubset' => 'app-url',
			'DefDescription' => 'http://openpolice.local'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 258,
			'DefDatabase' => '1',
			'DefSubset' => 'Injury Types',
			'DefOrder' => '2',
			'DefIsActive' => '0',
			'DefValue' => 'Compound fracture',
			'DefDescription' => 'LEVEL 1 (most serious)'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 3,
			'DefDatabase' => '1',
			'DefSet' => 'System Settings',
			'DefSubset' => 'logo-url',
			'DefDescription' => 'http://openpolice.local'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 259,
			'DefDatabase' => '1',
			'DefSubset' => 'Injury Types',
			'DefOrder' => '3',
			'DefIsActive' => '0',
			'DefValue' => 'In-patient hospital stay required',
			'DefDescription' => 'LEVEL 1 (most serious)'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 4,
			'DefDatabase' => '1',
			'DefSet' => 'System Settings',
			'DefSubset' => 'site-name',
			'DefDescription' => 'OpenPolice.org'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 260,
			'DefDatabase' => '1',
			'DefSubset' => 'Injury Types',
			'DefOrder' => '4',
			'DefIsActive' => '0',
			'DefValue' => 'Blood loss requiring transfusion',
			'DefDescription' => 'LEVEL 1 (most serious)'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 5,
			'DefDatabase' => '1',
			'DefSet' => 'System Settings',
			'DefSubset' => 'meta-title',
			'DefDescription' => 'OpenPolice.org: Share Your Story'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 261,
			'DefDatabase' => '1',
			'DefSubset' => 'Injury Types',
			'DefOrder' => '5',
			'DefIsActive' => '0',
			'DefValue' => 'Major concussion',
			'DefDescription' => 'LEVEL 1 (most serious)'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 6,
			'DefDatabase' => '1',
			'DefSet' => 'System Settings',
			'DefSubset' => 'meta-desc',
			'DefDescription' => 'OpenPolice.org helps you prepare, file, and track reports of police conduct. Whether a complaint or compliment, your story is too important to be ignored.'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 262,
			'DefDatabase' => '1',
			'DefSubset' => 'Injury Types',
			'DefOrder' => '6',
			'DefIsActive' => '0',
			'DefValue' => 'Longer than brief loss of consciousness',
			'DefDescription' => 'LEVEL 1 (most serious)'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 7,
			'DefDatabase' => '1',
			'DefSet' => 'System Settings',
			'DefSubset' => 'meta-keywords',
			'DefDescription' => 'Open Police, OpenPolice.org, Open Police Complaints, Police Departments, Cops, Police, Officers, file complaint, submit, victims, accountability, oversight, open source, transparency, #BlackLivesMatter, #BLM'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 263,
			'DefDatabase' => '1',
			'DefSubset' => 'Injury Types',
			'DefOrder' => '7',
			'DefIsActive' => '0',
			'DefValue' => 'Debilitating chronic pain',
			'DefDescription' => 'LEVEL 1 (most serious)'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 8,
			'DefDatabase' => '1',
			'DefSet' => 'System Settings',
			'DefSubset' => 'meta-img',
			'DefDescription' => '/openpolice/uploads/meta-img-openpoliceorg.jpg'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 264,
			'DefDatabase' => '1',
			'DefSubset' => 'Injury Types',
			'DefOrder' => '8',
			'DefIsActive' => '0',
			'DefValue' => 'Damage to organ (other than skin)',
			'DefDescription' => 'LEVEL 1 (most serious)'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 9,
			'DefDatabase' => '1',
			'DefSet' => 'System Settings',
			'DefSubset' => 'logo-img-lrg',
			'DefDescription' => '/openpolice/uploads/Flex_OpenPolice.org-sm.jpg'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 265,
			'DefDatabase' => '1',
			'DefSubset' => 'Injury Types',
			'DefOrder' => '9',
			'DefIsActive' => '0',
			'DefValue' => 'Taser Wounds',
			'DefDescription' => 'LEVEL 1 (most serious) was "Effective Tasings"'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 10,
			'DefDatabase' => '1',
			'DefSet' => 'System Settings',
			'DefSubset' => 'logo-img-md',
			'DefDescription' => '/openpolice/uploads/Flex_OpenPolice.org-sm.jpg'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 266,
			'DefDatabase' => '1',
			'DefSubset' => 'Injury Types',
			'DefOrder' => '10',
			'DefIsActive' => '0',
			'DefValue' => 'Minor bone broken',
			'DefDescription' => 'LEVEL 2 (serious)'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 11,
			'DefDatabase' => '1',
			'DefSet' => 'System Settings',
			'DefSubset' => 'logo-img-sm',
			'DefDescription' => '/openpolice/Flex_Open_1LineBox_v3_short-top.png'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 267,
			'DefDatabase' => '1',
			'DefSubset' => 'Injury Types',
			'DefOrder' => '11',
			'DefIsActive' => '0',
			'DefValue' => 'Major laceration requiring stitches',
			'DefDescription' => 'LEVEL 2 (serious)'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 12,
			'DefDatabase' => '1',
			'DefSet' => 'System Settings',
			'DefSubset' => 'shortcut-icon',
			'DefDescription' => '/openpolice/logo-ico.png'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 268,
			'DefDatabase' => '1',
			'DefSubset' => 'Injury Types',
			'DefOrder' => '12',
			'DefIsActive' => '0',
			'DefValue' => 'Minor concussion',
			'DefDescription' => 'LEVEL 2 (serious)'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 269,
			'DefDatabase' => '1',
			'DefSubset' => 'Injury Types',
			'DefOrder' => '13',
			'DefIsActive' => '0',
			'DefValue' => 'Brief loss of consciousness',
			'DefDescription' => 'LEVEL 2 (serious)'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 14,
			'DefDatabase' => '1',
			'DefSet' => 'System Settings',
			'DefSubset' => 'tree-1-upload-types',
			'DefDescription' => 'Evidence Types'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 270,
			'DefDatabase' => '1',
			'DefSubset' => 'Injury Types',
			'DefOrder' => '14',
			'DefIsActive' => '0',
			'DefValue' => 'Chipped or lost tooth',
			'DefDescription' => 'LEVEL 2 (serious)'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 15,
			'DefDatabase' => '1',
			'DefSet' => 'User Roles',
			'DefSubset' => 'administrator',
			'DefValue' => 'Administrator',
			'DefDescription' => 'Highest system administrative privileges, can add, remove, and change permissions of other users'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 271,
			'DefDatabase' => '1',
			'DefSubset' => 'Injury Types',
			'DefOrder' => '15',
			'DefIsActive' => '0',
			'DefValue' => 'Major abrasion',
			'DefDescription' => 'LEVEL 2 (serious)'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 16,
			'DefDatabase' => '1',
			'DefSet' => 'User Roles',
			'DefSubset' => 'staff',
			'DefOrder' => '2',
			'DefValue' => 'Staff/Analyst',
			'DefDescription' => 'Full staff priveleges, can view but not edit technical specs'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 272,
			'DefDatabase' => '1',
			'DefSubset' => 'Injury Types',
			'DefOrder' => '16',
			'DefIsActive' => '0',
			'DefValue' => 'Sprain',
			'DefDescription' => 'LEVEL 2 (serious)'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 17,
			'DefDatabase' => '1',
			'DefSet' => 'User Roles',
			'DefSubset' => 'volunteer',
			'DefOrder' => '4',
			'DefValue' => 'Volunteer',
			'DefDescription' => 'Basic permission to pages and tools just for volunteers'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 273,
			'DefDatabase' => '1',
			'DefSubset' => 'Injury Types',
			'DefOrder' => '17',
			'DefIsActive' => '0',
			'DefValue' => 'Bruising',
			'DefDescription' => 'LEVEL 3 (least serious)'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 18,
			'DefDatabase' => '1',
			'DefSet' => 'User Roles',
			'DefSubset' => 'databaser',
			'DefOrder' => '1',
			'DefValue' => 'Database Designer',
			'DefDescription' => 'Permissions to make edits in the database designing tools'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 274,
			'DefDatabase' => '1',
			'DefSubset' => 'Injury Types',
			'DefOrder' => '18',
			'DefIsActive' => '0',
			'DefValue' => 'Minor laceration',
			'DefDescription' => 'LEVEL 3 (least serious)'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 19,
			'DefDatabase' => '1',
			'DefSet' => 'User Roles',
			'DefSubset' => 'oversight',
			'DefOrder' => '3',
			'DefValue' => 'Police Oversight',
			'DefDescription' => 'Access to sensitive data in complaints and compliment submitted to their department.'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 275,
			'DefDatabase' => '1',
			'DefSubset' => 'Injury Types',
			'DefOrder' => '19',
			'DefIsActive' => '0',
			'DefValue' => 'Minor abrasion',
			'DefDescription' => 'LEVEL 3 (least serious)'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 20,
			'DefDatabase' => '1',
			'DefSet' => 'System Settings',
			'DefSubset' => 'signup-instruct',
			'DefDescription' => '<p>Here you can finish, review, or update your complaint. Volunteers also login here.</p>'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 276,
			'DefDatabase' => '1',
			'DefSubset' => 'Intimidating Displays Of Weapon',
			'DefIsActive' => '0',
			'DefValue' => 'No'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 21,
			'DefDatabase' => '1',
			'DefSet' => 'Style Settings',
			'DefSubset' => 'color-main-off',
			'DefOrder' => '8',
			'DefDescription' => '#4C656D'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 277,
			'DefDatabase' => '1',
			'DefSubset' => 'Intimidating Displays Of Weapon',
			'DefOrder' => '2',
			'DefIsActive' => '0',
			'DefValue' => 'Displayed Weapon'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 22,
			'DefDatabase' => '1',
			'DefSet' => 'Style Settings',
			'DefSubset' => 'color-main-on',
			'DefOrder' => '7',
			'DefDescription' => '#2B3493'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 278,
			'DefDatabase' => '1',
			'DefSubset' => 'Intimidating Displays Of Weapon',
			'DefOrder' => '3',
			'DefIsActive' => '0',
			'DefValue' => 'Drew Weapon'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 23,
			'DefDatabase' => '1',
			'DefSet' => 'Style Settings',
			'DefSubset' => 'color-main-faint',
			'DefOrder' => '9',
			'DefDescription' => '#F5FBFF'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 279,
			'DefDatabase' => '1',
			'DefSubset' => 'Intimidating Displays Of Weapon',
			'DefOrder' => '4',
			'DefIsActive' => '0',
			'DefValue' => 'Pointed Weapon'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 24,
			'DefDatabase' => '1',
			'DefSet' => 'Style Settings',
			'DefSubset' => 'color-danger-off',
			'DefOrder' => '12',
			'DefDescription' => '#F38C5F'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 280,
			'DefDatabase' => '1',
			'DefSubset' => 'Intimidating Displays Of Weapon',
			'DefOrder' => '5',
			'DefIsActive' => '0',
			'DefValue' => 'Fired or Discharged Weapon'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 25,
			'DefDatabase' => '1',
			'DefSet' => 'Style Settings',
			'DefSubset' => 'color-danger-on',
			'DefOrder' => '11',
			'DefDescription' => '#EC2327'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 281,
			'DefDatabase' => '1',
			'DefSubset' => 'Intimidating Displays Of Weapon',
			'DefOrder' => '1',
			'DefIsActive' => '0',
			'DefValue' => 'Not sure'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 26,
			'DefDatabase' => '1',
			'DefSet' => 'Style Settings',
			'DefSubset' => 'color-success-off',
			'DefOrder' => '14',
			'DefDescription' => '#29B76F'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 282,
			'DefDatabase' => '1',
			'DefSubset' => 'Intimidation Weapons',
			'DefOrder' => '1',
			'DefIsActive' => '0',
			'DefValue' => 'Baton'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 27,
			'DefDatabase' => '1',
			'DefSet' => 'Style Settings',
			'DefSubset' => 'color-success-on',
			'DefOrder' => '13',
			'DefDescription' => '#29B76F'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 283,
			'DefDatabase' => '1',
			'DefSubset' => 'Intimidation Weapons',
			'DefOrder' => '3',
			'DefIsActive' => '0',
			'DefValue' => 'Taser'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 28,
			'DefDatabase' => '1',
			'DefSet' => 'System Settings',
			'DefSubset' => 'show-logo-title',
			'DefDescription' => '0'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 284,
			'DefDatabase' => '1',
			'DefSubset' => 'Intimidation Weapons',
			'DefOrder' => '4',
			'DefIsActive' => '0',
			'DefValue' => 'Gun'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 29,
			'DefDatabase' => '1',
			'DefSet' => 'Style Settings',
			'DefSubset' => 'color-logo',
			'DefOrder' => '20',
			'DefDescription' => '#63C6FF'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 285,
			'DefDatabase' => '1',
			'DefSubset' => 'Intimidation Weapons',
			'DefOrder' => '2',
			'DefIsActive' => '0',
			'DefValue' => 'Mace or Pepper Spray'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 30,
			'DefDatabase' => '1',
			'DefSet' => 'System Settings',
			'DefSubset' => 'users-create-db',
			'DefDescription' => '0'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 286,
			'DefDatabase' => '1',
			'DefSubset' => 'Intimidation Weapons',
			'DefIsActive' => '0',
			'DefValue' => 'K9 (Dog)'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 287,
			'DefDatabase' => '1',
			'DefSubset' => 'Intimidation Weapons',
			'DefOrder' => '5',
			'DefIsActive' => '0',
			'DefValue' => 'Other'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 32,
			'DefDatabase' => '1',
			'DefSet' => 'System Settings',
			'DefSubset' => 'app-license',
			'DefDescription' => 'Creative Commons Attribution-ShareAlike License'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 288,
			'DefDatabase' => '1',
			'DefSubset' => 'No Charges Filed',
			'DefIsActive' => '0',
			'DefValue' => 'N/A'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 33,
			'DefDatabase' => '1',
			'DefSet' => 'System Settings',
			'DefSubset' => 'app-license-url',
			'DefDescription' => 'http://creativecommons.org/licenses/by-sa/3.0/'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 289,
			'DefDatabase' => '1',
			'DefSubset' => 'No Charges Filed',
			'DefOrder' => '1',
			'DefIsActive' => '0',
			'DefValue' => 'ALL Charges Were Dropped Before Release'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 34,
			'DefDatabase' => '1',
			'DefSet' => 'System Settings',
			'DefSubset' => 'app-license-img',
			'DefDescription' => '/survloop/uploads/creative-commons-by-sa-88x31.png'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 290,
			'DefDatabase' => '1',
			'DefSubset' => 'No Charges Filed',
			'DefOrder' => '2',
			'DefIsActive' => '0',
			'DefValue' => 'No Charges Were Ever Filed'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 291,
			'DefDatabase' => '1',
			'DefSubset' => 'Officer Discipline Types',
			'DefIsActive' => '0',
			'DefValue' => 'Training and/or Counseling'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 292,
			'DefDatabase' => '1',
			'DefSubset' => 'Officer Discipline Types',
			'DefOrder' => '1',
			'DefIsActive' => '0',
			'DefValue' => 'Letter of Reprimand'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 293,
			'DefDatabase' => '1',
			'DefSubset' => 'Officer Discipline Types',
			'DefOrder' => '2',
			'DefIsActive' => '0',
			'DefValue' => 'Suspension'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 294,
			'DefDatabase' => '1',
			'DefSubset' => 'Officer Discipline Types',
			'DefOrder' => '3',
			'DefIsActive' => '0',
			'DefValue' => 'Termination'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 295,
			'DefDatabase' => '1',
			'DefSubset' => 'Complaint Type',
			'DefIsActive' => '0',
			'DefValue' => 'Unreviewed'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 296,
			'DefDatabase' => '1',
			'DefSubset' => 'Complaint Type',
			'DefOrder' => '1',
			'DefIsActive' => '0',
			'DefValue' => 'Police Complaint'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 297,
			'DefDatabase' => '1',
			'DefSubset' => 'Complaint Type',
			'DefOrder' => '2',
			'DefIsActive' => '0',
			'DefValue' => 'Not About Police'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 298,
			'DefDatabase' => '1',
			'DefSubset' => 'Complaint Type',
			'DefOrder' => '3',
			'DefIsActive' => '0',
			'DefValue' => 'Abuse'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 299,
			'DefDatabase' => '1',
			'DefSubset' => 'Complaint Type',
			'DefOrder' => '4',
			'DefIsActive' => '0',
			'DefValue' => 'Spam'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 300,
			'DefDatabase' => '1',
			'DefSubset' => 'Complaint Type',
			'DefOrder' => '5',
			'DefIsActive' => '0',
			'DefValue' => 'Test'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 301,
			'DefDatabase' => '1',
			'DefSubset' => 'Complaint Type',
			'DefOrder' => '6',
			'DefIsActive' => '0',
			'DefValue' => 'Not Sure'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 302,
			'DefDatabase' => '1',
			'DefSubset' => 'Investigative Agency Types',
			'DefIsActive' => '0',
			'DefValue' => 'Civilian Oversight'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 303,
			'DefDatabase' => '1',
			'DefSubset' => 'Investigative Agency Types',
			'DefOrder' => '1',
			'DefIsActive' => '0',
			'DefValue' => 'Internal Affairs'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 304,
			'DefDatabase' => '1',
			'DefSubset' => 'Privacy Types',
			'DefIsActive' => '0',
			'DefValue' => 'Submit Publicly'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 305,
			'DefDatabase' => '1',
			'DefSubset' => 'Privacy Types',
			'DefOrder' => '1',
			'DefIsActive' => '0',
			'DefValue' => 'Names Visible to Police but not Public'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 306,
			'DefDatabase' => '1',
			'DefSubset' => 'Privacy Types',
			'DefOrder' => '2',
			'DefIsActive' => '0',
			'DefValue' => 'Completely Anonymous',
			'DefDescription' => 'Anonymous complaints would have no public-facing details for civilians or officers. This is an option the user has early in the complaint process.'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 307,
			'DefDatabase' => '1',
			'DefSubset' => 'Privacy Types',
			'DefOrder' => '3',
			'DefIsActive' => '0',
			'DefValue' => 'Anonymized',
			'DefDescription' => 'Anonymized complaints would have all open-ended questions scrubbed, only leaving aggregate-friendly data. This is an action take by an analyst or the complainant some time after the complaint was submitted.'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 308,
			'DefDatabase' => '1',
			'DefSubset' => 'Property Seized Types',
			'DefIsActive' => '0',
			'DefValue' => 'Cash'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 309,
			'DefDatabase' => '1',
			'DefSubset' => 'Property Seized Types',
			'DefOrder' => '1',
			'DefIsActive' => '0',
			'DefValue' => 'Phone'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 310,
			'DefDatabase' => '1',
			'DefSubset' => 'Property Seized Types',
			'DefOrder' => '2',
			'DefIsActive' => '0',
			'DefValue' => 'TV'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 311,
			'DefDatabase' => '1',
			'DefSubset' => 'Property Seized Types',
			'DefOrder' => '3',
			'DefIsActive' => '0',
			'DefValue' => 'Vehicle'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 312,
			'DefDatabase' => '1',
			'DefSubset' => 'Property Seized Types',
			'DefOrder' => '4',
			'DefIsActive' => '0',
			'DefValue' => 'Real Estate'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 313,
			'DefDatabase' => '1',
			'DefSubset' => 'Property Seized Types',
			'DefOrder' => '5',
			'DefIsActive' => '0',
			'DefValue' => 'Bank Account'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 314,
			'DefDatabase' => '1',
			'DefSubset' => 'Property Seized Types',
			'DefOrder' => '6',
			'DefIsActive' => '0',
			'DefValue' => 'Boat'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 315,
			'DefDatabase' => '1',
			'DefSubset' => 'Property Seized Types',
			'DefOrder' => '7',
			'DefIsActive' => '0',
			'DefValue' => 'Firearms'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 316,
			'DefDatabase' => '1',
			'DefSubset' => 'Property Seized Types',
			'DefOrder' => '8',
			'DefIsActive' => '0',
			'DefValue' => 'Identity Documents'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 317,
			'DefDatabase' => '1',
			'DefSubset' => 'Property Seized Types',
			'DefOrder' => '9',
			'DefIsActive' => '0',
			'DefValue' => 'Other Items'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 318,
			'DefDatabase' => '1',
			'DefSubset' => 'Races',
			'DefIsActive' => '0',
			'DefValue' => 'Asian'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 319,
			'DefDatabase' => '1',
			'DefSubset' => 'Races',
			'DefOrder' => '1',
			'DefIsActive' => '0',
			'DefValue' => 'Black/African/Caribbean'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 320,
			'DefDatabase' => '1',
			'DefSubset' => 'Races',
			'DefOrder' => '2',
			'DefIsActive' => '0',
			'DefValue' => 'Hispanic/Latinx'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 321,
			'DefDatabase' => '1',
			'DefSubset' => 'Races',
			'DefOrder' => '4',
			'DefIsActive' => '0',
			'DefValue' => 'Native American'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 322,
			'DefDatabase' => '1',
			'DefSubset' => 'Races',
			'DefOrder' => '5',
			'DefIsActive' => '0',
			'DefValue' => 'Pacific Islander'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 323,
			'DefDatabase' => '1',
			'DefSubset' => 'Races',
			'DefOrder' => '6',
			'DefIsActive' => '0',
			'DefValue' => 'White/Caucasian'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 324,
			'DefDatabase' => '1',
			'DefSubset' => 'Races',
			'DefOrder' => '7',
			'DefIsActive' => '0',
			'DefValue' => 'Other'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 325,
			'DefDatabase' => '1',
			'DefSubset' => 'Races',
			'DefOrder' => '8',
			'DefIsActive' => '0',
			'DefValue' => 'Decline or Unknown'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 326,
			'DefDatabase' => '1',
			'DefSubset' => 'Reason for Pedestrian Stop',
			'DefIsActive' => '0',
			'DefValue' => 'Walking Violation',
			'DefDescription' => 'e.g. Jay Walking'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 327,
			'DefDatabase' => '1',
			'DefSubset' => 'Reason for Pedestrian Stop',
			'DefOrder' => '1',
			'DefIsActive' => '0',
			'DefValue' => 'Disturbing the Peace'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 328,
			'DefDatabase' => '1',
			'DefSubset' => 'Reason for Pedestrian Stop',
			'DefOrder' => '3',
			'DefIsActive' => '0',
			'DefValue' => 'Public Intoxication'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 329,
			'DefDatabase' => '1',
			'DefSubset' => 'Reason for Pedestrian Stop',
			'DefOrder' => '4',
			'DefIsActive' => '0',
			'DefValue' => 'Illegal Drug Violation'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 330,
			'DefDatabase' => '1',
			'DefSubset' => 'Reason for Pedestrian Stop',
			'DefOrder' => '5',
			'DefIsActive' => '0',
			'DefValue' => 'Suspected of Something Else'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 331,
			'DefDatabase' => '1',
			'DefSubset' => 'Reason for Pedestrian Stop',
			'DefOrder' => '6',
			'DefIsActive' => '0',
			'DefValue' => 'Matched a Description of Someone'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 332,
			'DefDatabase' => '1',
			'DefSubset' => 'Reason for Pedestrian Stop',
			'DefOrder' => '7',
			'DefIsActive' => '0',
			'DefValue' => 'Investigating Someone Else'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 333,
			'DefDatabase' => '1',
			'DefSubset' => 'Reason for Pedestrian Stop',
			'DefOrder' => '8',
			'DefIsActive' => '0',
			'DefValue' => 'Providing Assistance/Responding to Call'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 334,
			'DefDatabase' => '1',
			'DefSubset' => 'Reason for Pedestrian Stop',
			'DefOrder' => '9',
			'DefIsActive' => '0',
			'DefValue' => 'Other Reason'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 335,
			'DefDatabase' => '1',
			'DefSubset' => 'Reason for Pedestrian Stop',
			'DefOrder' => '10',
			'DefIsActive' => '0',
			'DefValue' => 'Officer Did Not Give Reason For Stop',
			'DefDescription' => 'e.g. NYC Stop & Frisk'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 591,
			'DefDatabase' => '1',
			'DefSet' => 'System Settings',
			'DefSubset' => 'user-name-req',
			'DefDescription' => '0'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 336,
			'DefDatabase' => '1',
			'DefSubset' => 'Reason for Vehicle Stop',
			'DefIsActive' => '0',
			'DefValue' => 'Speeding'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 337,
			'DefDatabase' => '1',
			'DefSubset' => 'Reason for Vehicle Stop',
			'DefOrder' => '1',
			'DefIsActive' => '0',
			'DefValue' => 'Vehicle Defect'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 338,
			'DefDatabase' => '1',
			'DefSubset' => 'Reason for Vehicle Stop',
			'DefOrder' => '2',
			'DefIsActive' => '0',
			'DefValue' => 'Expired Registration'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 339,
			'DefDatabase' => '1',
			'DefSubset' => 'Reason for Vehicle Stop',
			'DefOrder' => '3',
			'DefIsActive' => '0',
			'DefValue' => 'License Plate Violation'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 340,
			'DefDatabase' => '1',
			'DefSubset' => 'Reason for Vehicle Stop',
			'DefOrder' => '4',
			'DefIsActive' => '0',
			'DefValue' => 'Illegal Turn or Lane Change'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 341,
			'DefDatabase' => '1',
			'DefSubset' => 'Reason for Vehicle Stop',
			'DefOrder' => '5',
			'DefIsActive' => '0',
			'DefValue' => 'Seatbelt or Cell Phone Violation'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 342,
			'DefDatabase' => '1',
			'DefSubset' => 'Reason for Vehicle Stop',
			'DefOrder' => '6',
			'DefIsActive' => '0',
			'DefValue' => 'Stop Sign/Light Violation'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 343,
			'DefDatabase' => '1',
			'DefSubset' => 'Reason for Vehicle Stop',
			'DefOrder' => '7',
			'DefIsActive' => '0',
			'DefValue' => 'Driving While Impaired',
			'DefDescription' => 'The officer stated this as the reason for stop, but this was not at a designated "sobriety checkpoint" (that option is below).'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 344,
			'DefDatabase' => '1',
			'DefSubset' => 'Reason for Vehicle Stop',
			'DefOrder' => '8',
			'DefIsActive' => '0',
			'DefValue' => 'Sobriety Checkpoint'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 345,
			'DefDatabase' => '1',
			'DefSubset' => 'Reason for Vehicle Stop',
			'DefOrder' => '9',
			'DefIsActive' => '0',
			'DefValue' => 'Border Checkpoint'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 346,
			'DefDatabase' => '1',
			'DefSubset' => 'Reason for Vehicle Stop',
			'DefOrder' => '11',
			'DefIsActive' => '0',
			'DefValue' => 'Other Reason'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 347,
			'DefDatabase' => '1',
			'DefSubset' => 'Reason for Vehicle Stop',
			'DefOrder' => '12',
			'DefIsActive' => '0',
			'DefValue' => 'Officer Did Not Give Reason For Stop'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 349,
			'DefDatabase' => '1',
			'DefSubset' => 'Scene Type',
			'DefOrder' => '1',
			'DefIsActive' => '0',
			'DefValue' => 'Home or private residence (includes just outside the residence)'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 350,
			'DefDatabase' => '1',
			'DefSubset' => 'Scene Type',
			'DefOrder' => '4',
			'DefIsActive' => '0',
			'DefValue' => 'Workplace'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 351,
			'DefDatabase' => '1',
			'DefSubset' => 'Scene Type',
			'DefOrder' => '5',
			'DefIsActive' => '0',
			'DefValue' => 'Airport'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 352,
			'DefDatabase' => '1',
			'DefSubset' => 'Scene Type',
			'DefIsActive' => '0',
			'DefValue' => 'Outdoor public space (includes roads, sidewalks, parks, etc.)'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 353,
			'DefDatabase' => '1',
			'DefSubset' => 'Scene Type',
			'DefOrder' => '6',
			'DefIsActive' => '0',
			'DefValue' => 'Indoor public space'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 101,
			'DefDatabase' => '1',
			'DefSubset' => 'Age Ranges',
			'DefIsActive' => '0',
			'DefValue' => '0-15'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 102,
			'DefDatabase' => '1',
			'DefSubset' => 'Age Ranges',
			'DefOrder' => '1',
			'DefIsActive' => '0',
			'DefValue' => '16-24'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 103,
			'DefDatabase' => '1',
			'DefSubset' => 'Age Ranges',
			'DefOrder' => '2',
			'DefIsActive' => '0',
			'DefValue' => '25-34'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 104,
			'DefDatabase' => '1',
			'DefSubset' => 'Age Ranges',
			'DefOrder' => '3',
			'DefIsActive' => '0',
			'DefValue' => '35-44'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 360,
			'DefDatabase' => '1',
			'DefSubset' => 'Transportation',
			'DefValue' => 'Car'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 105,
			'DefDatabase' => '1',
			'DefSubset' => 'Age Ranges',
			'DefOrder' => '4',
			'DefIsActive' => '0',
			'DefValue' => '45-54'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 361,
			'DefDatabase' => '1',
			'DefSubset' => 'Transportation',
			'DefOrder' => '2',
			'DefValue' => 'Van'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 106,
			'DefDatabase' => '1',
			'DefSubset' => 'Age Ranges',
			'DefOrder' => '5',
			'DefIsActive' => '0',
			'DefValue' => '55-64'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 362,
			'DefDatabase' => '1',
			'DefSubset' => 'Transportation',
			'DefOrder' => '3',
			'DefValue' => 'Motorcycle'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 107,
			'DefDatabase' => '1',
			'DefSubset' => 'Age Ranges',
			'DefOrder' => '6',
			'DefIsActive' => '0',
			'DefValue' => '65-74'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 363,
			'DefDatabase' => '1',
			'DefSubset' => 'Transportation',
			'DefOrder' => '4',
			'DefValue' => 'Bicycle'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 108,
			'DefDatabase' => '1',
			'DefSubset' => 'Age Ranges',
			'DefOrder' => '7',
			'DefIsActive' => '0',
			'DefValue' => '75-84'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 364,
			'DefDatabase' => '1',
			'DefSubset' => 'Transportation',
			'DefOrder' => '5',
			'DefValue' => 'Boat'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 109,
			'DefDatabase' => '1',
			'DefSubset' => 'Age Ranges',
			'DefOrder' => '8',
			'DefIsActive' => '0',
			'DefValue' => 'Over 84'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 365,
			'DefDatabase' => '1',
			'DefSubset' => 'Transportation',
			'DefOrder' => '6',
			'DefValue' => 'Other'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 110,
			'DefDatabase' => '1',
			'DefSubset' => 'Allegation Findings',
			'DefIsActive' => '0',
			'DefValue' => 'Exonerated',
			'DefDescription' => '"Exonerated" means that the conduct at issue occurred but is not a violation of department rules.'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 366,
			'DefDatabase' => '1',
			'DefSubset' => 'Department Types',
			'DefOrder' => '3',
			'DefValue' => 'Federal Law Enforcement'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 111,
			'DefDatabase' => '1',
			'DefSubset' => 'Allegation Findings',
			'DefOrder' => '1',
			'DefIsActive' => '0',
			'DefValue' => 'Unfounded',
			'DefDescription' => 'An "unfounded" adjudication means that the allegations are not true.'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 367,
			'DefDatabase' => '1',
			'DefSubset' => 'Department Types',
			'DefOrder' => '2',
			'DefValue' => 'State Police'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 112,
			'DefDatabase' => '1',
			'DefSubset' => 'Allegation Findings',
			'DefOrder' => '2',
			'DefIsActive' => '0',
			'DefValue' => 'Not Sustained',
			'DefDescription' => 'A "not sustained" or "not resolved" or "unresolved" adjudication means that there is insufficient evidence to prove or disprove the allegations by a preponderance of evidence.'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 368,
			'DefDatabase' => '1',
			'DefSubset' => 'Department Types',
			'DefValue' => 'Local Police'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 113,
			'DefDatabase' => '1',
			'DefSubset' => 'Allegation Findings',
			'DefOrder' => '3',
			'DefIsActive' => '0',
			'DefValue' => 'Sustained',
			'DefDescription' => 'A "founded" or "sustained" adjudication means that allegations are true by a preponderance of the evidence and that the conduct at issue is a violation of department rules.'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 369,
			'DefDatabase' => '1',
			'DefSubset' => 'Department Types',
			'DefOrder' => '1',
			'DefValue' => 'Sheriffs\' Offices'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 114,
			'DefDatabase' => '1',
			'DefSubset' => 'Allegation Findings',
			'DefOrder' => '6',
			'DefIsActive' => '0',
			'DefValue' => 'Other',
			'DefDescription' => 'This "other" category might include withdrawn complaints, complaints lacking sufficient information to complete an investigation, or complaints against officers not employed or no longer employed by the department.'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 370,
			'DefDatabase' => '1',
			'DefSubset' => 'Department Types',
			'DefOrder' => '4',
			'DefValue' => 'Other Police Departments'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 115,
			'DefDatabase' => '1',
			'DefSubset' => 'Allegation Type',
			'DefValue' => 'Unreasonable Force',
			'DefDescription' => '"Reasonable force" is the amount of effort required by police to compel an unwilling person to comply. So "unreasonable force" is any unnecessary or excessive force beyond what\'s required to do that.'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 371,
			'DefDatabase' => '1',
			'DefSubset' => 'User Types',
			'DefIsActive' => '0',
			'DefValue' => 'Admin'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 116,
			'DefDatabase' => '1',
			'DefSubset' => 'Allegation Type',
			'DefOrder' => '1',
			'DefValue' => 'Wrongful Arrest',
			'DefDescription' => 'Police took someone into custody without a warrant or probable cause.'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 372,
			'DefDatabase' => '1',
			'DefSubset' => 'User Types',
			'DefOrder' => '1',
			'DefIsActive' => '0',
			'DefValue' => 'Investigative Agency'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 117,
			'DefDatabase' => '1',
			'DefSubset' => 'Allegation Type',
			'DefOrder' => '2',
			'DefValue' => 'Wrongful Detention',
			'DefDescription' => 'Police pulled over a vehicle or stopped someone without reasonable suspicion.'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 373,
			'DefDatabase' => '1',
			'DefSubset' => 'User Types',
			'DefOrder' => '2',
			'DefIsActive' => '0',
			'DefValue' => 'Customer'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 118,
			'DefDatabase' => '1',
			'DefSubset' => 'Allegation Type',
			'DefOrder' => '3',
			'DefValue' => 'Wrongful Entry',
			'DefDescription' => 'Police entered private property without a warrant or consent.'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 374,
			'DefDatabase' => '1',
			'DefSubset' => 'User Types',
			'DefOrder' => '3',
			'DefIsActive' => '0',
			'DefValue' => 'Civilian'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 119,
			'DefDatabase' => '1',
			'DefSubset' => 'Allegation Type',
			'DefOrder' => '4',
			'DefValue' => 'Wrongful Search',
			'DefDescription' => 'Police conducted a search without a warrant, probable cause, or consent.'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 375,
			'DefDatabase' => '1',
			'DefSubset' => 'Verbal Abuse Types',
			'DefIsActive' => '0',
			'DefValue' => 'Threats'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 120,
			'DefDatabase' => '1',
			'DefSubset' => 'Allegation Type',
			'DefOrder' => '5',
			'DefValue' => 'Wrongful Property Seizure',
			'DefDescription' => 'Property seizure which violated the protections provided by the 4th Amendment of the United States Constitution.'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 376,
			'DefDatabase' => '1',
			'DefSubset' => 'Verbal Abuse Types',
			'DefOrder' => '1',
			'DefIsActive' => '0',
			'DefValue' => 'Shouting'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 121,
			'DefDatabase' => '1',
			'DefSubset' => 'Allegation Type',
			'DefOrder' => '7',
			'DefValue' => 'Bias-Based Policing',
			'DefDescription' => 'An officer\'s conduct was based on a person\'s race, gender, appearance, nationality, religion, age, gender, sexual orientation, residence, disability, etc.'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 377,
			'DefDatabase' => '1',
			'DefSubset' => 'Verbal Abuse Types',
			'DefOrder' => '2',
			'DefIsActive' => '0',
			'DefValue' => 'Cursing'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 122,
			'DefDatabase' => '1',
			'DefSubset' => 'Allegation Type',
			'DefOrder' => '8',
			'DefValue' => 'Excessive Arrest Charges',
			'DefDescription' => 'Police filed arrest charges to punish someone beyond what\'s legal or appropriate.'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 378,
			'DefDatabase' => '1',
			'DefSubset' => 'Verbal Abuse Types',
			'DefOrder' => '3',
			'DefIsActive' => '0',
			'DefValue' => 'Racism'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 379,
			'DefDatabase' => '1',
			'DefSubset' => 'Verbal Abuse Types',
			'DefOrder' => '4',
			'DefIsActive' => '0',
			'DefValue' => 'Sexism'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 124,
			'DefDatabase' => '1',
			'DefSubset' => 'Allegation Type',
			'DefOrder' => '9',
			'DefValue' => 'Excessive Citation',
			'DefDescription' => 'Police filed citations to punish someone beyond whatï¿½s legal or appropriate.'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 380,
			'DefDatabase' => '1',
			'DefSubset' => 'Verbal Abuse Types',
			'DefOrder' => '5',
			'DefIsActive' => '0',
			'DefValue' => 'Homophobia'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 125,
			'DefDatabase' => '1',
			'DefSubset' => 'Allegation Type',
			'DefOrder' => '10',
			'DefValue' => 'Intimidating Display Of Weapon',
			'DefDescription' => 'Police pointed or flaunted a weapon to intimidate someone who isn\'t a threat.'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 381,
			'DefDatabase' => '1',
			'DefSubset' => 'Verbal Abuse Types',
			'DefOrder' => '6',
			'DefIsActive' => '0',
			'DefValue' => 'Lies'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 126,
			'DefDatabase' => '1',
			'DefSubset' => 'Allegation Type',
			'DefOrder' => '12',
			'DefValue' => 'Sexual Assault',
			'DefDescription' => 'Any sexual act that a person is forced to engage in against their will. This includes any non-consensual sexual touching.'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 382,
			'DefDatabase' => '1',
			'DefSubset' => 'Verbal Abuse Types',
			'DefOrder' => '7',
			'DefIsActive' => '0',
			'DefValue' => 'Disrespect'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 127,
			'DefDatabase' => '1',
			'DefSubset' => 'Allegation Type',
			'DefOrder' => '14',
			'DefValue' => 'Policy or Procedure Violation',
			'DefDescription' => 'An officer took actions which did not follow appropriate policy, procedure, or guidelines.'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 383,
			'DefDatabase' => '1',
			'DefSubset' => 'Gender Identity',
			'DefIsActive' => '0',
			'DefValue' => 'Female'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 128,
			'DefDatabase' => '1',
			'DefSubset' => 'Allegation Type',
			'DefOrder' => '15',
			'DefValue' => 'Conduct Unbecoming an Officer',
			'DefDescription' => 'A reasonable person would find the officer\'s on or off duty conduct to be unbecoming a police officer, and such conduct reflected adversely on the department.'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 384,
			'DefDatabase' => '1',
			'DefSubset' => 'Gender Identity',
			'DefOrder' => '1',
			'DefIsActive' => '0',
			'DefValue' => 'Male'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 129,
			'DefDatabase' => '1',
			'DefSubset' => 'Allegation Type',
			'DefOrder' => '16',
			'DefValue' => 'Discourtesy',
			'DefDescription' => 'This includes the use of profanity, offensive language, loss of temper, verbal threats, impatience, or any discourteous behavior.'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 385,
			'DefDatabase' => '1',
			'DefSubset' => 'Gender Identity',
			'DefOrder' => '3',
			'DefIsActive' => '0',
			'DefValue' => 'Female to male transgender'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 130,
			'DefDatabase' => '1',
			'DefSubset' => 'Allegation Type',
			'DefOrder' => '17',
			'DefValue' => 'Officer Refused To Provide ID',
			'DefDescription' => 'Example: An officer allegedly failed to provide the complainant with his name and badge number after the identification was requested.'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 386,
			'DefDatabase' => '1',
			'DefSubset' => 'Gender Identity',
			'DefOrder' => '4',
			'DefIsActive' => '0',
			'DefValue' => 'Male to female transgender'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 131,
			'DefDatabase' => '1',
			'DefSubset' => 'Allegation Type',
			'DefOrder' => '18',
			'DefValue' => 'Miranda Rights',
			'DefDescription' => 'Officers failed to read an arresttee their Miranda rights. This is not necessarily against law or policy.'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 387,
			'DefDatabase' => '1',
			'DefSubset' => 'Gender Identity',
			'DefOrder' => '9',
			'DefIsActive' => '0',
			'DefValue' => 'Not sure'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 132,
			'DefDatabase' => '1',
			'DefSubset' => 'Allegation Type',
			'DefOrder' => '19',
			'DefValue' => 'Neglect of Duty',
			'DefDescription' => 'The officer\'s inaction did not follow appropriate policy, procedure, or guidelines. These are things an officer should have done, but didn\'t do.'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 388,
			'DefDatabase' => '1',
			'DefSubset' => 'Gender Identity',
			'DefOrder' => '10',
			'DefIsActive' => '0',
			'DefValue' => 'Other',
			'DefDescription' => 'http://www.hrc.org/resources/collecting-transgender-inclusive-gender-data-in-workplace-and-other-surveys'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 133,
			'DefDatabase' => '1',
			'DefSubset' => 'Arrest Charges',
			'DefIsActive' => '0',
			'DefValue' => 'Assault on an Officer'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 389,
			'DefDatabase' => '1',
			'DefSubset' => 'Gender Identity',
			'DefOrder' => '8',
			'DefIsActive' => '0',
			'DefValue' => 'Intersex'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 134,
			'DefDatabase' => '1',
			'DefSubset' => 'Arrest Charges',
			'DefOrder' => '1',
			'DefIsActive' => '0',
			'DefValue' => 'Disorderly Conduct'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 390,
			'DefDatabase' => '1',
			'DefSubset' => 'Gender Identity',
			'DefOrder' => '5',
			'DefIsActive' => '0',
			'DefValue' => 'Genderqueer/Androgynous'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 135,
			'DefDatabase' => '1',
			'DefSubset' => 'Arrest Charges',
			'DefOrder' => '2',
			'DefIsActive' => '0',
			'DefValue' => 'Disturbing the Peace'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 391,
			'DefDatabase' => '1',
			'DefSubset' => 'Gender Identity',
			'DefOrder' => '6',
			'DefIsActive' => '0',
			'DefValue' => 'Cross-dresser'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 136,
			'DefDatabase' => '1',
			'DefSubset' => 'Arrest Charges',
			'DefOrder' => '4',
			'DefIsActive' => '0',
			'DefValue' => 'Failure to Obey/Comply'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 392,
			'DefDatabase' => '1',
			'DefSubset' => 'Gender Identity',
			'DefOrder' => '7',
			'DefIsActive' => '0',
			'DefValue' => 'Transsexual'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 137,
			'DefDatabase' => '1',
			'DefSubset' => 'Arrest Charges',
			'DefOrder' => '5',
			'DefIsActive' => '0',
			'DefValue' => 'Obstructing/Interfering'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 393,
			'DefDatabase' => '1',
			'DefSubset' => 'Gender Identity',
			'DefOrder' => '2',
			'DefIsActive' => '0',
			'DefValue' => 'Transgender'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 138,
			'DefDatabase' => '1',
			'DefSubset' => 'Arrest Charges',
			'DefOrder' => '6',
			'DefIsActive' => '0',
			'DefValue' => 'Resisting Arrest'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 394,
			'DefDatabase' => '1',
			'DefSubset' => 'How Did You Hear',
			'DefOrder' => '2',
			'DefIsActive' => '0',
			'DefValue' => 'ACLU (American Civil Liberties Union)'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 139,
			'DefDatabase' => '1',
			'DefSubset' => 'Arrest Charges',
			'DefOrder' => '7',
			'DefIsActive' => '0',
			'DefValue' => 'Public Intoxication'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 395,
			'DefDatabase' => '1',
			'DefSubset' => 'How Did You Hear',
			'DefOrder' => '3',
			'DefIsActive' => '0',
			'DefValue' => 'NAACP (National Association for the Advancement of Colored People)'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 140,
			'DefDatabase' => '1',
			'DefSubset' => 'Arrest Charges',
			'DefOrder' => '8',
			'DefIsActive' => '0',
			'DefValue' => 'Marijuana Possession'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 396,
			'DefDatabase' => '1',
			'DefSubset' => 'How Did You Hear',
			'DefOrder' => '4',
			'DefIsActive' => '0',
			'DefValue' => 'CopWatch'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 141,
			'DefDatabase' => '1',
			'DefSubset' => 'Arrest Charges',
			'DefOrder' => '9',
			'DefIsActive' => '0',
			'DefValue' => 'Illegal Drugs Other Than Marijuana'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 397,
			'DefDatabase' => '1',
			'DefSubset' => 'How Did You Hear',
			'DefOrder' => '1',
			'DefIsActive' => '0',
			'DefValue' => 'NACOLE (National Association for Civilian Oversight of Law Enforcement)'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 142,
			'DefDatabase' => '1',
			'DefSubset' => 'Bias Type',
			'DefIsActive' => '0',
			'DefValue' => 'Race'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 398,
			'DefDatabase' => '1',
			'DefSubset' => 'Unresolved Charges Actions',
			'DefIsActive' => '0',
			'DefValue' => 'Full complaint to print or save'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 143,
			'DefDatabase' => '1',
			'DefSubset' => 'Bias Type',
			'DefOrder' => '1',
			'DefIsActive' => '0',
			'DefValue' => 'Color'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 399,
			'DefDatabase' => '1',
			'DefSubset' => 'Unresolved Charges Actions',
			'DefOrder' => '1',
			'DefIsActive' => '0',
			'DefValue' => 'Anonymous complaint data only'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 144,
			'DefDatabase' => '1',
			'DefSubset' => 'Bias Type',
			'DefOrder' => '2',
			'DefIsActive' => '0',
			'DefValue' => 'Ethnicity'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 400,
			'DefDatabase' => '1',
			'DefSubset' => 'Unresolved Charges Actions',
			'DefOrder' => '2',
			'DefIsActive' => '0',
			'DefValue' => 'Logout'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 145,
			'DefDatabase' => '1',
			'DefSubset' => 'Bias Type',
			'DefOrder' => '3',
			'DefIsActive' => '0',
			'DefValue' => 'National Origin'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 401,
			'DefDatabase' => '1',
			'DefSubset' => 'Arrest Charges',
			'DefOrder' => '3',
			'DefValue' => 'Loitering/Trespassing'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 146,
			'DefDatabase' => '1',
			'DefSubset' => 'Bias Type',
			'DefOrder' => '4',
			'DefIsActive' => '0',
			'DefValue' => 'Religion'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 402,
			'DefDatabase' => '1',
			'DefSubset' => 'Citation Charges',
			'DefOrder' => '8',
			'DefValue' => 'Loitering/Trespassing'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 147,
			'DefDatabase' => '1',
			'DefSubset' => 'Bias Type',
			'DefOrder' => '5',
			'DefIsActive' => '0',
			'DefValue' => 'Age'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 403,
			'DefDatabase' => '1',
			'DefSubset' => 'Citation Charges Pedestrian',
			'DefOrder' => '5',
			'DefValue' => 'Loitering/Trespassing'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 148,
			'DefDatabase' => '1',
			'DefSubset' => 'Bias Type',
			'DefOrder' => '6',
			'DefIsActive' => '0',
			'DefValue' => 'Gender'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 404,
			'DefDatabase' => '1',
			'DefSubset' => 'Scene Type',
			'DefOrder' => '3',
			'DefValue' => 'School'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 149,
			'DefDatabase' => '1',
			'DefSubset' => 'Bias Type',
			'DefOrder' => '7',
			'DefIsActive' => '0',
			'DefValue' => 'Gender Identity'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 405,
			'DefDatabase' => '1',
			'DefSubset' => 'Reason for Pedestrian Stop',
			'DefOrder' => '2',
			'DefValue' => 'Loitering/Trespassing'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 150,
			'DefDatabase' => '1',
			'DefSubset' => 'Bias Type',
			'DefOrder' => '8',
			'DefIsActive' => '0',
			'DefValue' => 'Sexual Orientation'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 406,
			'DefDatabase' => '1',
			'DefSubset' => 'Reason for Vehicle Stop',
			'DefOrder' => '10',
			'DefValue' => 'Loitering/Trespassing'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 151,
			'DefDatabase' => '1',
			'DefSubset' => 'Bias Type',
			'DefOrder' => '9',
			'DefIsActive' => '0',
			'DefValue' => 'Family Responsibilities'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 152,
			'DefDatabase' => '1',
			'DefSubset' => 'Bias Type',
			'DefOrder' => '10',
			'DefIsActive' => '0',
			'DefValue' => 'Disability'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 408,
			'DefDatabase' => '1',
			'DefSubset' => 'Chase Types',
			'DefValue' => 'On Foot'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 153,
			'DefDatabase' => '1',
			'DefSubset' => 'Bias Type',
			'DefOrder' => '11',
			'DefIsActive' => '0',
			'DefValue' => 'Educational Level'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 409,
			'DefDatabase' => '1',
			'DefSubset' => 'Chase Types',
			'DefOrder' => '1',
			'DefValue' => 'In Vehicles'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 154,
			'DefDatabase' => '1',
			'DefSubset' => 'Bias Type',
			'DefOrder' => '12',
			'DefIsActive' => '0',
			'DefValue' => 'Political Affiliations'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 410,
			'DefDatabase' => '1',
			'DefSubset' => 'Chase Types',
			'DefOrder' => '2',
			'DefValue' => 'Both'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 155,
			'DefDatabase' => '1',
			'DefSubset' => 'Bias Type',
			'DefOrder' => '13',
			'DefIsActive' => '0',
			'DefValue' => 'Source of Income'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 411,
			'DefDatabase' => '1',
			'DefSubset' => 'Arrest Charges',
			'DefOrder' => '10',
			'DefValue' => 'Weapons Violation'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 156,
			'DefDatabase' => '1',
			'DefSubset' => 'Bias Type',
			'DefOrder' => '14',
			'DefIsActive' => '0',
			'DefValue' => 'Place'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 412,
			'DefDatabase' => '1',
			'DefSubset' => 'Citation Charges Pedestrian',
			'DefOrder' => '7',
			'DefValue' => 'Weapons Violation'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 157,
			'DefDatabase' => '1',
			'DefSubset' => 'Bias Type',
			'DefOrder' => '15',
			'DefIsActive' => '0',
			'DefValue' => 'Residence'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 413,
			'DefDatabase' => '1',
			'DefSubset' => 'Citation Charges',
			'DefOrder' => '12',
			'DefValue' => 'Weapons Violation'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 158,
			'DefDatabase' => '1',
			'DefSubset' => 'Bias Type',
			'DefOrder' => '16',
			'DefIsActive' => '0',
			'DefValue' => 'Business'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 414,
			'DefDatabase' => '1',
			'DefSubset' => 'Chase Types',
			'DefOrder' => '3',
			'DefValue' => 'Not sure'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 159,
			'DefDatabase' => '1',
			'DefSubset' => 'Body Part',
			'DefIsActive' => '0',
			'DefValue' => 'Head'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 415,
			'DefDatabase' => '1',
			'DefSubset' => 'Civilian Weapons',
			'DefOrder' => '1',
			'DefValue' => 'Gun'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 160,
			'DefDatabase' => '1',
			'DefSubset' => 'Body Part',
			'DefOrder' => '1',
			'DefIsActive' => '0',
			'DefValue' => 'Neck'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 416,
			'DefDatabase' => '1',
			'DefSubset' => 'Civilian Weapons',
			'DefOrder' => '2',
			'DefValue' => 'Knife'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 161,
			'DefDatabase' => '1',
			'DefSubset' => 'Body Part',
			'DefOrder' => '2',
			'DefIsActive' => '0',
			'DefValue' => 'Torso'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 417,
			'DefDatabase' => '1',
			'DefSubset' => 'Civilian Weapons',
			'DefOrder' => '3',
			'DefValue' => 'Other'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 162,
			'DefDatabase' => '1',
			'DefSubset' => 'Body Part',
			'DefOrder' => '3',
			'DefIsActive' => '0',
			'DefValue' => 'Hand'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 163,
			'DefDatabase' => '1',
			'DefSubset' => 'Body Part',
			'DefOrder' => '4',
			'DefIsActive' => '0',
			'DefValue' => 'Elbow'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 164,
			'DefDatabase' => '1',
			'DefSubset' => 'Body Part',
			'DefOrder' => '5',
			'DefIsActive' => '0',
			'DefValue' => 'Arm'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 165,
			'DefDatabase' => '1',
			'DefSubset' => 'Body Part',
			'DefOrder' => '6',
			'DefIsActive' => '0',
			'DefValue' => 'Foot'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 166,
			'DefDatabase' => '1',
			'DefSubset' => 'Body Part',
			'DefOrder' => '7',
			'DefIsActive' => '0',
			'DefValue' => 'Knee'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 167,
			'DefDatabase' => '1',
			'DefSubset' => 'Body Part',
			'DefOrder' => '8',
			'DefIsActive' => '0',
			'DefValue' => 'Leg'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 168,
			'DefDatabase' => '1',
			'DefSubset' => 'Body Part',
			'DefOrder' => '9',
			'DefIsActive' => '0',
			'DefValue' => 'Crotch'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 169,
			'DefDatabase' => '1',
			'DefSubset' => 'Body Part',
			'DefOrder' => '10',
			'DefIsActive' => '0',
			'DefValue' => 'Unknown'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 170,
			'DefDatabase' => '1',
			'DefSubset' => 'Body Types',
			'DefIsActive' => '0',
			'DefValue' => 'Slim/Slender'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 171,
			'DefDatabase' => '1',
			'DefSubset' => 'Body Types',
			'DefOrder' => '1',
			'DefIsActive' => '0',
			'DefValue' => 'Medium/Average'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 172,
			'DefDatabase' => '1',
			'DefSubset' => 'Body Types',
			'DefOrder' => '2',
			'DefIsActive' => '0',
			'DefValue' => 'Athletic/Muscular'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 173,
			'DefDatabase' => '1',
			'DefSubset' => 'Body Types',
			'DefOrder' => '3',
			'DefIsActive' => '0',
			'DefValue' => 'Large/Fat'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 174,
			'DefDatabase' => '1',
			'DefSubset' => 'Citation Charges',
			'DefIsActive' => '0',
			'DefValue' => 'Speeding'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 175,
			'DefDatabase' => '1',
			'DefSubset' => 'Citation Charges',
			'DefOrder' => '1',
			'DefIsActive' => '0',
			'DefValue' => 'Vehicle Defect'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 176,
			'DefDatabase' => '1',
			'DefSubset' => 'Citation Charges',
			'DefOrder' => '2',
			'DefIsActive' => '0',
			'DefValue' => 'Records Violation'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 177,
			'DefDatabase' => '1',
			'DefSubset' => 'Citation Charges',
			'DefOrder' => '3',
			'DefIsActive' => '0',
			'DefValue' => 'Illegal Turn or Lane Change'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 178,
			'DefDatabase' => '1',
			'DefSubset' => 'Citation Charges',
			'DefOrder' => '4',
			'DefIsActive' => '0',
			'DefValue' => 'Seatbelt or Cell Phone Violation'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 179,
			'DefDatabase' => '1',
			'DefSubset' => 'Citation Charges',
			'DefOrder' => '5',
			'DefIsActive' => '0',
			'DefValue' => 'Stop Sign/Light Violation'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 180,
			'DefDatabase' => '1',
			'DefSubset' => 'Citation Charges',
			'DefOrder' => '6',
			'DefIsActive' => '0',
			'DefValue' => 'Disorderly Conduct'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 181,
			'DefDatabase' => '1',
			'DefSubset' => 'Citation Charges',
			'DefOrder' => '7',
			'DefIsActive' => '0',
			'DefValue' => 'Disturbing the Peace'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 182,
			'DefDatabase' => '1',
			'DefSubset' => 'Citation Charges',
			'DefOrder' => '9',
			'DefIsActive' => '0',
			'DefValue' => 'Failure to Obey/Comply'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 183,
			'DefDatabase' => '1',
			'DefSubset' => 'Citation Charges',
			'DefOrder' => '10',
			'DefIsActive' => '0',
			'DefValue' => 'Public Intoxication'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 184,
			'DefDatabase' => '1',
			'DefSubset' => 'Citation Charges',
			'DefOrder' => '11',
			'DefIsActive' => '0',
			'DefValue' => 'Marijuana Possession'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 185,
			'DefDatabase' => '1',
			'DefSubset' => 'Citation Charges Pedestrian',
			'DefIsActive' => '0',
			'DefValue' => 'Walking Violation'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 441,
			'DefDatabase' => '1',
			'DefSet' => 'System Settings',
			'DefSubset' => 'tree-1-core-record-singular',
			'DefDescription' => 'Complaint'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 186,
			'DefDatabase' => '1',
			'DefSubset' => 'Citation Charges Pedestrian',
			'DefOrder' => '1',
			'DefIsActive' => '0',
			'DefValue' => 'Disorderly Conduct'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 442,
			'DefDatabase' => '1',
			'DefSet' => 'System Settings',
			'DefSubset' => 'tree-1-core-record-plural',
			'DefDescription' => 'Complaints'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 187,
			'DefDatabase' => '1',
			'DefSubset' => 'Citation Charges Pedestrian',
			'DefOrder' => '2',
			'DefIsActive' => '0',
			'DefValue' => 'Disturbing the Peace'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 188,
			'DefDatabase' => '1',
			'DefSubset' => 'Citation Charges Pedestrian',
			'DefOrder' => '3',
			'DefIsActive' => '0',
			'DefValue' => 'Failure to Obey/Comply'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 444,
			'DefDatabase' => '1',
			'DefSet' => 'System Settings',
			'DefSubset' => 'parent-company',
			'DefDescription' => 'Flex Your Rights'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 189,
			'DefDatabase' => '1',
			'DefSubset' => 'Citation Charges Pedestrian',
			'DefOrder' => '4',
			'DefIsActive' => '0',
			'DefValue' => 'Public Intoxication'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 445,
			'DefDatabase' => '1',
			'DefSet' => 'System Settings',
			'DefSubset' => 'parent-website',
			'DefDescription' => 'http://FlexYourRights.org'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 190,
			'DefDatabase' => '1',
			'DefSubset' => 'Citation Charges Pedestrian',
			'DefOrder' => '6',
			'DefIsActive' => '0',
			'DefValue' => 'Marijuana Possession'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 446,
			'DefDatabase' => '1',
			'DefSet' => 'System Settings',
			'DefSubset' => 'tree-1-example',
			'DefDescription' => '31'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 191,
			'DefDatabase' => '1',
			'DefSubset' => 'Civilian Oversight Models',
			'DefIsActive' => '0',
			'DefValue' => 'Investigative'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 447,
			'DefDatabase' => '1',
			'DefSet' => 'System Settings',
			'DefSubset' => 'login-instruct',
			'DefDescription' => '<p>Here you can finish, review, or update your complaint. Volunteers also login here.</p>'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 192,
			'DefDatabase' => '1',
			'DefSubset' => 'Civilian Oversight Models',
			'DefOrder' => '1',
			'DefIsActive' => '0',
			'DefValue' => 'Review'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 193,
			'DefDatabase' => '1',
			'DefSubset' => 'Civilian Oversight Models',
			'DefOrder' => '2',
			'DefIsActive' => '0',
			'DefValue' => 'Audit'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 194,
			'DefDatabase' => '1',
			'DefSubset' => 'Complaint Status',
			'DefIsActive' => '0',
			'DefValue' => 'Incomplete',
			'DefDescription' => 'Not published. Complainant did not complete the survey.'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 195,
			'DefDatabase' => '1',
			'DefSubset' => 'Complaint Status',
			'DefOrder' => '2',
			'DefIsActive' => '0',
			'DefValue' => 'Hold',
			'DefDescription' => 'Not published. Used to denote complaints which have been reviewed, but need more staff to help determine the next steps.'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 196,
			'DefDatabase' => '1',
			'DefSubset' => 'Complaint Status',
			'DefOrder' => '1',
			'DefIsActive' => '0',
			'DefValue' => 'New',
			'DefDescription' => 'Not published. Complainants completed the survey process, but no staff have reviewed this complaint yet.'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 197,
			'DefDatabase' => '1',
			'DefSubset' => 'Complaint Status',
			'DefOrder' => '3',
			'DefIsActive' => '0',
			'DefValue' => 'Reviewed',
			'DefDescription' => 'Not Published. This complaint has been reviewed by [at least] one staff member, and it is on-track for processing. The next step is likely department research.'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 453,
			'DefDatabase' => '1',
			'DefSet' => 'Style Settings',
			'DefSubset' => 'color-main-text',
			'DefOrder' => '1',
			'DefDescription' => '#333'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 198,
			'DefDatabase' => '1',
			'DefSubset' => 'Complaint Status',
			'DefOrder' => '5',
			'DefIsActive' => '0',
			'DefValue' => 'Pending Attorney',
			'DefDescription' => 'Not published. This Complaint has NOT been submitted to any Investigative Agencies, because it has been determined to be a good prospect for an Attorney.'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 454,
			'DefDatabase' => '1',
			'DefSet' => 'Style Settings',
			'DefSubset' => 'font-main',
			'DefDescription' => 'Roboto,Helvetica,Arial,sans-serif'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 199,
			'DefDatabase' => '1',
			'DefSubset' => 'Complaint Status',
			'DefOrder' => '6',
			'DefIsActive' => '0',
			'DefValue' => 'Attorney\'d',
			'DefDescription' => 'Not published. This complainant has an attorney.'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 455,
			'DefDatabase' => '1',
			'DefSet' => 'Style Settings',
			'DefSubset' => 'color-main-grey',
			'DefOrder' => '10',
			'DefDescription' => '#888'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 200,
			'DefDatabase' => '1',
			'DefSubset' => 'Complaint Status',
			'DefOrder' => '8',
			'DefIsActive' => '0',
			'DefValue' => 'Submitted to Oversight',
			'DefDescription' => 'Published. Either staff filed complaint via email OR user confirms they officially filed complaint.'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 456,
			'DefDatabase' => '1',
			'DefSet' => 'Style Settings',
			'DefSubset' => 'color-main-bg',
			'DefOrder' => '6',
			'DefDescription' => '#FFF'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 201,
			'DefDatabase' => '1',
			'DefSubset' => 'Complaint Status',
			'DefOrder' => '9',
			'DefIsActive' => '0',
			'DefValue' => 'Received by Oversight',
			'DefDescription' => 'Published. Confirmed by Staff or Complainant.'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 457,
			'DefDatabase' => '1',
			'DefSet' => 'Style Settings',
			'DefSubset' => 'color-nav-bg',
			'DefOrder' => '5',
			'DefDescription' => '#000'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 202,
			'DefDatabase' => '1',
			'DefSubset' => 'Complaint Status',
			'DefOrder' => '7',
			'DefIsActive' => '0',
			'DefValue' => 'OK to Submit to Oversight',
			'DefDescription' => 'Not Published. Waiting for user to officially file complaint.'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 458,
			'DefDatabase' => '1',
			'DefSet' => 'Style Settings',
			'DefSubset' => 'color-nav-text',
			'DefOrder' => '4',
			'DefDescription' => '#EDF8FF'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 203,
			'DefDatabase' => '1',
			'DefSubset' => 'Complaint Status',
			'DefOrder' => '10',
			'DefIsActive' => '0',
			'DefValue' => 'Declined To Investigate (Closed)',
			'DefDescription' => 'Published. Department acknowledges complaint, but did not initiate any investigation process.'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 459,
			'DefDatabase' => '1',
			'DefSet' => 'Style Settings',
			'DefSubset' => 'color-info-on',
			'DefOrder' => '15',
			'DefDescription' => '#63C6FF'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 204,
			'DefDatabase' => '1',
			'DefSubset' => 'Complaint Status',
			'DefOrder' => '11',
			'DefIsActive' => '0',
			'DefValue' => 'Investigated (Closed)',
			'DefDescription' => 'Published. Investigative agency completed an investigation into this police complaint. Ideally, the official report can be uploaded alongside the public complaint.'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 460,
			'DefDatabase' => '1',
			'DefSet' => 'Style Settings',
			'DefSubset' => 'color-info-off',
			'DefOrder' => '16',
			'DefDescription' => '#2AABD2'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 205,
			'DefDatabase' => '1',
			'DefSubset' => 'Complaint Status',
			'DefOrder' => '12',
			'DefIsActive' => '0',
			'DefValue' => 'Closed',
			'DefDescription' => 'Not published. Should only be used for Complaint Types: [Fantastical,] Abuse, Spam, Test, Not Sure.'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 461,
			'DefDatabase' => '1',
			'DefSet' => 'Style Settings',
			'DefSubset' => 'color-warn-on',
			'DefOrder' => '17',
			'DefDescription' => '#F0AD4E'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 206,
			'DefDatabase' => '1',
			'DefSubset' => 'Compliment Status',
			'DefIsActive' => '0',
			'DefValue' => 'Incomplete',
			'DefDescription' => 'Not published.'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 462,
			'DefDatabase' => '1',
			'DefSet' => 'Style Settings',
			'DefSubset' => 'color-warn-off',
			'DefOrder' => '18',
			'DefDescription' => '#EB9316'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 207,
			'DefDatabase' => '1',
			'DefSubset' => 'Compliment Status',
			'DefOrder' => '1',
			'DefIsActive' => '0',
			'DefValue' => 'Hold',
			'DefDescription' => 'Not published.'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 463,
			'DefDatabase' => '1',
			'DefSet' => 'Style Settings',
			'DefSubset' => 'color-line-hr',
			'DefOrder' => '19',
			'DefDescription' => '#999'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 208,
			'DefDatabase' => '1',
			'DefSubset' => 'Compliment Status',
			'DefOrder' => '2',
			'DefIsActive' => '0',
			'DefValue' => 'New',
			'DefDescription' => 'Not published.'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 464,
			'DefDatabase' => '1',
			'DefSet' => 'Style Settings',
			'DefSubset' => 'color-field-bg',
			'DefOrder' => '21',
			'DefDescription' => '#FFF'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 209,
			'DefDatabase' => '1',
			'DefSubset' => 'Compliment Status',
			'DefOrder' => '3',
			'DefIsActive' => '0',
			'DefValue' => 'Reviewed',
			'DefDescription' => 'Published.'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 465,
			'DefDatabase' => '1',
			'DefSet' => 'Style CSS',
			'DefSubset' => 'main',
			'DefDescription' => '/* cairo-regular - latin-ext_arabic_latin */
@font-face {
  font-family: \'Cairo\';
  font-style: normal;
  font-weight: 400;
  src: url(\'/openpolice/font/cairo-v6-latin-ext_arabic_latin-regular.eot\'); /* IE9 Compat Modes */
  src: local(\'Cairo\'), local(\'Cairo-Regular\'),
       url(\'/openpolice/font/cairo-v6-latin-ext_arabic_latin-regular.eot?#iefix\') format(\'embedded-opentype\'), /* IE6-IE8 */
       url(\'/openpolice/font/cairo-v6-latin-ext_arabic_latin-regular.woff2\') format(\'woff2\'), /* Super Modern Browsers */
       url(\'/openpolice/font/cairo-v6-latin-ext_arabic_latin-regular.woff\') format(\'woff\'), /* Modern Browsers */
       url(\'/openpolice/font/cairo-v6-latin-ext_arabic_latin-regular.ttf\') format(\'truetype\'), /* Safari, Android, iOS */
       url(\'/openpolice/font/cairo-v6-latin-ext_arabic_latin-regular.svg#Cairo\') format(\'svg\'); /* Legacy iOS */
}

/* cairo-700 - latin-ext_arabic_latin */
@font-face {
  font-family: \'Cairo Bold\';
  font-style: normal;
  font-weight: 700;
  src: url(\'/openpolice/font/cairo-v6-latin-ext_arabic_latin-700.eot\'); /* IE9 Compat Modes */
  src: local(\'Cairo Bold\'), local(\'Cairo-Bold\'),
       url(\'/openpolice/font/cairo-v6-latin-ext_arabic_latin-700.eot?#iefix\') format(\'embedded-opentype\'), /* IE6-IE8 */
       url(\'/openpolice/font/cairo-v6-latin-ext_arabic_latin-700.woff2\') format(\'woff2\'), /* Super Modern Browsers */
       url(\'/openpolice/font/cairo-v6-latin-ext_arabic_latin-700.woff\') format(\'woff\'), /* Modern Browsers */
       url(\'/openpolice/font/cairo-v6-latin-ext_arabic_latin-700.ttf\') format(\'truetype\'), /* Safari, Android, iOS */
       url(\'/openpolice/font/cairo-v6-latin-ext_arabic_latin-700.svg#Cairo\') format(\'svg\'); /* Legacy iOS */
}


input, textarea, select, .nFld input, .nFld textarea, .nFld select, .nFld input.form-control, .nFld input.form-control-lg, .nFld input.form-control.form-control-lg, .nFld textarea.form-control, .nFld textarea.form-control-lg, .nFld textarea.form-control.form-control-lg, .nFld select.form-control, .nFld select.form-control-lg, .nFld select.form-control.form-control-lg { font-family: Georgia, serif; }
input.btn, input.btn.btn-primary, input.btn.btn-secondary, input.btn.btn-primary.btn-xl {
    font-family: \'Cairo\', sans-serif; 
}


b {
    font-family: \'Cairo Bold\', \'Cairo\', sans-serif; 
    font-weight: 700;
}

body, p, div, table tr td, table tr th, input, textarea, select {
	font-family: \'Cairo\', sans-serif;
}
b, h1, h2, h3, h4, h5, h6 {
    font-family: \'Cairo Bold\', \'Cairo\', sans-serif; 
}
a:link, a:visited, a:active, a:hover {
    color: #416CBD;
}

.slCard {
    box-shadow: 0px 1px 4px #CCC;
}

#slLogoImg { height: 38px; margin-top: 0px; }
#slLogoImgSm { height: 32px; margin-top: 4px; }

.btn-primary-simple, .btn-primary, a.btn-primary:link, a.btn-primary:active, a.btn-primary:visited, a.btn-primary:hover,
a.btn-primary.btn-xl:link, a.btn-primary.btn-xl:active, a.btn-primary.btn-xl:visited, a.btn-primary.btn-xl:hover,
a.btn-primary.btn-lg:link, a.btn-primary.btn-lg:active, a.btn-primary.btn-lg:visited, a.btn-primary.btn-lg:hover,
a.btn-primary.btn-sm:link, a.btn-primary.btn-sm:active, a.btn-primary.btn-sm:visited, a.btn-primary.btn-sm:hover,
input[type="submit"].btn-primary, input[type="submit"].btn-primary.btn-xl, input[type="submit"].btn-primary.btn-lg, input[type="submit"].btn-primary.btn-sm, a.btn-primary:not([href]):not([tabindex]) {
    color: #FFF;
    background-image: none;
    background: #2b3493;
    border: 1px #FFF solid;
    text-shadow: none;
    font-family: \'Cairo\', sans-serif;
}
a.btn-primary:hover, a.btn-primary.btn-xl:hover, a.btn-primary.btn-lg:hover, a.btn-primary.btn-sm:hover,
input[type="submit"].btn-primary:hover, input[type="submit"].btn-primary.btn-xl:hover, input[type="submit"].btn-primary.btn-lg:hover, input[type="submit"].btn-primary.btn-sm:hover {
    color: #2b3493;
    background: #FFF;
    border: 1px #2b3493 solid;
}

.btn-info-simple, .btn-info, a.btn-info:link, a.btn-info:active, a.btn-info:visited, a.btn-info:hover,
a.btn-info.btn-xl:link, a.btn-info.btn-xl:active, a.btn-info.btn-xl:visited, a.btn-info.btn-xl:hover,
a.btn-info.btn-lg:link, a.btn-info.btn-lg:active, a.btn-info.btn-lg:visited, a.btn-info.btn-lg:hover,
a.btn-info.btn-sm:link, a.btn-info.btn-sm:active, a.btn-info.btn-sm:visited, a.btn-info.btn-sm:hover,
input[type="submit"].btn-info, input[type="submit"].btn-info.btn-xl, input[type="submit"].btn-info.btn-lg, input[type="submit"].btn-info.btn-sm {
    color: #333;
    background-image: none;
    background: #EDF8FF;
    border: 1px #333 solid;
    text-shadow: none;
    font-family: \'Cairo\', sans-serif;
}
a.btn-info:hover, a.btn-info.btn-xl:hover, a.btn-info.btn-lg:hover, a.btn-info.btn-sm:hover,
input[type="submit"].btn-info:hover, input[type="submit"].btn-info.btn-xl:hover, input[type="submit"].btn-info.btn-lg:hover, input[type="submit"].btn-info.btn-sm:hover {
    color: #EDF8FF;
    background: #333;
    border: 1px #EDF8FF solid;
}

.btn-secondary, a.btn-secondary:link, a.btn-secondary:active, a.btn-secondary:visited, a.btn-secondary:hover,
a.btn-secondary.btn-xl:link, a.btn-secondary.btn-xl:active, a.btn-secondary.btn-xl:visited, a.btn-secondary.btn-xl:hover,
a.btn-secondary.btn-lg:link, a.btn-secondary.btn-lg:active, a.btn-secondary.btn-lg:visited, a.btn-secondary.btn-lg:hover,
a.btn-secondary.btn-sm:link, a.btn-secondary.btn-sm:active, a.btn-secondary.btn-sm:visited, a.btn-secondary.btn-sm:hover,
input[type="submit"].btn-secondary, input[type="submit"].btn-secondary.btn-xl, input[type="submit"].btn-secondary.btn-lg, input[type="submit"].btn-secondary.btn-sm {
    color: #2B3493;
    background-image: none;
    background: #EDF8FF;
    border: 1px #2B3493 solid;
    text-shadow: none;
    font-family: \'Cairo\', sans-serif;
}
a.btn-secondary:hover, a.btn-secondary.btn-xl:hover, a.btn-secondary.btn-lg:hover, a.btn-secondary.btn-sm:hover,
input[type="submit"].btn-secondary:hover, input[type="submit"].btn-secondary.btn-xl:hover, input[type="submit"].btn-secondary.btn-lg:hover, input[type="submit"].btn-secondary.btn-sm:hover {
    color: #EDF8FF;
    background: #2B3493;
    border: 1px #EDF8FF solid;
}

.btn-danger-simple, .btn-danger, a.btn-danger:link, a.btn-danger:active, a.btn-danger:visited, a.btn-danger:hover,
a.btn-danger.btn-xl:link, a.btn-danger.btn-xl:active, a.btn-danger.btn-xl:visited, a.btn-danger.btn-xl:hover,
a.btn-danger.btn-lg:link, a.btn-danger.btn-lg:active, a.btn-danger.btn-lg:visited, a.btn-danger.btn-lg:hover,
a.btn-danger.btn-sm:link, a.btn-danger.btn-sm:active, a.btn-danger.btn-sm:visited, a.btn-danger.btn-sm:hover,
input[type="submit"].btn-danger, input[type="submit"].btn-danger.btn-xl, input[type="submit"].btn-danger.btn-lg, input[type="submit"].btn-danger.btn-sm {
    color: #FFF;
    background-image: none;
    background: #EC2327;
    border: 1px #FFF solid;
    text-shadow: none;
    font-family: \'Cairo\', sans-serif;
}
a.btn-danger:hover, a.btn-danger.btn-xl:hover, a.btn-danger.btn-lg:hover, a.btn-danger.btn-sm:hover,
input[type="submit"].btn-danger:hover, input[type="submit"].btn-danger.btn-xl:hover, input[type="submit"].btn-danger.btn-lg:hover, input[type="submit"].btn-danger.btn-sm:hover {
    color: #EC2327;
    background: #FFF;
    border: 1px #EC2327 solid;
}


input.fingerTxt, input.form-control.fingerTxt, 
textarea.fingerTxt, textarea.form-control.fingerTxt, 
select.fingerTxt, select.form-control.fingerTxt {
    color: #000;
}
label.finger, label.fingerAct, .finger:hover, input.finger:hover+label {
    color: #000;
}
label.fingerAct, label.fingerAct:active, input.fingerAct:active+label, 
label.fingerAct:hover, input.fingerAct:hover+label, label.finger:active, input.finger:active+label {
    color: #2b3493;
}
label.finger, label.fingerAct {
    border: 1px #DDD solid;
}
.finger:hover, input.finger:hover+label,
label.fingerAct, label.fingerAct:active, input.fingerAct:active+label, 
label.fingerAct:hover, input.fingerAct:hover+label, label.finger:active, input.finger:active+label {
    border: 1px #2b3493 solid;
}

.allegation, h1.allegation, h2.allegation, h3.allegation, h4.allegation, 
a.allegation:link, a.allegation:visited, a.allegation:active, a.allegation:hover {
	color: #ec2327;
	font-size: bold;
}

.goldLevel {
	color: #fccb4f;
	font-weight: bold;
	text-shadow: 1px 1px 0px #000;
}

.volunChecklistWrap {
	padding: 20px;
	border: 1px #63c6ff dotted;
	-moz-border-radius: 20px; border-radius: 20px;
	font-size: 16pt;
	line-height: 28px;
}
ol.volunChecklist {
	
}
ol.volunChecklist li {
	position: relative;
	font-size: 16pt;
	line-height: 28px;
	padding-bottom: 25px;
}
ol.volunChecklist li b, .volunChecklistWrap b {
	font-size: 110%;
}
ol.volunChecklist input {
	position: absolute;
	top: 3px;
	left: -40px;
}


table.complaintTbl {
	width: 100%;
}
table.complaintTbl tr th {
	font-weight: bold;
	border-bottom: 1px #63c6ff solid;
}
table.complaintTbl tr th, table.complaintTbl tr td {
	padding: 5px;
	text-align: left;
	vertical-align: top;
}
table.complaintTbl tr td.botBrd {
	border-bottom: 1px #bbe6ff dotted;
}


.oversightWaysBlock {
-moz-border-radius: 10px; border-radius: 10px;
border: 1px #63C6FF solid;
padding: 10px;
}

.navbar, .navbar-inverse { border-bottom: 0px none; }

#footerLinks {
width: 100%;
max-width: 100%;
padding: 50px 15px;
background: #000;
color: #EEE;
}
#footerLinks a:link, #footerLinks a:active, #footerLinks a:visited, #footerLinks a:hover {
color: #FFF;
}
#footerSocialCol { text-align: left; }
@media screen and (max-width: 992px) {
#footerSocialCol { margin-top: 10px; margin-left: -5px; }
}

@media screen and (max-width: 480px) {
#mce-EMAIL { width: 100%; }
}

.deptRgtCol { width: 116px; }
.scoreRowOn, .scoreRowOff { padding: 10px; }
.scoreRowOn { color: #2B3493; }
.scoreRowOff { color: #CCC; }

#dontWorry { margin-top: 25px; }'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 210,
			'DefDatabase' => '1',
			'DefSubset' => 'Compliment Status',
			'DefOrder' => '4',
			'DefIsActive' => '0',
			'DefValue' => 'Submitted to Oversight',
			'DefDescription' => 'Published.'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 466,
			'DefDatabase' => '1',
			'DefSet' => 'Style Settings',
			'DefSubset' => 'color-form-text',
			'DefOrder' => '3',
			'DefDescription' => '#333'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 211,
			'DefDatabase' => '1',
			'DefSubset' => 'Compliment Status',
			'DefOrder' => '5',
			'DefIsActive' => '0',
			'DefValue' => 'Received by Oversight',
			'DefDescription' => 'Published.'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 467,
			'DefDatabase' => '1',
			'DefSet' => 'Tree Settings',
			'DefSubset' => 'tree-1-emojis',
			'DefValue' => 'Flag;Flags',
			'DefDescription' => '<i class="fa fa-flag-o" aria-hidden="true"></i>'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 212,
			'DefDatabase' => '1',
			'DefSubset' => 'Compliment Status',
			'DefOrder' => '6',
			'DefIsActive' => '0',
			'DefValue' => 'Closed'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 468,
			'DefDatabase' => '1',
			'DefSet' => 'Tree Settings',
			'DefSubset' => 'tree-1-emojis',
			'DefOrder' => '1',
			'DefValue' => 'Like;Likes',
			'DefDescription' => '<i class="fa fa-thumbs-o-up" aria-hidden="true"></i>'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 213,
			'DefDatabase' => '1',
			'DefSubset' => 'Contraband Types',
			'DefIsActive' => '0',
			'DefValue' => 'Marijuana'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 214,
			'DefDatabase' => '1',
			'DefSubset' => 'Contraband Types',
			'DefOrder' => '1',
			'DefIsActive' => '0',
			'DefValue' => 'Other Illegal Drugs (i.e. cocaine, MDMA, etc.)'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 215,
			'DefDatabase' => '1',
			'DefSubset' => 'Contraband Types',
			'DefOrder' => '2',
			'DefIsActive' => '0',
			'DefValue' => 'Illegal Gun'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 216,
			'DefDatabase' => '1',
			'DefSubset' => 'Contraband Types',
			'DefOrder' => '3',
			'DefIsActive' => '0',
			'DefValue' => 'Illegal Knife'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 217,
			'DefDatabase' => '1',
			'DefSubset' => 'Contraband Types',
			'DefOrder' => '4',
			'DefIsActive' => '0',
			'DefValue' => 'Stolen Goods'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 473,
			'DefDatabase' => '1',
			'DefSet' => 'Tree Settings',
			'DefSubset' => 'tree-1-footer',
			'DefDescription' => '<br /><style> #topNavSearchBtn { display: none; } </style>'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 218,
			'DefDatabase' => '1',
			'DefSubset' => 'Contraband Types',
			'DefOrder' => '5',
			'DefIsActive' => '0',
			'DefValue' => 'Other'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 219,
			'DefDatabase' => '1',
			'DefSubset' => 'Partner Types',
			'DefIsActive' => '0',
			'DefValue' => 'Attorney'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 220,
			'DefDatabase' => '1',
			'DefSubset' => 'Partner Types',
			'DefOrder' => '1',
			'DefIsActive' => '0',
			'DefValue' => 'Academic'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 221,
			'DefDatabase' => '1',
			'DefSubset' => 'Partner Types',
			'DefOrder' => '2',
			'DefIsActive' => '0',
			'DefValue' => 'Journalist'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 222,
			'DefDatabase' => '1',
			'DefSubset' => 'Partner Types',
			'DefOrder' => '3',
			'DefIsActive' => '0',
			'DefValue' => 'Researcher'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 223,
			'DefDatabase' => '1',
			'DefSubset' => 'Evidence Types',
			'DefOrder' => '1',
			'DefIsActive' => '0',
			'DefValue' => 'Photograph'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 479,
			'DefDatabase' => '1',
			'DefSet' => 'System Settings',
			'DefSubset' => 'log-css-reload',
			'DefDescription' => '1572993906'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 224,
			'DefDatabase' => '1',
			'DefSubset' => 'Evidence Types',
			'DefOrder' => '3',
			'DefIsActive' => '0',
			'DefValue' => 'Sketch/Diagram'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 225,
			'DefDatabase' => '1',
			'DefSubset' => 'Evidence Types',
			'DefOrder' => '2',
			'DefIsActive' => '0',
			'DefValue' => 'Document'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 481,
			'DefDatabase' => '1',
			'DefSet' => 'System Settings',
			'DefSubset' => 'tree-5-upload-types',
			'DefDescription' => 'Evidence Types'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 226,
			'DefDatabase' => '1',
			'DefSubset' => 'Evidence Types',
			'DefIsActive' => '0',
			'DefValue' => 'Video'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 482,
			'DefDatabase' => '1',
			'DefSet' => 'Tree Settings',
			'DefSubset' => 'tree-5-footer',
			'DefDescription' => '<br /><style> #topNavSearchBtn { display: none; } </style>'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 227,
			'DefDatabase' => '1',
			'DefSubset' => 'Force Type',
			'DefIsActive' => '0',
			'DefValue' => 'Grabbing or Control Hold',
			'DefDescription' => 'An officer\'s use of his/her limbs, torso or body weight, to move or restrain a person or to constrict a person\'s movements.'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 483,
			'DefDatabase' => '1',
			'DefSet' => 'Style Settings',
			'DefSubset' => 'color-main-link',
			'DefOrder' => '2',
			'DefDescription' => '#416CBD'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 228,
			'DefDatabase' => '1',
			'DefSubset' => 'Force Type',
			'DefOrder' => '2',
			'DefIsActive' => '0',
			'DefValue' => 'Body Weapons (Punch, Kick, Elbow, etc)',
			'DefDescription' => 'An officer\'s use of his/her limbs in a manner similar to an impact weapon. Body Weapons include Fist (Closed Hand), Slap (Open Hand), Kick (Feet), Knee, Elbow, Head.'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 484,
			'DefDatabase' => '1',
			'DefSet' => 'Style CSS',
			'DefSubset' => 'email',
			'DefDescription' => '.oversightWaysBlock {
-moz-border-radius: 10px; border-radius: 10px;
border: 1px #63C6FF solid;
padding: 10px;
}'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 229,
			'DefDatabase' => '1',
			'DefSubset' => 'Force Type',
			'DefOrder' => '3',
			'DefIsActive' => '0',
			'DefValue' => 'Takedown',
			'DefDescription' => 'An officer\'s use of his/her limbs, torso or body weight to force a person against an immovable object (such as a car or a wall) or to force a person to the ground.'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 230,
			'DefDatabase' => '1',
			'DefSubset' => 'Force Type',
			'DefOrder' => '4',
			'DefIsActive' => '0',
			'DefValue' => 'Baton Strike'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 231,
			'DefDatabase' => '1',
			'DefSubset' => 'Force Type',
			'DefOrder' => '5',
			'DefIsActive' => '0',
			'DefValue' => 'Taser'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 232,
			'DefDatabase' => '1',
			'DefSubset' => 'Force Type',
			'DefOrder' => '6',
			'DefIsActive' => '0',
			'DefValue' => 'Gun',
			'DefDescription' => 'i.e. Firearm'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 233,
			'DefDatabase' => '1',
			'DefSubset' => 'Force Type',
			'DefOrder' => '7',
			'DefIsActive' => '0',
			'DefValue' => 'Mace or Pepper Spray',
			'DefDescription' => 'i.e. Chemical Agent'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 234,
			'DefDatabase' => '1',
			'DefSubset' => 'Force Type',
			'DefOrder' => '8',
			'DefIsActive' => '0',
			'DefValue' => 'K9 (Dog) Bite'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 235,
			'DefDatabase' => '1',
			'DefSubset' => 'Force Type',
			'DefOrder' => '9',
			'DefIsActive' => '0',
			'DefValue' => 'Vehicle'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 236,
			'DefDatabase' => '1',
			'DefSubset' => 'Force Type',
			'DefOrder' => '10',
			'DefIsActive' => '0',
			'DefValue' => 'Other',
			'DefDescription' => 'e.g. Rough Ride, Car Impact, Flashlight Strike, Lifting Up Cuffs...'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 237,
			'DefDatabase' => '1',
			'DefSubset' => 'Force Type - Body Weapons',
			'DefIsActive' => '0',
			'DefValue' => 'Fist (Closed Hand)'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 238,
			'DefDatabase' => '1',
			'DefSubset' => 'Force Type - Body Weapons',
			'DefOrder' => '1',
			'DefIsActive' => '0',
			'DefValue' => 'Slap (Open Hand)'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 239,
			'DefDatabase' => '1',
			'DefSubset' => 'Force Type - Body Weapons',
			'DefOrder' => '2',
			'DefIsActive' => '0',
			'DefValue' => 'Kick (Feet)'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 240,
			'DefDatabase' => '1',
			'DefSubset' => 'Force Type - Body Weapons',
			'DefOrder' => '3',
			'DefIsActive' => '0',
			'DefValue' => 'Knee'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 241,
			'DefDatabase' => '1',
			'DefSubset' => 'Force Type - Body Weapons',
			'DefOrder' => '4',
			'DefIsActive' => '0',
			'DefValue' => 'Elbow'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 497,
			'DefDatabase' => '1',
			'DefSet' => 'System Settings',
			'DefSubset' => 'css-extra-files'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 242,
			'DefDatabase' => '1',
			'DefSubset' => 'Force Type - Body Weapons',
			'DefOrder' => '5',
			'DefIsActive' => '0',
			'DefValue' => 'Head'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 498,
			'DefDatabase' => '1',
			'DefSet' => 'Tree Settings',
			'DefSubset' => 'tree-1-uploads-public',
			'DefDescription' => '1'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 243,
			'DefDatabase' => '1',
			'DefSubset' => 'Force Type - Control Hold',
			'DefIsActive' => '0',
			'DefValue' => 'Hands/Arms'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 499,
			'DefDatabase' => '1',
			'DefSet' => 'Tree Settings',
			'DefSubset' => 'tree-5-uploads-public',
			'DefDescription' => '1'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 244,
			'DefDatabase' => '1',
			'DefSubset' => 'Force Type - Control Hold',
			'DefOrder' => '1',
			'DefIsActive' => '0',
			'DefValue' => 'Body Weight'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 500,
			'DefDatabase' => '1',
			'DefSet' => 'System Settings',
			'DefSubset' => 'spinner-code',
			'DefDescription' => '<img src="/openpolice/logo-ico-loading-anim.gif" border=0 class="round10 mT20 mB20" style="width: 75px;" >'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 245,
			'DefDatabase' => '1',
			'DefSubset' => 'Force Type - Control Hold',
			'DefOrder' => '2',
			'DefIsActive' => '0',
			'DefValue' => 'Knees'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 246,
			'DefDatabase' => '1',
			'DefSubset' => 'Force Type - Control Hold',
			'DefOrder' => '3',
			'DefIsActive' => '0',
			'DefValue' => 'Feet/Legs'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 247,
			'DefDatabase' => '1',
			'DefSubset' => 'Force Type - Takedown',
			'DefIsActive' => '0',
			'DefValue' => 'Hands'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 248,
			'DefDatabase' => '1',
			'DefSubset' => 'Force Type - Takedown',
			'DefOrder' => '1',
			'DefIsActive' => '0',
			'DefValue' => 'Tackle'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 249,
			'DefDatabase' => '1',
			'DefSubset' => 'Force Type - Takedown',
			'DefOrder' => '2',
			'DefIsActive' => '0',
			'DefValue' => 'Leg Sweep'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 250,
			'DefDatabase' => '1',
			'DefSubset' => 'Gun Ammo Types',
			'DefIsActive' => '0',
			'DefValue' => 'Lethal Ammo'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 251,
			'DefDatabase' => '1',
			'DefSubset' => 'Gun Ammo Types',
			'DefOrder' => '1',
			'DefIsActive' => '0',
			'DefValue' => 'Less-Lethal Ammo (e.g. rubber bullets, bean bag rounds)'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 252,
			'DefDatabase' => '1',
			'DefSubset' => 'Incident Event Types',
			'DefIsActive' => '0',
			'DefValue' => 'Stop'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 253,
			'DefDatabase' => '1',
			'DefSubset' => 'Incident Event Types',
			'DefOrder' => '1',
			'DefIsActive' => '0',
			'DefValue' => 'Search'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 254,
			'DefDatabase' => '1',
			'DefSubset' => 'Incident Event Types',
			'DefOrder' => '2',
			'DefIsActive' => '0',
			'DefValue' => 'Force'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 255,
			'DefDatabase' => '1',
			'DefSubset' => 'Incident Event Types',
			'DefOrder' => '3',
			'DefIsActive' => '0',
			'DefValue' => 'Arrest'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 448,
			'DefDatabase' => '1',
			'DefSet' => 'Blurbs',
			'DefSubset' => 'Volunteer Checklist',
			'DefDescription' => '<br>'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 449,
			'DefDatabase' => '1',
			'DefSet' => 'Blurbs',
			'DefSubset' => 'Phone Script: Department',
			'DefDescription' => 'Hi, my name is [Your First Name], and I\'m doing some research for an online directory of police department information. Do you mind if I ask you some quick questions? This will just take about two minutes.<br /><br />
<span class="gry9"><i>Note: If they ask what this is for, you can say something like:</i></span>
<div class="pL10 pB20 gry6">I\'m volunteering with a non-profit group called OpenPolice.org. They provide information about how people can submit police complaints. We\'re making these calls for all 18,000 police departments in the United States, so I really appreciate your help!</div>
<ul>
<li class="pB20"><span class="gry9"><i>If needed:</i></span> What\'s the main address for your department?</li>
<li class="pB20"><span class="gry9"><i>If needed:</i></span> Do you have a website and email address? Are you on Facebook?</li>
<li class="pB20"><span class="gry9"><i>If needed:</i></span> How many people work in your department?</li>
<li class="pB20"><span class="gry9"><i>If needed:</i></span> Do you know how many people live in your department\'s jurisdiction?</li>
<li class="pB20">What\'s the phone number for your internal affairs office?</li>
</ul>
I really appreciate your time. Thanks so much for your help!'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 450,
			'DefDatabase' => '1',
			'DefSet' => 'Blurbs',
			'DefSubset' => 'Phone Script: Internal Affairs',
			'DefDescription' => '<p>Hi, my name is [Your First Name], and I\'m doing some research for an online directory of internal affairs departments. Do you mind if I ask you some quick questions? This will just take about five minutes.</p>
<p class="slGrey"><i>Note: If they ask what this is for, you can say something like:</i></p>
<p class="pL10 pB20 slGrey">I\'m volunteering with a non-profit group called OpenPolice.org. They provide information about how people can submit police complaints. We\'re making these calls for all 18,000 police departments in the United States, so I really appreciate your help!</p>
<table class="table" border=0 >
	<tr><td class="slGrey"><nobr><input name="phoneIA[]" id="phoneIA1" class="mR10" type="checkbox"> 1)</nobr></td>
	<td class="w100"><label for="phoneIA1">
		What\'s the mailing address for the internal affairs office?
	</label></td></tr>
	<tr><td class="slGrey"><nobr><input name="phoneIA[]" id="phoneIA2" class="mR10" type="checkbox"> 2)</nobr></td>
	<td class="w100"><label for="phoneIA2">
		What\'s the best direct email address to reach your office?
	</label></td></tr>
</table>
<div class="mB20">
	I have some questions about how people can submit complaints about an officer.
</div>
<table class="table" border=0 >
	<tr><td class="slGrey"><nobr><input name="phoneIA[]" id="phoneIA3" class="mR10" type="checkbox"> 3)</nobr></td>
	<td class="w100"><label for="phoneIA3">
		Does the department require complaints to be submitted on an official form <u>in order to be investigated</u>?
	</label></td></tr>
	<tr><td class="slGrey"><nobr><input name="phoneIA[]" id="phoneIA4" class="mR10" type="checkbox"> 4)</nobr></td>
	<td class="w100"><label for="phoneIA4">
		<span class="slGrey"><i>If you didn\'t find it yet:</i></span> Is a copy of the complaint form available on your website?
	</label></td></tr>
	<tr><td class="slGrey"><nobr><input name="phoneIA[]" id="phoneIA5" class="mR10" type="checkbox"> 5)</nobr></td>
	<td class="w100"><label for="phoneIA5">
		Do people have to submit complaints in person? Or can they also be mailed in?
	</label></td></tr>
</table>
<p class="mB10 slGrey"><i>If an official form is required, <nobr>skip to #8:</nobr></i></p>
<table class="table" border=0 >
	<tr><td class="slGrey"><nobr><input name="phoneIA[]" id="phoneIA6" class="mR10" type="checkbox"> 6)</nobr></td>
	<td class="w100"><label for="phoneIA6">
		Can people provide a verbal complaint over the phone?
	</label></td></tr>
	<tr><td class="slGrey"><nobr><input name="phoneIA[]" id="phoneIA7" class="mR10" type="checkbox"> 7)</nobr></td>
	<td class="w100"><label for="phoneIA7">
		Is there any way to submit a complaint via email or online?
	</label></td></tr>
	<tr><td class="slGrey"><nobr><input name="phoneIA[]" id="phoneIA8" class="mR10" type="checkbox"> 8)</nobr></td>
	<td class="w100"><label for="phoneIA8">
		How many days after an incident can a civilian submit a complaint for it to be investigated?
	</label></td></tr>
</table>
<p>I really appreciate your time. Thanks so much for your help!</p>'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 419,
			'DefDatabase' => '1',
			'DefSubset' => 'Commendation Type',
			'DefValue' => 'Valor',
			'DefDescription' => 'The officer showed extraordinary courage in the face of danger.'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 420,
			'DefDatabase' => '1',
			'DefSubset' => 'Commendation Type',
			'DefOrder' => '1',
			'DefValue' => 'Lifesaving',
			'DefDescription' => 'The officer applied medical aid exceeding the normal call of duty.'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 421,
			'DefDatabase' => '1',
			'DefSubset' => 'Commendation Type',
			'DefOrder' => '2',
			'DefValue' => 'De-escalation',
			'DefDescription' => 'The officer skillfully calmed down a tense situation, using minimal or no force.'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 422,
			'DefDatabase' => '1',
			'DefSubset' => 'Commendation Type',
			'DefOrder' => '3',
			'DefValue' => 'Professionalism',
			'DefDescription' => 'The officer behaved in a courteous, respectful, and straightforward manner.'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 423,
			'DefDatabase' => '1',
			'DefSubset' => 'Commendation Type',
			'DefOrder' => '4',
			'DefValue' => 'Fairness',
			'DefDescription' => 'The officerï¿½s use of power was reasonable, appropriate, and free from bias.'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 424,
			'DefDatabase' => '1',
			'DefSubset' => 'Commendation Type',
			'DefOrder' => '5',
			'DefValue' => 'Constitutional Policing',
			'DefDescription' => 'The officerï¿½s words and actions showed respect for the Bill of Rights.'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 425,
			'DefDatabase' => '1',
			'DefSubset' => 'Commendation Type',
			'DefOrder' => '6',
			'DefValue' => 'Compassion',
			'DefDescription' => 'The officer displayed empathy and generosity beyond the call of duty.'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 426,
			'DefDatabase' => '1',
			'DefSubset' => 'Commendation Type',
			'DefOrder' => '7',
			'DefValue' => 'Community Service',
			'DefDescription' => 'The officer engaged the community to build bonds of trust.'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 427,
			'DefDatabase' => '1',
			'DefSubset' => 'Department Types',
			'DefOrder' => '5',
			'DefValue' => 'Private Security Company'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 428,
			'DefDatabase' => '1',
			'DefSubset' => 'How Did You Hear',
			'DefValue' => 'Flex Your Rights'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 429,
			'DefDatabase' => '1',
			'DefSubset' => 'How Did You Hear',
			'DefOrder' => '5',
			'DefValue' => 'A Friend'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 430,
			'DefDatabase' => '1',
			'DefSubset' => 'How Did You Hear',
			'DefOrder' => '7',
			'DefValue' => 'Facebook'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 431,
			'DefDatabase' => '1',
			'DefSubset' => 'How Did You Hear',
			'DefOrder' => '8',
			'DefValue' => 'Twitter'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 432,
			'DefDatabase' => '1',
			'DefSubset' => 'How Did You Hear',
			'DefOrder' => '6',
			'DefValue' => 'News / Media Coverage'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 433,
			'DefDatabase' => '1',
			'DefSubset' => 'How Did You Hear',
			'DefOrder' => '9',
			'DefValue' => 'A Police Department'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 434,
			'DefDatabase' => '1',
			'DefSubset' => 'How Did You Hear',
			'DefOrder' => '10',
			'DefValue' => 'A Police Investigative Agency'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 435,
			'DefDatabase' => '1',
			'DefSubset' => 'Age Ranges Officers',
			'DefValue' => 'Under 25'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 436,
			'DefDatabase' => '1',
			'DefSubset' => 'Age Ranges Officers',
			'DefOrder' => '1',
			'DefValue' => '25-34'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 437,
			'DefDatabase' => '1',
			'DefSubset' => 'Age Ranges Officers',
			'DefOrder' => '2',
			'DefValue' => '35-44'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 438,
			'DefDatabase' => '1',
			'DefSubset' => 'Age Ranges Officers',
			'DefOrder' => '3',
			'DefValue' => '45-54'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 439,
			'DefDatabase' => '1',
			'DefSubset' => 'Age Ranges Officers',
			'DefOrder' => '4',
			'DefValue' => '55-64'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 440,
			'DefDatabase' => '1',
			'DefSubset' => 'Age Ranges Officers',
			'DefOrder' => '5',
			'DefValue' => 'Over 64'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 443,
			'DefDatabase' => '1',
			'DefSubset' => 'Force Type',
			'DefOrder' => '1',
			'DefValue' => 'Pushing'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 452,
			'DefDatabase' => '1',
			'DefSet' => 'Blurbs',
			'DefSubset' => 'Terms & Conditions',
			'DefDescription' => '...<br>'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 469,
			'DefDatabase' => '1',
			'DefSubset' => 'Races',
			'DefOrder' => '3',
			'DefValue' => 'Middle Eastern'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 470,
			'DefDatabase' => '1',
			'DefSubset' => 'Body Types',
			'DefOrder' => '4',
			'DefValue' => 'Not sure'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 471,
			'DefDatabase' => '1',
			'DefSubset' => 'Injury Types',
			'DefOrder' => '20',
			'DefValue' => 'Other'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 474,
			'DefDatabase' => '1',
			'DefSubset' => 'Contact Reasons',
			'DefValue' => 'General Feedback'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 475,
			'DefDatabase' => '1',
			'DefSubset' => 'Contact Reasons',
			'DefOrder' => '1',
			'DefValue' => 'Website Problems'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 476,
			'DefDatabase' => '1',
			'DefSubset' => 'Contact Reasons',
			'DefOrder' => '2',
			'DefValue' => 'Networking Opportunities'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 477,
			'DefDatabase' => '1',
			'DefSet' => 'Blurbs',
			'DefSubset' => 'Footer',
			'DefIsActive' => '3',
			'DefDescription' => '<style>
#hidivBtnSearchOpts, #hidivSearchOpts { display: none; }
</style>
<div id="footerLinks" style="text-align: center;"><div class="container"><div class="row">
    <div class="col-md-4 taL">
      <a href="/" class="slBlueDark"><img src="/openpolice/uploads/Flex_OpenPolice.org-sm.jpg" border=0 style="width: 100%; max-width: 320px; margin-left: -5px;"></a>
            <table border=0 class="w100 mT10" ><tr><td class="taC" style="width: 70px;">
<a href="https://FlexYourRights.org" target="_blank"><img src="/openpolice/uploads/flex-arm-white-sm.png" border=0 style="height: 50px; margin: 5px 10px 0px 0px;"></a>
</td><td class="taL vaT">
<div class="slGrey mT10 mBn5">a project of</div>
<a href="https://FlexYourRights.org" target="_blank"><a href="https://FlexYourRights.org" class="slBlueDark" style="font-size: 26px;" target="_blank">Flex Your Rights</a></td></tr></table>
<br><br>
    </div>
    <div class="col-md-3 taL">
      <a href="/">Home</a><br>
<!--      <a href="/search">Search Complaints</a><br> -->
      <a href="/about">About Us</a><br>
      <a href="/frequently-asked-questions">FAQs</a><br>
      <a href="/department-accessibility">Department Scores</a><br>
    </div>
    <div class="col-md-3 taL">
      <a href="/contact">Contact Us</a><br>
      <a href="/donate" target="_blank">Donate</a><br>
      <a href="/privacy-policy">Terms, Policies, & Rules</a><br>
      <a href="/site-map">Site Map</a><br>
<br><br>
    </div>
    <div class="col-md-2" id="footerSocialCol">
        <div class="footerSocial" style="margin: -5px 0px 0px 0px;">
          <a href="https://www.facebook.com/FlexYourRights/" target="_blank"><img src="/survloop/uploads/facebook-logo.png" border="0"></a>
          <a href="https://twitter.com/opencomplaints" target="_blank"><img src="/survloop/uploads/twitter-logo.png" border="0"></a>
        </div>
	<a href="https://github.com/flexyourrights/openpolice" target="_blank"><div class="disBlo mR5 mL5 mBn10" style="font-size: 42px;"><i class="fa fa-github" aria-hidden="true"></i></div>View our code on GitHub</a>
      <div><a href="http://creativecommons.org/licenses/by-sa/3.0/" target="_blank"><span class="slGrey fPerc80"><nobr>Creative Commons</nobr> <nobr><i class="fa fa-creative-commons mR3" aria-hidden="true"></i> 2015-2019</nobr>
</span></a></div>
    </div>
</div></div></div>'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 478,
			'DefDatabase' => '1',
			'DefSet' => 'Blurbs',
			'DefSubset' => 'Newsletter Sign Up',
			'DefIsActive' => '3',
			'DefDescription' => '<form action="https://flexyourrights.us5.list-manage.com/subscribe/post?u=6b424f1b6d7c45a5906cd7579&id=31f97a79b7" method="post" id="mc-embedded-subscribe-form" name="mc-embedded-subscribe-form" target="_blank"> 
    <div style="position: absolute; left: -5000px;" aria-hidden="true">
      <input name="b_6b424f1b6d7c45a5906cd7579_31f97a79b7" tabindex="-1" value="" type="text">
    </div>
    <p><input name="EMAIL" class="form-control required email" id="mce-EMAIL" placeholder="Your email address" type="email" style="width: 200px;"></p>
    <p><input value="Sign me up!" name="subscribe" id="mc-embedded-subscribe" class="btn btn-primary btn-lg" type="submit"></p>
</form>'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 480,
			'DefDatabase' => '1',
			'DefSubset' => 'Allegation Type',
			'DefOrder' => '11',
			'DefValue' => 'Sexual Harassment',
			'DefDescription' => 'This includes the use of unwanted sexual advances or obscene remarks.'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 485,
			'DefDatabase' => '1',
			'DefSet' => 'Menu Settings',
			'DefSubset' => 'main-navigation',
			'DefValue' => 'My Profile',
			'DefDescription' => '/my-profile'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 487,
			'DefDatabase' => '1',
			'DefSet' => 'Menu Settings',
			'DefSubset' => 'main-navigation',
			'DefOrder' => '2',
			'DefValue' => 'Dept. Scores',
			'DefDescription' => '/department-accessibility'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 488,
			'DefDatabase' => '1',
			'DefSet' => 'Menu Settings',
			'DefSubset' => 'main-navigation',
			'DefOrder' => '3',
			'DefValue' => 'FAQs',
			'DefDescription' => '/frequently-asked-questions'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 489,
			'DefDatabase' => '1',
			'DefSet' => 'Menu Settings',
			'DefSubset' => 'main-navigation',
			'DefOrder' => '4',
			'DefValue' => 'Logout',
			'DefDescription' => '/logout'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 490,
			'DefDatabase' => '1',
			'DefSet' => 'Menu Settings',
			'DefSubset' => 'main-navigation',
			'DefOrder' => '5'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 491,
			'DefDatabase' => '1',
			'DefSet' => 'Menu Settings',
			'DefSubset' => 'main-navigation',
			'DefOrder' => '6'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 492,
			'DefDatabase' => '1',
			'DefSubset' => 'Scene Type',
			'DefOrder' => '7',
			'DefValue' => 'Police Station'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 493,
			'DefDatabase' => '1',
			'DefSubset' => 'Scene Type',
			'DefOrder' => '8',
			'DefValue' => 'Telephone Call'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 494,
			'DefDatabase' => '1',
			'DefSubset' => 'Scene Type',
			'DefOrder' => '9',
			'DefValue' => 'Other'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 495,
			'DefDatabase' => '1',
			'DefSubset' => 'Scene Type',
			'DefOrder' => '2',
			'DefValue' => 'College Dorm'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 496,
			'DefDatabase' => '1',
			'DefSubset' => 'Allegation Type',
			'DefOrder' => '6',
			'DefValue' => 'Wrongful Property Damage',
			'DefDescription' => 'Property damage which violated the protections provided by the 4th Amendment of the United States Constitution.'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 501,
			'DefDatabase' => '1',
			'DefSet' => 'System Settings',
			'DefSubset' => 'cust-package',
			'DefDescription' => 'flexyourrights/openpolice'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 502,
			'DefDatabase' => '1',
			'DefSet' => 'System Settings',
			'DefSubset' => 'twitter',
			'DefDescription' => '@OpenPoliceApp'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 503,
			'DefDatabase' => '1',
			'DefSet' => 'System Settings',
			'DefSubset' => 'header-code',
			'DefDescription' => '<!--- --->'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 504,
			'DefDatabase' => '1',
			'DefSet' => 'System Checks',
			'DefSubset' => 'system-updates',
			'DefDescription' => '2018-03-27;;OPC-2018-02-08'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 505,
			'DefDatabase' => '1',
			'DefSet' => 'System Settings',
			'DefSubset' => 'has-volunteers',
			'DefDescription' => '1'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 506,
			'DefDatabase' => '1',
			'DefSubset' => 'Department Status',
			'DefValue' => 'Active Department'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 507,
			'DefDatabase' => '1',
			'DefSubset' => 'Department Status',
			'DefOrder' => '1',
			'DefValue' => 'Inactive Department'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 508,
			'DefDatabase' => '1',
			'DefSet' => 'Style Settings',
			'DefSubset' => 'color-main-faintr',
			'DefDescription' => '#FCFEFF'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 509,
			'DefDatabase' => '1',
			'DefSet' => 'System Settings',
			'DefSubset' => 'has-partners',
			'DefDescription' => '1'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 511,
			'DefDatabase' => '1',
			'DefSet' => 'User Roles',
			'DefSubset' => 'partner',
			'DefOrder' => '3',
			'DefValue' => 'Partner Member',
			'DefDescription' => 'Basic permission to pages and tools just for partners'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 512,
			'DefDatabase' => '1',
			'DefSet' => 'System Settings',
			'DefSubset' => 'has-canada',
			'DefDescription' => '0'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 516,
			'DefDatabase' => '1',
			'DefSubset' => 'Partner Types',
			'DefOrder' => '4',
			'DefValue' => 'Police Department'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 517,
			'DefDatabase' => '1',
			'DefSubset' => 'Partner Types',
			'DefOrder' => '5',
			'DefValue' => 'Investigative Agency'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 518,
			'DefDatabase' => '1',
			'DefSubset' => 'Attorney Complaint Filters',
			'DefValue' => 'Other Witnesses'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 519,
			'DefDatabase' => '1',
			'DefSubset' => 'Attorney Complaint Filters',
			'DefOrder' => '1',
			'DefValue' => 'Unresolved Charges'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 520,
			'DefDatabase' => '1',
			'DefSubset' => 'Attorney Complaint Filters',
			'DefOrder' => '2',
			'DefValue' => 'Arrested'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 521,
			'DefDatabase' => '1',
			'DefSubset' => 'Attorney Complaint Filters',
			'DefOrder' => '3',
			'DefValue' => 'Use of Force'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 522,
			'DefDatabase' => '1',
			'DefSubset' => 'Attorney Complaint Filters',
			'DefOrder' => '4',
			'DefValue' => 'Injury'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 523,
			'DefDatabase' => '1',
			'DefSubset' => 'Attorney Complaint Filters',
			'DefOrder' => '5',
			'DefValue' => 'Fatality'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 524,
			'DefDatabase' => '1',
			'DefSubset' => 'Attorney Complaint Filters',
			'DefOrder' => '6',
			'DefValue' => 'Has Evidence'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 525,
			'DefDatabase' => '1',
			'DefSubset' => 'Attorney Complaint Filters',
			'DefOrder' => '7',
			'DefValue' => 'Video of Incident'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 526,
			'DefDatabase' => '1',
			'DefSubset' => 'Attorney Complaint Filters',
			'DefOrder' => '8',
			'DefValue' => 'Allegation: Unreasonable Force'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 527,
			'DefDatabase' => '1',
			'DefSubset' => 'Attorney Complaint Filters',
			'DefOrder' => '9',
			'DefValue' => 'Allegation: Wrongful Arrest'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 528,
			'DefDatabase' => '1',
			'DefSubset' => 'Attorney Complaint Filters',
			'DefOrder' => '10',
			'DefValue' => 'Allegation: Wrongful Detention'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 529,
			'DefDatabase' => '1',
			'DefSubset' => 'Attorney Complaint Filters',
			'DefOrder' => '11',
			'DefValue' => 'Allegation: Wrongful Entry'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 530,
			'DefDatabase' => '1',
			'DefSubset' => 'Attorney Complaint Filters',
			'DefOrder' => '12',
			'DefValue' => 'Allegation: Wrongful Search'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 531,
			'DefDatabase' => '1',
			'DefSubset' => 'Attorney Complaint Filters',
			'DefOrder' => '14',
			'DefValue' => 'Allegation: Wrongful Property Seizure'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 532,
			'DefDatabase' => '1',
			'DefSubset' => 'Attorney Complaint Filters',
			'DefOrder' => '15',
			'DefValue' => 'Allegation: Bias-Based Policing'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 533,
			'DefDatabase' => '1',
			'DefSubset' => 'Attorney Complaint Filters',
			'DefOrder' => '16',
			'DefValue' => 'Allegation: Excessive Arrest Charges'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 534,
			'DefDatabase' => '1',
			'DefSubset' => 'Attorney Complaint Filters',
			'DefOrder' => '17',
			'DefValue' => 'Allegation: Excessive Citation'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 535,
			'DefDatabase' => '1',
			'DefSubset' => 'Attorney Complaint Filters',
			'DefOrder' => '18',
			'DefValue' => 'Allegation: Intimidating Display Of Weapon'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 536,
			'DefDatabase' => '1',
			'DefSubset' => 'Attorney Complaint Filters',
			'DefOrder' => '19',
			'DefValue' => 'Allegation: Sexual Harassment'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 537,
			'DefDatabase' => '1',
			'DefSubset' => 'Attorney Complaint Filters',
			'DefOrder' => '20',
			'DefValue' => 'Allegation: Sexual Assault'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 538,
			'DefDatabase' => '1',
			'DefSubset' => 'Attorney Complaint Filters',
			'DefOrder' => '21',
			'DefValue' => 'Allegation: Policy or Procedure Violation'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 539,
			'DefDatabase' => '1',
			'DefSubset' => 'Attorney Complaint Filters',
			'DefOrder' => '22',
			'DefValue' => 'Allegation: Conduct Unbecoming an Officer'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 540,
			'DefDatabase' => '1',
			'DefSubset' => 'Attorney Complaint Filters',
			'DefOrder' => '23',
			'DefValue' => 'Allegation: Discourtesy'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 541,
			'DefDatabase' => '1',
			'DefSubset' => 'Attorney Complaint Filters',
			'DefOrder' => '24',
			'DefValue' => 'Allegation: Officer Refused To Provide ID'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 542,
			'DefDatabase' => '1',
			'DefSubset' => 'Attorney Complaint Filters',
			'DefOrder' => '25',
			'DefValue' => 'Allegation: Miranda Rights'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 543,
			'DefDatabase' => '1',
			'DefSubset' => 'Attorney Complaint Filters',
			'DefOrder' => '26',
			'DefValue' => 'Allegation: Neglect of Duty'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 544,
			'DefDatabase' => '1',
			'DefSubset' => 'Attorney Complaint Filters',
			'DefOrder' => '13',
			'DefValue' => 'Allegation: Wrongful Property Damage'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 545,
			'DefDatabase' => '1',
			'DefSubset' => 'Attorney Complaint Filters',
			'DefOrder' => '27',
			'DefValue' => 'Gender: Male'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 546,
			'DefDatabase' => '1',
			'DefSubset' => 'Attorney Complaint Filters',
			'DefOrder' => '28',
			'DefValue' => 'Gender: Female'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 547,
			'DefDatabase' => '1',
			'DefSubset' => 'Attorney Complaint Filters',
			'DefOrder' => '29',
			'DefValue' => 'Gender: Trans & Other'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 548,
			'DefDatabase' => '1',
			'DefSubset' => 'Attorney Complaint Filters',
			'DefOrder' => '30',
			'DefValue' => 'Race: Asian'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 549,
			'DefDatabase' => '1',
			'DefSubset' => 'Attorney Complaint Filters',
			'DefOrder' => '31',
			'DefValue' => 'Race: Black/African/Caribbean'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 550,
			'DefDatabase' => '1',
			'DefSubset' => 'Attorney Complaint Filters',
			'DefOrder' => '32',
			'DefValue' => 'Race: Hispanic/Latinx'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 551,
			'DefDatabase' => '1',
			'DefSubset' => 'Attorney Complaint Filters',
			'DefOrder' => '33',
			'DefValue' => 'Race: Middle Eastern'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 552,
			'DefDatabase' => '1',
			'DefSubset' => 'Attorney Complaint Filters',
			'DefOrder' => '34',
			'DefValue' => 'Race: Native American'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 553,
			'DefDatabase' => '1',
			'DefSubset' => 'Attorney Complaint Filters',
			'DefOrder' => '35',
			'DefValue' => 'Race: Pacific Islander'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 554,
			'DefDatabase' => '1',
			'DefSubset' => 'Attorney Complaint Filters',
			'DefOrder' => '36',
			'DefValue' => 'Race: White/Caucasian'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 555,
			'DefDatabase' => '1',
			'DefSubset' => 'Attorney Complaint Filters',
			'DefOrder' => '37',
			'DefValue' => 'Race: Other'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 556,
			'DefDatabase' => '1',
			'DefSubset' => 'Attorney Referral Alerts',
			'DefValue' => 'Never email, log in to review matches'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 557,
			'DefDatabase' => '1',
			'DefSubset' => 'Attorney Referral Alerts',
			'DefOrder' => '1',
			'DefValue' => 'Email each referral match immediately'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 558,
			'DefDatabase' => '1',
			'DefSubset' => 'Attorney Referral Alerts',
			'DefOrder' => '2',
			'DefValue' => 'Email daily list of matches, if any'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 559,
			'DefDatabase' => '1',
			'DefSubset' => 'Attorney Referral Alerts',
			'DefOrder' => '3',
			'DefValue' => 'Email matches, if any, every three days'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 560,
			'DefDatabase' => '1',
			'DefSubset' => 'Attorney Referral Alerts',
			'DefOrder' => '4',
			'DefValue' => 'Email matches, if any, every week'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 561,
			'DefDatabase' => '1',
			'DefSet' => 'Menu Settings',
			'DefSubset' => 'main-navigation',
			'DefOrder' => '1',
			'DefValue' => 'Dashboard',
			'DefDescription' => '/dashboard'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 562,
			'DefDatabase' => '1',
			'DefSet' => 'Menu Settings',
			'DefSubset' => 'main-navigation',
			'DefOrder' => '7'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 563,
			'DefDatabase' => '1',
			'DefSet' => 'Menu Settings',
			'DefSubset' => 'main-navigation',
			'DefOrder' => '8'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 564,
			'DefDatabase' => '1',
			'DefSet' => 'Menu Settings',
			'DefSubset' => 'main-navigation',
			'DefOrder' => '9'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 565,
			'DefDatabase' => '1',
			'DefSet' => 'Menu Settings',
			'DefSubset' => 'main-navigation',
			'DefOrder' => '10'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 566,
			'DefDatabase' => '1',
			'DefSet' => 'Menu Settings',
			'DefSubset' => 'main-navigation',
			'DefOrder' => '11'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 567,
			'DefDatabase' => '1',
			'DefSet' => 'Menu Settings',
			'DefSubset' => 'main-navigation',
			'DefOrder' => '12'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 568,
			'DefDatabase' => '1',
			'DefSet' => 'Menu Settings',
			'DefSubset' => 'main-navigation',
			'DefOrder' => '13'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 569,
			'DefDatabase' => '1',
			'DefSet' => 'Menu Settings',
			'DefSubset' => 'main-navigation',
			'DefOrder' => '14'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 570,
			'DefDatabase' => '1',
			'DefSet' => 'Menu Settings',
			'DefSubset' => 'main-navigation',
			'DefOrder' => '15'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 571,
			'DefDatabase' => '1',
			'DefSet' => 'Menu Settings',
			'DefSubset' => 'main-navigation',
			'DefOrder' => '16'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 572,
			'DefDatabase' => '1',
			'DefSet' => 'Menu Settings',
			'DefSubset' => 'main-navigation',
			'DefOrder' => '17'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 573,
			'DefDatabase' => '1',
			'DefSet' => 'Menu Settings',
			'DefSubset' => 'main-navigation',
			'DefOrder' => '18'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 574,
			'DefDatabase' => '1',
			'DefSet' => 'Menu Settings',
			'DefSubset' => 'main-navigation',
			'DefOrder' => '19'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 575,
			'DefDatabase' => '1',
			'DefSet' => 'Menu Settings',
			'DefSubset' => 'main-navigation',
			'DefOrder' => '20'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 576,
			'DefDatabase' => '1',
			'DefSet' => 'Menu Settings',
			'DefSubset' => 'main-navigation',
			'DefOrder' => '21'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 577,
			'DefDatabase' => '1',
			'DefSet' => 'Menu Settings',
			'DefSubset' => 'main-navigation',
			'DefOrder' => '22'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 578,
			'DefDatabase' => '1',
			'DefSet' => 'Menu Settings',
			'DefSubset' => 'main-navigation',
			'DefOrder' => '23'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 579,
			'DefDatabase' => '1',
			'DefSet' => 'Menu Settings',
			'DefSubset' => 'main-navigation',
			'DefOrder' => '24'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 582,
			'DefDatabase' => '1',
			'DefSubset' => 'Civilian Weapons',
			'DefValue' => 'No weapon'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 583,
			'DefDatabase' => '1',
			'DefSubset' => 'Civilian Weapons',
			'DefOrder' => '4',
			'DefValue' => 'Not sure'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 584,
			'DefDatabase' => '1',
			'DefSubset' => 'Partner Types',
			'DefOrder' => '6',
			'DefValue' => 'Organization'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 585,
			'DefDatabase' => '1',
			'DefSubset' => 'Organization Capabilities',
			'DefOrder' => '2',
			'DefValue' => 'Services or Support for Police Brutality Victims'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 586,
			'DefDatabase' => '1',
			'DefSubset' => 'Organization Capabilities',
			'DefOrder' => '8',
			'DefValue' => 'Political or Legislative Action'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 587,
			'DefDatabase' => '1',
			'DefSubset' => 'Organization Capabilities',
			'DefOrder' => '3',
			'DefValue' => 'Education About Police or Corrections'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 588,
			'DefDatabase' => '1',
			'DefSubset' => 'Organization Capabilities',
			'DefValue' => 'Assist Complainants Using OpenPolice.org'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 589,
			'DefDatabase' => '1',
			'DefSubset' => 'Organization Capabilities',
			'DefOrder' => '6',
			'DefValue' => 'Legal Assistance for Criminal Cases'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 590,
			'DefDatabase' => '1',
			'DefSubset' => 'Organization Capabilities',
			'DefOrder' => '7',
			'DefValue' => 'Legal Representation for Criminal Cases'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 592,
			'DefDatabase' => '1',
			'DefSubset' => 'Transportation',
			'DefOrder' => '1',
			'DefValue' => 'Truck'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 593,
			'DefDatabase' => '1',
			'DefSubset' => 'Vehicle Roles',
			'DefValue' => 'Driver'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 594,
			'DefDatabase' => '1',
			'DefSubset' => 'Vehicle Roles',
			'DefOrder' => '1',
			'DefValue' => 'Passenger'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 595,
			'DefDatabase' => '1',
			'DefSet' => 'Tree Settings',
			'DefSubset' => 'tree-1-protip',
			'DefDescription' => 'Focus on one incident for now.'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 596,
			'DefDatabase' => '1',
			'DefSet' => 'Tree Settings',
			'DefSubset' => 'tree-1-protip',
			'DefOrder' => '1',
			'DefDescription' => 'Be as professional as possible.'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 597,
			'DefDatabase' => '1',
			'DefSet' => 'Tree Settings',
			'DefSubset' => 'tree-1-protip',
			'DefOrder' => '2',
			'DefDescription' => 'We are saving your progress.'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 598,
			'DefDatabase' => '1',
			'DefSet' => 'Tree Settings',
			'DefSubset' => 'tree-1-protip',
			'DefOrder' => '3',
			'DefDescription' => 'Your story matters.'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 599,
			'DefDatabase' => '1',
			'DefSet' => 'Tree Settings',
			'DefSubset' => 'tree-1-protip',
			'DefOrder' => '4',
			'DefDescription' => 'You can log out and log in anytime.'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 600,
			'DefDatabase' => '1',
			'DefSet' => 'Tree Settings',
			'DefSubset' => 'tree-1-protip',
			'DefOrder' => '5',
			'DefDescription' => 'Your progress through each section is below.'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 601,
			'DefDatabase' => '1',
			'DefSet' => 'Tree Settings',
			'DefSubset' => 'tree-1-protip',
			'DefOrder' => '6',
			'DefDescription' => 'Most questions are optional.'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 602,
			'DefDatabase' => '1',
			'DefSet' => 'Tree Settings',
			'DefSubset' => 'tree-1-protip',
			'DefOrder' => '7',
			'DefDescription' => 'You are brave.'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 603,
			'DefDatabase' => '1',
			'DefSet' => 'Tree Settings',
			'DefSubset' => 'tree-1-protip',
			'DefOrder' => '8',
			'DefDescription' => 'Answer every question you can.'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 604,
			'DefDatabase' => '1',
			'DefSet' => 'Tree Settings',
			'DefSubset' => 'tree-1-protip',
			'DefOrder' => '9',
			'DefDescription' => 'Jump around the survey with the buttons at the bottom.'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 605,
			'DefDatabase' => '1',
			'DefSet' => 'Tree Settings',
			'DefSubset' => 'tree-1-protip',
			'DefOrder' => '10',
			'DefDescription' => 'Be truthful.'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 606,
			'DefDatabase' => '1',
			'DefSubset' => 'Organization Capabilities',
			'DefOrder' => '9',
			'DefValue' => 'Accepts Legal Referrals through OpenPolice.org',
			'DefDescription' => 'Partners with this capacity ï¿½ by definition ï¿½ are registered to be matched with complainants searching for legal help.'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 607,
			'DefDatabase' => '1',
			'DefSet' => 'System Settings',
			'DefSubset' => 'app-license-snc',
			'DefDescription' => '2015'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 608,
			'DefDatabase' => '1',
			'DefSubset' => 'Allegation Type',
			'DefOrder' => '13',
			'DefValue' => 'Repeat Harassment',
			'DefDescription' => 'Circumstances where a department member has had repeated or continued contact with a person without lawful police justification.'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 609,
			'DefDatabase' => '1',
			'DefSubset' => 'Organization Capabilities',
			'DefOrder' => '5',
			'DefValue' => 'Legal Representation for Civil Cases'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 610,
			'DefDatabase' => '1',
			'DefSubset' => 'Organization Capabilities',
			'DefOrder' => '4',
			'DefValue' => 'Legal Assistance for Civil Cases'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 611,
			'DefDatabase' => '1',
			'DefSet' => 'Tree Settings',
			'DefSubset' => 'tree-1-protip',
			'DefOrder' => '11',
			'DefDescription' => 'You are not alone.'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 612,
			'DefDatabase' => '1',
			'DefSet' => 'Tree Settings',
			'DefSubset' => 'tree-1-protip',
			'DefOrder' => '12',
			'DefDescription' => 'Reload the page if it freezes.'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 613,
			'DefDatabase' => '1',
			'DefSet' => 'Tree Settings',
			'DefSubset' => 'tree-1-protipimg'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 614,
			'DefDatabase' => '1',
			'DefSet' => 'Tree Settings',
			'DefSubset' => 'tree-1-protipimg',
			'DefOrder' => '1'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 615,
			'DefDatabase' => '1',
			'DefSet' => 'Tree Settings',
			'DefSubset' => 'tree-1-protipimg',
			'DefOrder' => '2'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 616,
			'DefDatabase' => '1',
			'DefSet' => 'Tree Settings',
			'DefSubset' => 'tree-1-protipimg',
			'DefOrder' => '3'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 617,
			'DefDatabase' => '1',
			'DefSet' => 'Tree Settings',
			'DefSubset' => 'tree-1-protipimg',
			'DefOrder' => '4'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 618,
			'DefDatabase' => '1',
			'DefSet' => 'Tree Settings',
			'DefSubset' => 'tree-1-protipimg',
			'DefOrder' => '5'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 619,
			'DefDatabase' => '1',
			'DefSet' => 'Tree Settings',
			'DefSubset' => 'tree-1-protipimg',
			'DefOrder' => '6'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 620,
			'DefDatabase' => '1',
			'DefSet' => 'Tree Settings',
			'DefSubset' => 'tree-1-protipimg',
			'DefOrder' => '7'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 621,
			'DefDatabase' => '1',
			'DefSet' => 'Tree Settings',
			'DefSubset' => 'tree-1-protipimg',
			'DefOrder' => '8'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 622,
			'DefDatabase' => '1',
			'DefSet' => 'Tree Settings',
			'DefSubset' => 'tree-1-protipimg',
			'DefOrder' => '9'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 623,
			'DefDatabase' => '1',
			'DefSet' => 'Tree Settings',
			'DefSubset' => 'tree-1-protipimg',
			'DefOrder' => '10'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 624,
			'DefDatabase' => '1',
			'DefSet' => 'Tree Settings',
			'DefSubset' => 'tree-1-protipimg',
			'DefOrder' => '11'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 625,
			'DefDatabase' => '1',
			'DefSet' => 'Tree Settings',
			'DefSubset' => 'tree-1-protipimg',
			'DefOrder' => '12'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 626,
			'DefDatabase' => '1',
			'DefSet' => 'Blurbs',
			'DefSubset' => 'Tree Map Header: Complaint',
			'DefIsActive' => '3',
			'DefDescription' => '<div class="mT20 mL15 mR15"><p>
Our team developed OpenPolice.org in partnership with police oversight professionals. We designed these tools to serve the needs of police accountability activists, investigators, attorneys, police chiefs, and others working to advance police transparency and accountability through open data.
<br />
<a href="/complaint-xml-schema" target="_blank">XML Schema</a>,   
<a href="/complaint/read-18/xml" target="_blank">XML Complaint Example</a>
<br />
<nobr><a href="#licenseInfo"><i class="fa fa-creative-commons mR3" aria-hidden="true"></i> 2015-2019</a></nobr>

</p></div>
<div class="mL15 mR15">[[TreeStats]]</div>'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 627,
			'DefDatabase' => '1',
			'DefSubset' => 'Complaint Status',
			'DefOrder' => '4',
			'DefValue' => 'Needs More Work',
			'DefDescription' => 'Not published. Staff has decided that the complainant needs to work on their submission more before it is ready to file with an investigative agency.'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 628,
			'DefDatabase' => '1',
			'DefSubset' => 'Police Officer Ranks',
			'DefValue' => 'Agent'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 629,
			'DefDatabase' => '1',
			'DefSubset' => 'Police Officer Ranks',
			'DefOrder' => '1',
			'DefValue' => 'Assistant Chief of Police'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 630,
			'DefDatabase' => '1',
			'DefSubset' => 'Police Officer Ranks',
			'DefOrder' => '2',
			'DefValue' => 'Assistant Commissioner'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 631,
			'DefDatabase' => '1',
			'DefSubset' => 'Police Officer Ranks',
			'DefOrder' => '3',
			'DefValue' => 'Assistant Sheriff'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 632,
			'DefDatabase' => '1',
			'DefSubset' => 'Police Officer Ranks',
			'DefOrder' => '4',
			'DefValue' => 'Assistant Superintendent'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 633,
			'DefDatabase' => '1',
			'DefSubset' => 'Police Officer Ranks',
			'DefOrder' => '5',
			'DefValue' => 'Captain (Capt.)'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 634,
			'DefDatabase' => '1',
			'DefSubset' => 'Police Officer Ranks',
			'DefOrder' => '6',
			'DefValue' => 'Chief Deputy'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 635,
			'DefDatabase' => '1',
			'DefSubset' => 'Police Officer Ranks',
			'DefOrder' => '7',
			'DefValue' => 'Chief of Police'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 636,
			'DefDatabase' => '1',
			'DefSubset' => 'Police Officer Ranks',
			'DefOrder' => '8',
			'DefValue' => 'Colonel (Col.)'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 637,
			'DefDatabase' => '1',
			'DefSubset' => 'Police Officer Ranks',
			'DefOrder' => '9',
			'DefValue' => 'Commander (Cdr.)'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 638,
			'DefDatabase' => '1',
			'DefSubset' => 'Police Officer Ranks',
			'DefOrder' => '10',
			'DefValue' => 'Commissioner'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 639,
			'DefDatabase' => '1',
			'DefSubset' => 'Police Officer Ranks',
			'DefOrder' => '11',
			'DefValue' => 'Corporal (Cpl.)'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 640,
			'DefDatabase' => '1',
			'DefSubset' => 'Police Officer Ranks',
			'DefOrder' => '12',
			'DefValue' => 'Deputy'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 641,
			'DefDatabase' => '1',
			'DefSubset' => 'Police Officer Ranks',
			'DefOrder' => '13',
			'DefValue' => 'Deputy Chief of Police'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 642,
			'DefDatabase' => '1',
			'DefSubset' => 'Police Officer Ranks',
			'DefOrder' => '14',
			'DefValue' => 'Deputy Commissioner'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 643,
			'DefDatabase' => '1',
			'DefSubset' => 'Police Officer Ranks',
			'DefOrder' => '15',
			'DefValue' => 'Deputy Superintendent'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 644,
			'DefDatabase' => '1',
			'DefSubset' => 'Police Officer Ranks',
			'DefOrder' => '16',
			'DefValue' => 'Detective (Det.)'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 645,
			'DefDatabase' => '1',
			'DefSubset' => 'Police Officer Ranks',
			'DefOrder' => '17',
			'DefValue' => 'Director (Dir.)'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 646,
			'DefDatabase' => '1',
			'DefSubset' => 'Police Officer Ranks',
			'DefOrder' => '18',
			'DefValue' => 'Inspector (Insp.)'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 647,
			'DefDatabase' => '1',
			'DefSubset' => 'Police Officer Ranks',
			'DefOrder' => '19',
			'DefValue' => 'Investigator'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 648,
			'DefDatabase' => '1',
			'DefSubset' => 'Police Officer Ranks',
			'DefOrder' => '20',
			'DefValue' => 'Lieutenant (Lt.)'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 649,
			'DefDatabase' => '1',
			'DefSubset' => 'Police Officer Ranks',
			'DefOrder' => '21',
			'DefValue' => 'Lieutenant Colonel (Lt. Col.)'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 650,
			'DefDatabase' => '1',
			'DefSubset' => 'Police Officer Ranks',
			'DefOrder' => '22',
			'DefValue' => 'Major (Maj.)'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 651,
			'DefDatabase' => '1',
			'DefSubset' => 'Police Officer Ranks',
			'DefOrder' => '23',
			'DefValue' => 'Officer (Ofc.)'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 652,
			'DefDatabase' => '1',
			'DefSubset' => 'Police Officer Ranks',
			'DefOrder' => '24',
			'DefValue' => 'Patrol Officer'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 653,
			'DefDatabase' => '1',
			'DefSubset' => 'Police Officer Ranks',
			'DefOrder' => '25',
			'DefValue' => 'Police Officer'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 654,
			'DefDatabase' => '1',
			'DefSubset' => 'Police Officer Ranks',
			'DefOrder' => '26',
			'DefValue' => 'Police Commissioner'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 655,
			'DefDatabase' => '1',
			'DefSubset' => 'Police Officer Ranks',
			'DefOrder' => '27',
			'DefValue' => 'Sergeant (Sgt.)'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 656,
			'DefDatabase' => '1',
			'DefSubset' => 'Police Officer Ranks',
			'DefOrder' => '28',
			'DefValue' => 'Sheriff'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 657,
			'DefDatabase' => '1',
			'DefSubset' => 'Police Officer Ranks',
			'DefOrder' => '29',
			'DefValue' => 'Superintendent (Supt.)'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 658,
			'DefDatabase' => '1',
			'DefSubset' => 'Police Officer Ranks',
			'DefOrder' => '30',
			'DefValue' => 'Trooper'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 659,
			'DefDatabase' => '1',
			'DefSubset' => 'Police Officer Ranks',
			'DefOrder' => '31',
			'DefValue' => 'Undersheriff'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 660,
			'DefDatabase' => '1',
			'DefSet' => 'System Settings',
			'DefSubset' => 'has-avatars',
			'DefDescription' => '/openpolice/uploads/avatar-shell.png'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 661,
			'DefDatabase' => '1',
			'DefSet' => 'Tree Settings',
			'DefSubset' => 'tree-1-protip',
			'DefOrder' => '13',
			'DefDescription' => 'You are part of the solution.'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 662,
			'DefDatabase' => '1',
			'DefSet' => 'Tree Settings',
			'DefSubset' => 'tree-1-protipimg',
			'DefOrder' => '13'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 667,
			'DefDatabase' => '1',
			'DefSubset' => 'Organization Capabilities',
			'DefOrder' => '1',
			'DefValue' => 'Hosts Clinics for Using OpenPolice.org'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 668,
			'DefDatabase' => '1',
			'DefSet' => 'System Settings',
			'DefSubset' => 'sys-cust-js',
			'DefDescription' => '/* */'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 669,
			'DefDatabase' => '1',
			'DefSet' => 'System Settings',
			'DefSubset' => 'sys-cust-ajax',
			'DefDescription' => '/* */'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 670,
			'DefDatabase' => '1',
			'DefSubset' => 'Verified Officer Status',
			'DefValue' => 'Department Employment Not Verified'
		]);
		DB::table('SL_Definitions')->insert([
			'DefID' => 671,
			'DefDatabase' => '1',
			'DefSubset' => 'Verified Officer Status',
			'DefOrder' => '1',
			'DefValue' => 'Department Employment Verified'
		]);
	
	DB::table('SL_BusRules')->insert([
			'RuleID' => 3,
			'RuleDatabase' => '1',
			'RuleStatement' => 'Every Event Sequence Record must be associated with exactly one Stop, Search, Force, or Arrest which occur in the chronology of the overall Incident. ',
			'RuleConstraint' => 'Every Event Sequence Record must have an associated record in either the Stop table, Search table, Force table, or Arrest table.',
			'RuleTables' => ',137,121,122,123,116,',
			'RuleFields' => ',820,821,822,1015,1014,1013,1012,',
			'RuleLogic' => '13',
			'RuleRel' => '15',
			'RuleAction' => 'This rule must be enforced during implementation of system.'
		]);
		DB::table('SL_BusRules')->insert([
			'RuleID' => 4,
			'RuleDatabase' => '1',
			'RuleStatement' => 'There can potentially be many Orders from many Officers to many Civilians related to each Stop, Search, use of Force, Arrest, etc.',
			'RuleConstraint' => 'Each Order record is related to one Stop, Search, use of Force, or Arrest via an Event Sequence record. People involved with each Order record are associated via the People-Event Links record&#39;s Order ID foreign key. (all foreign keys must be current records in the appropriate table)',
			'RuleTables' => ',120,137,142,',
			'RuleFields' => ',791,886,',
			'RuleLogic' => '13',
			'RuleRel' => '15',
			'RuleAction' => 'Though implied through table and field specifications, this nuance will require thought during implementation.'
		]);
		DB::table('SL_BusRules')->insert([
			'RuleID' => 5,
			'RuleDatabase' => '1',
			'RuleStatement' => 'Evidence must be related to either a Scene, Event Sequence, Property, or Injury.',
			'RuleConstraint' => 'Each record needs to be associated with exactly one Scene ID, Event Sequence ID, Property ID, or Injury ID (which are current records in the appropriate table).',
			'RuleTables' => ',119,',
			'RuleFields' => ',252,799,802,266,',
			'RuleLogic' => '13',
			'RuleRel' => '15',
			'RuleAction' => 'This rule must be enforced during implementation of system.'
		]);
		DB::table('SL_BusRules')->insert([
			'RuleID' => 6,
			'RuleDatabase' => '1',
			'RuleStatement' => 'The source of the Evidence can optionally be set to either a Civilian, or a Police Department.',
			'RuleConstraint' => 'Each Evidence record can optionally be associated with exactly one Civilian ID, or Department ID (which are current records in the appropriate table).',
			'RuleTables' => ',119,',
			'RuleFields' => ',291,292,293,',
			'RuleLogic' => '13',
			'RuleRel' => '15',
			'RuleAction' => 'This rule must be enforced during implementation of system.'
		]);
		DB::table('SL_BusRules')->insert([
			'RuleID' => 9,
			'RuleDatabase' => '1',
			'RuleStatement' => 'People-Event Links are related to either an Officer or a Civilian.',
			'RuleConstraint' => 'Each People-Event Links record must have a value for either a Officer ID or Civilian ID (which are current records in the appropriate table).',
			'RuleTables' => ',142,',
			'RuleFields' => ',878,879,880,',
			'RuleLogic' => '13',
			'RuleRel' => '15',
			'RuleAction' => 'This rule must be enforced during implementation of system.'
		]);
		DB::table('SL_BusRules')->insert([
			'RuleID' => 10,
			'RuleDatabase' => '1',
			'RuleStatement' => 'People-Event Links are related to either an Event Sequence, an Allegation, or an Order.',
			'RuleConstraint' => 'Each People-Event Links record must have a value for either a Event Sequence ID, Allegation ID, or Order ID (which are current records in the appropriate table).',
			'RuleTables' => ',142,',
			'RuleFields' => ',882,881,886,',
			'RuleLogic' => '13',
			'RuleRel' => '15',
			'RuleAction' => 'This rule must be enforced during implementation of system.'
		]);
		DB::table('SL_BusRules')->insert([
			'RuleID' => 11,
			'RuleDatabase' => '1',
			'RuleStatement' => 'The Department ID field can be used instead of the Complaint ID to allow privileges to a User for all Complaints associated with a certain Police Department.',
			'RuleConstraint' => 'Each Privileges Profile record must have a value for either a Complaint ID or a Department ID (which are current records in the appropriate table). ',
			'RuleTables' => ',125,',
			'RuleFields' => ',501,458,',
			'RuleLogic' => '13',
			'RuleRel' => '15',
			'RuleAction' => 'This rule must be enforced during implementation of system.'
		]);
		DB::table('SL_BusRules')->insert([
			'RuleID' => 12,
			'RuleDatabase' => '1',
			'RuleStatement' => 'A new Verified Officer Record should be created for every Officer if a matching Verified Officer does not exist upon creation of a new Complaint record (as decided by Complainant).',
			'RuleConstraint' => 'Every newly\ï¿½ created Officer record (without a preexisting Verified Officer ID) needs to have a new Verified Officer record created with its Verification Status set to &quot;New&quot; pending admin verification.',
			'RuleTables' => ',104,129,',
			'RuleFields' => ',396,',
			'RuleLogic' => '13',
			'RuleRel' => '15',
			'RuleAction' => 'This rule must be enforced during implementation of system.'
		]);
		DB::table('SL_BusRules')->insert([
			'RuleID' => 16,
			'RuleDatabase' => '1',
			'RuleStatement' => 'For a handcuff Injury to be associated with a Stop, tangible Evidence is required.',
			'RuleConstraint' => 'The Injury record associated with a Stop record&#39;s Handcuff Injury field is required to have visual Evidence associated with it.',
			'RuleTables' => ',121,119,-3,117,',
			'RuleFields' => ',816,266,378,',
			'RuleLogic' => '13',
			'RuleRel' => '15'
		]);
		DB::table('SL_BusRules')->insert([
			'RuleID' => 17,
			'RuleDatabase' => '1',
			'RuleStatement' => '<b>Administrator Tasks During Review:</b> Was this a Search Incident To Arrest? --- Validate Described Reasons for Stop --- ...',
			'RuleTables' => ',123,121,',
			'RuleFields' => ',352,313,787,'
		]);
	
	DB::table('SL_Tree')->insert([
			'TreeID' => 1,
			'TreeDatabase' => '1',
			'TreeUser' => '1',
			'TreeType' => 'Survey',
			'TreeName' => 'Complaint',
			'TreeDesc' => 'Open Police Complaint',
			'TreeSlug' => 'complaint',
			'TreeRoot' => '3',
			'TreeFirstPage' => '2603',
			'TreeLastPage' => '529',
			'TreeCoreTable' => '112',
			'TreeOpts' => '3478'
		]);
		DB::table('SL_Tree')->insert([
			'TreeID' => 2,
			'TreeDatabase' => '1',
			'TreeUser' => '1',
			'TreeType' => 'Survey XML',
			'TreeName' => 'Complaint',
			'TreeDesc' => 'Open Police Complaint',
			'TreeSlug' => 'complaint',
			'TreeRoot' => '785',
			'TreeCoreTable' => '112'
		]);
		DB::table('SL_Tree')->insert([
			'TreeID' => 6,
			'TreeDatabase' => '1',
			'TreeUser' => '1',
			'TreeType' => 'Survey XML',
			'TreeName' => 'Compliment',
			'TreeDesc' => 'Open Police Compliment',
			'TreeSlug' => 'compliment',
			'TreeRoot' => '983',
			'TreeCoreTable' => '170'
		]);
		DB::table('SL_Tree')->insert([
			'TreeID' => 7,
			'TreeDatabase' => '1',
			'TreeUser' => '1',
			'TreeType' => 'Page',
			'TreeName' => 'File Your Police Complaint - Share Your Story',
			'TreeDesc' => 'Complaint landing page',
			'TreeSlug' => 'file-your-police-complaint',
			'TreeRoot' => '769',
			'TreeFirstPage' => '769',
			'TreeLastPage' => '769',
			'TreeCoreTable' => '168',
			'TreeOpts' => '29'
		]);
		DB::table('SL_Tree')->insert([
			'TreeID' => 5,
			'TreeDatabase' => '1',
			'TreeUser' => '1',
			'TreeType' => 'Survey',
			'TreeName' => 'Compliment',
			'TreeDesc' => 'Open Police Compliment',
			'TreeSlug' => 'compliment',
			'TreeRoot' => '752',
			'TreeFirstPage' => '2583',
			'TreeLastPage' => '974',
			'TreeCoreTable' => '170',
			'TreeOpts' => '94'
		]);
		DB::table('SL_Tree')->insert([
			'TreeID' => 8,
			'TreeDatabase' => '1',
			'TreeUser' => '1',
			'TreeType' => 'Page',
			'TreeName' => 'File Your Police Compliment - Share Your Story',
			'TreeDesc' => 'Compliment landing page',
			'TreeSlug' => 'file-your-police-compliment',
			'TreeRoot' => '774',
			'TreeFirstPage' => '774',
			'TreeLastPage' => '774',
			'TreeOpts' => '29'
		]);
		DB::table('SL_Tree')->insert([
			'TreeID' => 9,
			'TreeDatabase' => '1',
			'TreeUser' => '1',
			'TreeType' => 'Page',
			'TreeName' => 'List of Allegations and Commendations',
			'TreeSlug' => 'allegations',
			'TreeRoot' => '787',
			'TreeFirstPage' => '787',
			'TreeLastPage' => '787'
		]);
		DB::table('SL_Tree')->insert([
			'TreeID' => 10,
			'TreeDatabase' => '1',
			'TreeUser' => '1',
			'TreeType' => 'Page',
			'TreeName' => 'Recently Posted Complaints',
			'TreeSlug' => 'recent-complaints',
			'TreeRoot' => '789',
			'TreeFirstPage' => '789',
			'TreeLastPage' => '789',
			'TreeOpts' => '31'
		]);
		DB::table('SL_Tree')->insert([
			'TreeID' => 11,
			'TreeDatabase' => '1',
			'TreeUser' => '1',
			'TreeType' => 'Page',
			'TreeName' => 'Admin Dashboard',
			'TreeSlug' => 'dashboard',
			'TreeRoot' => '791',
			'TreeFirstPage' => '791',
			'TreeLastPage' => '791',
			'TreeOpts' => '609'
		]);
		DB::table('SL_Tree')->insert([
			'TreeID' => 12,
			'TreeDatabase' => '1',
			'TreeUser' => '1',
			'TreeType' => 'Page',
			'TreeName' => 'OpenPolice.org | You belong at the center of police oversight.',
			'TreeDesc' => 'Home page',
			'TreeSlug' => 'home',
			'TreeRoot' => '793',
			'TreeFirstPage' => '793',
			'TreeLastPage' => '793',
			'TreeCoreTable' => '112',
			'TreeOpts' => '217'
		]);
		DB::table('SL_Tree')->insert([
			'TreeID' => 13,
			'TreeDatabase' => '1',
			'TreeUser' => '1',
			'TreeType' => 'Page',
			'TreeName' => 'Contact OpenPolice.org',
			'TreeSlug' => 'contact',
			'TreeRoot' => '826',
			'TreeFirstPage' => '826',
			'TreeLastPage' => '826',
			'TreeOpts' => '551'
		]);
		DB::table('SL_Tree')->insert([
			'TreeID' => 14,
			'TreeDatabase' => '1',
			'TreeUser' => '1',
			'TreeType' => 'Page',
			'TreeName' => 'User Privacy Options on OpenPolice.org',
			'TreeSlug' => 'complaint-privacy-options',
			'TreeRoot' => '833',
			'TreeFirstPage' => '833',
			'TreeLastPage' => '833'
		]);
		DB::table('SL_Tree')->insert([
			'TreeID' => 15,
			'TreeDatabase' => '1',
			'TreeUser' => '1',
			'TreeType' => 'Page',
			'TreeName' => 'Website Privacy Policy | OpenPolice.org',
			'TreeSlug' => 'privacy-policy',
			'TreeRoot' => '835',
			'TreeFirstPage' => '835',
			'TreeLastPage' => '835'
		]);
		DB::table('SL_Tree')->insert([
			'TreeID' => 16,
			'TreeDatabase' => '1',
			'TreeUser' => '1',
			'TreeType' => 'Page',
			'TreeName' => 'Web App Specifications for OpenPolice.org',
			'TreeSlug' => 'web-app-technical-specs',
			'TreeRoot' => '837',
			'TreeFirstPage' => '837',
			'TreeLastPage' => '837'
		]);
		DB::table('SL_Tree')->insert([
			'TreeID' => 17,
			'TreeDatabase' => '1',
			'TreeUser' => '1',
			'TreeType' => 'Page',
			'TreeName' => 'Frequently Asked Questions | OpenPolice.org',
			'TreeSlug' => 'frequently-asked-questions',
			'TreeRoot' => '839',
			'TreeFirstPage' => '839',
			'TreeLastPage' => '839'
		]);
		DB::table('SL_Tree')->insert([
			'TreeID' => 19,
			'TreeDatabase' => '1',
			'TreeUser' => '1',
			'TreeType' => 'Page',
			'TreeName' => 'Blog',
			'TreeSlug' => 'articles',
			'TreeRoot' => '843',
			'TreeFirstPage' => '843',
			'TreeLastPage' => '843'
		]);
		DB::table('SL_Tree')->insert([
			'TreeID' => 20,
			'TreeDatabase' => '1',
			'TreeUser' => '1',
			'TreeType' => 'Page',
			'TreeName' => 'How To Install Local OpenPolice.org',
			'TreeSlug' => 'how-to-install-local-openpolice',
			'TreeRoot' => '847',
			'TreeFirstPage' => '847',
			'TreeLastPage' => '847'
		]);
		DB::table('SL_Tree')->insert([
			'TreeID' => 21,
			'TreeDatabase' => '1',
			'TreeUser' => '1',
			'TreeType' => 'Page',
			'TreeName' => 'Police Departments\' Accessibility Scores | OpenPolice.org',
			'TreeSlug' => 'department-accessibility',
			'TreeRoot' => '858',
			'TreeFirstPage' => '858',
			'TreeLastPage' => '858'
		]);
		DB::table('SL_Tree')->insert([
			'TreeID' => 22,
			'TreeDatabase' => '1',
			'TreeUser' => '1',
			'TreeType' => 'Page',
			'TreeName' => 'My Profile',
			'TreeSlug' => 'my-profile',
			'TreeRoot' => '997',
			'TreeFirstPage' => '997',
			'TreeLastPage' => '997',
			'TreeOpts' => '1334'
		]);
		DB::table('SL_Tree')->insert([
			'TreeID' => 23,
			'TreeDatabase' => '1',
			'TreeUser' => '1',
			'TreeType' => 'Page',
			'TreeName' => 'About OpenPolice.org',
			'TreeSlug' => 'about',
			'TreeRoot' => '1005',
			'TreeFirstPage' => '1005',
			'TreeLastPage' => '1005'
		]);
		DB::table('SL_Tree')->insert([
			'TreeID' => 24,
			'TreeDatabase' => '1',
			'TreeUser' => '1',
			'TreeType' => 'Page',
			'TreeName' => 'Complaint or Compliment? OpenPolice.org',
			'TreeDesc' => 'Choose Complaint or Compliment',
			'TreeSlug' => 'complaint-or-compliment',
			'TreeRoot' => '1096',
			'TreeFirstPage' => '1096',
			'TreeLastPage' => '1096'
		]);
		DB::table('SL_Tree')->insert([
			'TreeID' => 25,
			'TreeDatabase' => '1',
			'TreeUser' => '1',
			'TreeType' => 'Page',
			'TreeName' => '[{ Complaint Police Department }] ([{ Police Department State Abbr }]) Complaint Info, History & File',
			'TreeSlug' => 'dept',
			'TreeRoot' => '1098',
			'TreeFirstPage' => '1098',
			'TreeLastPage' => '1098',
			'TreeOpts' => '13'
		]);
		DB::table('SL_Tree')->insert([
			'TreeID' => 27,
			'TreeDatabase' => '1',
			'TreeUser' => '1',
			'TreeType' => 'Page',
			'TreeName' => 'Site Map | OpenPolice.org',
			'TreeSlug' => 'site-map',
			'TreeRoot' => '1105',
			'TreeFirstPage' => '1105',
			'TreeLastPage' => '1105'
		]);
		DB::table('SL_Tree')->insert([
			'TreeID' => 28,
			'TreeDatabase' => '1',
			'TreeUser' => '1',
			'TreeType' => 'Page',
			'TreeName' => 'Accessibility Score: How We Rate Departments',
			'TreeSlug' => 'how-we-rate-departments',
			'TreeRoot' => '1126',
			'TreeFirstPage' => '1126',
			'TreeLastPage' => '1126'
		]);
		DB::table('SL_Tree')->insert([
			'TreeID' => 29,
			'TreeDatabase' => '1',
			'TreeUser' => '1',
			'TreeType' => 'Page',
			'TreeName' => '"Go Gold" To Make Your Complaint As Strong As Possible',
			'TreeSlug' => 'go-gold-make-your-complaint-strong',
			'TreeRoot' => '1129',
			'TreeFirstPage' => '1129',
			'TreeLastPage' => '1129'
		]);
		DB::table('SL_Tree')->insert([
			'TreeID' => 30,
			'TreeDatabase' => '1',
			'TreeUser' => '1',
			'TreeType' => 'Page',
			'TreeName' => 'Testing',
			'TreeSlug' => 'testing',
			'TreeRoot' => '1189',
			'TreeFirstPage' => '1189',
			'TreeLastPage' => '1189'
		]);
		DB::table('SL_Tree')->insert([
			'TreeID' => 31,
			'TreeDatabase' => '1',
			'TreeUser' => '1',
			'TreeType' => 'Redirect',
			'TreeDesc' => 'https://github.com/flexyourrights/openpolice',
			'TreeSlug' => 'github'
		]);
		DB::table('SL_Tree')->insert([
			'TreeID' => 33,
			'TreeDatabase' => '1',
			'TreeUser' => '1',
			'TreeType' => 'Page',
			'TreeName' => 'Volunteer Dashboard',
			'TreeSlug' => 'volunteer',
			'TreeRoot' => '1210',
			'TreeFirstPage' => '1210',
			'TreeLastPage' => '1210',
			'TreeOpts' => '106981'
		]);
		DB::table('SL_Tree')->insert([
			'TreeID' => 34,
			'TreeDatabase' => '1',
			'TreeUser' => '1',
			'TreeType' => 'Page',
			'TreeName' => 'Search',
			'TreeSlug' => 'search',
			'TreeRoot' => '1218',
			'TreeFirstPage' => '1218',
			'TreeLastPage' => '1218',
			'TreeOpts' => '899'
		]);
		DB::table('SL_Tree')->insert([
			'TreeID' => 35,
			'TreeDatabase' => '1',
			'TreeUser' => '1',
			'TreeType' => 'Page',
			'TreeName' => 'Dashboard Search',
			'TreeSlug' => 'search',
			'TreeRoot' => '1220',
			'TreeOpts' => '93'
		]);
		DB::table('SL_Tree')->insert([
			'TreeID' => 36,
			'TreeDatabase' => '1',
			'TreeUser' => '1',
			'TreeType' => 'Survey',
			'TreeName' => 'Research Department',
			'TreeSlug' => 'volunteers-research-departments',
			'TreeRoot' => '1222',
			'TreeFirstPage' => '1223',
			'TreeLastPage' => '1339',
			'TreeCoreTable' => '111',
			'TreeOpts' => '4301'
		]);
		DB::table('SL_Tree')->insert([
			'TreeID' => 37,
			'TreeDatabase' => '1',
			'TreeUser' => '1',
			'TreeType' => 'Survey XML',
			'TreeName' => 'Research Department',
			'TreeSlug' => 'volunteers-research-departments',
			'TreeRoot' => '1224',
			'TreeCoreTable' => '111'
		]);
		DB::table('SL_Tree')->insert([
			'TreeID' => 38,
			'TreeDatabase' => '1',
			'TreeUser' => '1',
			'TreeType' => 'Page',
			'TreeName' => 'Frequently Asked Volunteer Questions',
			'TreeSlug' => 'volunteer-faqs',
			'TreeRoot' => '1234',
			'TreeFirstPage' => '1234',
			'TreeLastPage' => '1234',
			'TreeOpts' => '17'
		]);
		DB::table('SL_Tree')->insert([
			'TreeID' => 39,
			'TreeDatabase' => '1',
			'TreeUser' => '1',
			'TreeType' => 'Page',
			'TreeName' => 'Verify Next Department',
			'TreeSlug' => 'verify-next-department',
			'TreeRoot' => '1343',
			'TreeFirstPage' => '1343',
			'TreeLastPage' => '1343',
			'TreeOpts' => '17'
		]);
		DB::table('SL_Tree')->insert([
			'TreeID' => 40,
			'TreeDatabase' => '1',
			'TreeUser' => '1',
			'TreeType' => 'Page',
			'TreeName' => 'Volunteer Stars',
			'TreeSlug' => 'volunteer-stars',
			'TreeRoot' => '1345',
			'TreeFirstPage' => '1345',
			'TreeLastPage' => '1345',
			'TreeOpts' => '17'
		]);
		DB::table('SL_Tree')->insert([
			'TreeID' => 41,
			'TreeDatabase' => '1',
			'TreeUser' => '1',
			'TreeType' => 'Page',
			'TreeName' => 'Volunteer Edits History',
			'TreeSlug' => 'volunteer-edits-history',
			'TreeRoot' => '1350',
			'TreeFirstPage' => '1350',
			'TreeLastPage' => '1350',
			'TreeOpts' => '43'
		]);
		DB::table('SL_Tree')->insert([
			'TreeID' => 42,
			'TreeDatabase' => '1',
			'TreeUser' => '1',
			'TreeType' => 'Page',
			'TreeName' => 'Complaint #[[corePubID]]',
			'TreeSlug' => 'complaint',
			'TreeRoot' => '1362',
			'TreeFirstPage' => '1362',
			'TreeLastPage' => '1362',
			'TreeCoreTable' => '112',
			'TreeOpts' => '13'
		]);
		DB::table('SL_Tree')->insert([
			'TreeID' => 43,
			'TreeDatabase' => '1',
			'TreeUser' => '1',
			'TreeType' => 'Page',
			'TreeName' => 'Partner Dashboard',
			'TreeSlug' => 'partner-dash',
			'TreeRoot' => '1413',
			'TreeFirstPage' => '1413',
			'TreeLastPage' => '1413',
			'TreeOpts' => '287'
		]);
		DB::table('SL_Tree')->insert([
			'TreeID' => 44,
			'TreeDatabase' => '1',
			'TreeUser' => '1',
			'TreeType' => 'Page',
			'TreeName' => 'All Complete Complaints',
			'TreeSlug' => 'all-complete-complaints',
			'TreeRoot' => '1417',
			'TreeFirstPage' => '1417',
			'TreeLastPage' => '1417',
			'TreeCoreTable' => '112',
			'TreeOpts' => '38657'
		]);
		DB::table('SL_Tree')->insert([
			'TreeID' => 45,
			'TreeDatabase' => '1',
			'TreeUser' => '1',
			'TreeType' => 'Page',
			'TreeName' => 'Staff Dashboard',
			'TreeSlug' => 'staff-dash',
			'TreeRoot' => '1415',
			'TreeFirstPage' => '1415',
			'TreeLastPage' => '1415',
			'TreeOpts' => '301'
		]);
		DB::table('SL_Tree')->insert([
			'TreeID' => 46,
			'TreeDatabase' => '1',
			'TreeUser' => '1',
			'TreeType' => 'Page',
			'TreeName' => 'All Incomplete Complaints',
			'TreeSlug' => 'all-incomplete-complaints',
			'TreeRoot' => '1419',
			'TreeFirstPage' => '1419',
			'TreeLastPage' => '1419',
			'TreeOpts' => '43'
		]);
		DB::table('SL_Tree')->insert([
			'TreeID' => 47,
			'TreeDatabase' => '1',
			'TreeUser' => '1',
			'TreeType' => 'Page',
			'TreeName' => 'Volunteer with OpenPolice.org',
			'TreeSlug' => 'volunteer',
			'TreeRoot' => '1445',
			'TreeFirstPage' => '1445',
			'TreeLastPage' => '1445'
		]);
		DB::table('SL_Tree')->insert([
			'TreeID' => 48,
			'TreeDatabase' => '1',
			'TreeUser' => '1',
			'TreeType' => 'Page',
			'TreeName' => 'Departments',
			'TreeSlug' => 'departments',
			'TreeRoot' => '1453',
			'TreeFirstPage' => '1453',
			'TreeLastPage' => '1453',
			'TreeOpts' => '43'
		]);
		DB::table('SL_Tree')->insert([
			'TreeID' => 49,
			'TreeDatabase' => '1',
			'TreeUser' => '1',
			'TreeType' => 'Page',
			'TreeName' => 'Investigative Agencies',
			'TreeSlug' => 'oversight',
			'TreeRoot' => '1455',
			'TreeFirstPage' => '1455',
			'TreeLastPage' => '1455',
			'TreeOpts' => '43'
		]);
		DB::table('SL_Tree')->insert([
			'TreeID' => 50,
			'TreeDatabase' => '1',
			'TreeUser' => '1',
			'TreeType' => 'Page',
			'TreeName' => 'Officers',
			'TreeSlug' => 'officers',
			'TreeRoot' => '1457',
			'TreeFirstPage' => '1457',
			'TreeLastPage' => '1457',
			'TreeOpts' => '43'
		]);
		DB::table('SL_Tree')->insert([
			'TreeID' => 51,
			'TreeDatabase' => '1',
			'TreeUser' => '1',
			'TreeType' => 'Page',
			'TreeName' => 'Attorneys',
			'TreeSlug' => 'attorneys',
			'TreeRoot' => '1459',
			'TreeFirstPage' => '1459',
			'TreeLastPage' => '1459',
			'TreeOpts' => '43'
		]);
		DB::table('SL_Tree')->insert([
			'TreeID' => 52,
			'TreeDatabase' => '1',
			'TreeUser' => '1',
			'TreeType' => 'Page',
			'TreeName' => 'Complaint Review',
			'TreeSlug' => 'complaint-review',
			'TreeRoot' => '1461',
			'TreeFirstPage' => '1461',
			'TreeLastPage' => '1461',
			'TreeOpts' => '559'
		]);
		DB::table('SL_Tree')->insert([
			'TreeID' => 53,
			'TreeDatabase' => '1',
			'TreeUser' => '1',
			'TreeType' => 'Page',
			'TreeName' => 'OpenPolice.org for Law Enforcement',
			'TreeSlug' => 'for-law-enforcement',
			'TreeRoot' => '1783',
			'TreeFirstPage' => '1783',
			'TreeLastPage' => '1783'
		]);
		DB::table('SL_Tree')->insert([
			'TreeID' => 54,
			'TreeDatabase' => '1',
			'TreeUser' => '1',
			'TreeType' => 'Page',
			'TreeName' => 'Attorneys FAQ',
			'TreeSlug' => 'attorneys-faq',
			'TreeRoot' => '1877',
			'TreeFirstPage' => '1877',
			'TreeLastPage' => '1877'
		]);
		DB::table('SL_Tree')->insert([
			'TreeID' => 55,
			'TreeDatabase' => '1',
			'TreeUser' => '1',
			'TreeType' => 'Page',
			'TreeName' => 'Attorney Referral Listings',
			'TreeSlug' => 'attorney-referral-listings',
			'TreeRoot' => '1895',
			'TreeFirstPage' => '1895',
			'TreeLastPage' => '1895',
			'TreeOpts' => '41'
		]);
		DB::table('SL_Tree')->insert([
			'TreeID' => 56,
			'TreeDatabase' => '1',
			'TreeUser' => '1',
			'TreeType' => 'Page',
			'TreeName' => 'Attorney Profile',
			'TreeSlug' => 'attorney',
			'TreeRoot' => '1897',
			'TreeFirstPage' => '1897',
			'TreeLastPage' => '1897',
			'TreeCoreTable' => '110',
			'TreeOpts' => '13'
		]);
		DB::table('SL_Tree')->insert([
			'TreeID' => 57,
			'TreeDatabase' => '1',
			'TreeUser' => '1',
			'TreeType' => 'Page',
			'TreeName' => 'Donate to OpenPolice.org',
			'TreeSlug' => 'donate',
			'TreeRoot' => '1899',
			'TreeFirstPage' => '1899',
			'TreeLastPage' => '1899'
		]);
		DB::table('SL_Tree')->insert([
			'TreeID' => 58,
			'TreeDatabase' => '1',
			'TreeUser' => '1',
			'TreeType' => 'Survey',
			'TreeName' => 'Partner Profile',
			'TreeSlug' => 'partner-profile',
			'TreeRoot' => '1921',
			'TreeFirstPage' => '1922',
			'TreeLastPage' => '1954',
			'TreeCoreTable' => '110',
			'TreeOpts' => '5289'
		]);
		DB::table('SL_Tree')->insert([
			'TreeID' => 59,
			'TreeDatabase' => '1',
			'TreeUser' => '1',
			'TreeType' => 'Survey XML',
			'TreeName' => 'Partner Profile',
			'TreeSlug' => 'partner-profile',
			'TreeRoot' => '1923',
			'TreeCoreTable' => '110',
			'TreeOpts' => '5289'
		]);
		DB::table('SL_Tree')->insert([
			'TreeID' => 60,
			'TreeDatabase' => '1',
			'TreeUser' => '1',
			'TreeType' => 'Page',
			'TreeName' => 'Manage Partners',
			'TreeSlug' => 'manage-partners',
			'TreeRoot' => '1938',
			'TreeFirstPage' => '1938',
			'TreeLastPage' => '1938',
			'TreeOpts' => '43'
		]);
		DB::table('SL_Tree')->insert([
			'TreeID' => 61,
			'TreeDatabase' => '1',
			'TreeUser' => '1',
			'TreeType' => 'Page',
			'TreeName' => 'Team Resources',
			'TreeSlug' => 'team-resources',
			'TreeRoot' => '1984',
			'TreeFirstPage' => '1984',
			'TreeLastPage' => '1984',
			'TreeOpts' => '43'
		]);
		DB::table('SL_Tree')->insert([
			'TreeID' => 62,
			'TreeDatabase' => '1',
			'TreeUser' => '1',
			'TreeType' => 'Page',
			'TreeName' => 'Preparing Your Complaint for an Attorney',
			'TreeSlug' => 'prepare-complaint-for-attorney',
			'TreeRoot' => '1992',
			'TreeFirstPage' => '1992',
			'TreeLastPage' => '1992',
			'TreeCoreTable' => '110',
			'TreeOpts' => '377'
		]);
		DB::table('SL_Tree')->insert([
			'TreeID' => 63,
			'TreeDatabase' => '1',
			'TreeUser' => '1',
			'TreeType' => 'Page',
			'TreeName' => 'Open Data Resources',
			'TreeSlug' => 'resources',
			'TreeRoot' => '1999',
			'TreeFirstPage' => '1999',
			'TreeLastPage' => '1999'
		]);
		DB::table('SL_Tree')->insert([
			'TreeID' => 64,
			'TreeDatabase' => '1',
			'TreeUser' => '1',
			'TreeType' => 'Page',
			'TreeName' => 'Temporary Testing Grounds',
			'TreeSlug' => 'tmp',
			'TreeRoot' => '2012',
			'TreeFirstPage' => '2012',
			'TreeLastPage' => '2012'
		]);
		DB::table('SL_Tree')->insert([
			'TreeID' => 65,
			'TreeDatabase' => '1',
			'TreeUser' => '1',
			'TreeType' => 'Page',
			'TreeName' => 'Organization Profile',
			'TreeSlug' => 'org',
			'TreeRoot' => '2059',
			'TreeFirstPage' => '2059',
			'TreeLastPage' => '2059',
			'TreeCoreTable' => '110',
			'TreeOpts' => '13'
		]);
		DB::table('SL_Tree')->insert([
			'TreeID' => 66,
			'TreeDatabase' => '1',
			'TreeUser' => '1',
			'TreeType' => 'Page',
			'TreeName' => 'Prepare Your Complaint for an Organization',
			'TreeSlug' => 'prepare-complaint-for-org',
			'TreeRoot' => '2063',
			'TreeFirstPage' => '2063',
			'TreeLastPage' => '2063',
			'TreeCoreTable' => '110',
			'TreeOpts' => '377'
		]);
		DB::table('SL_Tree')->insert([
			'TreeID' => 67,
			'TreeDatabase' => '1',
			'TreeUser' => '0',
			'TreeType' => 'Page',
			'TreeName' => 'Staff Search',
			'TreeSlug' => 'staff-search',
			'TreeRoot' => '2090',
			'TreeOpts' => '1333'
		]);
		DB::table('SL_Tree')->insert([
			'TreeID' => 68,
			'TreeDatabase' => '1',
			'TreeUser' => '0',
			'TreeType' => 'Page',
			'TreeName' => 'Partner Search',
			'TreeSlug' => 'partner-search',
			'TreeRoot' => '2092',
			'TreeFirstPage' => '2092',
			'TreeLastPage' => '2092',
			'TreeOpts' => '1271'
		]);
		DB::table('SL_Tree')->insert([
			'TreeID' => 69,
			'TreeDatabase' => '1',
			'TreeUser' => '1',
			'TreeType' => 'Redirect',
			'TreeDesc' => 'http://openpolice.local/complaint-or-compliment',
			'TreeSlug' => 'sharing-your-story'
		]);
		DB::table('SL_Tree')->insert([
			'TreeID' => 70,
			'TreeDatabase' => '1',
			'TreeUser' => '1',
			'TreeType' => 'Page',
			'TreeName' => 'Complaint or Compliment? OpenPolice.org',
			'TreeSlug' => 'share-complaint-or-compliment',
			'TreeRoot' => '2094',
			'TreeFirstPage' => '2094',
			'TreeLastPage' => '2094'
		]);
		DB::table('SL_Tree')->insert([
			'TreeID' => 71,
			'TreeDatabase' => '1',
			'TreeUser' => '1',
			'TreeType' => 'Page',
			'TreeName' => 'Features of OpenPolice.org',
			'TreeSlug' => 'features',
			'TreeRoot' => '2104',
			'TreeFirstPage' => '2104',
			'TreeLastPage' => '2104'
		]);
		DB::table('SL_Tree')->insert([
			'TreeID' => 72,
			'TreeDatabase' => '1',
			'TreeUser' => '1',
			'TreeType' => 'Page',
			'TreeName' => 'Principles Behind OpenPolice.org',
			'TreeSlug' => 'principles',
			'TreeRoot' => '2106',
			'TreeFirstPage' => '2106',
			'TreeLastPage' => '2106'
		]);
		DB::table('SL_Tree')->insert([
			'TreeID' => 73,
			'TreeDatabase' => '1',
			'TreeUser' => '1',
			'TreeType' => 'Page',
			'TreeName' => 'Partners',
			'TreeSlug' => 'partners',
			'TreeRoot' => '2149',
			'TreeFirstPage' => '2149',
			'TreeLastPage' => '2149',
			'TreeOpts' => '13'
		]);
		DB::table('SL_Tree')->insert([
			'TreeID' => 74,
			'TreeDatabase' => '1',
			'TreeUser' => '1',
			'TreeType' => 'Page',
			'TreeName' => 'Manage Attorneys',
			'TreeSlug' => 'manage-attorneys',
			'TreeRoot' => '2165',
			'TreeFirstPage' => '2165',
			'TreeLastPage' => '2165',
			'TreeOpts' => '43'
		]);
		DB::table('SL_Tree')->insert([
			'TreeID' => 75,
			'TreeDatabase' => '1',
			'TreeUser' => '1',
			'TreeType' => 'Page',
			'TreeName' => 'Manage Organizations',
			'TreeSlug' => 'manage-organizations',
			'TreeRoot' => '2170',
			'TreeFirstPage' => '2170',
			'TreeLastPage' => '2170',
			'TreeOpts' => '43'
		]);
		DB::table('SL_Tree')->insert([
			'TreeID' => 76,
			'TreeDatabase' => '1',
			'TreeUser' => '1',
			'TreeType' => 'Page',
			'TreeName' => 'Pilot Program',
			'TreeSlug' => 'pilot-program',
			'TreeRoot' => '2191',
			'TreeFirstPage' => '2191',
			'TreeLastPage' => '2191'
		]);
		DB::table('SL_Tree')->insert([
			'TreeID' => 77,
			'TreeDatabase' => '1',
			'TreeUser' => '1',
			'TreeType' => 'Page',
			'TreeName' => 'Pilot Program with SSDP Chapters',
			'TreeSlug' => 'pilot-program-with-ssdp-chapters',
			'TreeRoot' => '2200',
			'TreeFirstPage' => '2200',
			'TreeLastPage' => '2200'
		]);
		DB::table('SL_Tree')->insert([
			'TreeID' => 79,
			'TreeDatabase' => '1',
			'TreeUser' => '1',
			'TreeType' => 'Survey',
			'TreeName' => 'Beta Test Signup',
			'TreeSlug' => 'beta-test-signup',
			'TreeRoot' => '2216',
			'TreeFirstPage' => '2217',
			'TreeLastPage' => '2230',
			'TreeCoreTable' => '184'
		]);
		DB::table('SL_Tree')->insert([
			'TreeID' => 80,
			'TreeDatabase' => '1',
			'TreeUser' => '1',
			'TreeType' => 'Survey XML',
			'TreeName' => 'Beta Test Signup',
			'TreeSlug' => 'beta-test-signup'
		]);
		DB::table('SL_Tree')->insert([
			'TreeID' => 81,
			'TreeDatabase' => '1',
			'TreeUser' => '1',
			'TreeType' => 'Page',
			'TreeName' => 'Beta Test Signups',
			'TreeSlug' => 'beta-test-signups',
			'TreeRoot' => '2233',
			'TreeFirstPage' => '2233',
			'TreeLastPage' => '2233',
			'TreeOpts' => '43'
		]);
		DB::table('SL_Tree')->insert([
			'TreeID' => 82,
			'TreeDatabase' => '1',
			'TreeUser' => '1',
			'TreeType' => 'Page',
			'TreeName' => 'Beta Flyer',
			'TreeSlug' => 'beta-flyer',
			'TreeRoot' => '2248',
			'TreeFirstPage' => '2248',
			'TreeLastPage' => '2248',
			'TreeOpts' => '41'
		]);
		DB::table('SL_Tree')->insert([
			'TreeID' => 83,
			'TreeDatabase' => '1',
			'TreeUser' => '1',
			'TreeType' => 'Page',
			'TreeName' => 'How To Install OpenPolice.org with Docker',
			'TreeSlug' => 'how-to-install-open-police-complaints-with-docker',
			'TreeRoot' => '2280',
			'TreeFirstPage' => '2280',
			'TreeLastPage' => '2280'
		]);
		DB::table('SL_Tree')->insert([
			'TreeID' => 84,
			'TreeDatabase' => '1',
			'TreeUser' => '1',
			'TreeType' => 'Page',
			'TreeName' => 'Web App Workflows for OpenPolice.org',
			'TreeSlug' => 'web-app-workflows',
			'TreeRoot' => '2298',
			'TreeFirstPage' => '2298',
			'TreeLastPage' => '2298'
		]);
		DB::table('SL_Tree')->insert([
			'TreeID' => 96,
			'TreeDatabase' => '1',
			'TreeUser' => '1',
			'TreeType' => 'Page',
			'TreeName' => 'Filing Your Police Complaint',
			'TreeSlug' => 'filing-your-police-complaint',
			'TreeRoot' => '2368',
			'TreeFirstPage' => '2368',
			'TreeLastPage' => '2368'
		]);
		DB::table('SL_Tree')->insert([
			'TreeID' => 97,
			'TreeDatabase' => '1',
			'TreeUser' => '1',
			'TreeType' => 'Page',
			'TreeName' => 'Department Research Volunteer Instructions & Checklist',
			'TreeSlug' => 'department-research-volunteer-instructions-checklist',
			'TreeRoot' => '2373',
			'TreeFirstPage' => '2373',
			'TreeLastPage' => '2373',
			'TreeOpts' => '17'
		]);
		DB::table('SL_Tree')->insert([
			'TreeID' => 98,
			'TreeDatabase' => '1',
			'TreeUser' => '0',
			'TreeType' => 'Page',
			'TreeName' => 'Responsiveness Score: How We Rate Departments',
			'TreeSlug' => 'police-department-reports-responsiveness',
			'TreeRoot' => '2374',
			'TreeFirstPage' => '2374',
			'TreeLastPage' => '2374'
		]);
		DB::table('SL_Tree')->insert([
			'TreeID' => 99,
			'TreeDatabase' => '1',
			'TreeUser' => '1',
			'TreeType' => 'Page',
			'TreeName' => 'Complaint #[[corePubID]]',
			'TreeSlug' => 'complaint',
			'TreeRoot' => '2376',
			'TreeFirstPage' => '2376',
			'TreeLastPage' => '2376',
			'TreeCoreTable' => '112',
			'TreeOpts' => '15457'
		]);
		DB::table('SL_Tree')->insert([
			'TreeID' => 100,
			'TreeDatabase' => '1',
			'TreeUser' => '1',
			'TreeType' => 'Page',
			'TreeName' => 'Search Complaints Published on OpenPolice.org',
			'TreeSlug' => 'complaints',
			'TreeRoot' => '2383',
			'TreeFirstPage' => '2383',
			'TreeLastPage' => '2383',
			'TreeCoreTable' => '112',
			'TreeOpts' => '60233'
		]);
		DB::table('SL_Tree')->insert([
			'TreeID' => 177,
			'TreeDatabase' => '1',
			'TreeUser' => '0',
			'TreeType' => 'Page',
			'TreeName' => 'Home',
			'TreeSlug' => 'home-test',
			'TreeRoot' => '2679',
			'TreeFirstPage' => '2679',
			'TreeLastPage' => '2679'
		]);
		DB::table('SL_Tree')->insert([
			'TreeID' => 178,
			'TreeDatabase' => '1',
			'TreeUser' => '0',
			'TreeType' => 'Page',
			'TreeName' => 'Dashboard',
			'TreeSlug' => 'dashboard-test',
			'TreeRoot' => '2681',
			'TreeFirstPage' => '2681',
			'TreeLastPage' => '2681',
			'TreeOpts' => '3'
		]);
		DB::table('SL_Tree')->insert([
			'TreeID' => 181,
			'TreeDatabase' => '1',
			'TreeUser' => '1',
			'TreeType' => 'Page',
			'TreeName' => 'Code Package Files, Folders, and Classes',
			'TreeSlug' => 'code-package-files-folders-and-classes',
			'TreeRoot' => '2697',
			'TreeFirstPage' => '2697',
			'TreeLastPage' => '2697'
		]);
		DB::table('SL_Tree')->insert([
			'TreeID' => 184,
			'TreeDatabase' => '1',
			'TreeUser' => '1',
			'TreeType' => 'Survey',
			'TreeName' => 'Verified Officer Record',
			'TreeSlug' => 'verified-officer-record',
			'TreeRoot' => '2721',
			'TreeFirstPage' => '2722',
			'TreeLastPage' => '2731',
			'TreeCoreTable' => '187'
		]);
		DB::table('SL_Tree')->insert([
			'TreeID' => 185,
			'TreeDatabase' => '1',
			'TreeUser' => '1',
			'TreeType' => 'Survey XML',
			'TreeName' => 'Verified Officer Record',
			'TreeSlug' => 'verified-officer-record'
		]);
		DB::table('SL_Tree')->insert([
			'TreeID' => 186,
			'TreeDatabase' => '1',
			'TreeUser' => '1',
			'TreeType' => 'Page',
			'TreeName' => 'Officer [[Officer Name]]',
			'TreeSlug' => 'officer',
			'TreeRoot' => '2724',
			'TreeFirstPage' => '2724',
			'TreeLastPage' => '2724',
			'TreeCoreTable' => '187',
			'TreeOpts' => '13'
		]);
		DB::table('SL_Tree')->insert([
			'TreeID' => 196,
			'TreeDatabase' => '1',
			'TreeUser' => '1',
			'TreeType' => 'Page',
			'TreeName' => 'Development Team Update',
			'TreeSlug' => 'development-team-update',
			'TreeRoot' => '2751',
			'TreeFirstPage' => '2751',
			'TreeLastPage' => '2751',
			'TreeOpts' => '2881'
		]);
	
	DB::table('SL_Node')->insert([
			'NodeID' => 512,
			'NodeTree' => '1',
			'NodeParentID' => '153',
			'NodeType' => 'Page',
			'NodePromptText' => 'Arrest: Reason Given, Miranda Rights',
			'NodePromptNotes' => 'gold-info-arrest',
			'NodePromptAfter' => 'Arrest: Reason(s) Given::M::::M::::M::'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1,
			'NodeTree' => '1',
			'NodeParentID' => '451',
			'NodeParentOrder' => '1',
			'NodeType' => 'Long Text',
			'NodePromptText' => 'Memories fade fast. So please take a few minutes to write down the details you can remember below.',
			'NodePromptAfter' => '<style> #n[[nID]]FldID { height: 280px; } </style>
<script type="text/javascript"> setTimeout("document.getElementById(\'currWordCount\').innerHTML=\'Aim for 250-500 words. \'+document.getElementById(\'currWordCount\').innerHTML", 10); </script>',
			'NodeDataStore' => 'Complaints:ComSummary',
			'NodeCharLimit' => '500',
			'NodeOpts' => '155'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2,
			'NodeTree' => '1',
			'NodeParentID' => '3',
			'NodeParentOrder' => '1',
			'NodeType' => 'Branch Title',
			'NodePromptText' => 'Basic Info Section',
			'NodePromptNotes' => 'legal-notice'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 3,
			'NodeTree' => '1',
			'NodeType' => 'Data Manip: New',
			'NodePromptText' => 'Open Police Complaint Process',
			'NodePromptNotes' => 'share-your-story',
			'NodeResponseSet' => '194',
			'NodeDataBranch' => 'Complaints',
			'NodeDataStore' => 'Complaints:com_status'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 4,
			'NodeTree' => '1',
			'NodeParentID' => '3',
			'NodeParentOrder' => '2',
			'NodeType' => 'Branch Title',
			'NodePromptText' => 'Who\'s Involved',
			'NodePromptNotes' => 'whos-involved'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 260,
			'NodeTree' => '1',
			'NodeParentID' => '475',
			'NodeParentOrder' => '3',
			'NodeType' => 'Radio',
			'NodePromptText' => 'Do you think an officer\'s conduct was <span class="slBlueDark">improper or unprofessional</span>?<br /><br />
This includes conduct that looks bad for the department or for police in general.',
			'NodePromptNotes' => '<span class="slBlueDark">Example of Conduct Unbecoming:</span> An off-duty officer likes to get drunk at a local bar. He sometimes gets in fights, threatens patrons, and drives home drunk.',
			'NodeInternalNotes' => '*Statistics Note: These totals are only out of complaints offered this question.',
			'NodeDataStore' => 'AllegSilver:AlleSilUnbecoming',
			'NodeOpts' => '5'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 5,
			'NodeTree' => '1',
			'NodeParentID' => '3',
			'NodeParentOrder' => '3',
			'NodeType' => 'Branch Title',
			'NodePromptText' => 'Allegations (Silver)',
			'NodePromptNotes' => 'discover-allegations-next',
			'NodeDataBranch' => 'AllegSilver'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 261,
			'NodeTree' => '1',
			'NodeParentID' => '481',
			'NodeParentOrder' => '1',
			'NodeType' => 'Radio',
			'NodePromptText' => 'Was an officer <span class="slBlueDark">discourteous</span> in ways not included in other allegations?<br /><br />This includes the use of profanity, offensive language, loss of temper, verbal threats, impatience, or any rude behavior.',
			'NodeDataStore' => 'AllegSilver:AlleSilDiscourteous',
			'NodeOpts' => '5'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 517,
			'NodeTree' => '1',
			'NodeParentID' => '410',
			'NodeType' => 'Page',
			'NodePromptText' => 'Injuries',
			'NodePromptNotes' => 'was-anyone-injured',
			'NodePromptAfter' => 'Injuries::M::::M::::M::'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 6,
			'NodeTree' => '1',
			'NodeParentID' => '3',
			'NodeParentOrder' => '4',
			'NodeType' => 'Branch Title',
			'NodePromptText' => 'Go Gold',
			'NodePromptNotes' => 'go-gold'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 262,
			'NodeTree' => '1',
			'NodeParentID' => '550',
			'NodeType' => 'Checkbox',
			'NodePromptText' => 'Which officers conduct was improper?',
			'NodeResponseSet' => 'LoopItems::Officers',
			'NodeDataStore' => 'LinksOfficerAllegations:LnkOffAlleOffID',
			'NodeOpts' => '3'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 263,
			'NodeTree' => '1',
			'NodeParentID' => '551',
			'NodeParentOrder' => '1',
			'NodeType' => 'Checkbox',
			'NodePromptText' => 'Which officers were discourteous?',
			'NodeResponseSet' => 'LoopItems::Officers',
			'NodeDataStore' => 'LinksOfficerAllegations:LnkOffAlleOffID',
			'NodeOpts' => '3'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 8,
			'NodeTree' => '1',
			'NodeParentID' => '454',
			'NodeType' => 'User Sign Up',
			'NodePromptText' => '<p><b>Your story matters.</b> Please sign up or login so you can finish your complaint later, if we get interrupted. It is also important so we can contact you about the progress of your complaint.</p>',
			'NodeOpts' => '5'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 264,
			'NodeTree' => '1',
			'NodeParentID' => '550',
			'NodeParentOrder' => '1',
			'NodeType' => 'Long Text',
			'NodePromptText' => 'What makes you think that unbecoming conduct occurred?',
			'NodeDataStore' => 'Allegations:AlleDescription',
			'NodeCharLimit' => '150',
			'NodeOpts' => '465'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 520,
			'NodeTree' => '1',
			'NodeParentID' => '1162',
			'NodeType' => 'Radio',
			'NodePromptText' => 'Did [LoopItemLabel] receive medical care?',
			'NodeDataStore' => 'Civilians:CivHasInjuryCare'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 265,
			'NodeTree' => '1',
			'NodeParentID' => '551',
			'NodeParentOrder' => '2',
			'NodeType' => 'Long Text',
			'NodePromptText' => 'What makes you think that a discourteous act occurred?',
			'NodeDataStore' => 'Allegations:AlleDescription',
			'NodeCharLimit' => '150',
			'NodeOpts' => '465'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 267,
			'NodeTree' => '1',
			'NodeParentID' => '526',
			'NodeParentOrder' => '1',
			'NodeType' => 'Long Text',
			'NodePromptText' => 'To make sure your official report gets the respect it deserves, double-check your spelling and grammar. Also, try your best to refer to your allegations within your story.<br /><br />
These are your allegations: <span class="slBlueDark">[[List of Allegations]]</span>',
			'NodePromptAfter' => '<div class="pT15">Please do not provide addresses, phone numbers, or emails here.</p>
<style>
#n267FldID { height: 300px; margin-top: 20px; }
#req267 { display: none; }
</style>',
			'NodeDataStore' => 'Complaints:ComSummary',
			'NodeCharLimit' => '400',
			'NodeOpts' => '2015'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 523,
			'NodeTree' => '1',
			'NodeParentID' => '153',
			'NodeParentOrder' => '1',
			'NodeType' => 'Page',
			'NodePromptText' => 'Citation Details',
			'NodePromptNotes' => 'gold-info-citations',
			'NodePromptAfter' => 'Citation Details::M::::M::::M::'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 268,
			'NodeTree' => '1',
			'NodeParentID' => '452',
			'NodeParentOrder' => '3',
			'NodeType' => 'Radio',
			'NodePromptText' => 'Did you or anybody else get <b>charged with a crime</b>?',
			'NodeInternalNotes' => '7/11/19: This was changed from "Is anybody involved in this incident now under arrest, OR has anybody been charged with a crime?" to "Was anybody charged with a crime?" We did this because some users answered incorrectly. This question identifies pending charges to minimize harm, and we already ask about arrests later.',
			'NodeDataStore' => 'Complaints:ComAnyoneCharged',
			'NodeOpts' => '15'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 269,
			'NodeTree' => '1',
			'NodeParentID' => '528',
			'NodeParentOrder' => '5',
			'NodeType' => 'Checkbox',
			'NodePromptAfter' => '<style> #nLabel[[nID]] label { display: none; } #nLabel[[nID]] { margin-top: -50px; } 
</style>',
			'NodeOpts' => '5'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 270,
			'NodeTree' => '1',
			'NodeParentID' => '529',
			'NodeParentOrder' => '3',
			'NodeType' => 'Instructions Raw',
			'NodePromptText' => '[ Complaint Submitted! Redirecting to the finished complaint... ] hard-coded via OpenComplaintPrints.php function printEndOfComplaintRedirect'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 526,
			'NodeTree' => '1',
			'NodeParentID' => '420',
			'NodeParentOrder' => '1',
			'NodeType' => 'Page',
			'NodePromptText' => 'Review Your Story',
			'NodePromptNotes' => 'review-your-story',
			'NodePromptAfter' => 'Review Your Story::M::::M::::M::'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 527,
			'NodeTree' => '1',
			'NodeParentID' => '431',
			'NodeType' => 'Page',
			'NodePromptText' => 'Sharing Options',
			'NodePromptNotes' => 'sharing-options',
			'NodePromptAfter' => 'Sharing Options::M::::M::::M::'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 272,
			'NodeTree' => '1',
			'NodeParentID' => '551',
			'NodeType' => 'Checkbox',
			'NodePromptText' => 'Which victims experience discourtesy?',
			'NodeResponseSet' => 'LoopItems::Victims',
			'NodeDataStore' => 'LinksCivilianAllegations:LnkCivAlleCivID',
			'NodeOpts' => '3'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 528,
			'NodeTree' => '1',
			'NodeParentID' => '156',
			'NodeType' => 'Page',
			'NodePromptText' => 'Last Step! Confirm Your Complaint',
			'NodePromptNotes' => 'confirm-complaint',
			'NodePromptAfter' => 'Confirm Your Complaint::M::::M::::M::',
			'NodeCharLimit' => '-1'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 529,
			'NodeTree' => '1',
			'NodeParentID' => '156',
			'NodeParentOrder' => '1',
			'NodeType' => 'Page',
			'NodePromptText' => 'Complaint Finished!',
			'NodePromptNotes' => 'complaint-finished',
			'NodePromptAfter' => 'Complaint Finished!::M::::M::::M::'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 18,
			'NodeTree' => '1',
			'NodeParentID' => '455',
			'NodeType' => 'Instructions',
			'NodePromptText' => '<h2>Where did this incident happen?</h2>',
			'NodePromptAfter' => '<style> #node[[nID]] { margin-bottom: -30px; } </style>'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 530,
			'NodeTree' => '1',
			'NodeParentID' => '437',
			'NodeType' => 'Data Manip: New',
			'NodeDefault' => 'Y',
			'NodeDataBranch' => 'Civilians',
			'NodeDataStore' => 'Civilians:CivIsCreator'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 275,
			'NodeTree' => '1',
			'NodeParentID' => '457',
			'NodeParentOrder' => '1',
			'NodeType' => 'Radio',
			'NodePromptText' => 'Where did this incident begin?',
			'NodeResponseSet' => 'Definition::Scene Type',
			'NodeDataStore' => 'Scenes:ScnType',
			'NodeOpts' => '3'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 22,
			'NodeTree' => '1',
			'NodeParentID' => '455',
			'NodeParentOrder' => '1',
			'NodeType' => 'Text',
			'NodePromptText' => 'Street Address',
			'NodeDataStore' => 'Incidents:IncAddress',
			'NodeOpts' => '3'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 23,
			'NodeTree' => '1',
			'NodeParentID' => '455',
			'NodeParentOrder' => '2',
			'NodeType' => 'Text',
			'NodePromptText' => 'Address Line 2',
			'NodeDataStore' => 'Incidents:IncAddress2',
			'NodeOpts' => '3'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 279,
			'NodeTree' => '1',
			'NodeParentID' => '457',
			'NodeParentOrder' => '4',
			'NodeType' => 'Text',
			'NodePromptText' => 'Please use a few words to describe the scene?',
			'NodePromptNotes' => 'For example, "side of highway," "inside a mall," "an outdoor protest," etc.',
			'NodeDataStore' => 'Scenes:ScnDescription',
			'NodeOpts' => '3'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 24,
			'NodeTree' => '1',
			'NodeParentID' => '455',
			'NodeParentOrder' => '3',
			'NodeType' => 'Text',
			'NodePromptText' => 'City',
			'NodeDataStore' => 'Incidents:IncAddressCity',
			'NodeOpts' => '15'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 280,
			'NodeTree' => '1',
			'NodeParentID' => '2122',
			'NodeParentOrder' => '1',
			'NodeType' => 'Uploads',
			'NodePromptText' => 'Please upload any photos, sketches, police reports, warrants, official documents, and links to videos. These should describe the scene or show proof of what happened. If police injured someone, provide photos and medical records.<br />\r\n<div class=\"alert alert-danger fade in alert-dismissible show\" style=\"padding: 10px 15px; margin-top: 15px;\">\r\nWARNING: Only share what you want investigators to see. Do not upload anyoneï¿½s private information without their permission.<br /><br />For example, we recommend that you set the privacy on injury photos to \"public.\" But set medical documents to \"private,\" so they\\'re only visible to investigators.</div>',
			'NodeCharLimit' => '5',
			'NodeOpts' => '3'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 25,
			'NodeTree' => '1',
			'NodeParentID' => '455',
			'NodeParentOrder' => '4',
			'NodeType' => 'U.S. States',
			'NodePromptText' => 'State',
			'NodeResponseSet' => '[U.S.States]',
			'NodeDataStore' => 'Incidents:IncAddressState',
			'NodeOpts' => '15'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 281,
			'NodeTree' => '1',
			'NodeParentID' => '457',
			'NodeParentOrder' => '5',
			'NodeType' => 'Radio',
			'NodePromptText' => 'Were there any video surveillance cameras at the scene?',
			'NodePromptNotes' => 'These might be able to provide valuable evidence.',
			'NodeDataStore' => 'Scenes:ScnCCTV',
			'NodeOpts' => '3'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 537,
			'NodeTree' => '1',
			'NodeParentID' => '210',
			'NodeType' => 'Data Manip: Wrap',
			'NodeResponseSet' => '130',
			'NodeDataBranch' => 'Allegations',
			'NodeDataStore' => 'Allegations:AlleType'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 26,
			'NodeTree' => '1',
			'NodeParentID' => '455',
			'NodeParentOrder' => '5',
			'NodeType' => 'Text',
			'NodePromptText' => 'Zip Code',
			'NodeDataStore' => 'Incidents:IncAddressZip',
			'NodeOpts' => '3'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 282,
			'NodeTree' => '1',
			'NodeParentID' => '281',
			'NodeType' => 'Text',
			'NodePromptText' => 'Describe cameras that might have recorded the incident.',
			'NodeDataStore' => 'Scenes:ScnCCTVDesc',
			'NodeOpts' => '3'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 538,
			'NodeTree' => '1',
			'NodeParentID' => '213',
			'NodeType' => 'Data Manip: Wrap',
			'NodeResponseSet' => '119',
			'NodeDataBranch' => 'Allegations',
			'NodeDataStore' => 'Allegations:AlleType'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 27,
			'NodeTree' => '1',
			'NodeParentID' => '455',
			'NodeParentOrder' => '6',
			'NodeType' => 'Text',
			'NodePromptText' => 'If you don\'t know the address, please describe nearby landmarks.',
			'NodeDataStore' => 'Incidents:IncLandmarks',
			'NodeOpts' => '3'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 539,
			'NodeTree' => '1',
			'NodeParentID' => '218',
			'NodeType' => 'Data Manip: Wrap',
			'NodeResponseSet' => '120',
			'NodeDataBranch' => 'Allegations',
			'NodeDataStore' => 'Allegations:AlleType'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 28,
			'NodeTree' => '1',
			'NodeParentID' => '459',
			'NodeParentOrder' => '1',
			'NodeType' => 'Radio',
			'NodePromptText' => 'How were <span class="slBlueDark">you</span> involved with this incident?',
			'NodeDataStore' => 'Civilians:CivRole',
			'NodeOpts' => '5'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 540,
			'NodeTree' => '1',
			'NodeParentID' => '223',
			'NodeType' => 'Data Manip: Wrap',
			'NodeResponseSet' => '115',
			'NodeDataBranch' => 'Allegations',
			'NodeDataStore' => 'Allegations:AlleType'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 541,
			'NodeTree' => '1',
			'NodeParentID' => '228',
			'NodeType' => 'Data Manip: Wrap',
			'NodeResponseSet' => '116',
			'NodeDataBranch' => 'Allegations',
			'NodeDataStore' => 'Allegations:AlleType'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 30,
			'NodeTree' => '1',
			'NodeParentID' => '604',
			'NodeParentOrder' => '1',
			'NodeType' => 'Text',
			'NodePromptText' => 'First Name',
			'NodeDataStore' => 'PersonContact:PrsnNameFirst',
			'NodeOpts' => '15'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 31,
			'NodeTree' => '1',
			'NodeParentID' => '604',
			'NodeParentOrder' => '2',
			'NodeType' => 'Text',
			'NodePromptText' => 'Middle Name',
			'NodeDataStore' => 'PersonContact:PrsnNameMiddle',
			'NodeOpts' => '3'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 543,
			'NodeTree' => '1',
			'NodeParentID' => '235',
			'NodeType' => 'Data Manip: Wrap',
			'NodeResponseSet' => '124',
			'NodeDataBranch' => 'Allegations',
			'NodeDataStore' => 'Allegations:AlleType'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 32,
			'NodeTree' => '1',
			'NodeParentID' => '604',
			'NodeParentOrder' => '3',
			'NodeType' => 'Text',
			'NodePromptText' => 'Last Name',
			'NodeDataStore' => 'PersonContact:PrsnNameLast',
			'NodeOpts' => '15'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 544,
			'NodeTree' => '1',
			'NodeParentID' => '240',
			'NodeType' => 'Data Manip: Wrap',
			'NodeResponseSet' => '127',
			'NodeDataBranch' => 'Allegations',
			'NodeDataStore' => 'Allegations:AlleType'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 33,
			'NodeTree' => '1',
			'NodeParentID' => '604',
			'NodeParentOrder' => '4',
			'NodeType' => 'Text',
			'NodePromptText' => 'Street Address',
			'NodeDataStore' => 'PersonContact:PrsnAddress',
			'NodeOpts' => '15'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 545,
			'NodeTree' => '1',
			'NodeParentID' => '427',
			'NodeType' => 'Data Manip: Wrap',
			'NodeResponseSet' => '132',
			'NodeDataBranch' => 'Allegations',
			'NodeDataStore' => 'Allegations:AlleType'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 34,
			'NodeTree' => '1',
			'NodeParentID' => '604',
			'NodeParentOrder' => '5',
			'NodeType' => 'Text',
			'NodePromptText' => 'Address Line 2',
			'NodeDataStore' => 'PersonContact:PrsnAddress2',
			'NodeOpts' => '3'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 546,
			'NodeTree' => '1',
			'NodeParentID' => '243',
			'NodeType' => 'Data Manip: Wrap',
			'NodeResponseSet' => '125',
			'NodeDataBranch' => 'Allegations',
			'NodeDataStore' => 'Allegations:AlleType'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 35,
			'NodeTree' => '1',
			'NodeParentID' => '604',
			'NodeParentOrder' => '6',
			'NodeType' => 'Text',
			'NodePromptText' => 'City',
			'NodeDataStore' => 'PersonContact:PrsnAddressCity',
			'NodeOpts' => '15'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 547,
			'NodeTree' => '1',
			'NodeParentID' => '248',
			'NodeType' => 'Data Manip: Wrap',
			'NodeResponseSet' => '126',
			'NodeDataBranch' => 'Allegations',
			'NodeDataStore' => 'Allegations:AlleType'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 36,
			'NodeTree' => '1',
			'NodeParentID' => '604',
			'NodeParentOrder' => '7',
			'NodeType' => 'U.S. States',
			'NodePromptText' => 'State',
			'NodeResponseSet' => '[U.S.States]',
			'NodeDataStore' => 'PersonContact:PrsnAddressState',
			'NodeOpts' => '15'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 548,
			'NodeTree' => '1',
			'NodeParentID' => '252',
			'NodeType' => 'Data Manip: Wrap',
			'NodeResponseSet' => '121',
			'NodeDataBranch' => 'Allegations',
			'NodeDataStore' => 'Allegations:AlleType'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 37,
			'NodeTree' => '1',
			'NodeParentID' => '604',
			'NodeParentOrder' => '8',
			'NodeType' => 'Text',
			'NodePromptText' => 'Zip Code',
			'NodeDataStore' => 'PersonContact:PrsnAddressZip',
			'NodeOpts' => '15'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 293,
			'NodeTree' => '1',
			'NodeParentID' => '2030',
			'NodeParentOrder' => '1',
			'NodeType' => 'Checkbox',
			'NodePromptText' => 'Which officers made the arrest(s)?',
			'NodeResponseSet' => 'LoopItems::Officers',
			'NodeDataStore' => 'LinksOfficerEvents:LnkOffEveOffID'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 38,
			'NodeTree' => '1',
			'NodeParentID' => '604',
			'NodeParentOrder' => '9',
			'NodeType' => 'Text',
			'NodePromptText' => 'Phone',
			'NodeDataStore' => 'PersonContact:PrsnPhoneHome',
			'NodeOpts' => '15'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 294,
			'NodeTree' => '1',
			'NodeParentID' => '2047',
			'NodeParentOrder' => '1',
			'NodeType' => 'Checkbox',
			'NodePromptText' => 'Which officers used [ForceType] force?',
			'NodeResponseSet' => 'LoopItems::Officers',
			'NodeDataStore' => 'LinksOfficerEvents:LnkOffEveOffID'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 550,
			'NodeTree' => '1',
			'NodeParentID' => '260',
			'NodeType' => 'Data Manip: Wrap',
			'NodeResponseSet' => '128',
			'NodeDataBranch' => 'Allegations',
			'NodeDataStore' => 'Allegations:AlleType'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 39,
			'NodeTree' => '1',
			'NodeParentID' => '604',
			'NodeParentOrder' => '10',
			'NodeType' => 'Email',
			'NodePromptText' => 'Email Address',
			'NodeInternalNotes' => 'Auto-fill if provided during login',
			'NodeDataStore' => 'PersonContact:PrsnEmail',
			'NodeOpts' => '15'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 295,
			'NodeTree' => '1',
			'NodeParentID' => '2029',
			'NodeParentOrder' => '1',
			'NodeType' => 'Checkbox',
			'NodePromptText' => 'Which officers performed the search?',
			'NodeResponseSet' => 'LoopItems::Officers',
			'NodeDataStore' => 'LinksOfficerEvents:LnkOffEveOffID'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 551,
			'NodeTree' => '1',
			'NodeParentID' => '261',
			'NodeType' => 'Data Manip: Wrap',
			'NodeResponseSet' => '129',
			'NodeDataBranch' => 'Allegations',
			'NodeDataStore' => 'Allegations:AlleType'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 296,
			'NodeTree' => '1',
			'NodeParentID' => '2026',
			'NodeParentOrder' => '1',
			'NodeType' => 'Checkbox',
			'NodePromptText' => 'Which officers initiated the stop?',
			'NodeResponseSet' => 'LoopItems::Officers',
			'NodeDataStore' => 'LinksOfficerEvents:LnkOffEveOffID'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 41,
			'NodeTree' => '1',
			'NodeParentID' => '1198',
			'NodeType' => 'Date',
			'NodePromptText' => 'Date of Birth',
			'NodeDataStore' => 'PersonContact:PrsnBirthday',
			'NodeCharLimit' => '-1',
			'NodeOpts' => '3'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 297,
			'NodeTree' => '1',
			'NodeParentID' => '2026',
			'NodeParentOrder' => '3',
			'NodeType' => 'Checkbox',
			'NodePromptText' => 'Did an officer give a reason for the stop?',
			'NodeResponseSet' => 'Definition::Reason for Vehicle Stop',
			'NodeDataStore' => 'StopReasons:StopReasReason'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 42,
			'NodeTree' => '1',
			'NodeParentID' => '1197',
			'NodeType' => 'Gender',
			'NodePromptText' => 'Gender',
			'NodePromptAfter' => '<style> #node[[nID]] { margin-top: -20px; } </style>',
			'NodeDataStore' => 'PhysicalDesc:PhysGender',
			'NodeOpts' => '3'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 298,
			'NodeTree' => '1',
			'NodeParentID' => '297',
			'NodeType' => 'Text',
			'NodePromptText' => 'Describe the stated reason.',
			'NodeDataStore' => 'Stops:StopStatedReasonDesc',
			'NodeOpts' => '3'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 43,
			'NodeTree' => '1',
			'NodeParentID' => '1197',
			'NodeParentOrder' => '1',
			'NodeType' => 'Checkbox',
			'NodePromptText' => 'Race',
			'NodePromptNotes' => 'Check all that apply to you.',
			'NodeResponseSet' => 'Definition::Races',
			'NodeDataStore' => 'PhysicalDescRace:PhysRaceRace',
			'NodeOpts' => '3'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 299,
			'NodeTree' => '1',
			'NodeParentID' => '2026',
			'NodeParentOrder' => '2',
			'NodeType' => 'Checkbox',
			'NodePromptText' => 'Did an officer give a reason for the stop?',
			'NodeResponseSet' => 'Definition::Reason for Pedestrian Stop',
			'NodeDataStore' => 'StopReasons:StopReasReason'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 44,
			'NodeTree' => '1',
			'NodeParentID' => '458',
			'NodeParentOrder' => '3',
			'NodeType' => 'Text',
			'NodePromptText' => 'What\'s your occupation or something important about you?',
			'NodePromptNotes' => 'For example, "I\'m a disabled veteran" or "I\'m a high school student."',
			'NodeDataStore' => 'Civilians:CivOccupation',
			'NodeOpts' => '3'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 300,
			'NodeTree' => '1',
			'NodeParentID' => '299',
			'NodeType' => 'Long Text',
			'NodePromptText' => 'Describe the stated reason.',
			'NodeDataStore' => 'Stops:StopStatedReasonDesc',
			'NodeOpts' => '3'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 301,
			'NodeTree' => '1',
			'NodeParentID' => '2026',
			'NodeParentOrder' => '4',
			'NodeType' => 'Radio',
			'NodePromptText' => 'Did anybody ask to leave?',
			'NodeInternalNotes' => 'NOT Home or Private Residence, or Workplace',
			'NodeDataStore' => 'Stops:StopSubjectAskedToLeave'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 302,
			'NodeTree' => '1',
			'NodeParentID' => '301',
			'NodeType' => 'Text',
			'NodePromptText' => 'Describe what they asked.',
			'NodeDataStore' => 'Stops:StopSubjectStatementsDesc',
			'NodeOpts' => '3'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 47,
			'NodeTree' => '1',
			'NodeParentID' => '2049',
			'NodeType' => 'Radio',
			'NodePromptText' => 'Did you record the incident with audio or video?',
			'NodeDataStore' => 'Civilians:CivCameraRecord',
			'NodeOpts' => '3'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 303,
			'NodeTree' => '1',
			'NodeParentID' => '2026',
			'NodeParentOrder' => '5',
			'NodeType' => 'Radio',
			'NodePromptText' => 'Did an officer ask for anybody\'s ID?',
			'NodeDataStore' => 'Stops:StopRequestID'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 304,
			'NodeTree' => '1',
			'NodeParentID' => '303',
			'NodeType' => 'Radio',
			'NodePromptText' => 'Did anybody provide ID to an officer?',
			'NodeDataStore' => 'Stops:StopRefuseID',
			'NodeOpts' => '3'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 561,
			'NodeTree' => '1',
			'NodeParentID' => '311',
			'NodeType' => 'Data Manip: Wrap',
			'NodeResponseSet' => '118',
			'NodeDataBranch' => 'Allegations',
			'NodeDataStore' => 'Allegations:AlleType'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 307,
			'NodeTree' => '1',
			'NodeParentID' => '2026',
			'NodeParentOrder' => '12',
			'NodeType' => 'Radio',
			'NodePromptText' => 'Did an officer enter a private home or workplace?',
			'NodeInternalNotes' => 'Home or Private Residence, or Workplace',
			'NodeDataStore' => 'Stops:StopEnterPrivateProperty'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 563,
			'NodeTree' => '1',
			'NodeParentID' => '268',
			'NodeType' => 'Radio',
			'NodePromptText' => '<b>Have ALL of these charges been resolved?</b> That means the charges have been dropped or the people charged have been found \'guilty\' or \'not guilty\' in court.',
			'NodeDataStore' => 'Complaints:ComAllChargesResolved',
			'NodeOpts' => '5'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 308,
			'NodeTree' => '1',
			'NodeParentID' => '307',
			'NodeType' => 'Radio',
			'NodePromptText' => 'Did an officer request permission to enter?',
			'NodeDataStore' => 'Stops:StopPermissionEnter',
			'NodeOpts' => '3'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 309,
			'NodeTree' => '1',
			'NodeParentID' => '308',
			'NodeType' => 'Text',
			'NodePromptText' => 'Describe what happened.',
			'NodeDataStore' => 'Stops:StopEnterPrivatePropertyDesc',
			'NodeOpts' => '3'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 310,
			'NodeTree' => '1',
			'NodeParentID' => '307',
			'NodeParentOrder' => '1',
			'NodeType' => 'Radio',
			'NodePromptText' => 'Did anybody grant permission for an officer to enter?',
			'NodeDataStore' => 'Stops:StopPermissionEnterGranted',
			'NodeOpts' => '3'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 566,
			'NodeTree' => '1',
			'NodeParentID' => '139',
			'NodeType' => 'Page',
			'NodePromptText' => 'Your Contact Information',
			'NodePromptNotes' => 'your-contact-info',
			'NodePromptAfter' => 'Your Contact Information::M::::M::::M::'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 55,
			'NodeTree' => '1',
			'NodeParentID' => '140',
			'NodeType' => 'Loop Root',
			'NodePromptText' => '<h2 class="slBlueDark">Who\'s Involved: Adding Victims</h2>
<br />Please provide information about the victims in this incident. These are people who were harmed by an alleged act of police misconduct.<br /><br />If there were no [other] victims, go to the next section.',
			'NodePromptNotes' => 'add-victims',
			'NodePromptAfter' => 'Add Victims - Your Complaint::M::::M::::M::',
			'NodeDataBranch' => 'Victims',
			'NodeDataStore' => 'Civilians:CivID'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 311,
			'NodeTree' => '1',
			'NodeParentID' => '310',
			'NodeType' => 'Radio',
			'NodePromptText' => 'Did an officer enter anyway without a warrant?',
			'NodeDataBranch' => 'AllegSilver',
			'NodeDataStore' => 'AllegSilver:AlleSilWrongfulEntry',
			'NodeOpts' => '15'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 56,
			'NodeTree' => '1',
			'NodeParentID' => '1200',
			'NodeType' => 'Radio',
			'NodePromptText' => 'Do you know the name of this victim?',
			'NodeDataStore' => 'Civilians:CivGiveName',
			'NodeOpts' => '3'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 312,
			'NodeTree' => '1',
			'NodeParentID' => '561',
			'NodeType' => 'Long Text',
			'NodePromptText' => 'Describe what happened.',
			'NodeDataStore' => 'Allegations:AlleDescription',
			'NodeCharLimit' => '150',
			'NodeOpts' => '465'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 568,
			'NodeTree' => '1',
			'NodeParentID' => '458',
			'NodeType' => 'Instructions',
			'NodePromptText' => '<h2 id="fixedHeader" style="width: 1185px; min-width: 1185px; max-width: 1185px;">About You</h2>',
			'NodePromptAfter' => '<style> #node[[nID]] { margin-bottom: -30px; } </style>'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 57,
			'NodeTree' => '1',
			'NodeParentID' => '1131',
			'NodeType' => 'Text',
			'NodePromptText' => 'First Name',
			'NodeDataStore' => 'PersonContact:PrsnNameFirst',
			'NodeOpts' => '3'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 58,
			'NodeTree' => '1',
			'NodeParentID' => '1131',
			'NodeParentOrder' => '1',
			'NodeType' => 'Text',
			'NodePromptText' => 'Last Name',
			'NodeDataStore' => 'PersonContact:PrsnNameLast',
			'NodeOpts' => '3'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 314,
			'NodeTree' => '1',
			'NodeParentID' => '2026',
			'NodeParentOrder' => '10',
			'NodeType' => 'Radio',
			'NodePromptText' => 'Was anybody frisked during this stop?',
			'NodeDataStore' => 'Stops:StopSubjectFrisk'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 59,
			'NodeTree' => '1',
			'NodeParentID' => '1132',
			'NodeType' => 'Text',
			'NodePromptText' => 'Street Address',
			'NodeDataStore' => 'PersonContact:PrsnAddress',
			'NodeOpts' => '3'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 315,
			'NodeTree' => '1',
			'NodeParentID' => '2026',
			'NodeParentOrder' => '11',
			'NodeType' => 'Radio',
			'NodePromptText' => 'Was anybody handcuffed during this stop?',
			'NodeDataStore' => 'Stops:StopSubjectHandcuffed',
			'NodeOpts' => '3'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 60,
			'NodeTree' => '1',
			'NodeParentID' => '1132',
			'NodeParentOrder' => '1',
			'NodeType' => 'Text',
			'NodePromptText' => 'Address Line 2',
			'NodeDataStore' => 'PersonContact:PrsnAddress2',
			'NodeOpts' => '3'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 316,
			'NodeTree' => '1',
			'NodeParentID' => '315',
			'NodeType' => 'Radio',
			'NodePromptText' => 'Was anybody injured from being handcuffed?',
			'NodeDataStore' => 'Stops:StopStopSubjectHandcuffInjYN',
			'NodeOpts' => '3'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 61,
			'NodeTree' => '1',
			'NodeParentID' => '1132',
			'NodeParentOrder' => '2',
			'NodeType' => 'Text',
			'NodePromptText' => 'City',
			'NodeDataStore' => 'PersonContact:PrsnAddressCity',
			'NodeOpts' => '3'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 62,
			'NodeTree' => '1',
			'NodeParentID' => '1132',
			'NodeParentOrder' => '3',
			'NodeType' => 'U.S. States',
			'NodePromptText' => 'State',
			'NodeResponseSet' => '[U.S.States]',
			'NodeDataStore' => 'PersonContact:PrsnAddressState',
			'NodeOpts' => '3'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 63,
			'NodeTree' => '1',
			'NodeParentID' => '1132',
			'NodeParentOrder' => '4',
			'NodeType' => 'Text',
			'NodePromptText' => 'Zip Code',
			'NodeDataStore' => 'PersonContact:PrsnAddressZip',
			'NodeOpts' => '3'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 319,
			'NodeTree' => '1',
			'NodeParentID' => '2029',
			'NodeParentOrder' => '2',
			'NodeType' => 'Radio',
			'NodePromptText' => 'Did an officer give a reason for searching anybody?',
			'NodeDataStore' => 'Searches:SrchStatedReason',
			'NodeOpts' => '3'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 64,
			'NodeTree' => '1',
			'NodeParentID' => '1132',
			'NodeParentOrder' => '5',
			'NodeType' => 'Text',
			'NodePromptText' => 'Phone',
			'NodeDataStore' => 'PersonContact:PrsnPhoneHome',
			'NodeOpts' => '3'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 320,
			'NodeTree' => '1',
			'NodeParentID' => '319',
			'NodeType' => 'Text',
			'NodePromptText' => 'Describe the stated reason.',
			'NodeDataStore' => 'Searches:SrchStatedReasonDesc',
			'NodeOpts' => '3'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 65,
			'NodeTree' => '1',
			'NodeParentID' => '1132',
			'NodeParentOrder' => '6',
			'NodeType' => 'Email',
			'NodePromptText' => 'Email Address',
			'NodeDataStore' => 'PersonContact:PrsnEmail',
			'NodeOpts' => '3'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 321,
			'NodeTree' => '1',
			'NodeParentID' => '2029',
			'NodeType' => 'Instructions',
			'NodePromptText' => '<h2>More about the Search / Seizure:</h2>'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 66,
			'NodeTree' => '1',
			'NodeParentID' => '1132',
			'NodeParentOrder' => '7',
			'NodeType' => 'Text',
			'NodePromptText' => 'Facebook Profile URL',
			'NodeDataStore' => 'PersonContact:PrsnFacebook',
			'NodeOpts' => '3'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 322,
			'NodeTree' => '1',
			'NodeParentID' => '2029',
			'NodeParentOrder' => '3',
			'NodeType' => 'Radio',
			'NodePromptText' => 'Did an officer have a search warrant?',
			'NodeDataStore' => 'Searches:SrchOfficerWarrant',
			'NodeOpts' => '3'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 67,
			'NodeTree' => '1',
			'NodeParentID' => '606',
			'NodeParentOrder' => '2',
			'NodeType' => 'Radio',
			'NodePromptText' => 'Age Estimate',
			'NodeResponseSet' => 'Definition::Age Ranges',
			'NodeDataStore' => 'PhysicalDesc:PhysAge',
			'NodeOpts' => '3'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 323,
			'NodeTree' => '1',
			'NodeParentID' => '1153',
			'NodeType' => 'Text',
			'NodePromptText' => 'What did the warrant say?',
			'NodeDataStore' => 'Searches:SrchOfficerWarrantSay',
			'NodeOpts' => '3'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 68,
			'NodeTree' => '1',
			'NodeParentID' => '1441',
			'NodeParentOrder' => '1',
			'NodeType' => 'Instructions',
			'NodePromptText' => '<p style="margin-top: 35px; margin-bottom: -20px;">Most police investigators require this. We will never make it public, sell it, or mail you stuff.</p>',
			'NodeOpts' => '3'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 580,
			'NodeTree' => '1',
			'NodeParentID' => '564',
			'NodeParentOrder' => '1',
			'NodeType' => 'Data Manip: Update',
			'NodeResponseSet' => '194',
			'NodeDataStore' => 'Complaints:com_status'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 325,
			'NodeTree' => '1',
			'NodeParentID' => '2029',
			'NodeParentOrder' => '4',
			'NodeType' => 'Radio',
			'NodePromptText' => 'Did an officer request permission to search anything?',
			'NodeDataStore' => 'Searches:SrchOfficerRequest',
			'NodeOpts' => '3'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 581,
			'NodeTree' => '1',
			'NodeParentID' => '564',
			'NodeParentOrder' => '1',
			'NodeType' => 'Data Manip: Update',
			'NodeResponseSet' => '295',
			'NodeDataStore' => 'Complaints:com_type'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 70,
			'NodeTree' => '1',
			'NodeParentID' => '1200',
			'NodeParentOrder' => '1',
			'NodeType' => 'Radio',
			'NodePromptText' => 'Do you have any contact information for this victim, such as their address, phone number, or email? (This can help the investigation ï¿½ but we will not make it public.)',
			'NodeDataStore' => 'Civilians:CivGiveContactInfo',
			'NodeOpts' => '3'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 71,
			'NodeTree' => '1',
			'NodeParentID' => '1131',
			'NodeType' => 'Text',
			'NodePromptText' => 'Middle Name',
			'NodeDataStore' => 'PersonContact:PrsnNameMiddle',
			'NodeOpts' => '3'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 327,
			'NodeTree' => '1',
			'NodeParentID' => '325',
			'NodeType' => 'Text',
			'NodePromptText' => 'What did the officer say or do?',
			'NodeDataStore' => 'Searches:SrchOfficerRequestDesc',
			'NodeOpts' => '3'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 328,
			'NodeTree' => '1',
			'NodeParentID' => '2029',
			'NodeParentOrder' => '5',
			'NodeType' => 'Radio',
			'NodePromptText' => 'Did anybody consent to the search?',
			'NodeDataStore' => 'Searches:SrchSubjectConsent',
			'NodeOpts' => '3'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 73,
			'NodeTree' => '1',
			'NodeParentID' => '605',
			'NodeType' => 'Gender Not Sure',
			'NodePromptText' => 'Gender',
			'NodeDataStore' => 'PhysicalDesc:PhysGender',
			'NodeOpts' => '3'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 329,
			'NodeTree' => '1',
			'NodeParentID' => '328',
			'NodeType' => 'Text',
			'NodePromptText' => 'What did they say or do?',
			'NodeDataStore' => 'Searches:SrchSubjectSay',
			'NodeOpts' => '3'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 74,
			'NodeTree' => '1',
			'NodeParentID' => '606',
			'NodeParentOrder' => '1',
			'NodeType' => 'Checkbox',
			'NodePromptText' => 'Race',
			'NodeResponseSet' => 'Definition::Races',
			'NodeDataStore' => 'PhysicalDescRace:PhysRaceRace',
			'NodeOpts' => '3'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 330,
			'NodeTree' => '1',
			'NodeParentID' => '2029',
			'NodeParentOrder' => '6',
			'NodeType' => 'Radio',
			'NodePromptText' => 'Did an officer make threats or lie to get permission to search?',
			'NodeDataStore' => 'Searches:SrchOfficerThreats',
			'NodeOpts' => '3'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 75,
			'NodeTree' => '1',
			'NodeParentID' => '461',
			'NodeParentOrder' => '5',
			'NodeType' => 'Text',
			'NodePromptText' => 'What\'s the occupation or something important about this victim?',
			'NodePromptNotes' => 'For example, "he\'s a disabled veteran" or "she\'s a high school student."',
			'NodeDataStore' => 'Civilians:CivOccupation',
			'NodeOpts' => '3'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 331,
			'NodeTree' => '1',
			'NodeParentID' => '330',
			'NodeType' => 'Text',
			'NodePromptText' => 'What did the officer say or do?',
			'NodeDataStore' => 'Searches:SrchOfficerThreatsDesc',
			'NodeOpts' => '3'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 78,
			'NodeTree' => '1',
			'NodeParentID' => '605',
			'NodeParentOrder' => '3',
			'NodeType' => 'Feet Inches',
			'NodePromptText' => 'Height Estimate',
			'NodeDataStore' => 'PhysicalDesc:PhysHeight',
			'NodeOpts' => '3'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 79,
			'NodeTree' => '1',
			'NodeParentID' => '605',
			'NodeParentOrder' => '4',
			'NodeType' => 'Radio',
			'NodePromptText' => 'Body Type',
			'NodeResponseSet' => 'Definition::Body Types',
			'NodeDataStore' => 'PhysicalDesc:PhysBodyType',
			'NodeOpts' => '3'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 335,
			'NodeTree' => '1',
			'NodeParentID' => '2029',
			'NodeParentOrder' => '7',
			'NodeType' => 'Radio',
			'NodePromptText' => 'Was a K9 (dog) used during this search?',
			'NodeDataStore' => 'Searches:SrchK9sniff'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 591,
			'NodeTree' => '1',
			'NodeParentID' => '1172',
			'NodeParentOrder' => '2',
			'NodeType' => 'Radio',
			'NodePromptText' => 'Do you think the <span class="slBlueDark">arrest charges</span> filed against anybody were a form of <span class="slBlueDark">retaliation</span>?',
			'NodePromptNotes' => '<span class="slBlueDark">Example of Retaliatory Charges:</span> Upset about the arrest of his wife, a man accidentally shoves an officer. Another officer responds by violently arresting the man. He\'s charged with "disturbing the peace," "resisting arrest," and "assaulting an officer."',
			'NodeDataStore' => 'AllegSilver:AlleSilArrestRetaliatory',
			'NodeOpts' => '5'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 336,
			'NodeTree' => '1',
			'NodeParentID' => '2029',
			'NodeParentOrder' => '8',
			'NodeType' => 'Radio',
			'NodePromptText' => 'Was anybody strip searched during this incident? This is a search for concealed items that removes some or all clothing to reveal intimate areas of the body. Please do not include searches that occurred at the police station.',
			'NodeDataStore' => 'Searches:SrchStrip',
			'NodeOpts' => '3'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 592,
			'NodeTree' => '1',
			'NodeParentID' => '591',
			'NodeType' => 'Data Manip: Wrap',
			'NodeResponseSet' => '122',
			'NodeDataBranch' => 'Allegations',
			'NodeDataStore' => 'Allegations:AlleType'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 337,
			'NodeTree' => '1',
			'NodeParentID' => '336',
			'NodeType' => 'Long Text',
			'NodePromptText' => 'We understand that this isn\'t easy, but please provide as much detail as you can about the strip search.',
			'NodeDataStore' => 'Searches:SrchStripSearchDesc',
			'NodeOpts' => '3'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 593,
			'NodeTree' => '1',
			'NodeParentID' => '592',
			'NodeParentOrder' => '1',
			'NodeType' => 'Checkbox',
			'NodePromptText' => 'Which officers used retaliation?',
			'NodeResponseSet' => 'LoopItems::Officers',
			'NodeDataStore' => 'LinksOfficerAllegations:LnkOffAlleOffID'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 338,
			'NodeTree' => '1',
			'NodeParentID' => '2027',
			'NodeParentOrder' => '1',
			'NodeType' => 'Radio',
			'NodePromptText' => 'Were any illegal items discovered in this search?',
			'NodeDataStore' => 'Searches:SrchContrabandDiscovered'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 594,
			'NodeTree' => '1',
			'NodeParentID' => '592',
			'NodeType' => 'Checkbox',
			'NodePromptText' => 'Which victims experienced retaliation?',
			'NodeResponseSet' => 'LoopItems::Victims',
			'NodeDataStore' => 'LinksCivilianAllegations:LnkCivAlleCivID'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 339,
			'NodeTree' => '1',
			'NodeParentID' => '338',
			'NodeType' => 'Checkbox',
			'NodePromptText' => 'Select the items that were found:',
			'NodeResponseSet' => 'Definition::Contraband Types',
			'NodeDataStore' => 'SearchContra:SrchConType',
			'NodeOpts' => '3'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 595,
			'NodeTree' => '1',
			'NodeParentID' => '592',
			'NodeParentOrder' => '2',
			'NodeType' => 'Long Text',
			'NodePromptText' => 'What makes you think that these charges were retaliatory?',
			'NodeDataStore' => 'Allegations:AlleDescription',
			'NodeOpts' => '5'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 596,
			'NodeTree' => '1',
			'NodeParentID' => '527',
			'NodeParentOrder' => '4',
			'NodeType' => 'Long Text',
			'NodePromptText' => 'Do you have any suggestions or feedback for us?',
			'NodePromptNotes' => 'For example, please let us know if we missed anything.',
			'NodeDataStore' => 'Complaints:ComFeedback'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 86,
			'NodeTree' => '1',
			'NodeParentID' => '605',
			'NodeParentOrder' => '5',
			'NodeType' => 'Text',
			'NodePromptText' => 'Physical Description',
			'NodePromptNotes' => 'For example, do you remember what their hair, eyes, or clothes looked like? Did they have any distinguishing marks, disabilities, or a distinct voice? Any extra details can help identify this victim.',
			'NodeDataStore' => 'PhysicalDesc:PhysGeneralDesc',
			'NodeOpts' => '15'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 343,
			'NodeTree' => '1',
			'NodeParentID' => '2047',
			'NodeType' => 'Instructions',
			'NodePromptText' => '<h2>More about the [ForceType]</h2>',
			'NodePromptAfter' => '<style> #node[[nID]] { margin-bottom: -30px; } </style>'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 344,
			'NodeTree' => '1',
			'NodeParentID' => '2047',
			'NodeParentOrder' => '2',
			'NodeType' => 'Checkbox',
			'NodePromptText' => 'What types of control holds were used?',
			'NodeResponseSet' => 'Definition::Force Type - Control Hold',
			'NodeDataStore' => 'ForceSubType:ForceSubType',
			'NodeOpts' => '3'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 600,
			'NodeTree' => '1',
			'NodeParentID' => '2030',
			'NodeParentOrder' => '3',
			'NodeType' => 'Radio',
			'NodePromptText' => 'Was anybody strip searched at the police station? This is a search for concealed items that removes some or all clothing to reveal intimate areas of the body.',
			'NodeDataStore' => 'Arrests:ArstStrip'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 89,
			'NodeTree' => '1',
			'NodeParentID' => '461',
			'NodeParentOrder' => '6',
			'NodeType' => 'Radio',
			'NodePromptText' => 'Did this victim record the incident with audio or video?',
			'NodeDataStore' => 'Civilians:CivCameraRecord',
			'NodeOpts' => '3'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 345,
			'NodeTree' => '1',
			'NodeParentID' => '2047',
			'NodeParentOrder' => '3',
			'NodeType' => 'Checkbox',
			'NodePromptText' => 'What types of body weapons were used?',
			'NodeResponseSet' => 'Definition::Force Type - Body Weapons',
			'NodeDataStore' => 'ForceSubType:ForceSubType',
			'NodeOpts' => '3'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 601,
			'NodeTree' => '1',
			'NodeParentID' => '600',
			'NodeType' => 'Text',
			'NodePromptText' => 'We understand that this isn\'t easy, but please provide as much detail as you can about the strip search.',
			'NodeDataStore' => 'Arrests:ArstStripSearchDesc'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 346,
			'NodeTree' => '1',
			'NodeParentID' => '2047',
			'NodeParentOrder' => '4',
			'NodeType' => 'Checkbox',
			'NodePromptText' => 'What types of takedowns were used?',
			'NodeResponseSet' => 'Definition::Force Type - Takedown',
			'NodeDataStore' => 'ForceSubType:ForceSubType',
			'NodeOpts' => '3'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 347,
			'NodeTree' => '1',
			'NodeParentID' => '2047',
			'NodeParentOrder' => '5',
			'NodeType' => 'Text',
			'NodePromptText' => 'Describe the gun the best that you can.',
			'NodeDataStore' => 'Force:ForGunDesc',
			'NodeOpts' => '3'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 348,
			'NodeTree' => '1',
			'NodeParentID' => '347',
			'NodeType' => 'Radio',
			'NodePromptText' => 'If known, what type of ammo was used?',
			'NodeResponseSet' => 'Definition::Gun Ammo Types',
			'NodeDataStore' => 'Force:ForGunAmmoType',
			'NodeOpts' => '3'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 604,
			'NodeTree' => '1',
			'NodeParentID' => '1441',
			'NodeParentOrder' => '2',
			'NodeType' => 'Data Manip: Wrap',
			'NodeDataBranch' => 'PersonContact'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 349,
			'NodeTree' => '1',
			'NodeParentID' => '2047',
			'NodeParentOrder' => '8',
			'NodeType' => 'Text:Number',
			'NodePromptText' => 'How many times was anybody struck with [ForceType] force?',
			'NodePromptAfter' => '<style> #n349fldID { width: 60px; } </style>',
			'NodeDataStore' => 'Force:ForHowManyTimes'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 605,
			'NodeTree' => '1',
			'NodeParentID' => '461',
			'NodeParentOrder' => '2',
			'NodeType' => 'Data Manip: Wrap',
			'NodeDataBranch' => 'PhysicalDesc'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 350,
			'NodeTree' => '1',
			'NodeParentID' => '2047',
			'NodeParentOrder' => '9',
			'NodeType' => 'Checkbox',
			'NodePromptText' => 'Which parts of the body were struck?',
			'NodeResponseSet' => 'Definition::Body Part',
			'NodeDataStore' => 'ForceBodyParts:FrcBdyPart',
			'NodeOpts' => '3'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 606,
			'NodeTree' => '1',
			'NodeParentID' => '462',
			'NodeParentOrder' => '2',
			'NodeType' => 'Data Manip: Wrap',
			'NodeDataBranch' => 'PhysicalDesc'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 351,
			'NodeTree' => '1',
			'NodeParentID' => '2047',
			'NodeParentOrder' => '6',
			'NodeType' => 'Radio',
			'NodePromptText' => 'Was anybody <span class="slBlueDark">handcuffed</span> when [ForceType] force was used?',
			'NodeDataStore' => 'Force:ForWhileHandcuffed',
			'NodeOpts' => '3'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 607,
			'NodeTree' => '1',
			'NodeParentID' => '457',
			'NodeParentOrder' => '2',
			'NodeType' => 'Radio',
			'NodePromptText' => 'Did this incident begin with a vehicle stop? (This includes cars, trucks, motorcycles, bicycles, and boats.)',
			'NodeDataStore' => 'Scenes:ScnIsVehicle'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 352,
			'NodeTree' => '1',
			'NodeParentID' => '2047',
			'NodeParentOrder' => '7',
			'NodeType' => 'Radio',
			'NodePromptText' => 'Was anybody <span class="slBlueDark">held down</span> when [ForceType] force was used?',
			'NodeDataStore' => 'Force:ForWhileHeldDown',
			'NodeOpts' => '3'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 97,
			'NodeTree' => '1',
			'NodeParentID' => '141',
			'NodeType' => 'Loop Root',
			'NodePromptText' => '<h2 class="slBlueDark">Who\'s Involved: Adding Witnesses</h2>
<br />Please share information about people who observed the incident. Witnesses are distinct from victims if they weren\'t harmed by anything an officer did.<br /><br />If there were no [other] witnesses, go to the next section.',
			'NodePromptNotes' => 'add-witnesses',
			'NodePromptAfter' => 'Add Witnesses - Your Complaint::M::::M::::M::',
			'NodeDataBranch' => 'Witnesses',
			'NodeDataStore' => 'Civilians:CivID'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 98,
			'NodeTree' => '1',
			'NodeParentID' => '462',
			'NodeType' => 'Instructions',
			'NodePromptText' => '<h2 id="fixedHeader" style="width: 1185px; min-width: 1185px; max-width: 1185px;">Witness #[LoopItemCnt]: <div id="nodeEcho728" class="disIn"></div></h2>',
			'NodePromptAfter' => '<style> #node[[nID]] { margin-bottom: -30px; } </style>'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 99,
			'NodeTree' => '1',
			'NodeParentID' => '1133',
			'NodeType' => 'Text',
			'NodePromptText' => 'First Name',
			'NodeDataStore' => 'PersonContact:PrsnNameFirst',
			'NodeOpts' => '3'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 100,
			'NodeTree' => '1',
			'NodeParentID' => '1133',
			'NodeParentOrder' => '1',
			'NodeType' => 'Text',
			'NodePromptText' => 'Middle Name',
			'NodeDataStore' => 'PersonContact:PrsnNameMiddle',
			'NodeOpts' => '3'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 612,
			'NodeTree' => '1',
			'NodeParentID' => '863',
			'NodeType' => 'Radio',
			'NodePromptText' => 'At any point, was [LoopItemLabel] chased by the police?',
			'NodeDataStore' => 'Civilians:CivChase'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 101,
			'NodeTree' => '1',
			'NodeParentID' => '1133',
			'NodeParentOrder' => '2',
			'NodeType' => 'Text',
			'NodePromptText' => 'Last Name',
			'NodeDataStore' => 'PersonContact:PrsnNameLast',
			'NodeOpts' => '3'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 613,
			'NodeTree' => '1',
			'NodeParentID' => '612',
			'NodeType' => 'Radio',
			'NodePromptText' => 'What kind of chase was it?',
			'NodeResponseSet' => 'Definition::Chase Types',
			'NodeDataStore' => 'Civilians:CivChaseType'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 102,
			'NodeTree' => '1',
			'NodeParentID' => '1202',
			'NodeParentOrder' => '1',
			'NodeType' => 'Radio',
			'NodePromptText' => 'Do you have any contact information for this witness, such as their address, phone number, or email? (This can help the investigation ï¿½ but we will not make it public.)',
			'NodeDataStore' => 'Civilians:CivGiveContactInfo',
			'NodeOpts' => '3'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 358,
			'NodeTree' => '1',
			'NodeParentID' => '1444',
			'NodeParentOrder' => '1',
			'NodeType' => 'Text',
			'NodePromptText' => '<br />Describe more, if needed.',
			'NodeDataStore' => 'Injuries:InjDescription',
			'NodeOpts' => '3'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 614,
			'NodeTree' => '1',
			'NodeParentID' => '465',
			'NodeParentOrder' => '5',
			'NodeType' => 'Radio',
			'NodePromptText' => 'Was this officer wearing a uniform?',
			'NodeDataStore' => 'Officers:OffUniform'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 103,
			'NodeTree' => '1',
			'NodeParentID' => '1134',
			'NodeType' => 'Text',
			'NodePromptText' => 'Street Address',
			'NodeDataStore' => 'PersonContact:PrsnAddress',
			'NodeOpts' => '3'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 359,
			'NodeTree' => '1',
			'NodeParentID' => '1444',
			'NodeType' => 'Drop Down',
			'NodePromptText' => '<br />Where on their body did this type of injury happen?',
			'NodeInternalNotes' => '"Where did these injuries happen?" (click areas of body)
"Please upload any injury photos available:" (Upload Tools) ("Limit of " displayed after 1)
"Describe the injury more, if needed:" (Text Field)',
			'NodeResponseSet' => 'Definition::Body Part',
			'NodeDefault' => 'select one or more...',
			'NodeDataStore' => 'InjuryBodyParts:InjBdyPart',
			'NodeOpts' => '53'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 104,
			'NodeTree' => '1',
			'NodeParentID' => '1134',
			'NodeParentOrder' => '1',
			'NodeType' => 'Text',
			'NodePromptText' => 'Address Line 2',
			'NodeDataStore' => 'PersonContact:PrsnAddress2',
			'NodeOpts' => '3'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 616,
			'NodeTree' => '1',
			'NodeParentID' => '865',
			'NodeType' => 'Radio',
			'NodePromptText' => 'Did [LoopItemLabel] have a weapon?',
			'NodeResponseSet' => 'Definition::Civilian Weapons',
			'NodeDataStore' => 'Civilians:CivVictimWhatWeapon'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 105,
			'NodeTree' => '1',
			'NodeParentID' => '1134',
			'NodeParentOrder' => '2',
			'NodeType' => 'Text',
			'NodePromptText' => 'City',
			'NodeDataStore' => 'PersonContact:PrsnAddressCity',
			'NodeOpts' => '3'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 106,
			'NodeTree' => '1',
			'NodeParentID' => '1134',
			'NodeParentOrder' => '3',
			'NodeType' => 'U.S. States',
			'NodePromptText' => 'State',
			'NodeResponseSet' => '[U.S.States]',
			'NodeDataStore' => 'PersonContact:PrsnAddressState',
			'NodeOpts' => '3'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 362,
			'NodeTree' => '1',
			'NodeParentID' => '2056',
			'NodeType' => 'Radio',
			'NodePromptText' => 'Did [LoopItemLabel]\'s injuries result in death?',
			'NodeDataStore' => 'InjuryCare:InjCareResultInDeath',
			'NodeOpts' => '3'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 618,
			'NodeTree' => '1',
			'NodeParentID' => '616',
			'NodeType' => 'Radio',
			'NodePromptText' => 'Did [LoopItemLabel] use the weapon?',
			'NodeResponseSet' => 'Definition::Intimidating Displays Of Weapon',
			'NodeDataStore' => 'Civilians:CivVictimUseWeapon'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 107,
			'NodeTree' => '1',
			'NodeParentID' => '1134',
			'NodeParentOrder' => '4',
			'NodeType' => 'Text',
			'NodePromptText' => 'Zip Code',
			'NodeDataStore' => 'PersonContact:PrsnAddressZip',
			'NodeOpts' => '3'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 108,
			'NodeTree' => '1',
			'NodeParentID' => '1134',
			'NodeParentOrder' => '5',
			'NodeType' => 'Text',
			'NodePromptText' => 'Phone',
			'NodeDataStore' => 'PersonContact:PrsnPhoneHome',
			'NodeOpts' => '3'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 364,
			'NodeTree' => '1',
			'NodeParentID' => '2056',
			'NodeParentOrder' => '1',
			'NodeType' => 'Text',
			'NodePromptText' => 'Name of hospital where [LoopItemLabel] was treated:',
			'NodeDataStore' => 'InjuryCare:InjCareHospitalTreated',
			'NodeOpts' => '3'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 620,
			'NodeTree' => '1',
			'NodeParentID' => '2119',
			'NodeParentOrder' => '1',
			'NodeType' => 'Checkbox',
			'NodePromptText' => 'Select any of these types of force used against an officer. (Leave blank if none.)',
			'NodeResponseSet' => 'Definition::Force Type - Body Weapons',
			'NodeDataStore' => 'CivWeapons:CivWeapBodyWeapon'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 109,
			'NodeTree' => '1',
			'NodeParentID' => '1134',
			'NodeParentOrder' => '6',
			'NodeType' => 'Email',
			'NodePromptText' => 'Email Address',
			'NodeDataStore' => 'PersonContact:PrsnEmail',
			'NodeOpts' => '3'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 365,
			'NodeTree' => '1',
			'NodeParentID' => '362',
			'NodeType' => 'Date Time',
			'NodePromptText' => 'When was the date and time of death?',
			'NodeDataStore' => 'InjuryCare:InjCareTimeOfDeath',
			'NodeCharLimit' => '-1',
			'NodeOpts' => '3'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 110,
			'NodeTree' => '1',
			'NodeParentID' => '1134',
			'NodeParentOrder' => '7',
			'NodeType' => 'Text',
			'NodePromptText' => 'Facebook Profile URL',
			'NodeDataStore' => 'PersonContact:PrsnFacebook',
			'NodeOpts' => '3'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 366,
			'NodeTree' => '1',
			'NodeParentID' => '2056',
			'NodeParentOrder' => '2',
			'NodeType' => 'Text',
			'NodePromptText' => '[LoopItemLabel]\'s Doctor First Name',
			'NodeDataStore' => 'InjuryCare:InjCareDoctorNameFirst',
			'NodeOpts' => '3'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 622,
			'NodeTree' => '1',
			'NodeParentID' => '2026',
			'NodeParentOrder' => '6',
			'NodeType' => 'Radio',
			'NodePromptText' => 'Did an officer give anybody an <span class="slBlueDark">alcohol</span> breath test?',
			'NodeDataStore' => 'Stops:StopBreathAlcohol'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 367,
			'NodeTree' => '1',
			'NodeParentID' => '2056',
			'NodeParentOrder' => '3',
			'NodeType' => 'Text',
			'NodePromptText' => '[LoopItemLabel]\'s Doctor Last Name',
			'NodeDataStore' => 'InjuryCare:InjCareDoctorNameLast',
			'NodeOpts' => '3'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 623,
			'NodeTree' => '1',
			'NodeParentID' => '2026',
			'NodeParentOrder' => '7',
			'NodeType' => 'Radio',
			'NodePromptText' => 'Did an officer give anybody a <span class="slBlueDark">marijuana</span> breath test?',
			'NodeDataStore' => 'Stops:StopBreathCannabis'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 112,
			'NodeTree' => '1',
			'NodeParentID' => '605',
			'NodeParentOrder' => '1',
			'NodeType' => 'Radio',
			'NodePromptText' => 'Age Estimate',
			'NodeResponseSet' => 'Definition::Age Ranges',
			'NodeDataStore' => 'PhysicalDesc:PhysAge',
			'NodeOpts' => '3'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 368,
			'NodeTree' => '1',
			'NodeParentID' => '2056',
			'NodeParentOrder' => '4',
			'NodeType' => 'Email',
			'NodePromptText' => '[LoopItemLabel]\'s Doctor Email',
			'NodeDataStore' => 'InjuryCare:InjCareDoctorEmail',
			'NodeOpts' => '3'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 624,
			'NodeTree' => '1',
			'NodeParentID' => '2026',
			'NodeParentOrder' => '8',
			'NodeType' => 'Radio',
			'NodePromptText' => 'Did an officer collect anybody\'s <span class="slBlueDark">saliva</span>?',
			'NodeDataStore' => 'Stops:StopSalivaTest'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 113,
			'NodeTree' => '1',
			'NodeParentID' => '606',
			'NodeType' => 'Gender Not Sure',
			'NodePromptText' => 'Gender',
			'NodeDataStore' => 'PhysicalDesc:PhysGender',
			'NodeOpts' => '3'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 369,
			'NodeTree' => '1',
			'NodeParentID' => '2056',
			'NodeParentOrder' => '5',
			'NodeType' => 'Text',
			'NodePromptText' => '[LoopItemLabel]\'s Doctor Phone',
			'NodeDataStore' => 'InjuryCare:InjCareDoctorPhone',
			'NodeOpts' => '3'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 625,
			'NodeTree' => '1',
			'NodeParentID' => '622',
			'NodeType' => 'Radio',
			'NodePromptText' => 'Did the officer say anybody failed an <span class="slBlueDark">alcohol</span> breath test?',
			'NodeDataStore' => 'Stops:StopBreathAlcoholFailed'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 114,
			'NodeTree' => '1',
			'NodeParentID' => '605',
			'NodeParentOrder' => '2',
			'NodeType' => 'Checkbox',
			'NodePromptText' => 'Race',
			'NodeResponseSet' => 'Definition::Races',
			'NodeDataStore' => 'PhysicalDescRace:PhysRaceRace',
			'NodeOpts' => '3'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 370,
			'NodeTree' => '1',
			'NodeParentID' => '2053',
			'NodeType' => 'Radio',
			'NodePromptText' => 'Were any medical emergency staff on scene?',
			'NodeDataStore' => 'InjuryCare:InjCareEmergencyOnScene'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 626,
			'NodeTree' => '1',
			'NodeParentID' => '623',
			'NodeType' => 'Radio',
			'NodePromptText' => 'Did the officer say anybody failed a <span class="slBlueDark">marijuana</span> breath test?',
			'NodeDataStore' => 'Stops:StopBreathCannabisFailed'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 115,
			'NodeTree' => '1',
			'NodeParentID' => '462',
			'NodeParentOrder' => '5',
			'NodeType' => 'Text',
			'NodePromptText' => 'What\'s the occupation or something important about this witness?',
			'NodePromptNotes' => 'For example, "she\'s a small business owner" or "he\'s a high school teacher."',
			'NodeDataStore' => 'Civilians:CivOccupation',
			'NodeOpts' => '3'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 627,
			'NodeTree' => '1',
			'NodeParentID' => '2026',
			'NodeParentOrder' => '9',
			'NodeType' => 'Radio',
			'NodePromptText' => 'Did an officer give anybody any other sobriety tests?',
			'NodeDataStore' => 'Stops:StopSobrietyOther'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 372,
			'NodeTree' => '1',
			'NodeParentID' => '1157',
			'NodeType' => 'Text',
			'NodePromptText' => 'Emergency Staff Department Name',
			'NodeDataStore' => 'InjuryCare:InjCareEmergencyDeptName',
			'NodeOpts' => '3'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 628,
			'NodeTree' => '1',
			'NodeParentID' => '627',
			'NodeType' => 'Text',
			'NodePromptText' => 'Describe the other sobriety tests:',
			'NodeDataStore' => 'Stops:StopSobrietyOtherDescribe'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 373,
			'NodeTree' => '1',
			'NodeParentID' => '1157',
			'NodeParentOrder' => '1',
			'NodeType' => 'Text',
			'NodePromptText' => 'Staff First Name',
			'NodeDataStore' => 'InjuryCare:InjCareEmergencyNameFirst',
			'NodeOpts' => '3'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 629,
			'NodeTree' => '2',
			'NodeType' => 'XML',
			'NodePromptText' => 'Complaints',
			'NodePromptNotes' => '112',
			'NodeOpts' => '77'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 118,
			'NodeTree' => '1',
			'NodeParentID' => '606',
			'NodeParentOrder' => '3',
			'NodeType' => 'Feet Inches',
			'NodePromptText' => 'Height Estimate',
			'NodeDataStore' => 'PhysicalDesc:PhysHeight',
			'NodeOpts' => '3'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 374,
			'NodeTree' => '1',
			'NodeParentID' => '1157',
			'NodeParentOrder' => '2',
			'NodeType' => 'Text',
			'NodePromptText' => 'Staff Last Name',
			'NodeDataStore' => 'InjuryCare:InjCareEmergencyNameLast',
			'NodeOpts' => '3'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 119,
			'NodeTree' => '1',
			'NodeParentID' => '606',
			'NodeParentOrder' => '4',
			'NodeType' => 'Radio',
			'NodePromptText' => 'Body Type',
			'NodeResponseSet' => 'Definition::Body Types',
			'NodeDataStore' => 'PhysicalDesc:PhysBodyType',
			'NodeOpts' => '3'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 375,
			'NodeTree' => '1',
			'NodeParentID' => '1157',
			'NodeParentOrder' => '3',
			'NodeType' => 'Text',
			'NodePromptText' => 'Emergency Staff ID#',
			'NodeDataStore' => 'InjuryCare:InjCareEmergencyIDnumber',
			'NodeOpts' => '3'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 631,
			'NodeTree' => '2',
			'NodeParentID' => '629',
			'NodeType' => 'XML',
			'NodePromptText' => 'Incidents',
			'NodePromptNotes' => '114',
			'NodeOpts' => '385'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 376,
			'NodeTree' => '1',
			'NodeParentID' => '1157',
			'NodeParentOrder' => '4',
			'NodeType' => 'Text',
			'NodePromptText' => 'Vehicle Number',
			'NodeDataStore' => 'InjuryCare:InjCareEmergencyVehicleNumber',
			'NodeOpts' => '3'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 632,
			'NodeTree' => '2',
			'NodeParentID' => '629',
			'NodeParentOrder' => '1',
			'NodeType' => 'XML',
			'NodePromptText' => 'Scenes',
			'NodePromptNotes' => '115',
			'NodeOpts' => '385'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 377,
			'NodeTree' => '1',
			'NodeParentID' => '1157',
			'NodeParentOrder' => '5',
			'NodeType' => 'Text',
			'NodePromptText' => 'License Plate Number',
			'NodeDataStore' => 'InjuryCare:InjCareEmergencyLicenceNumber',
			'NodeOpts' => '3'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 633,
			'NodeTree' => '2',
			'NodeParentID' => '629',
			'NodeParentOrder' => '2',
			'NodeType' => 'XML',
			'NodePromptText' => 'AllegSilver',
			'NodePromptNotes' => '156',
			'NodeOpts' => '385'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 378,
			'NodeTree' => '1',
			'NodeParentID' => '2030',
			'NodeType' => 'Instructions',
			'NodePromptText' => '<h2>More about the Arrest:</h2>'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 634,
			'NodeTree' => '2',
			'NodeParentID' => '629',
			'NodeParentOrder' => '4',
			'NodeType' => 'XML',
			'NodePromptText' => 'LinksComplaintDept',
			'NodePromptNotes' => '144',
			'NodeOpts' => '5'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 379,
			'NodeTree' => '1',
			'NodeParentID' => '2030',
			'NodeParentOrder' => '2',
			'NodeType' => 'Radio',
			'NodePromptText' => 'Did an officer say why they made the arrest(s)?',
			'NodeDataStore' => 'Arrests:ArstStatedReason',
			'NodeOpts' => '3'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 635,
			'NodeTree' => '2',
			'NodeParentID' => '634',
			'NodeType' => 'XML',
			'NodePromptText' => 'Departments',
			'NodePromptNotes' => '111'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 380,
			'NodeTree' => '1',
			'NodeParentID' => '379',
			'NodeType' => 'Text',
			'NodePromptText' => 'What reason did they give?',
			'NodeDataStore' => 'Arrests:ArstStatedReasonDesc',
			'NodeOpts' => '3'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 636,
			'NodeTree' => '2',
			'NodeParentID' => '629',
			'NodeParentOrder' => '5',
			'NodeType' => 'XML',
			'NodePromptText' => 'Officers',
			'NodePromptNotes' => '104'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 637,
			'NodeTree' => '2',
			'NodeParentID' => '636',
			'NodeType' => 'XML',
			'NodePromptText' => 'PersonContact',
			'NodePromptNotes' => '154'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 126,
			'NodeTree' => '1',
			'NodeParentID' => '606',
			'NodeParentOrder' => '5',
			'NodeType' => 'Text',
			'NodePromptText' => 'Physical Description',
			'NodePromptNotes' => 'For example, do you remember what their hair, eyes, or clothes looked like? Did they have any distinguishing marks, disabilities, or a distinct voice? Any extra details can help identify this witness.',
			'NodeDataStore' => 'PhysicalDesc:PhysGeneralDesc',
			'NodeOpts' => '15'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 638,
			'NodeTree' => '2',
			'NodeParentID' => '636',
			'NodeParentOrder' => '1',
			'NodeType' => 'XML',
			'NodePromptText' => 'PhysicalDesc',
			'NodePromptNotes' => '153'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 639,
			'NodeTree' => '2',
			'NodeParentID' => '629',
			'NodeParentOrder' => '6',
			'NodeType' => 'XML',
			'NodePromptText' => 'Civilians',
			'NodePromptNotes' => '102'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 640,
			'NodeTree' => '2',
			'NodeParentID' => '639',
			'NodeType' => 'XML',
			'NodePromptText' => 'PersonContact',
			'NodePromptNotes' => '154'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 129,
			'NodeTree' => '1',
			'NodeParentID' => '462',
			'NodeParentOrder' => '4',
			'NodeType' => 'Radio',
			'NodePromptText' => 'Did this witness record the incident with audio or video?',
			'NodeDataStore' => 'Civilians:CivCameraRecord',
			'NodeOpts' => '3'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 385,
			'NodeTree' => '1',
			'NodeParentID' => '2030',
			'NodeParentOrder' => '4',
			'NodeType' => 'Radio',
			'NodePromptText' => 'Were any charges filed against anybody for this incident?',
			'NodeDataStore' => 'Arrests:ArstChargesFiled'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 641,
			'NodeTree' => '2',
			'NodeParentID' => '639',
			'NodeParentOrder' => '1',
			'NodeType' => 'XML',
			'NodePromptText' => 'PhysicalDesc',
			'NodePromptNotes' => '153'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 386,
			'NodeTree' => '1',
			'NodeParentID' => '1155',
			'NodeType' => 'Checkbox',
			'NodePromptText' => 'What charges were filed against anybody?',
			'NodePromptNotes' => 'These terms vary, so please choose the charges that look the most similar.',
			'NodeResponseSet' => 'Definition::Arrest Charges',
			'NodeDataStore' => 'Charges:ChrgCharges',
			'NodeOpts' => '3'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 642,
			'NodeTree' => '2',
			'NodeParentID' => '636',
			'NodeParentOrder' => '2',
			'NodeType' => 'XML',
			'NodePromptText' => 'LinksOfficerVehicles',
			'NodePromptNotes' => '155',
			'NodeOpts' => '55'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 387,
			'NodeTree' => '1',
			'NodeParentID' => '1155',
			'NodeParentOrder' => '1',
			'NodeType' => 'Text',
			'NodePromptText' => 'Were there other charges not on this list?',
			'NodeDataStore' => 'Arrests:ArstChargesOther',
			'NodeOpts' => '3'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 643,
			'NodeTree' => '2',
			'NodeParentID' => '639',
			'NodeParentOrder' => '2',
			'NodeType' => 'XML',
			'NodePromptText' => 'LinksCivilianVehicles',
			'NodePromptNotes' => '163',
			'NodeOpts' => '55'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 388,
			'NodeTree' => '1',
			'NodeParentID' => '1155',
			'NodeParentOrder' => '2',
			'NodeType' => 'Radio',
			'NodePromptText' => 'Were <span class="slBlueDark">ALL</span> the charges dropped before everybody was released?',
			'NodeDataStore' => 'Arrests:ArstNoChargesFiled',
			'NodeOpts' => '3'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 644,
			'NodeTree' => '2',
			'NodeParentID' => '629',
			'NodeParentOrder' => '7',
			'NodeType' => 'XML',
			'NodePromptText' => 'Vehicles',
			'NodePromptNotes' => '152'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 645,
			'NodeTree' => '2',
			'NodeParentID' => '629',
			'NodeParentOrder' => '3',
			'NodeType' => 'XML',
			'NodePromptText' => 'Allegations',
			'NodePromptNotes' => '113'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 646,
			'NodeTree' => '2',
			'NodeParentID' => '629',
			'NodeParentOrder' => '8',
			'NodeType' => 'XML',
			'NodePromptText' => 'EventSequence',
			'NodePromptNotes' => '137'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 647,
			'NodeTree' => '2',
			'NodeParentID' => '646',
			'NodeType' => 'XML',
			'NodePromptText' => 'Stops',
			'NodePromptNotes' => '121'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 392,
			'NodeTree' => '1',
			'NodeParentID' => '2058',
			'NodeParentOrder' => '2',
			'NodeType' => 'Checkbox',
			'NodePromptText' => 'What citation charges were filed against [LoopItemLabel]?',
			'NodeInternalNotes' => 'Vehicle Stop',
			'NodeResponseSet' => 'Definition::Citation Charges',
			'NodeDataStore' => 'Charges:ChrgCharges',
			'NodeOpts' => '3'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 648,
			'NodeTree' => '2',
			'NodeParentID' => '646',
			'NodeParentOrder' => '1',
			'NodeType' => 'XML',
			'NodePromptText' => 'Searches',
			'NodePromptNotes' => '122'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 393,
			'NodeTree' => '1',
			'NodeParentID' => '2058',
			'NodeParentOrder' => '3',
			'NodeType' => 'Checkbox',
			'NodePromptText' => 'What citation charges were filed against [LoopItemLabel]?',
			'NodeResponseSet' => 'Definition::Citation Charges Pedestrian',
			'NodeDataStore' => 'Charges:ChrgCharges',
			'NodeOpts' => '3'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 649,
			'NodeTree' => '2',
			'NodeParentID' => '646',
			'NodeParentOrder' => '2',
			'NodeType' => 'XML',
			'NodePromptText' => 'Force',
			'NodePromptNotes' => '116'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 394,
			'NodeTree' => '1',
			'NodeParentID' => '2058',
			'NodeParentOrder' => '4',
			'NodeType' => 'Text',
			'NodePromptText' => 'Were there other charges not on this list?',
			'NodeDataStore' => 'Civilians:CivChargesOther',
			'NodeOpts' => '3'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 650,
			'NodeTree' => '2',
			'NodeParentID' => '646',
			'NodeParentOrder' => '3',
			'NodeType' => 'XML',
			'NodePromptText' => 'Arrests',
			'NodePromptNotes' => '123'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 139,
			'NodeTree' => '1',
			'NodeParentID' => '4',
			'NodeParentOrder' => '1',
			'NodeType' => 'Branch Title',
			'NodePromptText' => 'About You',
			'NodePromptNotes' => 'your-contact-info'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 651,
			'NodeTree' => '2',
			'NodeParentID' => '646',
			'NodeParentOrder' => '4',
			'NodeType' => 'XML',
			'NodePromptText' => 'Orders',
			'NodePromptNotes' => '120'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 140,
			'NodeTree' => '1',
			'NodeParentID' => '4',
			'NodeParentOrder' => '2',
			'NodeType' => 'Branch Title',
			'NodePromptText' => 'About Victims',
			'NodePromptNotes' => 'add-victims'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 652,
			'NodeTree' => '2',
			'NodeParentID' => '629',
			'NodeParentOrder' => '9',
			'NodeType' => 'XML',
			'NodePromptText' => 'Evidence',
			'NodePromptNotes' => '119'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 141,
			'NodeTree' => '1',
			'NodeParentID' => '4',
			'NodeParentOrder' => '3',
			'NodeType' => 'Branch Title',
			'NodePromptText' => 'About Witnesses',
			'NodePromptNotes' => 'add-witnesses'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 142,
			'NodeTree' => '1',
			'NodeParentID' => '4',
			'NodeParentOrder' => '5',
			'NodeType' => 'Branch Title',
			'NodePromptText' => 'About Police Officers',
			'NodePromptNotes' => 'add-police-officers'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 143,
			'NodeTree' => '1',
			'NodeParentID' => '144',
			'NodeParentOrder' => '1',
			'NodeType' => 'Loop Root',
			'NodePromptText' => '<h2>Police Departments At The Scene</h2>
<br />Please identify the departments that were involved. These could also be federal agencies or private security firms.<br /><br />If there were no [other] departments, go to the next section.
<style> .loopItemBtn.editLoopItem { display: none; } </style>',
			'NodePromptNotes' => 'add-police-departments',
			'NodePromptAfter' => 'Add Police Departments - Your Complaint::M::::M::::M::',
			'NodeDataBranch' => 'Departments',
			'NodeDataStore' => 'LinksComplaintDept:LnkComDeptID'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 655,
			'NodeTree' => '2',
			'NodeParentID' => '639',
			'NodeParentOrder' => '3',
			'NodeType' => 'XML',
			'NodePromptText' => 'Injuries',
			'NodePromptNotes' => '117'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 144,
			'NodeTree' => '1',
			'NodeParentID' => '4',
			'NodeParentOrder' => '4',
			'NodeType' => 'Branch Title',
			'NodePromptText' => 'About Police Departments',
			'NodePromptNotes' => 'next-police-officers'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 400,
			'NodeTree' => '1',
			'NodeParentID' => '523',
			'NodeType' => 'Loop Cycle',
			'NodeResponseSet' => 'LoopItems::Victims',
			'NodeDataBranch' => 'Civilians',
			'NodeDataStore' => 'Stops:StopID'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 656,
			'NodeTree' => '2',
			'NodeParentID' => '639',
			'NodeParentOrder' => '4',
			'NodeType' => 'XML',
			'NodePromptText' => 'InjuryCare',
			'NodePromptNotes' => '146'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 145,
			'NodeTree' => '1',
			'NodeParentID' => '464',
			'NodeParentOrder' => '1',
			'NodeType' => 'Hidden Field',
			'NodePromptText' => '[ Department Searcher ] hard-coded via OpenDepts.php function printDeptSearch, to views openpolice.nodes.145-dept-search and openpolice.nodes.145-ajax-dept-search',
			'NodeDataStore' => 'Departments:DeptID',
			'NodeOpts' => '5'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 146,
			'NodeTree' => '1',
			'NodeParentID' => '482',
			'NodeParentOrder' => '1',
			'NodeType' => 'Radio',
			'NodePromptText' => '<h3 class="mTn20">Do you want to keep going to make a <span class="slBlueDark">GOLD LEVEL complaint</span>?</h3>',
			'NodePromptAfter' => '<style> #node146 { margin-bottom: 30px; }
#node668 { margin-bottom: -20px; } </style>',
			'NodeDefault' => 'Gold',
			'NodeDataStore' => 'Complaints:ComAwardMedallion',
			'NodeOpts' => '5'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 402,
			'NodeTree' => '1',
			'NodeParentID' => '2027',
			'NodeParentOrder' => '2',
			'NodeType' => 'Radio',
			'NodePromptText' => 'Was anybody\'s property seized? This does not include illegal items.',
			'NodeDataStore' => 'Searches:SrchSeized',
			'NodeOpts' => '3'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 403,
			'NodeTree' => '1',
			'NodeParentID' => '402',
			'NodeType' => 'Checkbox',
			'NodePromptText' => 'What types of property were seized?',
			'NodeResponseSet' => 'Definition::Property Seized Types',
			'NodeDataStore' => 'SearchSeize:SrchSeizType',
			'NodeOpts' => '3'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 148,
			'NodeTree' => '1',
			'NodeParentID' => '508',
			'NodeType' => 'Loop Cycle',
			'NodePromptNotes' => 'event-details',
			'NodeResponseSet' => 'LoopItems::Types of Force',
			'NodeDataBranch' => 'EventSequence',
			'NodeDataStore' => 'EventSequence:EveID'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 404,
			'NodeTree' => '1',
			'NodeParentID' => '403',
			'NodeType' => 'Text',
			'NodePromptText' => 'Describe the specific items seized.',
			'NodePromptNotes' => 'For example, if cash seized, please specify the dollar amount.',
			'NodeDataStore' => 'Searches:SrchSeizedDesc',
			'NodeOpts' => '3'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 149,
			'NodeTree' => '1',
			'NodeParentID' => '6',
			'NodeParentOrder' => '2',
			'NodeType' => 'Branch Title',
			'NodePromptText' => 'Stops & Searches',
			'NodePromptNotes' => 'reason-for-stop'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 405,
			'NodeTree' => '1',
			'NodeParentID' => '2027',
			'NodeType' => 'Instructions',
			'NodePromptText' => '<h2>About more about the Search / Seizure:</h2>'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 406,
			'NodeTree' => '1',
			'NodeParentID' => '2027',
			'NodeParentOrder' => '3',
			'NodeType' => 'Radio',
			'NodePromptText' => 'Was anybody\'s property damaged?',
			'NodeDataStore' => 'Searches:SrchDamage',
			'NodeOpts' => '3'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 151,
			'NodeTree' => '1',
			'NodeParentID' => '6',
			'NodeParentOrder' => '4',
			'NodeType' => 'Branch Title',
			'NodePromptText' => 'Use of Force',
			'NodePromptNotes' => 'gold-types-of-force'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 407,
			'NodeTree' => '1',
			'NodeParentID' => '406',
			'NodeType' => 'Text',
			'NodePromptText' => 'Describe the specific items damaged and the nature of the damage. Please include dollar amounts for repairing or replacing damaged items.',
			'NodeDataStore' => 'Searches:SrchDamageDesc',
			'NodeOpts' => '3'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 153,
			'NodeTree' => '1',
			'NodeParentID' => '6',
			'NodeParentOrder' => '3',
			'NodeType' => 'Branch Title',
			'NodePromptText' => 'Arrests & Citations',
			'NodePromptNotes' => 'gold-info-arrest'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 154,
			'NodeTree' => '1',
			'NodeParentID' => '5',
			'NodeParentOrder' => '5',
			'NodeType' => 'Branch Title',
			'NodePromptText' => 'Other Allegations',
			'NodePromptNotes' => 'allegation-intimidation-using-weapon'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 410,
			'NodeTree' => '1',
			'NodeParentID' => '6',
			'NodeParentOrder' => '5',
			'NodeType' => 'Branch Title',
			'NodePromptText' => 'Injuries & Medical Care',
			'NodePromptNotes' => 'was-anyone-injured'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 411,
			'NodeTree' => '1',
			'NodeParentID' => '517',
			'NodeParentOrder' => '1',
			'NodeType' => 'Loop Cycle',
			'NodeResponseSet' => 'LoopItems::Victims',
			'NodeDataBranch' => 'Civilians'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 156,
			'NodeTree' => '1',
			'NodeParentID' => '419',
			'NodeParentOrder' => '2',
			'NodeType' => 'Branch Title',
			'NodePromptText' => 'Submit Complaint',
			'NodePromptNotes' => 'confirm-complaint'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 412,
			'NodeTree' => '1',
			'NodeParentID' => '2058',
			'NodeType' => 'Instructions',
			'NodePromptText' => '<h2>More about citations against [LoopItemLabel]:</h2>',
			'NodePromptAfter' => '<style> #node[[nID]] { margin-bottom: -30px; } </style>'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 157,
			'NodeTree' => '1',
			'NodeParentID' => '2',
			'NodeType' => 'Branch Title',
			'NodePromptText' => 'Tell Your Story',
			'NodePromptNotes' => 'legal-notice'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 158,
			'NodeTree' => '1',
			'NodeParentID' => '2',
			'NodeParentOrder' => '2',
			'NodeType' => 'Branch Title',
			'NodePromptText' => 'When & Where',
			'NodePromptNotes' => 'where-did-this-incident-happen'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 414,
			'NodeTree' => '1',
			'NodeParentID' => '410',
			'NodeParentOrder' => '1',
			'NodeType' => 'Page',
			'NodePromptNotes' => 'gold-details-injury-medical-care',
			'NodePromptAfter' => 'Gold Injury Details::M::::M::::M::',
			'NodeResponseSet' => 'LoopItems::Medical Care',
			'NodeDataStore' => 'InjuryCare:InjCareID'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 160,
			'NodeTree' => '1',
			'NodeParentID' => '142',
			'NodeType' => 'Loop Root',
			'NodePromptText' => '<h2>Who\\'s Involved: Police Officers</h2>\r\n<br />Please provide information about the police officers or private security employees in this incident. These are people who were were involved in ï¿½ or witnessed ï¿½ an alleged act of police misconduct.<br /><br />If there were no [other] officers involved, go to the next section.',
			'NodePromptNotes' => 'add-police-officers',
			'NodePromptAfter' => 'Add Police Officers - Your Complaint::M::::M::::M::',
			'NodeDataBranch' => 'Officers',
			'NodeDataStore' => 'Officers:OffID'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 416,
			'NodeTree' => '1',
			'NodeParentID' => '463',
			'NodeParentOrder' => '1',
			'NodeType' => 'Instructions',
			'NodePromptText' => 'Next, you\'ll share info about the police departments, officers, or private security linked to the incident. This will help us get your complaint to the right place. Most questions are optional.'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 161,
			'NodeTree' => '1',
			'NodeParentID' => '465',
			'NodeType' => 'Instructions',
			'NodePromptText' => '<h2 id="fixedHeader" style="width: 1185px; min-width: 1185px; max-width: 1185px;">Officer #[LoopItemCnt]: <div id="nodeEcho729" class="disIn"></div></h2>',
			'NodePromptAfter' => '<style> #node[[nID]] { margin-bottom: -30px; } </style>'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 162,
			'NodeTree' => '1',
			'NodeParentID' => '465',
			'NodeParentOrder' => '2',
			'NodeType' => 'Radio',
			'NodePromptText' => 'Which Police Department?',
			'NodeResponseSet' => '[Set:Departments;;HideIf:1]',
			'NodeDataStore' => 'Officers:OffDeptID',
			'NodeOpts' => '15'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 163,
			'NodeTree' => '1',
			'NodeParentID' => '465',
			'NodeParentOrder' => '3',
			'NodeType' => 'Radio',
			'NodePromptText' => 'What was this officer\'s role in the incident?',
			'NodeDataStore' => 'Officers:OffRole',
			'NodeOpts' => '15'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 419,
			'NodeTree' => '1',
			'NodeParentID' => '3',
			'NodeParentOrder' => '5',
			'NodeType' => 'Branch Title',
			'NodePromptText' => 'File & Publish Complaint',
			'NodePromptNotes' => 'complaint-audit'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 164,
			'NodeTree' => '1',
			'NodeParentID' => '465',
			'NodeParentOrder' => '4',
			'NodeType' => 'Radio',
			'NodePromptText' => 'At the time, this officer <nobr>was ...</nobr>',
			'NodeDataStore' => 'Officers:OffDutyStatus',
			'NodeOpts' => '3'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 420,
			'NodeTree' => '1',
			'NodeParentID' => '419',
			'NodeType' => 'Branch Title',
			'NodePromptText' => 'Review Narrative',
			'NodePromptNotes' => 'complaint-audit'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 165,
			'NodeTree' => '1',
			'NodeParentID' => '1204',
			'NodeType' => 'Radio',
			'NodePromptText' => 'Do you know this officer\'s name, badge number, precinct, or rank?',
			'NodeDataStore' => 'Officers:OffGiveName',
			'NodeOpts' => '15'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 166,
			'NodeTree' => '1',
			'NodeParentID' => '1135',
			'NodeType' => 'Text',
			'NodePromptText' => 'First Name',
			'NodeDataStore' => 'PersonContact:PrsnNameFirst',
			'NodeOpts' => '3'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 422,
			'NodeTree' => '1',
			'NodeParentID' => '459',
			'NodeParentOrder' => '2',
			'NodeType' => 'Spambot Honey Pot',
			'NodePromptText' => 'I bet you are brave. Are you brave?',
			'NodeDataStore' => 'Complaints:ComHoneyPot',
			'NodeOpts' => '3'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 167,
			'NodeTree' => '1',
			'NodeParentID' => '1135',
			'NodeParentOrder' => '1',
			'NodeType' => 'Text',
			'NodePromptText' => 'Last Name',
			'NodeDataStore' => 'PersonContact:PrsnNameLast',
			'NodeOpts' => '3'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 423,
			'NodeTree' => '1',
			'NodeParentID' => '461',
			'NodeParentOrder' => '4',
			'NodeType' => 'Radio',
			'NodePromptText' => 'At the time, did this victim live in this police department\'s jurisdiction?',
			'NodeDataStore' => 'Civilians:CivResident',
			'NodeOpts' => '3'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 168,
			'NodeTree' => '1',
			'NodeParentID' => '1135',
			'NodeParentOrder' => '3',
			'NodeType' => 'Text',
			'NodePromptText' => 'Precinct, District, or Division',
			'NodeDataStore' => 'Officers:OffPrecinct',
			'NodeOpts' => '3'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 424,
			'NodeTree' => '1',
			'NodeParentID' => '2058',
			'NodeParentOrder' => '1',
			'NodeType' => 'Text',
			'NodePromptText' => 'What is the citation number?',
			'NodeDataStore' => 'Civilians:CivCitationNumber',
			'NodeOpts' => '3'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 169,
			'NodeTree' => '1',
			'NodeParentID' => '1135',
			'NodeParentOrder' => '1',
			'NodeType' => 'Text',
			'NodePromptText' => 'Badge Number',
			'NodeDataStore' => 'Officers:OffBadgeNumber',
			'NodeOpts' => '3'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 425,
			'NodeTree' => '1',
			'NodeParentID' => '2119',
			'NodeParentOrder' => '3',
			'NodeType' => 'Radio',
			'NodePromptText' => 'Were any officers injured during this incident?',
			'NodeDataStore' => 'Complaints:ComOfficerInjured'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 170,
			'NodeTree' => '1',
			'NodeParentID' => '1135',
			'NodeParentOrder' => '2',
			'NodeType' => 'Text',
			'NodePromptText' => 'Additional ID#',
			'NodeDataStore' => 'Officers:OffIDnumber',
			'NodeOpts' => '3'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 426,
			'NodeTree' => '1',
			'NodeParentID' => '425',
			'NodeType' => 'Text',
			'NodePromptText' => 'Describe these officer injuries.',
			'NodeDataStore' => 'Complaints:ComOfficerInjuredDesc',
			'NodeOpts' => '3'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 171,
			'NodeTree' => '1',
			'NodeParentID' => '1135',
			'NodeParentOrder' => '4',
			'NodeType' => 'Text',
			'NodePromptText' => 'Officer Rank',
			'NodeDataStore' => 'Officers:OffOfficerRank',
			'NodeTextSuggest' => 'Police Officer Ranks',
			'NodeOpts' => '3'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 427,
			'NodeTree' => '1',
			'NodeParentID' => '475',
			'NodeParentOrder' => '1',
			'NodeType' => 'Radio',
			'NodePromptText' => 'Do you think an officer neglected their duty by <span class="slBlueDark">failing to take appropriate action</span>? These are things an officer should have done but didn\'t do.',
			'NodePromptNotes' => '<span class="slBlueDark">Example of Neglect of Duty:</span> A woman is groped on the street by an unknown man. When the police arrive, they refuse to file an official report or investigate.',
			'NodeDataStore' => 'AllegSilver:AlleSilNeglectDuty',
			'NodeOpts' => '5'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 172,
			'NodeTree' => '1',
			'NodeParentID' => '730',
			'NodeType' => 'Radio',
			'NodePromptText' => 'Gender',
			'NodeDataStore' => 'PhysicalDesc:PhysGender',
			'NodeOpts' => '15'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 428,
			'NodeTree' => '1',
			'NodeParentID' => '545',
			'NodeType' => 'Checkbox',
			'NodePromptText' => 'Which officers neglected their duty?',
			'NodeResponseSet' => 'LoopItems::Officers',
			'NodeDataStore' => 'LinksOfficerAllegations:LnkOffAlleOffID',
			'NodeOpts' => '3'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 173,
			'NodeTree' => '1',
			'NodeParentID' => '730',
			'NodeParentOrder' => '2',
			'NodeType' => 'Radio',
			'NodePromptText' => 'Age Estimate',
			'NodeResponseSet' => 'Definition::Age Ranges Officers',
			'NodeDataStore' => 'PhysicalDesc:PhysAge',
			'NodeOpts' => '15'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 174,
			'NodeTree' => '1',
			'NodeParentID' => '730',
			'NodeParentOrder' => '1',
			'NodeType' => 'Checkbox',
			'NodePromptText' => 'Race',
			'NodeResponseSet' => 'Definition::Races',
			'NodeDataStore' => 'PhysicalDescRace:PhysRaceRace',
			'NodeOpts' => '15'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 430,
			'NodeTree' => '1',
			'NodeParentID' => '545',
			'NodeParentOrder' => '1',
			'NodeType' => 'Long Text',
			'NodePromptText' => 'What makes you think that neglect of duty occurred?',
			'NodeDataStore' => 'Allegations:AlleDescription',
			'NodeOpts' => '15'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 431,
			'NodeTree' => '1',
			'NodeParentID' => '419',
			'NodeParentOrder' => '1',
			'NodeType' => 'Branch Title',
			'NodePromptText' => 'Sharing Options',
			'NodePromptNotes' => 'sharing-options'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 432,
			'NodeTree' => '1',
			'NodeParentID' => '527',
			'NodeType' => 'Instructions',
			'NodePromptText' => '<h2>Sharing Options</h2>',
			'NodePromptAfter' => '<style> #node[[nID]] { margin-bottom: -20px; } </style>'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 177,
			'NodeTree' => '1',
			'NodeParentID' => '730',
			'NodeParentOrder' => '3',
			'NodeType' => 'Feet Inches',
			'NodePromptText' => 'Height Estimate',
			'NodeDataStore' => 'PhysicalDesc:PhysHeight',
			'NodeOpts' => '3'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 433,
			'NodeTree' => '1',
			'NodeParentID' => '436',
			'NodeType' => 'Text',
			'NodePromptText' => 'Describe what else you\'ve done.',
			'NodeDataStore' => 'Complaints:ComTriedOtherWaysDesc',
			'NodeOpts' => '3'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 178,
			'NodeTree' => '1',
			'NodeParentID' => '730',
			'NodeParentOrder' => '4',
			'NodeType' => 'Radio',
			'NodePromptText' => 'Body Type',
			'NodeResponseSet' => 'Definition::Body Types',
			'NodeDataStore' => 'PhysicalDesc:PhysBodyType',
			'NodeOpts' => '3'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 435,
			'NodeTree' => '1',
			'NodeParentID' => '527',
			'NodeParentOrder' => '3',
			'NodeType' => 'Text',
			'NodePromptText' => 'How did you hear about us?',
			'NodeDataStore' => 'Complaints:ComHowHear',
			'NodeTextSuggest' => 'How Did You Hear',
			'NodeOpts' => '3'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 436,
			'NodeTree' => '1',
			'NodeParentID' => '527',
			'NodeParentOrder' => '1',
			'NodeType' => 'Radio',
			'NodePromptText' => 'Did you try to submit your complaint some other way before using OpenPolice.org?',
			'NodeDataStore' => 'Complaints:ComTriedOtherWays',
			'NodeOpts' => '3'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 437,
			'NodeTree' => '1',
			'NodeParentID' => '2',
			'NodeParentOrder' => '1',
			'NodeType' => 'Branch Title',
			'NodePromptText' => 'Privacy Options',
			'NodePromptNotes' => 'your-role'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 185,
			'NodeTree' => '1',
			'NodeParentID' => '730',
			'NodeParentOrder' => '5',
			'NodeType' => 'Text',
			'NodePromptText' => 'Physical Description',
			'NodePromptNotes' => 'For example, do you remember what their hair, eyes, or uniform looked like? Did they have any distinguishing marks or a distinct voice? Any extra details can help identify this officer.',
			'NodeDataStore' => 'PhysicalDesc:PhysGeneralDesc',
			'NodeOpts' => '15'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 187,
			'NodeTree' => '1',
			'NodeParentID' => '465',
			'NodeParentOrder' => '6',
			'NodeType' => 'Radio',
			'NodePromptText' => 'Was this officer wearing a body camera?',
			'NodeDataStore' => 'Officers:OffBodyCam',
			'NodeOpts' => '3'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 443,
			'NodeTree' => '1',
			'NodeParentID' => '452',
			'NodeParentOrder' => '1',
			'NodeType' => 'Radio',
			'NodePromptText' => 'Do you or anybody else <b>have a lawyer</b> in regard to this incident?',
			'NodeDataStore' => 'Complaints:ComAttorneyHas',
			'NodeOpts' => '15'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 444,
			'NodeTree' => '1',
			'NodeParentID' => '443',
			'NodeParentOrder' => '1',
			'NodeType' => 'Radio',
			'NodePromptText' => 'Does anybody involved want us to try to <b>match them with attorneys and legal experts</b>?',
			'NodePromptNotes' => 'If we find a match, we will share your complaint and contact information with them.',
			'NodeDataStore' => 'Complaints:ComAttorneyWant',
			'NodeOpts' => '15'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 445,
			'NodeTree' => '1',
			'NodeParentID' => '1197',
			'NodeParentOrder' => '2',
			'NodeType' => 'Radio',
			'NodePromptText' => 'Age Range',
			'NodeResponseSet' => 'Definition::Age Ranges',
			'NodeDataStore' => 'PhysicalDesc:PhysAge',
			'NodeOpts' => '3'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 446,
			'NodeTree' => '1',
			'NodeParentID' => '461',
			'NodeType' => 'Instructions',
			'NodePromptText' => '<h2 class="slBlueDark" id="fixedHeader">Victim #[LoopItemCnt]: <div id="nodeEcho726" class="disIn"></div></h2>',
			'NodePromptAfter' => '<style> #node[[nID]] { margin-bottom: -30px; } </style>'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 447,
			'NodeTree' => '1',
			'NodeParentID' => '1202',
			'NodeType' => 'Radio',
			'NodePromptText' => 'Do you know the name of this witness?',
			'NodeDataStore' => 'Civilians:CivGiveName',
			'NodeOpts' => '3'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 450,
			'NodeTree' => '1',
			'NodeParentID' => '205',
			'NodeType' => 'Data Manip: Wrap',
			'NodePromptText' => 'Create Wrongful Stop Allegation Record',
			'NodeResponseSet' => '117',
			'NodeDataBranch' => 'Allegations',
			'NodeDataStore' => 'Allegations:AlleType'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 451,
			'NodeTree' => '1',
			'NodeParentID' => '157',
			'NodeParentOrder' => '2',
			'NodeType' => 'Page',
			'NodePromptText' => 'Start',
			'NodePromptNotes' => 'share-your-story',
			'NodePromptAfter' => 'Share Your Story::M::::M::::M::'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 196,
			'NodeTree' => '1',
			'NodeParentID' => '6',
			'NodeParentOrder' => '1',
			'NodeType' => 'Branch Title',
			'NodePromptText' => 'What Happened Gold Version',
			'NodePromptNotes' => 'reason-for-stop'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 452,
			'NodeTree' => '1',
			'NodeParentID' => '437',
			'NodeParentOrder' => '2',
			'NodeType' => 'Page',
			'NodePromptText' => 'Attorney',
			'NodePromptNotes' => 'attorney',
			'NodePromptAfter' => 'Attorney::M::::M::::M::'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 453,
			'NodeTree' => '1',
			'NodeParentID' => '437',
			'NodeParentOrder' => '4',
			'NodeType' => 'Page',
			'NodePromptText' => 'Transparency/Privacy Options',
			'NodePromptNotes' => 'privacy-options',
			'NodePromptAfter' => 'Transparency / Privacy Options::M::::M::::M::'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 198,
			'NodeTree' => '1',
			'NodeParentID' => '5',
			'NodeParentOrder' => '1',
			'NodeType' => 'Branch Title',
			'NodePromptText' => 'Stop',
			'NodePromptNotes' => 'allegation-stop'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 454,
			'NodeTree' => '1',
			'NodeParentID' => '437',
			'NodeParentOrder' => '5',
			'NodeType' => 'Page',
			'NodePromptText' => 'Login',
			'NodePromptNotes' => 'login',
			'NodePromptAfter' => 'Login::M::::M::::M::'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 199,
			'NodeTree' => '1',
			'NodeParentID' => '5',
			'NodeParentOrder' => '2',
			'NodeType' => 'Branch Title',
			'NodePromptText' => 'Search',
			'NodePromptNotes' => 'allegations-search-and-property'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 455,
			'NodeTree' => '1',
			'NodeParentID' => '158',
			'NodeType' => 'Page',
			'NodePromptText' => 'When & Where',
			'NodePromptNotes' => 'where-did-this-incident-happen',
			'NodePromptAfter' => 'Where did this incident happen?::M::::M::::M::',
			'NodeDataBranch' => 'Incidents'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 200,
			'NodeTree' => '1',
			'NodeParentID' => '5',
			'NodeParentOrder' => '3',
			'NodeType' => 'Branch Title',
			'NodePromptText' => 'Use of Force',
			'NodePromptNotes' => 'allegations-sexual-harassment-and-assault'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 201,
			'NodeTree' => '1',
			'NodeParentID' => '5',
			'NodeParentOrder' => '4',
			'NodeType' => 'Branch Title',
			'NodePromptText' => 'Arrests & Citations',
			'NodePromptNotes' => 'allegation-arrest'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 457,
			'NodeTree' => '1',
			'NodeParentID' => '707',
			'NodeType' => 'Page',
			'NodePromptText' => 'The Scene',
			'NodePromptNotes' => 'the-scene',
			'NodePromptAfter' => 'The Scene::M::::M::::M::',
			'NodeDataBranch' => 'Scenes'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 458,
			'NodeTree' => '1',
			'NodeParentID' => '460',
			'NodeType' => 'Data Manip: Wrap',
			'NodePromptNotes' => 'your-info',
			'NodeDefault' => 'Y',
			'NodeDataBranch' => 'Civilians',
			'NodeDataStore' => 'Civilians:CivIsCreator'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 203,
			'NodeTree' => '1',
			'NodeParentID' => '466',
			'NodeParentOrder' => '1',
			'NodeType' => 'Instructions',
			'NodePromptText' => 'Next, you\'ll identify your allegations of police misconduct. These are your specific accusations that need to be investigated.<br><br>The word "allegation" does not imply that your claims are true or false. But your complaint will be more trustworthy if your allegations match the facts.'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 459,
			'NodeTree' => '1',
			'NodeParentID' => '530',
			'NodeType' => 'Page',
			'NodePromptText' => 'Your Role',
			'NodePromptNotes' => 'your-role',
			'NodePromptAfter' => 'Your Role::M::::M::::M::'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 204,
			'NodeTree' => '1',
			'NodeParentID' => '467',
			'NodeParentOrder' => '1',
			'NodeType' => 'Radio',
			'NodePromptText' => 'Did an officer stop, question, or detain anybody during this incident? This is when officers pull over a vehicle, or keep anyone from leaving.',
			'NodeDataStore' => 'AllegSilver:AlleSilStopYN'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 460,
			'NodeTree' => '1',
			'NodeParentID' => '139',
			'NodeParentOrder' => '1',
			'NodeType' => 'Page',
			'NodePromptText' => 'About You',
			'NodePromptNotes' => 'about-you',
			'NodePromptAfter' => 'About You::M::::M::::M::'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 205,
			'NodeTree' => '1',
			'NodeParentID' => '2033',
			'NodeParentOrder' => '1',
			'NodeType' => 'Radio',
			'NodePromptText' => 'Do you think anybody was <span class="slBlueDark">wrongfully</span> stopped or detained?',
			'NodePromptNotes' => '<p><span class="slBlueDark">Example of Wrongful Stop #1:</span> Police are called to a high school after a student is accused of theft. Police and teachers interrogate him as he\'s held against his will. His parents are not contacted until many hours later.</p>
<p><span class="slBlueDark">Example of Wrongful Stop #2:</span> A motorist gets pulled over for speeding. When the officer asks to search her vehicle, she says no. The officer then detains her for 30 minutes until drug dogs arrive.</p>',
			'NodeDataStore' => 'AllegSilver:AlleSilStopWrongful',
			'NodeOpts' => '15'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 461,
			'NodeTree' => '1',
			'NodeParentID' => '55',
			'NodeType' => 'Page',
			'NodePromptText' => 'Adding Victim',
			'NodePromptNotes' => 'adding-victim',
			'NodePromptAfter' => 'Adding Victim::M::::M::::M::'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 206,
			'NodeTree' => '1',
			'NodeParentID' => '450',
			'NodeType' => 'Checkbox',
			'NodePromptText' => 'Which officers made stops?',
			'NodeResponseSet' => 'LoopItems::Officers',
			'NodeDataStore' => 'LinksOfficerAllegations:LnkOffAlleOffID',
			'NodeOpts' => '3'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 462,
			'NodeTree' => '1',
			'NodeParentID' => '97',
			'NodeType' => 'Page',
			'NodePromptText' => 'Adding Witness',
			'NodePromptNotes' => 'adding-witness',
			'NodePromptAfter' => 'Adding Witness::M::::M::::M::'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 207,
			'NodeTree' => '1',
			'NodeParentID' => '2038',
			'NodeType' => 'Checkbox',
			'NodePromptText' => 'Which victims were stopped?',
			'NodeResponseSet' => 'LoopItems::Victims',
			'NodeDataStore' => 'LinksCivilianEvents:LnkCivEveCivID',
			'NodeOpts' => '3'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 463,
			'NodeTree' => '1',
			'NodeParentID' => '144',
			'NodeType' => 'Page',
			'NodePromptText' => 'Next: Police Officers',
			'NodePromptNotes' => 'next-police-officers',
			'NodePromptAfter' => 'Next: Police Officers::M::::M::::M::'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 208,
			'NodeTree' => '1',
			'NodeParentID' => '450',
			'NodeParentOrder' => '1',
			'NodeType' => 'Long Text',
			'NodePromptText' => 'What makes you think that a wrongful stop occurred?',
			'NodeDataStore' => 'Allegations:AlleDescription',
			'NodeCharLimit' => '150',
			'NodeOpts' => '465'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 464,
			'NodeTree' => '1',
			'NodeParentID' => '143',
			'NodeType' => 'Page',
			'NodePromptText' => 'Find A Police Department',
			'NodePromptNotes' => 'find-a-police-department',
			'NodePromptAfter' => 'Find A Police Department::M::::M::::M::'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 209,
			'NodeTree' => '1',
			'NodeParentID' => '467',
			'NodeParentOrder' => '2',
			'NodeType' => 'Radio',
			'NodePromptText' => 'Did anybody ask for an officer\'s ID?',
			'NodeDataStore' => 'AllegSilver:AlleSilOfficerID'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 465,
			'NodeTree' => '1',
			'NodeParentID' => '160',
			'NodeType' => 'Page',
			'NodePromptText' => 'Adding Police Officer',
			'NodePromptNotes' => 'adding-police-officer',
			'NodePromptAfter' => 'Adding Police Officer::M::::M::::M::'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 210,
			'NodeTree' => '1',
			'NodeParentID' => '209',
			'NodeType' => 'Radio',
			'NodePromptText' => 'Did an officer <span class="slBlueDark">refuse</span> to provide ID?',
			'NodeDataStore' => 'AllegSilver:AlleSilOfficerRefuseID',
			'NodeOpts' => '15'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 466,
			'NodeTree' => '1',
			'NodeParentID' => '5',
			'NodeType' => 'Page',
			'NodePromptText' => 'Next: What Happened',
			'NodePromptNotes' => 'discover-allegations-next',
			'NodePromptAfter' => 'Next: What Happened::M::::M::::M::'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 211,
			'NodeTree' => '1',
			'NodeParentID' => '537',
			'NodeType' => 'Checkbox',
			'NodePromptText' => 'Which officers?',
			'NodeResponseSet' => 'LoopItems::Officers',
			'NodeDataStore' => 'LinksOfficerAllegations:LnkOffAlleOffID',
			'NodeOpts' => '3'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 467,
			'NodeTree' => '1',
			'NodeParentID' => '198',
			'NodeType' => 'Page',
			'NodePromptText' => 'Allegation: Wrongful Stop',
			'NodePromptNotes' => 'allegation-stop',
			'NodePromptAfter' => 'Allegation: Wrongful Stop::M::::M::::M::'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 212,
			'NodeTree' => '1',
			'NodeParentID' => '469',
			'NodeParentOrder' => '1',
			'NodeType' => 'Radio',
			'NodePromptText' => 'Did an officer conduct any searches during this incident? (This includes all types of searches of people, vehicles, homes, or other property.)',
			'NodeDataStore' => 'AllegSilver:AlleSilSearchYN'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 213,
			'NodeTree' => '1',
			'NodeParentID' => '2034',
			'NodeParentOrder' => '1',
			'NodeType' => 'Radio',
			'NodePromptText' => 'Do you think anybody was <span class="slBlueDark">wrongfully</span> searched?',
			'NodePromptNotes' => '<span class="slBlueDark">Example of Wrongful Search:</span> An officer writes a man a ticket after pulling him over for an unsafe lane change. When the officer asks to search the car, the man refuses. The officer then orders the man out of his vehicle and searches it without the man\'s consent.',
			'NodeDataStore' => 'AllegSilver:AlleSilSearchWrongful',
			'NodeOpts' => '15'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 469,
			'NodeTree' => '1',
			'NodeParentID' => '199',
			'NodeType' => 'Page',
			'NodePromptText' => 'Allegation: Wrongful Search',
			'NodePromptNotes' => 'allegations-search-and-property',
			'NodePromptAfter' => 'Allegation: Wrongful Search::M::::M::::M::'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 214,
			'NodeTree' => '1',
			'NodeParentID' => '538',
			'NodeType' => 'Checkbox',
			'NodePromptText' => 'Which officers performed the search?',
			'NodeResponseSet' => 'LoopItems::Officers',
			'NodeDataStore' => 'LinksOfficerAllegations:LnkOffAlleOffID',
			'NodeOpts' => '3'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 215,
			'NodeTree' => '1',
			'NodeParentID' => '2039',
			'NodeType' => 'Checkbox',
			'NodePromptText' => 'Which victims were searched?',
			'NodeResponseSet' => 'LoopItems::Victims',
			'NodeDataStore' => 'LinksCivilianEvents:LnkCivEveCivID',
			'NodeOpts' => '3'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 471,
			'NodeTree' => '1',
			'NodeParentID' => '200',
			'NodeParentOrder' => '2',
			'NodeType' => 'Page',
			'NodePromptText' => 'Allegation: Unreasonable Use of Force',
			'NodePromptNotes' => 'allegation-use-of-force',
			'NodePromptAfter' => 'Allegation: Unreasonable Use of Force::M::::M::::M::'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 216,
			'NodeTree' => '1',
			'NodeParentID' => '538',
			'NodeParentOrder' => '1',
			'NodeType' => 'Long Text',
			'NodePromptText' => 'What makes you think that a wrongful search occurred?',
			'NodeDataStore' => 'Allegations:AlleDescription',
			'NodeCharLimit' => '150',
			'NodeOpts' => '465'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 472,
			'NodeTree' => '1',
			'NodeParentID' => '201',
			'NodeType' => 'Page',
			'NodePromptText' => 'Allegation: Wrongful Arrest',
			'NodePromptNotes' => 'allegation-arrest',
			'NodePromptAfter' => 'Allegation: Wrongful Arrest::M::::M::::M::'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 217,
			'NodeTree' => '1',
			'NodeParentID' => '469',
			'NodeParentOrder' => '2',
			'NodeType' => 'Radio',
			'NodePromptText' => 'Was any property <span class="slBlueDark">seized</span> or <span class="slBlueDark">damaged</span>? (This does <span class="slBlueDark">not</span> include <i class="slBlueDark">illegal</i> items.)',
			'NodeDataStore' => 'AllegSilver:AlleSilPropertyYN'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 473,
			'NodeTree' => '1',
			'NodeParentID' => '201',
			'NodeParentOrder' => '1',
			'NodeType' => 'Page',
			'NodePromptText' => 'Allegation: Excessive Citation',
			'NodePromptNotes' => 'allegation-citation',
			'NodePromptAfter' => 'Allegation: Excessive Citation::M::::M::::M::'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 218,
			'NodeTree' => '1',
			'NodeParentID' => '1188',
			'NodeType' => 'Radio',
			'NodePromptText' => 'Do you think this property was <span class="slBlueDark">wrongfully</span> seized?',
			'NodePromptNotes' => '<span class="slBlueDark">Example of Wrongful Seizure:</span> Rudy Ramirez was pulled over driving to Missouri to buy a used Corvette. A search turned up no drugs. But under civil forfeiture laws, the officers confiscated $6,000 in cash he had on hand to buy the car.',
			'NodeDataStore' => 'AllegSilver:AlleSilPropertyWrongful',
			'NodeOpts' => '15'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 219,
			'NodeTree' => '1',
			'NodeParentID' => '539',
			'NodeParentOrder' => '1',
			'NodeType' => 'Checkbox',
			'NodePromptText' => 'Which officers seized or damaged property?',
			'NodeResponseSet' => 'LoopItems::Officers',
			'NodeDataStore' => 'LinksOfficerAllegations:LnkOffAlleOffID',
			'NodeOpts' => '3'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 475,
			'NodeTree' => '1',
			'NodeParentID' => '154',
			'NodeParentOrder' => '3',
			'NodeType' => 'Page',
			'NodePromptText' => 'Allegation: Neglect of Duty',
			'NodePromptNotes' => 'allegation-policy-and-procedure',
			'NodePromptAfter' => 'Allegation: Neglect of Duty::M::::M::::M::'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 220,
			'NodeTree' => '1',
			'NodeParentID' => '539',
			'NodeType' => 'Checkbox',
			'NodePromptText' => 'Which victims did this property belong to?',
			'NodeResponseSet' => 'LoopItems::Victims',
			'NodeDataStore' => 'LinksCivilianAllegations:LnkCivAlleCivID',
			'NodeOpts' => '3'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 476,
			'NodeTree' => '1',
			'NodeParentID' => '154',
			'NodeType' => 'Page',
			'NodePromptText' => 'Allegation: Intimidation Using Weapon',
			'NodePromptNotes' => 'allegation-intimidation-using-weapon',
			'NodePromptAfter' => 'Allegation: Intimidation Using Weapon::M::::M::::M::'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 221,
			'NodeTree' => '1',
			'NodeParentID' => '539',
			'NodeParentOrder' => '2',
			'NodeType' => 'Long Text',
			'NodePromptText' => 'What makes you think that a wrongful property seizure occurred?',
			'NodeDataStore' => 'Allegations:AlleDescription',
			'NodeCharLimit' => '150',
			'NodeOpts' => '465'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 222,
			'NodeTree' => '1',
			'NodeParentID' => '471',
			'NodeParentOrder' => '1',
			'NodeType' => 'Radio',
			'NodePromptText' => 'Did an officer use physical force on anybody during this incident? This includes any use of violent contact up to and including deadly force by an officer.',
			'NodeDataStore' => 'AllegSilver:AlleSilForceYN'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 478,
			'NodeTree' => '1',
			'NodeParentID' => '154',
			'NodeParentOrder' => '1',
			'NodeType' => 'Page',
			'NodePromptText' => 'Allegation: Bias-Based Policing',
			'NodePromptNotes' => 'allegations-bias-based-and-retaliation',
			'NodePromptAfter' => 'Allegation: Bias-Based Policing::M::::M::::M::'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 223,
			'NodeTree' => '1',
			'NodeParentID' => '2035',
			'NodeParentOrder' => '1',
			'NodeType' => 'Radio',
			'NodePromptText' => 'Do you think the use of physical force was <span class="slBlueDark">unreasonable</span>?',
			'NodePromptNotes' => '<p><span class="slBlueDark">Definition of Unreasonable Force</span>: "Reasonable force" is the amount of effort required by police to compel an unwilling person to comply. So "unreasonable force" is any unnecessary or excessive force beyond what\'s required to do that.</p>
<p><span class="slBlueDark">Example of Unreasonable Force:</span> A woman drove into a road construction area by accident. An officer directing traffic approached her and yelled at her to get off the road. He then put his hand through her open window and twisted her arm until she moved her car.</p>',
			'NodeDataStore' => 'AllegSilver:AlleSilForceUnreason',
			'NodeOpts' => '15'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 224,
			'NodeTree' => '1',
			'NodeParentID' => '540',
			'NodeType' => 'Checkbox',
			'NodePromptText' => 'Which Officers?',
			'NodeResponseSet' => 'LoopItems::Officers',
			'NodeDataStore' => 'LinksOfficerAllegations:LnkOffAlleOffID',
			'NodeOpts' => '3'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 225,
			'NodeTree' => '1',
			'NodeParentID' => '2040',
			'NodeType' => 'Checkbox',
			'NodePromptText' => 'Which Victims?',
			'NodeResponseSet' => 'LoopItems::Victims',
			'NodeDataStore' => 'LinksCivilianEvents:LnkCivEveCivID',
			'NodeOpts' => '3'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 481,
			'NodeTree' => '1',
			'NodeParentID' => '154',
			'NodeParentOrder' => '6',
			'NodeType' => 'Page',
			'NodePromptText' => 'Allegation: Discourtesy',
			'NodePromptNotes' => 'allegation-discourteous',
			'NodePromptAfter' => 'Allegation: Discourtesy::M::::M::::M::'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 226,
			'NodeTree' => '1',
			'NodeParentID' => '540',
			'NodeParentOrder' => '1',
			'NodeType' => 'Long Text',
			'NodePromptText' => 'What makes you think that unreasonable use of physical force occurred?',
			'NodeDataStore' => 'Allegations:AlleDescription',
			'NodeCharLimit' => '150',
			'NodeOpts' => '465'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 482,
			'NodeTree' => '1',
			'NodeParentID' => '6',
			'NodeType' => 'Page',
			'NodePromptText' => 'GO GOLD!',
			'NodePromptNotes' => 'go-gold',
			'NodePromptAfter' => 'GO GOLD!::M::::M::::M::',
			'NodeCharLimit' => '-1'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 227,
			'NodeTree' => '1',
			'NodeParentID' => '472',
			'NodeParentOrder' => '1',
			'NodeType' => 'Radio',
			'NodePromptText' => 'Did an officer arrest anybody during this incident? That means the officers took somebody to the police station.',
			'NodeDataStore' => 'AllegSilver:AlleSilArrestYN'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 228,
			'NodeTree' => '1',
			'NodeParentID' => '1172',
			'NodeParentOrder' => '1',
			'NodeType' => 'Radio',
			'NodePromptText' => 'Do you think anybody was <span class="slBlueDark">wrongfully</span> arrested?',
			'NodePromptNotes' => '<span class="slBlueDark">Example of Wrongful Arrest:</span> A woman asserts her First Amendment rights by video recording on-duty police. An officer arrests her after she refuses to turn off her camera.',
			'NodeDataStore' => 'AllegSilver:AlleSilArrestWrongful',
			'NodeOpts' => '15'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 229,
			'NodeTree' => '1',
			'NodeParentID' => '541',
			'NodeType' => 'Checkbox',
			'NodePromptText' => 'Which Officers?',
			'NodeResponseSet' => 'LoopItems::Officers',
			'NodeDataStore' => 'LinksOfficerAllegations:LnkOffAlleOffID',
			'NodeOpts' => '3'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 230,
			'NodeTree' => '1',
			'NodeParentID' => '2041',
			'NodeType' => 'Checkbox',
			'NodePromptText' => 'Which Victims?',
			'NodeResponseSet' => 'LoopItems::Victims',
			'NodeDataStore' => 'LinksCivilianEvents:LnkCivEveCivID',
			'NodeOpts' => '3'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 231,
			'NodeTree' => '1',
			'NodeParentID' => '541',
			'NodeParentOrder' => '1',
			'NodeType' => 'Long Text',
			'NodePromptText' => 'What makes you think that a wrongful arrest occurred?',
			'NodeDataStore' => 'Allegations:AlleDescription',
			'NodeCharLimit' => '150',
			'NodeOpts' => '465'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 488,
			'NodeTree' => '1',
			'NodeParentID' => '149',
			'NodeType' => 'Page',
			'NodePromptText' => 'Stop: Reason Given',
			'NodePromptNotes' => 'reason-for-stop',
			'NodePromptAfter' => 'Stop: Reason Given::M::::M::::M::'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 234,
			'NodeTree' => '1',
			'NodeParentID' => '473',
			'NodeParentOrder' => '1',
			'NodeType' => 'Radio',
			'NodePromptText' => 'Did anybody who was not arrested get a ticket or citation?',
			'NodeDataStore' => 'AllegSilver:AlleSilCitationYN'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 235,
			'NodeTree' => '1',
			'NodeParentID' => '2036',
			'NodeParentOrder' => '1',
			'NodeType' => 'Radio',
			'NodePromptText' => 'Do you think that any citations were <span class="slBlueDark">wrongful</span> or <span class="slBlueDark">excessive</span>?',
			'NodePromptNotes' => '<span class="slBlueDark">Example of Excessive Citation:</span> A motorist gets pulled over and cited for speeding. On the same ticket, the officer also cites him for "illegal window tint," "muffler violation," "seat belt violation," and "illegal lane change."',
			'NodeDataStore' => 'AllegSilver:AlleSilCitationExcessive',
			'NodeOpts' => '15'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 236,
			'NodeTree' => '1',
			'NodeParentID' => '543',
			'NodeType' => 'Checkbox',
			'NodePromptText' => 'Which officers gave excessive citations?',
			'NodeResponseSet' => 'LoopItems::Officers',
			'NodeDataStore' => 'LinksOfficerAllegations:LnkOffAlleOffID',
			'NodeOpts' => '3'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 237,
			'NodeTree' => '1',
			'NodeParentID' => '2036',
			'NodeType' => 'Checkbox',
			'NodePromptText' => 'Which victims were given a citation?',
			'NodeResponseSet' => 'LoopItems::Victims',
			'NodeDataStore' => 'Civilians:CivGivenCitation',
			'NodeOpts' => '3'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 238,
			'NodeTree' => '1',
			'NodeParentID' => '543',
			'NodeParentOrder' => '1',
			'NodeType' => 'Long Text',
			'NodePromptText' => 'What makes you think that these citations were excessive?',
			'NodeDataStore' => 'Allegations:AlleDescription',
			'NodeCharLimit' => '150',
			'NodeOpts' => '465'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 240,
			'NodeTree' => '1',
			'NodeParentID' => '475',
			'NodeParentOrder' => '2',
			'NodeType' => 'Radio',
			'NodePromptText' => 'Do you think an officer <span class="slBlueDark">took actions</span> that violate a policy or procedure? Leave blank if you described this in an earlier allegation.',
			'NodePromptNotes' => '<span class="slBlueDark">Example of Procedure Violation:</span> An officer parked his police vehicle in a handicap spot. There did not seem to be any emergency to justify this.',
			'NodeDataStore' => 'AllegSilver:AlleSilProcedure',
			'NodeOpts' => '5'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 241,
			'NodeTree' => '1',
			'NodeParentID' => '544',
			'NodeType' => 'Checkbox',
			'NodePromptText' => 'Which officers did not follow appropriate procedure?',
			'NodeResponseSet' => 'LoopItems::Officers',
			'NodeDataStore' => 'LinksOfficerAllegations:LnkOffAlleOffID',
			'NodeOpts' => '3'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 242,
			'NodeTree' => '1',
			'NodeParentID' => '544',
			'NodeParentOrder' => '1',
			'NodeType' => 'Long Text',
			'NodePromptText' => 'What makes you think that a policy or procedure violation occurred?',
			'NodeDataStore' => 'Allegations:AlleDescription',
			'NodeCharLimit' => '150',
			'NodeOpts' => '465'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 243,
			'NodeTree' => '1',
			'NodeParentID' => '476',
			'NodeParentOrder' => '1',
			'NodeType' => 'Radio',
			'NodePromptText' => 'Police are legally allowed to <i class=\"slBlueDark\">display</i> a weapon if they feel threatened. But it\\'s wrongful for police to use a weapon to intimidate people who aren\\'t a threat.<br /><br />Do you think an officer displayed a weapon ï¿½ or a police dog ï¿½ to <span class=\"slBlueDark\">wrongfully intimidate</span> anybody? (This does not include any violent use of force. <span class=\"allegation\">Answers in red are allegations.</span>)',
			'NodePromptNotes' => '<span class="slBlueDark">Example:</span> While questioning a pedestrian, the officer pointed a taser at her in a threatening manner.',
			'NodeDataStore' => 'AllegSilver:AlleSilIntimidatingWeapon',
			'NodeOpts' => '5'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 244,
			'NodeTree' => '1',
			'NodeParentID' => '546',
			'NodeParentOrder' => '2',
			'NodeType' => 'Checkbox',
			'NodePromptText' => 'Which officers intimidated?',
			'NodeResponseSet' => 'LoopItems::Officers',
			'NodeDataStore' => 'LinksOfficerAllegations:LnkOffAlleOffID',
			'NodeOpts' => '3'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 500,
			'NodeTree' => '1',
			'NodeParentID' => '149',
			'NodeParentOrder' => '2',
			'NodeType' => 'Page',
			'NodePromptText' => 'Search: Reason Given, Content',
			'NodePromptNotes' => 'gold-info-search-and-consent',
			'NodePromptAfter' => 'Search: Reason Given, Content::M::::M::::M::'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 245,
			'NodeTree' => '1',
			'NodeParentID' => '546',
			'NodeParentOrder' => '1',
			'NodeType' => 'Checkbox',
			'NodePromptText' => 'Which victims were intimidated?',
			'NodeResponseSet' => 'LoopItems::Victims',
			'NodeDataStore' => 'LinksCivilianAllegations:LnkCivAlleCivID',
			'NodeOpts' => '3'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 246,
			'NodeTree' => '1',
			'NodeParentID' => '546',
			'NodeType' => 'Radio',
			'NodePromptText' => 'What type of weapon?',
			'NodeResponseSet' => 'Definition::Intimidation Weapons',
			'NodeDataStore' => 'AllegSilver:AlleSilIntimidatingWeaponType',
			'NodeOpts' => '15'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 247,
			'NodeTree' => '1',
			'NodeParentID' => '546',
			'NodeParentOrder' => '3',
			'NodeType' => 'Long Text',
			'NodePromptText' => 'What makes you think that wrongful intimidation occurred?',
			'NodeDataStore' => 'Allegations:AlleDescription',
			'NodeCharLimit' => '150',
			'NodeOpts' => '465'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 248,
			'NodeTree' => '1',
			'NodeParentID' => '854',
			'NodeParentOrder' => '2',
			'NodeType' => 'Radio',
			'NodePromptText' => 'Do you think an officer <span class="slBlueDark">sexually <b><i>assaulted</i></b></span> anybody? Sexual assault is any sexual act that a person is forced to engage in against their will. This includes any non-consensual sexual touching.',
			'NodePromptNotes' => '<span class="slBlueDark">Example of Sexual Assault:</span> An officer put his hand down a motorist\'s pants, groping his genitals. He said he was looking for drugs.',
			'NodeDataStore' => 'AllegSilver:AlleSilSexualAssault',
			'NodeOpts' => '5'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 249,
			'NodeTree' => '1',
			'NodeParentID' => '547',
			'NodeParentOrder' => '1',
			'NodeType' => 'Checkbox',
			'NodePromptText' => 'Which Officers?',
			'NodeResponseSet' => 'LoopItems::Officers',
			'NodeDataStore' => 'LinksOfficerAllegations:LnkOffAlleOffID',
			'NodeOpts' => '3'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 505,
			'NodeTree' => '1',
			'NodeParentID' => '149',
			'NodeParentOrder' => '1',
			'NodeType' => 'Page',
			'NodePromptText' => 'Search: Property Damage/Seizure',
			'NodePromptNotes' => 'gold-info-property-seized-or-damaged',
			'NodePromptAfter' => 'Search: Property Damage/Seizure::M::::M::::M::'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 250,
			'NodeTree' => '1',
			'NodeParentID' => '547',
			'NodeType' => 'Checkbox',
			'NodePromptText' => 'Which Victims?',
			'NodeResponseSet' => 'LoopItems::Victims',
			'NodeDataStore' => 'LinksCivilianAllegations:LnkCivAlleCivID',
			'NodeOpts' => '3'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 251,
			'NodeTree' => '1',
			'NodeParentID' => '547',
			'NodeParentOrder' => '2',
			'NodeType' => 'Long Text',
			'NodePromptText' => 'What makes you think that a sexual assault occurred?',
			'NodePromptNotes' => 'We understand that this isn\'t easy, but please provide as much detail as you can.',
			'NodeDataStore' => 'Allegations:AlleDescription',
			'NodeOpts' => '15'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 252,
			'NodeTree' => '1',
			'NodeParentID' => '478',
			'NodeParentOrder' => '1',
			'NodeType' => 'Radio',
			'NodePromptText' => 'Do you think an officer acted in a <span class="slBlueDark">biased or discriminatory</span> manner?<br /><br />That means an officer\'s conduct was based on a person\'s race, gender, appearance, nationality, religion, age, class, sexual orientation, residence, disability, etc.',
			'NodePromptNotes' => '<span class="slBlueDark">Example of Discriminatory Conduct:</span> An officer stops a black motorist in a primarily white neighborhood. The officer claimed he fit the description of a suspect.',
			'NodeDataStore' => 'AllegSilver:AlleSilBias',
			'NodeOpts' => '5'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 508,
			'NodeTree' => '1',
			'NodeParentID' => '151',
			'NodeParentOrder' => '1',
			'NodeType' => 'Page',
			'NodePromptText' => 'Gold Info: Use of Force',
			'NodePromptNotes' => 'gold-details-use-of-force',
			'NodePromptAfter' => 'Gold Details: Use of Force::M::::M::::M::'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 253,
			'NodeTree' => '1',
			'NodeParentID' => '548',
			'NodeParentOrder' => '1',
			'NodeType' => 'Checkbox',
			'NodePromptText' => 'Which officers used discrimination?',
			'NodeResponseSet' => 'LoopItems::Officers',
			'NodeDataStore' => 'LinksOfficerAllegations:LnkOffAlleOffID',
			'NodeOpts' => '3'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 254,
			'NodeTree' => '1',
			'NodeParentID' => '548',
			'NodeType' => 'Checkbox',
			'NodePromptText' => 'Which victims were discriminated against?',
			'NodeResponseSet' => 'LoopItems::Victims',
			'NodeDataStore' => 'LinksCivilianAllegations:LnkCivAlleCivID',
			'NodeOpts' => '3'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 255,
			'NodeTree' => '1',
			'NodeParentID' => '548',
			'NodeParentOrder' => '2',
			'NodeType' => 'Long Text',
			'NodePromptText' => 'What makes you think that biased policing occurred?',
			'NodeDataStore' => 'Allegations:AlleDescription',
			'NodeCharLimit' => '150',
			'NodeOpts' => '465'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 668,
			'NodeTree' => '1',
			'NodeParentID' => '482',
			'NodeType' => 'Instructions',
			'NodePromptText' => '<img src="/openpolice/uploads/flex-arm-gold2.png" class="mL20" width="20%" align="right">
<h2>Want To Go Gold?<br></h2>
<p><b>Great Job!</b> You have completed a solid complaint. This includes basic info that most departments need to investigate your complaint.</p>
<p>But here are the benefits of taking a few more minutes to create a free <b class="slBlueDark">GOLD LEVEL <nobr>complaint</nobr></b><nobr> ...</nobr></p>
<ul>
<li>Dive deeper into your incident to see a more complete picture</li>
<li>Create a more complete complaint that\'s even stronger for investigators</li>
<li>Get recommended articles and videos based on your report</li>
<li>Helps us to better track problematic police behavior in your community and nationwide</li>
</ul>',
			'NodeOpts' => '37'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 670,
			'NodeTree' => '1',
			'NodeParentID' => '481',
			'NodeParentOrder' => '4',
			'NodeType' => 'Checkbox',
			'NodePromptText' => 'Which victims used profanity, if any?',
			'NodePromptNotes' => 'It\'s not against the law to use profanity. So being truthful about this can help establish credibility.',
			'NodeResponseSet' => 'LoopItems::Victims',
			'NodeOpts' => '3'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 671,
			'NodeTree' => '1',
			'NodeParentID' => '481',
			'NodeParentOrder' => '2',
			'NodeType' => 'Checkbox',
			'NodePromptText' => 'Which officers used profanity, if any?',
			'NodeResponseSet' => 'LoopItems::Officers',
			'NodeOpts' => '3'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 674,
			'NodeTree' => '1',
			'NodeParentID' => '481',
			'NodeParentOrder' => '3',
			'NodeType' => 'Radio',
			'NodePromptText' => 'Did the officer use profanity?'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 676,
			'NodeTree' => '1',
			'NodeParentID' => '481',
			'NodeParentOrder' => '5',
			'NodeType' => 'Radio',
			'NodePromptText' => 'Did the victim use profanity?',
			'NodePromptNotes' => 'It\'s not against the law to use profanity. So being truthful about this can help establish credibility.'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 677,
			'NodeTree' => '1',
			'NodeParentID' => '437',
			'NodeParentOrder' => '1',
			'NodeType' => 'Page',
			'NodePromptNotes' => 'upset-about-police',
			'NodePromptAfter' => 'Upset About Police::M::::M::::M::',
			'NodeOpts' => '29'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 678,
			'NodeTree' => '1',
			'NodeParentID' => '677',
			'NodeType' => 'Instructions',
			'NodePromptText' => '<h2 class="slBlueDark">This site might not be for you.</h2>
<p>You said you are upset about police brutality on the news or on the internet. But this site is for people who experienced or witnessed police misconduct in-person.</p>
<p>We do appreciate your interest in police accountability. Here are some other ways you can help:</p>
<ul>
<li><a href="http://www.joincampaignzero.org/action" target="_blank">Write to your representatives to urge them to support better police accountability.</a></li>
<li>Check out <a href="http://FlexYourRights.org">FlexYourRights.org</a> for helpful info on how to handle police encounters.</li>
</ul>
<p>If you did experience or witness misconduct in-person, go back to correct this and resume your complaint.</p>',
			'NodePromptAfter' => '<style> #node1176 .nodeSub .nFormNext { display: none; } </style>',
			'NodeOpts' => '37'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 679,
			'NodeTree' => '1',
			'NodeParentID' => '437',
			'NodeParentOrder' => '3',
			'NodeType' => 'Page',
			'NodePromptNotes' => 'wait-you-probably-need-an-attorney',
			'NodePromptAfter' => 'An Attorney Needs To Be Involved::M::::M::::M::',
			'NodeCharLimit' => '-1'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 687,
			'NodeTree' => '1',
			'NodeParentID' => '2124',
			'NodeType' => 'Instructions',
			'NodePromptText' => '<h2 class="slBlueDark">Confirm Your Complaint</h2>
<p>Below is a preview of your finished complaint. Remember that we will never publish anyone\'s private information. This includes addresses, phone numbers, emails, etc.</p>
<h3>This is what police oversight investigators will see:</h3>
'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 688,
			'NodeTree' => '1',
			'NodeParentID' => '2124',
			'NodeParentOrder' => '1',
			'NodeType' => 'Instructions',
			'NodePromptText' => '<h2 class="slBlueDark">Confirm Your Complaint</h2>
<p>Remember that we will never publish anything in your private complaint that could be used for personal identification. This includes your story and all open-ended questions.</p>
<h2>This is what police oversight investigators will see:</h2>'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 694,
			'NodeTree' => '1',
			'NodeParentID' => '464',
			'NodeType' => 'Instructions',
			'NodePromptText' => '<div class="w100 taC mTn20 pB20"><img src="/openpolice/uploads/police-dept-icon-sm.png" style="width: 150px;" border="0"></div>
<div id="deptSearchTitle">
<h2>Find &amp; Select a <nobr>Police Department</nobr></h2>
</div>
<p>Please search for a police department, agency, or private security firm at the scene. Try typing the department name, city, or county. Then select the correct department below. <small class="slRedDark">*required</small></p>',
			'NodePromptAfter' => '<style>
.deptWrap {
  background: #FFF;
  padding: 30px 15px 15px 15px;
  border-bottom: 1px #888 solid;
}
.deptWrap:hover {
  background: #F5FBFF;
}
#deptSearchTitle {
width: 100%;
text-align: left;
}
#deptNameInWrap {
position: relative;
width: 100%;
}
#deptNameInID {
padding-left: 40px;
}
#ajaxSubmit {
position: absolute;
top: 12px;
left: 30px;
}
@media screen and (max-width: 992px) {
#deptSearchTitle { text-align: center; }
}
</style>'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 707,
			'NodeTree' => '1',
			'NodeParentID' => '2',
			'NodeParentOrder' => '4',
			'NodeType' => 'Branch Title',
			'NodePromptText' => 'The Scene',
			'NodePromptNotes' => 'the-scene'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 715,
			'NodeTree' => '1',
			'NodeParentID' => '2026',
			'NodeType' => 'Instructions',
			'NodePromptText' => '<h2>More about the Stop / Questioning:</h2>'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 726,
			'NodeTree' => '1',
			'NodeParentID' => '1199',
			'NodeType' => 'Text',
			'NodePromptText' => 'Please give a name or a nickname for this victim:',
			'NodePromptNotes' => 'This shortcut will help us refer to them in later questions. For example, "Jordan" or "Red Hat Man." Please try to keep this professional.',
			'NodePromptAfter' => '<style> #node[[nID]] { margin-top: -20px; } </style>',
			'NodeDataStore' => 'PersonContact:PrsnNickname',
			'NodeOpts' => '41'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 728,
			'NodeTree' => '1',
			'NodeParentID' => '1201',
			'NodeType' => 'Text',
			'NodePromptText' => 'Please give a name or a nickname for this witness:',
			'NodePromptNotes' => 'This shortcut will help us refer to them in later questions. For example, "Jordan" or "Red Hat Man". Please try to keep this professional.',
			'NodePromptAfter' => '<style> #node[[nID]] { margin-top: -20px; } </style>',
			'NodeDataStore' => 'PersonContact:PrsnNickname',
			'NodeOpts' => '41'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 729,
			'NodeTree' => '1',
			'NodeParentID' => '1203',
			'NodeType' => 'Text',
			'NodePromptText' => 'Please give a name or a nickname for this officer:',
			'NodePromptNotes' => 'This shortcut will help us refer to them in later questions. (For example, "Tall Cop" or "Undercover Woman.") Please try to keep this professional.',
			'NodePromptAfter' => '<style> #node[[nID]] { margin-top: -20px; } </style>',
			'NodeDataStore' => 'PersonContact:PrsnNickname',
			'NodeOpts' => '41'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 730,
			'NodeTree' => '1',
			'NodeParentID' => '465',
			'NodeParentOrder' => '7',
			'NodeType' => 'Data Manip: Wrap',
			'NodeDataBranch' => 'PhysicalDesc'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 742,
			'NodeTree' => '1',
			'NodeParentID' => '2032',
			'NodeParentOrder' => '2',
			'NodeType' => 'Checkbox',
			'NodePromptText' => 'Which types of force were used by an officer?',
			'NodeResponseSet' => 'Definition::Force Type',
			'NodeDataStore' => 'Force:ForType',
			'NodeOpts' => '5'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 743,
			'NodeTree' => '1',
			'NodeParentID' => '2032',
			'NodeParentOrder' => '3',
			'NodeType' => 'Radio',
			'NodePromptText' => 'Did an officer use any weapons or physical force against a pet or other animal?'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 744,
			'NodeTree' => '1',
			'NodeParentID' => '1152',
			'NodeParentOrder' => '1',
			'NodeType' => 'Checkbox',
			'NodePromptText' => 'Which types of force were used against an animal?',
			'NodePromptAfter' => '<style>
#n744fld1lab, #n744fld3lab { display: none; }
</style>',
			'NodeResponseSet' => 'Definition::Force Type',
			'NodeOpts' => '5'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 746,
			'NodeTree' => '1',
			'NodeParentID' => '1152',
			'NodeType' => 'Text',
			'NodePromptText' => 'Describe animal(s):',
			'NodeOpts' => '5'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 749,
			'NodeTree' => '1',
			'NodeParentID' => '3',
			'NodeParentOrder' => '1',
			'NodeType' => 'Data Manip: Update',
			'NodeResponseSet' => '295',
			'NodeDataStore' => 'Complaints:com_type'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 752,
			'NodeTree' => '5',
			'NodeType' => 'Data Manip: New',
			'NodePromptText' => 'Compliment',
			'NodeResponseSet' => '206',
			'NodeDataBranch' => 'Compliments',
			'NodeDataStore' => 'Compliments:CompliStatus'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 753,
			'NodeTree' => '5',
			'NodeParentID' => '760',
			'NodeParentOrder' => '1',
			'NodeType' => 'Page',
			'NodePromptText' => 'Welcome To Compliment',
			'NodePromptNotes' => 'share-your-story',
			'NodePromptAfter' => 'Share Your Story::M::::M::::M::'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 754,
			'NodeTree' => '5',
			'NodeParentID' => '753',
			'NodeType' => 'Long Text',
			'NodePromptText' => '<h2 class="slBlueDark">Share Your Story</h2>
<br />Memories fade fast. So please take a few minutes to write down the details you can remember below.',
			'NodePromptAfter' => '<style> #n[[nID]]FldID { height: 280px; } </style>
<script type="text/javascript"> setTimeout("document.getElementById(\'currWordCount\').innerHTML=\'Aim for 250-500 words. \'+document.getElementById(\'currWordCount\').innerHTML", 10); </script>',
			'NodeDataStore' => 'Compliments:CompliSummary',
			'NodeCharLimit' => '400',
			'NodeOpts' => '155'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 756,
			'NodeTree' => '5',
			'NodeParentID' => '752',
			'NodeParentOrder' => '4',
			'NodeType' => 'Data Manip: Update',
			'NodeResponseSet' => '295',
			'NodeDataStore' => 'Compliments:CompliType'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 759,
			'NodeTree' => '5',
			'NodeParentID' => '869',
			'NodeParentOrder' => '2',
			'NodeType' => 'Spambot Honey Pot',
			'NodePromptText' => '<h3>I bet you are brave. Are you brave?</h3>',
			'NodeDataStore' => 'Compliments:CompliHoneyPot'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 760,
			'NodeTree' => '5',
			'NodeParentID' => '876',
			'NodeType' => 'Branch Title',
			'NodePromptText' => 'Tell Your Story',
			'NodePromptNotes' => 'when-was-the-incident'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 761,
			'NodeTree' => '5',
			'NodeParentID' => '752',
			'NodeParentOrder' => '1',
			'NodeType' => 'Branch Title',
			'NodePromptText' => 'Who\'s Involved',
			'NodePromptNotes' => 'your-name'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 762,
			'NodeTree' => '5',
			'NodeParentID' => '761',
			'NodeType' => 'Branch Title',
			'NodePromptText' => 'About You',
			'NodePromptNotes' => 'your-name'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 763,
			'NodeTree' => '5',
			'NodeParentID' => '752',
			'NodeParentOrder' => '2',
			'NodeType' => 'Branch Title',
			'NodePromptText' => 'Commendations',
			'NodePromptNotes' => 'add-officer-compliments'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 764,
			'NodeTree' => '5',
			'NodeParentID' => '752',
			'NodeParentOrder' => '3',
			'NodeType' => 'Branch Title',
			'NodePromptText' => 'File & Publish Compliment',
			'NodePromptNotes' => 'review-your-story'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 765,
			'NodeTree' => '5',
			'NodeParentID' => '761',
			'NodeParentOrder' => '1',
			'NodeType' => 'Branch Title',
			'NodePromptText' => 'About Police Departments',
			'NodePromptNotes' => 'next-police-officers'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 766,
			'NodeTree' => '5',
			'NodeParentID' => '761',
			'NodeParentOrder' => '2',
			'NodeType' => 'Branch Title',
			'NodePromptText' => 'About Police Officers',
			'NodePromptNotes' => 'add-police-officers'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 767,
			'NodeTree' => '1',
			'NodeParentID' => '528',
			'NodeParentOrder' => '4',
			'NodeType' => 'Checkbox',
			'NodePromptText' => '<h2 class="slBlueDark mR5">Please Confirm</h2>',
			'NodePromptAfter' => '<style>
#blockWrap1704 { display: none; }
#n767fld0lab { margin-top: -20px; }
#node785, #node783 { margin-top: -40px; }
.investigateStatus, .complaintReportTitle, .complaintFooter, .slGlossary, #node1709 { display: none; } 
</style>
<script type="text/javascript">
setTimeout("document.getElementById(\'skinnySurv\').className = \'container taL\'", 1);
</script>',
			'NodeOpts' => '65'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 769,
			'NodeTree' => '7',
			'NodeType' => 'Page',
			'NodePromptNotes' => 'file-your-police-complaint',
			'NodePromptAfter' => 'File Your Police Complaint - Share Your Story::M::OpenPolice.org helps you build a transparent record of police misconduct. By improving accountability, you can protect the rights of people in your community.::M::::M::',
			'NodeDataBranch' => 'Visitors',
			'NodeCharLimit' => '-1',
			'NodeOpts' => '67'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 770,
			'NodeTree' => '7',
			'NodeParentID' => '1008',
			'NodeParentOrder' => '1',
			'NodeType' => 'Instructions',
			'NodePromptText' => '<h3>Find Your Best Path Forward</h3>
<p>Depending on your unique circumstances, OpenPolice.org will help you ...</p><ul><li>Prepare and save a professional-grade police misconduct report.</li><li>Upload photos, documents, videos, and other evidence.</li><li>File your report with the right police investigative agency and publish it online.</li><li>Get matched with appropriate legal help.</li></ul><h3>We Will Never ...</h3><ul><li>Sell your data or share anything without your permission.</li><li>Investigate complaints or provide direct legal services.</li></ul>',
			'NodePromptAfter' => '<style>
#ajaxWrap { background: #F5FBFF; padding: 30px 0px 60px 0px; margin-bottom: -60px; }
#node[[nID]] ul li { margin-bottom: 10px; }
@media screen and (max-width: 480px) { #filingArm { width: 40%; } }
</style>'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 771,
			'NodeTree' => '7',
			'NodeParentID' => '1008',
			'NodeParentOrder' => '2',
			'NodeType' => 'Instructions Raw',
			'NodePromptText' => '<a class="btn btn-xl btn-primary w100 mT10 mB10" href="[[DOMAIN]]/start/complaint">I Understand, Begin <nobr>My Complaint</nobr></a>
<a class="btn btn-xl btn-secondary w100 mT10 mB10" href="[[DOMAIN]]/login">Log Back In, Continue <nobr>My Complaint</nobr></a>'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 774,
			'NodeTree' => '8',
			'NodeType' => 'Page',
			'NodePromptNotes' => 'file-your-police-compliment',
			'NodePromptAfter' => 'File Your Police Compliment - Share Your Story::M::OpenPolice.org helps you build a transparent record of police excellence. By improving accountability, you can protect the rights of people in your community.::M::Open Police, OpenPolice.org, Open Police Complaints, Police Departments, Cops, Police, Officers, file compliment, commendation submit, victims, oversight, open source, transparency, #BlackLivesMatter, #BLM::M::',
			'NodeCharLimit' => '-1',
			'NodeOpts' => '67'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 775,
			'NodeTree' => '8',
			'NodeParentID' => '1009',
			'NodeType' => 'Instructions',
			'NodePromptText' => '<h2 class=\"slBlueDark\">File Your Police Compliment</h2>\r\n<p>Your story is too important to be ignored. Thatï¿½s why we help you build a transparent record of police excellence. By improving accountability, you can protect the rights of people in your community.</p><p><b>OpenPolice.org</b> is an independent project developed by <nobr>Flex Your Rights</nobr>, a 501(c)(3) educational nonprofit. <br></p>',
			'NodePromptAfter' => '<script type="text/javascript">
function fixColBrk() {
if (document.getElementById("col2595")) {
  document.getElementById("col2595").className="col-lg-7";
  document.getElementById("col2596").className="col-lg-5";
}
}
setTimeout("fixColBrk()", 100);
</script>'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 776,
			'NodeTree' => '8',
			'NodeParentID' => '1009',
			'NodeParentOrder' => '2',
			'NodeType' => 'Instructions Raw',
			'NodePromptText' => '<a class="btn btn-xl btn-primary w100 mT10 mB10" href="[[DOMAIN]]/start/compliment">I Understand, Begin <nobr>My Compliment</nobr></a>
<a class="btn btn-xl btn-secondary w100 mT10 mB10" href="[[DOMAIN]]/login">Log Back In, Continue <nobr>My Compliment</nobr></a>'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 778,
			'NodeTree' => '1',
			'NodeParentID' => '1009',
			'NodeParentOrder' => '6',
			'NodeType' => 'Instructions'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 784,
			'NodeTree' => '1',
			'NodeParentID' => '528',
			'NodeParentOrder' => '3',
			'NodeType' => 'Instructions',
			'NodePromptText' => '<a href="/complaint/readi-[[coreID]]/public" target="_blank" class="slBlueDark"><i class="fa fa-external-link" aria-hidden="true"></i> Click here to preview what visitors to OpenPolice.org will see after your complaint is published.</a>',
			'NodePromptAfter' => '<style> #node784kids, #node1442 { display: block; } </style>'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 785,
			'NodeTree' => '1',
			'NodeParentID' => '528',
			'NodeParentOrder' => '2',
			'NodeType' => 'Record Full',
			'NodeResponseSet' => '1'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 787,
			'NodeTree' => '9',
			'NodeType' => 'Page',
			'NodePromptNotes' => 'allegations',
			'NodePromptAfter' => 'List of Allegations and Commendations::M::OpenPolice.org tracks 19 different allegations of police misconduct, and 8 different commendations for excellence.::M::::M::',
			'NodeCharLimit' => '-1',
			'NodeOpts' => '67'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 788,
			'NodeTree' => '9',
			'NodeParentID' => '787',
			'NodeType' => 'Instructions',
			'NodePromptText' => '<p>&nbsp;</p>
<div class="row">
  <div class="col-md-6">
      <h2>Complaint<br />Allegations</h2>
       <ul>
      <li><a href="#wrongful-detention">Wrongful Detention</a></li>
       <li><a href="#wrongful-search">Wrongful Search</a></li>
     <li><a href="#wrongful-property-seizure">Wrongful Property Seizure</a></li>
     <li><a href="#wrongful-property-damage">Wrongful Property Damage</a></li>
       <li><a href="#sexual-harassment">Sexual Harassment</a></li>
     <li><a href="#sexual-assault">Sexual Assault</a></li>
       <li><a href="#unreasonable-force">Unreasonable Force</a></li>
       <li><a href="#wrongful-arrest">Wrongful Arrest</a></li>
     <li><a href="#excessive-arrest-charges">Excessive Arrest Charges</a></li>
       <li><a href="#excessive-citation">Excessive Citation</a></li>
       <li><a href="#intimidation-weapon">Intimidation With Weapon</a></li>
        <li><a href="#repeat-harassment">Repeat Harassment</a></li>
     <li><a href="#bias-based">Bias-Based Policing</a></li>
      <li><a href="#neglect-of-duty">Neglect of Duty</a></li>
     <li><a href="#policy-procedure">Policy or Procedure Violation</a></li>
      <li><a href="#conduct-unbecoming">Conduct Unbecoming an Officer</a></li>
        <li><a href="#officer-discourtesy">Officer Discourtesy</a></li>
     <li><a href="#officer-no-id">Officer failed to provide ID upon request</a></li>
     <!-- <li>Procedure Violation: Officer failed to read Miranda rights</li> -->
      <li><a href="#wrongful-entry">Wrongful Entry</a> (Gold only)</li>
       </ul>
 </div>
    <div class="col-md-6">
      <h2>Compliment<br />Commendations</h2>
        <ul>
      <li><a href="#valor">Valor</a></li>
     <li><a href="#lifesaving">Lifesaving</a></li>
       <li><a href="#de-escalation">De-escalation</a></li>
     <li><a href="#professionalism">Professionalism</a></li>
     <li><a href="#fairness">Fairness</a></li>
       <li><a href="#constitutional-policing">Constitutional Policing</a></li>
     <li><a href="#compassion">Compassion</a></li>
       <li><a href="#community-service">Community Service</a></li>
     </ul>
 </div>
</div>
',
			'NodeOpts' => '67'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 789,
			'NodeTree' => '10',
			'NodeType' => 'Page',
			'NodePromptNotes' => 'recent-complaints',
			'NodePromptAfter' => 'Recently Posted Complaints::M::::M::::M::',
			'NodeResponseSet' => '1',
			'NodeCharLimit' => '-1'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 790,
			'NodeTree' => '10',
			'NodeParentID' => '789',
			'NodeType' => 'Instructions',
			'NodePromptText' => '<h2>Welcome to Recent Complaints.</h2>
<p>Edit this node to fill in your page! This node could be your entire page, or just one little component.</p>'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 791,
			'NodeTree' => '11',
			'NodeType' => 'Page',
			'NodePromptNotes' => 'dashboard',
			'NodePromptAfter' => 'Admin Dashboard Home::M::::M::::M::',
			'NodeCharLimit' => '-1'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 792,
			'NodeTree' => '11',
			'NodeParentID' => '791',
			'NodeParentOrder' => '3',
			'NodeType' => 'Instructions',
			'NodePromptText' => '<h2>Announcement</h2>
<p class="red f14">Getting closer to a fully 
functional OpenPolice.org!</p>
<hr>
Overview of recent activity and statistics coming soon. For now, the most interesting things in this admin area are...
        <ul>
        <li class="mB20"><a href="/dashboard/subs" class="f22">New Submissions</a></li>
        <li class="mB20"><a href="/dashboard/tree/map?all=1" class="f22">Map of Entire Complaint Submission Process</a></li>
        <li class="mB20"><a href="/dashboard/db/all" class="f22">Entire Database Design</a></li>
        <li class="mB20"><a href="/dashboard/pages/list" class="f22">Edit Pages</a></li>
        </ul>'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 793,
			'NodeTree' => '12',
			'NodeType' => 'Page',
			'NodePromptNotes' => 'home',
			'NodePromptAfter' => 'OpenPolice.org | You belong at the center of police oversight.::M::OpenPolice.org helps you prepare, file, and track police conduct reports. Complaint or compliment, your story is too important to be ignored.::M::::M::',
			'NodeResponseSet' => '1',
			'NodeDataBranch' => 'Complaints',
			'NodeCharLimit' => '-1'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 799,
			'NodeTree' => '12',
			'NodeParentID' => '793',
			'NodeParentOrder' => '4',
			'NodeType' => 'Page Block',
			'NodePromptText' => 'Test View',
			'NodeOpts' => '67'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 810,
			'NodeTree' => '1',
			'NodeParentID' => '4',
			'NodeType' => 'Page',
			'NodePromptNotes' => 'whos-involved',
			'NodePromptAfter' => 'Who\'s Involved::M::::M::::M::'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 811,
			'NodeTree' => '1',
			'NodeParentID' => '810',
			'NodeParentOrder' => '1',
			'NodeType' => 'Instructions',
			'NodePromptText' => 'Next, you\'ll share info about yourself. Then you\'ll share info about any other civilians who witnessed the incident. This will help investigators identify and contact anyone who was involved.'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 826,
			'NodeTree' => '13',
			'NodeType' => 'Page',
			'NodePromptNotes' => 'contact',
			'NodePromptAfter' => 'Contact OpenPolice.org::M::OpenPolice.org welcomes your feedback, and any questions on using the software, or how it can work for you.::M::::M::',
			'NodeOpts' => '67'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 827,
			'NodeTree' => '13',
			'NodeParentID' => '826',
			'NodeType' => 'Instructions',
			'NodePromptText' => '<p>&nbsp;</p>\r\n<h2>Contact Us</h2>\r\n<p>We\\'d love to hear from you. But because we are a tiny startup trying to keep our eye on the ball ï¿½ we cannot respond to most inquiries we receive.<br></p>',
			'NodeOpts' => '67'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 828,
			'NodeTree' => '13',
			'NodeParentID' => '827',
			'NodeParentOrder' => '1',
			'NodeType' => 'Email',
			'NodePromptText' => '<b>Email</b>',
			'NodeOpts' => '5'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 829,
			'NodeTree' => '13',
			'NodeParentID' => '827',
			'NodeType' => 'Drop Down',
			'NodePromptText' => '<b>Type of Inquiry</b>',
			'NodeDefault' => '-',
			'NodeOpts' => '5'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 830,
			'NodeTree' => '13',
			'NodeParentID' => '827',
			'NodeParentOrder' => '3',
			'NodeType' => 'Long Text',
			'NodePromptText' => '<b>Message</b>',
			'NodePromptAfter' => '<style> #n[[nID]]FldID { height: 350px; } #nBtn832 { color: #FFF; } </style>',
			'NodeOpts' => '5'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 831,
			'NodeTree' => '13',
			'NodeParentID' => '827',
			'NodeParentOrder' => '4',
			'NodeType' => 'Spambot Honey Pot',
			'NodePromptText' => 'Reason For Contact',
			'NodeDataStore' => 'SLContact:ContType'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 832,
			'NodeTree' => '13',
			'NodeParentID' => '827',
			'NodeParentOrder' => '5',
			'NodeType' => 'Big Button',
			'NodeDefault' => 'Send Your Message',
			'NodeDataStore' => 'document.postNode.submit();'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 833,
			'NodeTree' => '14',
			'NodeType' => 'Page',
			'NodePromptNotes' => 'complaint-privacy-options',
			'NodePromptAfter' => 'User Privacy Options on OpenPolice.org::M::Complainants should control who has access to their private information. That\'s why OpenPolice.org has three unique options for how we collect and share their data.::M::Open Police, OpenPolice.org, Open Police Complaints, Police Departments, Cops, Police, Officers, file complaint, submit, victims, accountability, oversight, open source, transparency, privacy, data::M::',
			'NodeCharLimit' => '-1',
			'NodeOpts' => '67'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 834,
			'NodeTree' => '14',
			'NodeParentID' => '833',
			'NodeType' => 'Instructions',
			'NodePromptText' => '<p>&nbsp;</p>\r\n<h2 class=\"slBlueDark\">User Privacy Options</h2>\r\n<p>Complainants should control who has access to their private information. That\\'s why we\\'ve created three unique options for how we collect and share their data.</p>\r\n<p>Whichever option they choose, all information complainants provide will be <i>privately</i> shared with the relevant investigative agencies responsible for investigating complaints against police.</p>\r\n<p>&nbsp;</p>\r\n<h3>1. Full Transparency</h3>\r\n<p><strong>The complainant will publish all the names of civilians and police officers on OpenPolice.org.</strong></p>\r\n<p>Complainants who select Full Transparency will have their <i>uncensored</i> story published on OpenPolice.org. This includes officers\\' and civilians\\' names and responses to <a href=\"#glossary\">open-ended questions</a>. But other personal information (e.g. complainant contact info, home address, etc.) will <i>not</i> be published.</p>\r\n<p>&nbsp;</p>\r\n<h3>2. No Names Public</h3>\r\n<p><strong>The complainant will not publish any names on this website. This includes police officers\\' names and badge numbers too.</strong></p>\r\n<p>Complainants who select No Names Public will provide everything investigators need ï¿½ but only their <i>anonymized</i> data will be published on the OpenPolice.org. For reciprocity purposes, neither civilian nor police officer names will be published. Only the <a href=\"#glossary\">multiple-choice responses</a> will be published. (This does not include responses to <a href=\"#glossary\">open-ended questions</a>, which could reveal identities.)</p>\r\n<p>&nbsp;</p>\r\n<h3>3. Anonymous</h3>\r\n<p><strong>The complainant needs to be anonymous, even though it might limit investigation.</strong></p>\r\n<p>For complainants who select Anonymous, no personal information about them is requested or collected. Neither OpenPolice.org staff nor investigators will be able to contact the complainant. While this makes it harder for investigative agencies to investigate, itï¿½s an important option for complainants fearful of retaliation.</p>\r\n<p>Complainantsï¿½ <a href=\"#glossary\">multiple-choice responses</a> will be published. (This does not include responses to <a href=\"#glossary\">open-ended questions</a>, which could reveal identities.) Any details that could be used for personal identification may be deleted from OpenPolice.org\\'s database.</p>\r\n<div class=\"nodeAnchor\"><a id=\"attorneys\" name=\"attorneys\"></a></div>\r\n<p>&nbsp;</p>\r\n<p>&nbsp;</p>\r\n<h2>Documentation for Attorneys</h2>\r\n<p><strong>This is not a privacy setting, but complaints intended for attorneysï¿½ eyes only are stored and published with <a href=\"#glossary\">anonymized</a> data only.</strong></p>\r\n<p>Some people use OpenPolice.org to prepare documentation for an attorney. In these cases, no information will be shared with investigative agencies. Complainants can print out their complete complaint and download it as a PDF or raw data file. After completing the entire process, OpenPolice.orgï¿½s copy of their complaint is stripped of all data that might be personally identifiable. Only <a href=\"#glossary\">multiple-choice question</a> data will be saved and publicly associated with the police department records.</p>\r\n<p>When such complaints are <a href=\"#glossary\">anonymized</a>, all <a href=\"#glossary\">open-ended responses</a> are <i>permanently</i> deleted from OpenPolice.org servers. But with the advice of their attorney ï¿½ users can later upload their raw complaint data to publish their complete story.</p>\r\n<a name=\"glossary\"></a>\r\n<p>&nbsp;</p>\r\n<p>&nbsp;</p>\r\n<h3>Glossary of Terms</h3>\r\n<p><b>Multiple-Choice Questions:</b> Users select answers from options on a predetermined list.</p>\r\n<p><b>Open-Ended Questions:</b> Users can type a narrative response in order to share their knowledge and/or feelings.</p>\r\n<p><b>Anonymized Complaint Data:</b> Because open-ended questions can potentially include personally-identifying information, anonymized data only includes responses to multiple-choice questions. And in some rare cases, multiple-choice question responses are also hidden if they potentially reveal too much about a personï¿½s identity.</p>\r\n<p>&nbsp;</p>\r\n<p><em>Updated: October 24, 2018</em></p>\r\n<p><a href=\"/privacy-policy\">Privacy Policy</a></p>\r\n<p>&nbsp;</p>',
			'NodeOpts' => '67'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 835,
			'NodeTree' => '15',
			'NodeType' => 'Page',
			'NodePromptNotes' => 'privacy-policy',
			'NodePromptAfter' => 'Website Privacy Policy | OpenPolice.org::M::This privacy policy discloses the privacy practices for http://openpolice.local. This privacy policy applies solely to information collected by this web site.::M::::M::',
			'NodeCharLimit' => '-1',
			'NodeOpts' => '67'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 836,
			'NodeTree' => '15',
			'NodeParentID' => '835',
			'NodeType' => 'Instructions',
			'NodePromptText' => '<p>&nbsp;</p>\r\n<h2 class=\"slBlueDark\">Terms, Policies, &amp; Rules</h2>\r\n<p>This privacy policy discloses the privacy practices for http://openpolice.local. This privacy policy applies solely to \r\ninformation collected by this web site. It will notify you of the following:</p>\r\n<ol><li>What personally identifiable information is collected from you through the web site, how it is used and with whom it may be shared.</li><li>What choices are available to you regarding the use of your data.</li>\r\n<li>The security procedures in place to protect against the misuse of your information.</li><li>How you can correct any inaccuracies in the information.</li></ol>\r\n<p><br></p>\r\n<h3>Information Collection, Use, and Sharing</h3>\r\n<p>We are the sole owners of the information collected on this site. We only collect information that you voluntarily give us via your use of our online forms, or other direct contact from you. While most users may choose to share most of their information publicly, we will not sell or rent any private information to anyone.</p>\r\n<p>We will use your information to respond to you, regarding your complaint. We will not share your information with any third parties outside of our organization, other than as necessary to fulfill your request (e.g. to submit your complaint to relevant policy investigative agencies).</p>\r\n<p>Unless you ask us not to, we may contact you via email in the future to update you ï¿½ or request updates from you ï¿½ regarding your complaint, or changes to this privacy policy.</p>\r\n<p><br></p>\r\n<h3>Your Access to and Control Over Information</h3>\r\n<p>You may opt out of any future contacts from us at any time. You can do the following at any time by contacting us via the contact information given on our website:</p>\r\n<ul><li>See what data we have about you, if any.</li>\r\n<li>Provide updates regarding your complaint.</li>\r\n<li>Have us delete any data we have about you.</li>\r\n<li>Express any concern you have about our use of your data.</li></ul>\r\n<p><br></p>\r\n<h3>Security</h3>\r\n<p>We take precautions to protect your information. When you submit sensitive information via the website, your information is protected both online and offline.</p>\r\n<p>Wherever we collect sensitive information, that information is encrypted and transmitted to us in a secure way. You can verify this by looking for a closed lock icon at the bottom of your web browser, or looking for ï¿½httpsï¿½ at the beginning of the address of the web page.</p>\r\n<p>While we use encryption to protect sensitive information transmitted online, we also protect your information offline. Only employees and investigators who need the information to follow up on your complaint are granted access to personally identifiable information. The computers/servers in which we store personally identifiable information are kept in a secure environment.</p>\r\n<p><br></p>\r\n<h3>Cookies</h3>\r\n<p>We use ï¿½cookiesï¿½ on this site. A cookie is a piece of data stored on a site visitorï¿½s hard drive to help us improve your access to our site and identify repeat visitors to our site. For instance, when we use a cookie to identify you, you would not have to log in a password more than once, thereby saving time while on our site. Usage of a cookie is in no way linked to any personally identifiable information on our site.</p>\r\n<p>Some of our business partners may use cookies on our site (for example, Google Analytics). However, we have no access to or control over these cookies.</p>\r\n<p><br></p>\r\n<h3>Links</h3>\r\n<p>This web site contains links to other sites. Please be aware that we are not responsible for the content or privacy practices of such other sites. We encourage our users to be aware when they leave our site and to read the privacy statements of any other site that collects personally identifiable information.</p>\r\n<p><em>Updated: April 8, 2016</em></p>\r\n<p><a href=\"/complaint-privacy-options\">User Privacy Options</a></p>',
			'NodeOpts' => '67'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 837,
			'NodeTree' => '16',
			'NodeType' => 'Page',
			'NodePromptNotes' => 'web-app-technical-specs',
			'NodePromptAfter' => 'Web App Specifications for OpenPolice.org::M::We developed custom software in order to thoroughly document our database design. This includes plain-English descriptions of every data table and field.::M::::M::',
			'NodeCharLimit' => '-1',
			'NodeOpts' => '67'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 838,
			'NodeTree' => '16',
			'NodeParentID' => '2315',
			'NodeType' => 'Instructions',
			'NodePromptText' => '<h2>OpenPolice.org Technical Stuff</h2>\r\n<p><br></p>\r\n<h3 class=\"slBlueDark\">About The Database Design</h3><p>\r\nWe developed custom software in order to thoroughly <a href=\"http://openpolice.local/db/OP\">document our database design</a>.\r\n This includes plain-English descriptions of every data table and field.\r\n It also includes details about the types of data stored as well as all \r\nof the logical relationships between tables.</p><p>Our database design method is based upon recommendations presented in <a href=\"http://www.amazon.com/gp/product/0321884493/\" target=\"_blank\">Database Design for Mere Mortals: A Hands-On Guide to Relational Database Design (3rd Edition), by Michael J. Hernandez</a>.</p><p>The data requirements and emerging organizational policies and practices are based upon the guidelines presented in <a href=\"http://www.amazon.com/New-World-Police-Accountability/dp/1452286876/\">The New World of Police Accountability by Sam Walker and Carol Archbold</a>. The <a href=\"https://www.sanjoseca.gov/DocumentCenter/View/29599\" target=\"_blank\">San Jose Independent Police Auditor (IPA) 2013 Year End Report</a>,\r\n which is the gold standard for government transparency regarding police\r\n misconduct complaints, provided essential guidance. We also reviewed \r\nnumerous <a href=\"http://www.bjs.gov/index.cfm?ty=tp&amp;tid=70\" target=\"_blank\">Department of Justice (DOJ) reports on police-civilian contacts</a>. The most important of these was the <a href=\"http://www.justice.gov/sites/default/files/opa/press-releases/attachments/2015/03/04/ferguson_police_department_report.pdf\" target=\"_blank\">DOJ Investigation of the Ferguson Police Department</a>. We also receive ongoing guidance, from some of the <a href=\"http://openpolice.local/about/\" target=\"_blank\">top national experts in the field of police oversight and accountability</a>.</p><p>\r\n<br></p><h3 class=\"slBlueDark\">Software Specifications</h3><p>\r\nThe database design software we built exports Laravel data models and\r\n migration files in order to quickly auto-load these data structures to \r\nrun OpenPolice.org. The code was written using PHP, MySQL, AJAX,\r\n JS, and CSS. It was built atop the open source <a href=\"http://laravel.com/\" target=\"_blank\">Laravel coding framework</a> (<a href=\"http:///how-to-install-laravel\">also see: How To Install Laravel</a>). The full <a href=\"https://github.com/flexyourrights/openpolice\" target=\"_blank\">Open Police source code</a> still needs better documentation, but is up <a href=\"https://github.com/flexyourrights/openpolice\" target=\"_blank\">on GitHub</a> for wider collaboration with additional open-source programmers.</p><p><b>Itï¿½s like TurboTax ï¿½ but for police complaints.</b></p><p>In order to provide complainants with a dynamic user experience, we custom built a branching tree engine. Most <a href=\"https://en.wikipedia.org/wiki/Tree_%28data_structure%29\" target=\"_blank\">nodes</a>\r\n in this branching tree represent either a single form field or a page, \r\nwhich wraps multiple fields. After defining the full tree, and mapping \r\neach form field to its correct field in the database, the tree is <a href=\"https://en.wikipedia.org/wiki/Recursion#In_computer_science\" target=\"_blank\">recursively</a> traversed in order to create a sequence of prompts, which reveal the unique DNA of an individual police complaint.</p><p>Every node on the tree can check for prerequisites in earlier \r\nresponses, and some areas of the tree are set to be looped through. (For\r\n example, when adding multiple witnesses, officers, or victims.) This \r\napproach to form generation means that most data prompts and storage are\r\n the default automated behavior of a generalized engine. This also \r\nallows for A/B testing of any individual field for quality control.<a name=\"flowchart\"></a></p>',
			'NodePromptAfter' => '<style> #blockWrap2312 { margin-top: 30px; } </style>',
			'NodeOpts' => '67'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 839,
			'NodeTree' => '17',
			'NodeType' => 'Page',
			'NodePromptNotes' => 'frequently-asked-questions',
			'NodePromptAfter' => 'Frequently Asked Questions | OpenPolice.org::M::Questions about the complaint and compliment process, about working with law enforcement, attorneys, and non-profit organizations.::M::FAQ, Open Police, OpenPolice.org, Open Police Complaints, Police Departments, Cops, Police, Officers, file complaint, submit, victims, accountability, oversight, open source, transparency::M::',
			'NodeCharLimit' => '-1',
			'NodeOpts' => '67'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 840,
			'NodeTree' => '17',
			'NodeParentID' => '839',
			'NodeParentOrder' => '2',
			'NodeType' => 'Instructions Raw',
			'NodePromptText' => '<div class=\"nodeAnchor\"><a id=\"faq-general\" name=\"faq-general\"></a></div>\r\n<br /><br />\r\n<h2 class=\"slBlueDark\">General Questions</h2>\r\n<br />\r\n\r\n<div class=\"nodeAnchor\"><a id=\"what-can-users-do\" name=\"what-can-users-do\"></a></div>\r\n<a id=\"hidivBtnUsersCan\" class=\"btn btn-secondary btn-lg w100 taL hidivBtn hidivCrt\" href=\"javascript:;\"\r\n>What can users do with OpenPolice.org?\r\n<div class=\"pull-right\"><i id=\"hidivCrtUsersCan\" class=\"fa fa-chevron-down\" aria-hidden=\"true\"></i></div></a>\r\n<div id=\"hidivUsersCan\" class=\"disNon brd mTn5 p15\">\r\n<p><b>OpenPolice.org allows users to ...</b></p>\r\n<ul>\r\n<li>Prepare and save a precise and complete police conduct report</li>\r\n<li>Upload photos, documents, video, and other evidence</li>\r\n<li>File your official report as easily as possible and within a departmentï¿½s policies</li>\r\n<li>Publish your report online with privacy settings that fit your needs</li>\r\n<li>Match your report with civil rights attorneys</li>\r\n<li>Share your report with your social network</li>\r\n</ul>\r\n</div>\r\n\r\n<br /><br />\r\n\r\n<div class=\"nodeAnchor\"><a id=\"what-commendations\" name=\"what-commendations\"></a></div>\r\n<a id=\"hidivBtnCompliment\" class=\"btn btn-secondary btn-lg w100 taL hidivBtn hidivCrt\" href=\"javascript:;\"\r\n>Can users submit compliments to the police instead of complaints?\r\n<div class=\"pull-right\"><i id=\"hidivCrtCompliment\" class=\"fa fa-chevron-down\" aria-hidden=\"true\"></i></div></a>\r\n<div id=\"hidivCompliment\" class=\"disNon brd mTn5 p15\">\r\n<p>Yes! We love constitutional and community-oriented policing. That\\'s why we also encourage users to submit compliments featuring one or more commendations. This is a shorter process but it has the same privacy options and formal submission as complaints.</p>\r\n<p>Users filing a complaint who create a thorough <a href=\"#what-is-gold-star\">Gold Star complaint</a> are also given an opportunity to provide this kind of positive feedback about any officer involved in their complaint.</p>\r\n<ul>\r\n<li>Valor</li>\r\n<li>Lifesaving</li>\r\n<li>De-escalation</li>\r\n<li>Professionalism</li>\r\n<li>Fairness</li>\r\n<li>Constitutional Policing</li>\r\n<li>Compassion</li>\r\n<li>Community Service</li>\r\n</ul>\r\n</div>\r\n\r\n<br /><br />\r\n\r\n<div class=\"nodeAnchor\"><a id=\"when-launch\" name=\"when-launch\"></a></div>\r\n<a id=\"hidivBtnLaunch\" class=\"btn btn-secondary btn-lg w100 taL hidivBtn hidivCrt\" href=\"javascript:;\"\r\n>When will you launch the OpenPolice.org app?\r\n<div class=\"pull-right\"><i id=\"hidivCrtLaunch\" class=\"fa fa-chevron-down\" aria-hidden=\"true\"></i></div></a>\r\n<div id=\"hidivLaunch\" class=\"disNon brd mTn5 p15\">\r\n<p>We plan to release a public version of the web app in the first half of 2019. \r\nWe are currently user testing a private version of the app with recent victims of police misconduct.</p>\r\n</div>\r\n\r\n<br /><br />\r\n\r\n<div class=\"nodeAnchor\"><a id=\"officer-names\" name=\"officer-names\"></a></div>\r\n<a id=\"hidivBtnNames\" class=\"btn btn-secondary btn-lg w100 taL hidivBtn hidivCrt\" href=\"javascript:;\"\r\n>Will you publish officersï¿½ names with complaints?\r\n<div class=\"pull-right\"><i id=\"hidivCrtNames\" class=\"fa fa-chevron-down\" aria-hidden=\"true\"></i></div></a>\r\n<div id=\"hidivNames\" class=\"disNon brd mTn5 p15\">\r\n<p>Of all the questions that we get about OpenPolice.org, this one is the most important and controversial. \r\nIn short, the public benefits of openness and transparency far outweigh the arguments in favor of police secrecy. \r\nTherefore, <a href=\"#privacy\">in some situations</a>, we will allow users to publish the names and descriptions of \r\nofficers on our website. All complaints will feature <a href=\"/uploads/only-allegations.png\">a \r\ndisclaimerï¿½about the nature of the allegations and the known status of any official investigatory \r\nactions</a>.</p>\r\n<p>This type of data transparency, where individual officers are connected to individual complaints, is vital to the public interest. In recent years, some government agencies have gestured toward transparency by releasing \"de-identified\" records that canï¿½t be traced back to specific officers. But for the people whose police encounters build up such data sets, the big-picture trends are less important than revealing the names and histories of the officers who violated their rights. Moreover, such de-identified data makes it impossible to identify specific officers with a history of problematic behavior. </p>\r\n</div>\r\n\r\n<br /><br />\r\n\r\n<div class=\"nodeAnchor\"><a id=\"false-complaints\" name=\"false-complaints\"></a></div>\r\n<a id=\"hidivBtnFalse\" class=\"btn btn-secondary btn-lg w100 taL hidivBtn hidivCrt\" href=\"javascript:;\"\r\n>How will you deal with false and abusive complaints?\r\n<div class=\"pull-right\"><i id=\"hidivCrtFalse\" class=\"fa fa-chevron-down\" aria-hidden=\"true\"></i></div></a>\r\n<div id=\"hidivFalse\" class=\"disNon brd mTn5 p15\">\r\n<p>As a general rule, we believe that police agencies should be responsible for investigating the truthfulness of complaints filed against their officers. We, on the other hand, must approach evaluation of new complaints with a light touch.</p>\r\n<p>As new complaints arrive, our human administrators flag spam, abuse, or reports that have nothing whatsoever to do with police matters. We will also flag certain \"frequent filers\" who create repeat or frivolous complaints. If complaints pass this initial evaluation, we will help users to submit them to appropriate department investigators. (Such complaints will then be published on our website in accordance with the privacy settings of individual users.)</p>\r\n<p>At this point, <b>the responsibility of investigating these complaints falls with the law enforcement agency.</b> If an investigation reveals that the complaint is without merit, agencies have opportunities to publish their findings with OpenPolice.org. Through this process, departments can openly and transparently address all complaint allegations.</p>\r\n</div>\r\n\r\n<br /><br />\r\n\r\n<div class=\"nodeAnchor\"><a id=\"track\" name=\"track\"></a></div>\r\n<a id=\"hidivBtn18000\" class=\"btn btn-secondary btn-lg w100 taL hidivBtn hidivCrt\" href=\"javascript:;\"\r\n>How do you keep track of 18,000 police departments?\r\n<div class=\"pull-right\"><i id=\"hidivCrt18000\" class=\"fa fa-chevron-down\" aria-hidden=\"true\"></i></div></a>\r\n<div id=\"hidiv18000\" class=\"disNon brd mTn5 p15\">\r\n<p>Thanks to our team of skilled volunteer researchers, we are building the nationï¿½s most comprehensive open-source \r\ndirectory of police departments. This directory tool allows us to automatically submit new user complaints to \r\nappropriate department contacts ï¿½ if any are available. It also keeps track of the specific ways that departments \r\naccept ï¿½ or <em>donï¿½t accept</em> ï¿½ complaints.</p>\r\n<p>Collecting up-to-date data on all 18,000 police departments is a long-term objective. Fortunately, we don\\'t need to \r\nhave data on all 18,000 departments for the service to work. Thatï¿½s because weï¿½ve built a rapid-response system that \r\nallows researchers to quickly gather data on departments not yet in our system. So if, for example, we receive a new \r\ncomplaint against a tiny not-yet-documented department, our researchers can gather data for that user within 24 hours.\r\n</p>\r\n<p>Learn how to <a href=\"/volunteer\">become an OpenPolice.org rapid-response research \r\nvolunteer here!</a></p>\r\n</div>\r\n\r\n<br /><br />\r\n\r\n<div class=\"nodeAnchor\"><a id=\"download-app\" name=\"download-app\"></a></div>\r\n<a id=\"hidivBtnApp\" class=\"btn btn-secondary btn-lg w100 taL hidivBtn hidivCrt\" href=\"javascript:;\"\r\n>Can I download an iOS or Android version of the app?\r\n<div class=\"pull-right\"><i id=\"hidivCrtApp\" class=\"fa fa-chevron-down\" aria-hidden=\"true\"></i></div></a>\r\n<div id=\"hidivApp\" class=\"disNon brd mTn5 p15\">\r\n<p>Not yet. Weï¿½ve built the first version of OpenPolice.org as a mobile-responsive web app. So the \r\nsoftware is accessible on any type of web browser, operating system, or mobile device. Weï¿½d like to eventually build \r\ndownloadable native apps for Android and iOS if public demand and funding makes this possible.</p>\r\n</div>\r\n\r\n<br /><br />\r\n\r\n<div class=\"nodeAnchor\"><a id=\"video\" name=\"video\"></a></div>\r\n<a id=\"hidivBtnVideo\" class=\"btn btn-secondary btn-lg w100 taL hidivBtn hidivCrt\" href=\"javascript:;\"\r\n>Does the app record video?\r\n<div class=\"pull-right\"><i id=\"hidivCrtVideo\" class=\"fa fa-chevron-down\" aria-hidden=\"true\"></i></div></a>\r\n<div id=\"hidivVideo\" class=\"disNon brd mTn5 p15\">\r\n<p>OpenPolice.org does not record or store video. However, when users create OpenPolice.org reports, they can share links to \r\nvideo evidence uploaded to popular video sites such as YouTube or Vimeo.</p>\r\n</div>\r\n\r\n<br /><br />\r\n\r\n<div class=\"nodeAnchor\"><a id=\"police-sue\" name=\"police-sue\"></a></div>\r\n<a id=\"hidivBtnSue\" class=\"btn btn-secondary btn-lg w100 taL hidivBtn hidivCrt\" href=\"javascript:;\"\r\n>Are you prepared for police to sue you?\r\n<div class=\"pull-right\"><i id=\"hidivCrtSue\" class=\"fa fa-chevron-down\" aria-hidden=\"true\"></i></div></a>\r\n<div id=\"hidivSue\" class=\"disNon brd mTn5 p15\">\r\n<p>Yes. We understand that we are likely to be sued by police officers who will claim that complaints published on our \r\nwebsite are false and defamatory. In anticipation of this, weï¿½ve partnered with pro bono defamation attorneys to help \r\nminimize our legal exposure. Our attorneys advise us against publishing too many details of our strategy. However, \r\nwe\\'ve developed OpenPolice.org in a manner that protects us from defamation claims under \r\n<a href=\"https://www.eff.org/issues/cda230\" target=\"_blank\">Section 230 of the Communications Decency Act (CDA)</a>.</p>\r\n</div>\r\n\r\n<br /><br />\r\n\r\n<div class=\"nodeAnchor\"><a id=\"make-money\" name=\"make-money\"></a></div>\r\n<a id=\"hidivBtnMoney\" class=\"btn btn-secondary btn-lg w100 taL hidivBtn hidivCrt\" href=\"javascript:;\"\r\n>How do you make money from this?\r\n<div class=\"pull-right\"><i id=\"hidivCrtMoney\" class=\"fa fa-chevron-down\" aria-hidden=\"true\"></i></div></a>\r\n<div id=\"hidivMoney\" class=\"disNon brd mTn5 p15\">\r\n<p>This project is free to the public, because we believe that open and accessible information about police actions and \r\nbehavior is essential to secure public trust in law enforcement. For ongoing operations, \r\n<a href=\"/donate\">we depend on (tax-deductible!) private donations</a>.</p>\r\n</div>\r\n\r\n<br /><br />\r\n\r\n<div class=\"nodeAnchor\"><a id=\"contribute\" name=\"contribute\"></a></div>\r\n<a id=\"hidivBtnContribute\" class=\"btn btn-secondary btn-lg w100 taL hidivBtn hidivCrt\" href=\"javascript:;\"\r\n>How I can contribute?\r\n<div class=\"pull-right\"><i id=\"hidivCrtContribute\" class=\"fa fa-chevron-down\" aria-hidden=\"true\"></i></div></a>\r\n<div id=\"hidivContribute\" class=\"disNon brd mTn5 p15\">\r\n<p>We are currently looking for collaborators, partners, and investors. If youï¿½re an app developer or web designer, \r\nwe\\'d love to talk to you about contributing to the siteï¿½s development. (Check out \r\n<a href=\"https://github.com/flexyourrights/openpolice\" target=\"_blank\">our Github repo</a>, and more \r\n<a href=\"/web-app-technical-specs\">about the software\\'s technical specifications</a>.) Please \r\n<a href=\"/contact\">email us if you\\'re interested</a>!</p>\r\n<p>You can also <a href=\"/donate\">make a tax-deductible donation here</a>.</p>\r\n</div>',
			'NodeOpts' => '67'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 843,
			'NodeTree' => '19',
			'NodeType' => 'Page',
			'NodePromptNotes' => 'articles',
			'NodePromptAfter' => 'Algorithmically Suggested Articles & Videos::M::::M::::M::',
			'NodeCharLimit' => '-1'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 844,
			'NodeTree' => '19',
			'NodeParentID' => '843',
			'NodeType' => 'Instructions',
			'NodePromptText' => '<h1 class=\"entry-title\">4 Terrible Ways Departments Block Police Complaints</h1>\r\n<time class=\"updated\" datetime=\"2015-11-24T19:22:18+00:00\">November 24, 2015</time>\r\n<p class=\"byline author vcard\">By <a href=\"https://openpolicecomplaints.org/author/steve/\" rel=\"author\" class=\"fn\">Steve Silverman</a></p>\r\n    \r\n<p>Police complaints represent a basic First Amendment right to \r\npetition the government for a redress of grievances. But here are four \r\nways police departments disregard this fundamental right.</p><h3>1) Police Station Intimidation</h3><p>For those of you who are brave enough to file police complaints \r\nin-person, donï¿½t expect service with a smile. Your typical customer \r\nservice will match the speed of the DMV with the friendliness of the \r\nTSA. In other words, not good.</p><h2>\r\n<iframe src=\"https://www.youtube.com/embed/w8v7lF5ttlQ\" height=\"225\" frameborder=\"0\" width=\"300\"></iframe>\r\n<br></h2><p>In 2014, the ACLU sent undercover testers into ten District of \r\nColumbia police stations. The testers asked officers for information on \r\nhow to file a police complaint. Officers in six of the ten stations \r\nfailed to give the correct way to file a complaint. Officers at two of \r\nthe stations&nbsp;<a href=\"http://www.washingtontimes.com/news/2014/mar/2/aclu-dc-police-provide-bad-information-fail-compla/?page=all\">reacted to requests with hostility</a>.</p><p>Sometimes brave citizens try to record these moments. When they do, police tend to respond with additional acts of&nbsp;<a href=\"https://youtu.be/HrJqTBuO-yY\">intimidation</a>, including&nbsp;<a href=\"https://youtu.be/jfLwdyMbSHE\">threats of arrest</a>.</p><h2>\r\n<br></h2><h3>2) Police Departments Fail to Embrace Technology</h3><p>Do you prefer to file a complaint <em>without</em> upsetting a grumpy\r\n desk officer? If so, you might Google to find another way to file a \r\ncomplaint. To make things more confusing, there are roughly 18,000 state\r\n and local police agencies in the United States. And each one has its \r\nown special way of collecting police complaints.</p><p>Regrettably, most departments fail to provide any useful online \r\ninformation about how to file complaints. (Go figure!) The few that do \r\nrarely allow you to submit complaints online. Instead, they usually make\r\n you send paper complaints by mail or fax. Often departments claim that \r\ncomplaints can only be submitted in-person. (See Failure #1.)</p><h2>\r\n<br></h2><h3>3) Department Rules Block Complaints Investigation</h3><p>Perhaps you couldnï¿½t find a working fax machine. Instead, you mailed \r\nyour complaint to the department. (You even paid more for delivery \r\nconfirmation!) But did you know that your complaint could be rejected \r\nbefore itï¿½s ever investigated? A 2014 Department of Justice (DOJ) <a href=\"http://www.washingtonpost.com/politics/cleveland-police-tactics-violated-rights-of-citizens-justice-department-probe-finds/2014/12/04/db93f0e0-7bfd-11e4-b821-503cc7efed9e_story.html\">investigation into the Cleveland Department of Police (CDP)</a> exposed some of the tricks departments use to get away with this.</p><p>First, department rules allow them to ï¿½administratively withdrawï¿½ \r\ncomplaints for petty reasons that have nothing to do with the substance \r\nof a complaint. For example, CDP investigators would withdraw excessive \r\nforce complaints because there was no signature on the form. Sometimes \r\nthey withdrew complaints because they were in someone elseï¿½s \r\nhandwriting. Other times investigators made weak attempts to contact \r\ncomplainants. Then they quickly withdrew their complaint due to a ï¿½lack \r\nof response.ï¿½</p>\r\n<a href=\"https://openpolicecomplaints.org/app/uploads/2015/11/stephen-hawking.png\"><img class=\"size-medium wp-image-41\" src=\"https://openpolicecomplaints.org/app/uploads/2015/11/stephen-hawking-300x199.png\" alt=\"stephen hawking image\" height=\"199\" width=\"300\"></a>\r\n<p><i>Sorry, Professor. Weï¿½ll need your handwritten signature to investigate your complaint. (Bruno Vincent/Getty Images)</i></p>\r\n<p>Second, many of these rules were part of the collective bargaining \r\nagreement between the city and the police union. Across the country, \r\nsimilar union rules and statewide&nbsp;<a href=\"https://www.washingtonpost.com/news/the-watch/wp/2015/04/24/the-police-officers-bill-of-rights/\">Law Enforcement Officersï¿½ Bill of Rights laws</a>&nbsp;make it easier for police to avoid investigating complaints.</p><h2>\r\n<br></h2><h3>4) Local Laws&nbsp;Keep Police Complaints Secret</h3><p>Even if youï¿½re aware that police often do a poor job investigating \r\ncomplaints, you might mail in a complaint anyway. You can congratulate \r\nyourself, because your ï¿½official recordï¿½ of police misconduct will be \r\nopen to the public. Right? Donï¿½t count on it.</p><p>Do you remember that NYPD cop who killed Eric Garner with a \r\nchokehold? Afterwards, civil rights attorneys requested records of \r\nsustained past complaints against Officer Pantaleo. But the city <a href=\"http://www.nytimes.com/2015/02/05/nyregion/new-challenges-to-secrecy-that-protects-police-files.html\">refused to release them</a>!&nbsp;They&nbsp;invoked <a href=\"http://www.cjr.org/b-roll/how_new_york_protects_police_r.php?page=all&amp;print=true#sthash.mQQDhjt8.dpuf\">a state law</a> thatï¿½s been used to keep secret nearly every state record dealing with individual police misconduct.</p>\r\n<a href=\"https://openpolicecomplaints.org/app/uploads/2015/11/eric-garner-daniel-pantaleo.jpg\"><img class=\"size-medium wp-image-43\" src=\"https://openpolicecomplaints.org/app/uploads/2015/11/eric-garner-daniel-pantaleo-300x169.jpg\" alt=\"Daniel Pantaleo chokes Eric Garner\" height=\"169\" width=\"300\"></a>\r\n<p><i>City of New York: We canï¿½t confirm or deny the existence of past complaints against Mr. Pantaleo.</i></p>\r\n<p>Under the law, officersï¿½ personnel records cannot be publicly released without a judgeï¿½s approval. This includes&nbsp;<a href=\"http://data.newsday.com/crime/police-misconduct/\">instances when officers have been prosecuted or disciplined for misconduct</a>.&nbsp;In\r\n other words, if you submit a police complaint in New York, your report \r\nis no longer open to the public. Instead, itï¿½s shielded from public \r\nview, because itï¿½s tied to an officerï¿½s confidential personnel file!</p><p><strong>Update:</strong> A New York judge&nbsp;<a href=\"http://www.nytimes.com/2015/07/24/nyregion/judge-orders-release-of-misconduct-findings-against-officer-in-eric-garner-case.html\">ordered the release Officer Pantaleoï¿½s prior misconduct record</a>&nbsp;but&nbsp;<a href=\"http://www.nydailynews.com/new-york/nyc-appeals-eric-garner-chokehold-complaint-info-release-article-1.2340259\">The City appealed the decision</a>. To date, no records have been released.</p><h2>\r\n<br></h2><h3>Wait, Thereï¿½s Hope!</h3><p>Even though most police departments have a terrible police complaints\r\n process ï¿½ we can do better. Thatï¿½s exactly what&nbsp;OpenPolice.org \r\nis working to address. To receive updates about our progress, \r\nplease sign up to&nbsp;our email list below.</p>'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 845,
			'NodeTree' => '19',
			'NodeParentID' => '843',
			'NodeParentOrder' => '1',
			'NodeType' => 'Instructions',
			'NodePromptText' => '<h1 class=\"entry-title\">The Future of Civilian Oversight</h1>\r\n      <time class=\"updated\" datetime=\"2015-12-12T20:00:31+00:00\">December 12, 2015</time>\r\n<p class=\"byline author vcard\">By <a href=\"https://openpolicecomplaints.org/author/steve/\" rel=\"author\" class=\"fn\">Steve Silverman</a></p>\r\n    \r\n<p>Earlier this month&nbsp;I spoke at a conference called <em>Looking Toward the Future of Civilian Oversight</em>. The event was co-sponsored by the <a href=\"https://nacole.org/\">National Association for Civilian Oversight of Law Enforcement (NACOLE)</a>\r\n and the UDC School of Law. This was my first public introduction of \r\nFlex Your Rightsï¿½ new endeavor, OpenPolice.org.</p><p>My presentation remarks appear below&nbsp;this simulation of the latest OpenPolice.org web app prototype.</p><p>\r\n\r\n<iframe src=\"https://www.youtube.com/embed/FzMMQoRkBeE\" allowfullscreen=\"allowfullscreen\" height=\"315\" frameborder=\"0\" width=\"560\"></iframe>\r\n\r\n<br></p><p><a href=\"https://openpolicecomplaints.org/civilian-oversight-future/#Failure\">Oversight Failure 101</a><br>\r\n<a href=\"https://openpolicecomplaints.org/civilian-oversight-future/#Secrecy\">Itï¿½s the Secrecy, Stupid</a><br>\r\n<a href=\"https://openpolicecomplaints.org/civilian-oversight-future/#Future\">The Future of OpenPolice.org</a><br>\r\n<a href=\"https://openpolicecomplaints.org/civilian-oversight-future/#Unified\">A Unified Police Complaints Platform</a><br>\r\n<a href=\"https://openpolicecomplaints.org/civilian-oversight-future/#Trust\">Building Trust with Oversight Professionals</a><br>\r\n<a href=\"https://openpolicecomplaints.org/civilian-oversight-future/#Openness\">How Openness Pushes Accountability</a><br>\r\n<a href=\"https://openpolicecomplaints.org/civilian-oversight-future/#Donate\">Donate &amp; Volunteer</a><br>\r\n<a name=\"Failure\"></a><br>\r\n<strong>Oversight Failure 101</strong><br>\r\nIn July 2007, Edward Nance, an African-American cable company employee \r\nand part-time high school referee got pulled over by two officers in \r\nChicagoï¿½s South Side. Nance had no criminal record, but he was stopped \r\nbecause he didnï¿½t have a front license plate. Things quickly turned bad \r\nfor him.</p><p>\r\n<br></p><p>When Nance asked the officers <em>why</em> they pulled him over, the \r\nfirst officer told him to ï¿½get the fuck out of the car!ï¿½ The officer \r\nthen slammed his head on the carï¿½s hood, causing injuries to his neck \r\nand face. The second officer forcibly handcuffed Nance, jerking his arms\r\n back violently, injuring tendons in his shoulders as well as one \r\nrotator cuff. He required two shoulder surgeries to repair the damage.</p><p>\r\n<br></p><p>About two years later, a federal jury found the officers had used \r\nexcessive force. They awarded Nance $350,000 in damages for his \r\ninjuries. The judge then ordered the city to pay an additional $180,000 \r\nto cover his legal fees. However, Chicagoï¿½s Independent Police Review \r\nAuthority found all allegations against the two officers to be <em>not sustained</em>. They decided there was ï¿½no way to determineï¿½ the precise cause of the complainantï¿½s injuries. Neither officer was disciplined.</p><p>\r\n<br></p><p>On October 20, 2014, a police dashcam captured footage of Chicago \r\nPolice Officer Jason Van Dyke firing 16 shots at 17-year-old Laquan \r\nMcDonald, who was armed with a 3-inch knife. We now know about this \r\nstory despite <a href=\"http://www.chicagotribune.com/news/local/breaking/ct-judge-orders-release-of-video-showing-fatal-shooting-by-police-officer-20151119-story.html\">the bad faith efforts by the City of Chicago to block the release of that horrible video</a>.\r\n Itï¿½s inevitable release forced City officials to finally bring \r\nfirst-degree murder charges against Officer Van Dyke ï¿½ who just so \r\nhappens to be <a href=\"http://www.chicagotribune.com/news/ct-police-shooting-16-shots-04---met-20150425-story.html\">the same officer who violently handcuffed Edward Nance</a>&nbsp;in 2007.</p><p>\r\n<br></p><p>When he heard about this connection, Nance burst into tears. He said \r\nï¿½It makes me feel like it could have been me. If they had done something\r\n about this cop in my case, this young boy would still be alive.ï¿½<br>\r\n<a name=\"Secrecy\"></a><br>\r\n<strong>Itï¿½s the Secrecy, Stupid</strong><br>\r\nWe now know that during Van Dykeï¿½s 14-year career at least <a href=\"http://www.theguardian.com/us-news/2015/nov/25/laquan-mcdonald-jason-van-dyke-misconduct-chicago-police\">20 civilian complaints have been filed against him</a>.\r\n Most of them involved allegations of excessive force, and at least one \r\ncomplaint alleges he used a racial slur. None of these complaints led to\r\n disciplinary action.</p><p>\r\n<br></p><p>But we only know now about Van Dykeï¿½s complaint history, because this\r\n too was just made public last month. This is thanks to a public \r\ndatabase created by the non-profit group, <a href=\"http://invisible.institute/police-data/\">The Invisible Institute</a>. The <a href=\"http://cpdb.co/data/bzadKL/citizens-police-data-project\">massive dataset includes 56,362 allegations of misconduct filed against 8,562 Chicago Police officers</a>\r\n between May 2001 and September 2015. This is a beautiful and powerful \r\nmodel for how this sort of OpenPolice.org data can be used and \r\nvisualized. For example, you can view details of the <a href=\"http://cpdb.co/officer/jason-van-dyke/7655\">20 complaints filed against&nbsp;Jason Van Dyke</a>.</p><p>\r\n<br></p><p>It took 10 years of litigation and FOIA requests by a platoon of \r\npublic interest lawyers to force the City to cough up this data. This is\r\n a scandal itself. But this sort of institutional secrecy is hardly \r\nunique to Chicago. Secrecy is a <em>feature</em> of state and local \r\npolicing agencies across the country. So itï¿½s no surprise that wherever \r\nwe find departments whose workings are cloaked in secrecy ï¿½ this is \r\nwhere we find the darkest acts of police misconduct being ignored or \r\ncovered up.</p><p>\r\n<br></p><p>The good news is that we are now in the dawn of a Golden Age of \r\npolice data collection. This is thanks to the openness of the Internet. \r\nAnd this openness is accelerating the advancement of a universal, common\r\n language for how we can define and categorize policing data from all \r\nacross the country.<br>\r\n<a name=\"Future\"></a><br>\r\n<strong>The Future of OpenPolice.org</strong><br>\r\nI believe we are moving towards a world with universal,&nbsp;<em>real-time access</em>\r\n to civilian police complaints data. This real-time data will be shared \r\ndirectly by the complainants themselves who will be able to control who \r\nhas access to their <a href=\"http://www.economist.com/news/science-and-technology/21660966-can-big-databases-be-kept-both-anonymous-and-useful-well-see-you-anon\">confidential and personal information</a>.\r\n Real-time police complaints data will be accessible to community groups\r\n promoting equitable policing. The data will be accessible to civil \r\nrights attorneys working to identify departments with <a href=\"http://samuelwalker.net/issues/federal-pattern-or-practice-litigation/\">patterns or practices of police misconduct</a>.\r\n Real-time civilian complaints data will become an increasingly \r\nimportant management tool for conscientious police chiefs working to \r\nbuild community-oriented policing cultures.</p><p>\r\n<br></p><p>For police oversight professionals, real-time police complaints will \r\nallow us to spend less time collecting, organizing and interpreting \r\nhand-written paper complaints. Instead, we can spend more time <em>investigating</em>\r\n important complaints. This will make it easier to identify officers \r\nwith chronic misbehavior problems and hold them accountable <em>before</em> they become involved in a deadly but avoidable use of force incident.</p><p>\r\n<br></p><p>What Iï¿½m going to show you is <a href=\"https://youtu.be/FzMMQoRkBeE\">the first prototype of the OpenPolice.org web application</a>. This service will be <em>free</em> to users. The data we collect will be <em>open</em> to the public ï¿½ with the exception of certain personally-identifiable information. The interface is modeled after <a href=\"https://youtu.be/CAFq9i3DUq4\">TurboTax </a>ï¿½&nbsp;but instead of helping with your tax returns, weï¿½re streamlining police complaints.<br>\r\n<a name=\"Unified\"></a><br>\r\n<strong>A Unified Police Complaints Platform</strong><br>\r\nBefore we did any coding on the web app, my <a href=\"https://openpolicecomplaints.org/about/#Development-Team\">technical team</a> spent about eight months designing <a href=\"https://app.openpolicecomplaints.org/dbdesign/\">our relational database model</a>. We wanted to make sure all of our data structures ï¿½ including all the <em>people</em>, <em>places</em>, <em>things</em>, and <em>events</em>\r\n we capture ï¿½ aligned with the most universal categories and definitions\r\n that fit with a national police complaints collection service.&nbsp;We also \r\nneeded to make sure that our service could accommodate complaints that \r\ncan be submitted to every one of the roughly 18,000 state and local law \r\nenforcement agencies in the United States.</p><p>\r\n<br></p><p>I wonï¿½t bore you with details of the research Iï¿½ve done to identify \r\nour data needs ï¿½ but suffice it to say, Iï¿½ve reviewed every recent <a href=\"http://www.bjs.gov/index.cfm?ty=tp&amp;tid=70\">DOJ report on police-civilian contacts</a> I could find. Iï¿½ve examined the recent annual reports from the major <a href=\"https://nacole.org/resources/u-s-oversight-agency-websites/\">civilian investigative agencies</a> that release&nbsp;reports. And Iï¿½ve been working with some of the <a href=\"https://openpolicecomplaints.org/about/#Advisory-Board\">top experts in the field of police oversight</a>.</p><p>\r\n<br></p><p>These ongoing discussions with police oversight professionals reveal \r\nsome important technical challenges of maintaining&nbsp;a unified police \r\ncomplaints platform. For example, many large municipal oversight \r\nagencies require that complaints be submitted on a government paper form\r\n in order to be investigated by their offices. (They usually require the\r\n complainantï¿½s handwritten signature too.) <a href=\"https://openpolicecomplaints.org/how-departments-block-police-complaints/\">These sorts of laws primarily serve to block otherwise legitimate complaints from being investigated</a>.\r\n However, in order to make sure OpenPolice.org complaints are best positioned to be\r\n investigated, we will find ways to adapt to these types of constraints.<br>\r\n<a name=\"Trust\"></a><br>\r\n<strong>Building Trust with Oversight Professionals</strong><br>\r\nOne question Iï¿½m frequently asked is <em>how are we going to deal with malicious and fraudulent complaints?</em>\r\n This is an important question, because abusive complaints threaten the \r\nintegrity of our data and our institutional trust. However, weï¿½ve \r\ndeveloped some strategic countermeasures.</p><p>\r\n<br></p><p>First, the design of our web forms is our first line of defense. In \r\norder for a userï¿½s data to become relevant, they must complete the \r\ncomplaint-creation process. Like TurboTax, this requires a moderate \r\ninvestment of each userï¿½s time. While each individual question is easy \r\nto answer, there are more questions than a casual troll trying to submit\r\n a malicious complaint will probably be willing to answer.</p><p>\r\n<br></p><p>Some trolls, however, are persistent. Thatï¿½s why weï¿½ll require a \r\nsecond line defense of trained human administrators. Every new complaint\r\n we receive must first be reviewed by our admins, who will tag \r\ncomplaints that donï¿½t require further investigation. These will include \r\novertly malicious complaints as well as complaints that have nothing to \r\ndo with the police (e.g. landlord or employment disputes). OpenPolice.org admins \r\nwill also tag complaints that are unlikely to be based on reality.</p><p>\r\n<br></p><p>The more human effort we put into reviewing new complaints, the more \r\ninvestigators will trust our complaints. Thatï¿½s why every complaint we \r\nsubmit to oversight investigators must include enough information for \r\nthem to begin an investigation.&nbsp;For example, every OpenPolice.org complaint will \r\nfocus on a single police incident that occurred at a single <em>place</em> and <em>time</em>. Complaints must also include one or more <em>allegations</em> against one or more <em>officers</em>\r\n in a particular department. If OpenPolice.org admins confirm that a complaint \r\nincludes these things, it will be immediately emailed to the appropriate\r\n oversight&nbsp;contact.<br>\r\n<a name=\"Openness\"></a><br>\r\n<strong>How Openness Pushes Accountability</strong><br>\r\nIn order to create additional&nbsp;transparency, every complaint submitted to an investigative agency will become <em>publicly</em>\r\n searchable. Depending on the privacy settings selected by individual \r\ncomplainants, some public complaints will reveal the names and \r\nidentities of individual officers. Complainants may also choose to \r\nremain anonymous. However, the names and identities of officers related \r\nto anonymous complaints will be hidden from public views.</p><p>\r\n<br></p><p>We understand that some police departments might be upset about our open complaints. Nevertheless, such departments <a href=\"http://ric-zai-inc.com/Publications/cops-p164-pub.pdf\">should respond by properly investigating complaints in a timely manner</a>.\r\n They should also make details of their investigations open to the \r\npublic in a timely manner. Because as Edward Nanceï¿½s story cautions us ï¿½\r\n police complaints are too important to be kept in the dark.</p><p>\r\n<br></p><p>So in addition to improving the creation and transmission of police \r\ncomplaints, OpenPolice.org will track how well or how poorly individual departments\r\n respond to the complaints they receive. This tracking process will also\r\n reveal best practices for how similar departments <em>should</em> respond to civilian complaints.<br>\r\n<a name=\"Donate\"></a><br>\r\n<strong>How to Donate &amp; Volunteer with OpenPolice.org</strong><br>\r\nWhile weï¿½ve completed the initial <a href=\"https://youtu.be/FzMMQoRkBeE\">web app prototype</a>,\r\n we have more testing to do before we begin OpenPolice.orgï¿½s national rollout \r\nbeginning in early 2016. In the meantime, here are some ways you can \r\ncontribute your <em>time</em>, <em>talent</em>, or <em>treasure</em> to this effort.</p><p>\r\n<br></p><p><strong>1) Your Time:</strong>&nbsp;We need volunteers who can help us \r\nbuild the nationï¿½s most detailed online police department contact \r\ndirectory. This directory will be essential for identifying key contacts\r\n for receiving OpenPolice-generated complaints. Your research will also help \r\nestablish an ï¿½openness scoreï¿½ for each department. This will be based on\r\n the quality of complaint submission information they have available on \r\nthe web.</p><p>\r\n<br></p><p>You donï¿½t need to be a coder to do this work. But you do need a keen eye for detail and basic web research skills. <a href=\"https://www.flexyourrights.org/opc-volunteer/\">Click here, to learn how to become an OpenPolice.org research volunteer!</a></p><p>\r\n<br></p><p><strong>2) Your Talent:&nbsp;</strong>Weï¿½ve assembled a talented <a href=\"https://openpolicecomplaints.org/about/#Development-Team\">core team of technical volunteers</a>.\r\n But&nbsp;if youï¿½re an experienced web or software development professional \r\nwith a desire to contribute, weï¿½d love to work with you too! (You can \r\ncheck out the OpenPolice.org web appï¿½s <a href=\"https://openpolicecomplaints.org/web-app-specs\">technical specs here</a>.)</p><p>\r\n<br></p><p>For example, if youï¿½re a web designer who can make our WordPress \r\nwebsite (this site) look extra slick ï¿½ please email me. If youï¿½re a data\r\n visualization guru who can do beautiful things with data, we could use \r\nyour help. Or if youï¿½re a UX or analytics whiz, <a href=\"mailto:steve@flexyourrights.org?subject=Giving%20to%20OpenPolice\">please hit me up</a>!</p><p>\r\n<br></p><p><strong>3) Your Treasure:</strong>&nbsp;If youï¿½d like to support this project with a small or large tax-deductible donation, you can <a href=\"https://www.flexyourrights.org/donate/\">donate online here</a>. (You can also mail check donations made out to Flex Your Rights to P.O. Box 21497, Washington, DC 20009.)<strong><br>\r\n</strong></p><p>\r\n<br></p><p>If youï¿½re someone whoï¿½s connected with charitable foundations or philanthropic high-net-worth individuals, Iï¿½m <a href=\"mailto:steve@flexyourrights.org?subject=Giving%20to%20OpenPolice\">open to your advice and introductions</a>. Thank you so much!</p><p><br></p>'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 846,
			'NodeTree' => '19',
			'NodeParentID' => '843',
			'NodeParentOrder' => '2',
			'NodeType' => 'Instructions',
			'NodePromptText' => '<p><header>\r\n      <h1 class=\"entry-title\">The Intercept Covers OpenPolice.org</h1>\r\n      <time class=\"updated\" datetime=\"2016-10-26T16:16:41+00:00\">October 26, 2016</time>\r\n<p class=\"byline author vcard\">By <a href=\"https://openpolicecomplaints.org/author/steve/\" rel=\"author\" class=\"fn\">Steve Silverman</a></p>\r\n    </header>\r\n    <br></p><div class=\"entry-content\">\r\n      <p>If youï¿½re not yet familiar with <em>The Intercept</em>, you \r\nshould be. Glenn Greenwald, one of its founding editors, broke the story\r\n of Edward Snowden. Their reporters are respected (and feared) for their\r\n bold work documenting corporate and governmental abuses of power.</p>\r\n<p>So when <em>Intercept</em> Reporter Alice Speri contacted us about our new OpenPolice.org project, we were eager to help! <a href=\"https://theintercept.com/2016/10/25/open-data-projects-are-fueling-the-fight-against-police-misconduct/\">The long-form article</a>\r\n details how our work bypasses the blue wall of silence blocking police \r\nmisconduct data from public view. Most notably, Speri makes a powerful \r\ncase for why we must allow OpenPolice.org users to publish officersï¿½ names with \r\ntheir complaints. Simply put, transparency and accountability require \r\nit.</p>\r\n<p>Hereï¿½s the final section of the article where she covers OpenPolice.org.</p>\r\n<blockquote>\r\n<h3>A National Clearinghouse for Police Complaints</h3>\r\n<p>So far, efforts to use open data to track officer misconduct and hold\r\n police departments accountable are few and limited. But with 18,000 law\r\n enforcement agencies across the country, each ruled by different sets \r\nof local regulations, there is no uniformity in how police misconduct is\r\n tracked, if at all, and in a majority of places, the public has no \r\naccess to records of complaints filed against police.</p>\r\n<p>That might be about to change, as a civil rights group is preparing \r\nto launch a nationwide website that will allow users to file official \r\nreports of officer misconduct and abuse, while also making those reports\r\n immediately public. For years, <a href=\"https://www.flexyourrights.org/\">Flex Your Rights</a>, the group behind the <a href=\"https://openpolicecomplaints.org/\">OpenPolice.org</a>\r\n initiative, ran ï¿½constitutional literacyï¿½ workshops, educating the \r\npublic on their rights during police encounters. But they soon realized \r\nthat wasnï¿½t enough.</p>\r\n<p>ï¿½The events of the last few years have shined an important light on \r\nthe fact that people are going to have bad police encounters regardless \r\nof whether they ï¿½flexï¿½ their rights perfectly or not,ï¿½ Steve Silverman, \r\nthe groupï¿½s founder and director, told The Intercept.</p>\r\n<p>Instead, the new website, which is set to go live early next year, \r\nwill aim to bring some uniformity and accountability to the police \r\ncomplaint process, by compiling research on different departmentsï¿½ \r\nrequirements and allowing users to either file complaints directly \r\nonline ï¿½ for those departments that choose to participate in the \r\ninitiative ï¿½ or upload the complaints they file on their own and share \r\nthose reports publicly.</p>\r\n<p>The idea is to simplify the complaint process for citizens and \r\nminimize the need for people to file grievances in person at a police \r\nstation, ï¿½where theyï¿½re bound to have another bad encounter,ï¿½ Silverman \r\nsaid. The site will populate a report by asking users dozens of \r\nquestions and will offer varying degrees of transparency, allowing users\r\n to publicly disclose anything from bare, anonymous details of the \r\nincident to full narrative accounts including names of officers and \r\nvictims. It will also give police departments an opportunity to respond \r\nand update each report with the findings of their investigations.</p>\r\n<p>ï¿½Weï¿½re trying to use open data in order to encourage better \r\nresponsiveness but also to track how well and how poorly departments are\r\n responding to complaints, as one of the big reasons why police \r\ncomplaints processes suck is because theyï¿½re very unresponsive,ï¿½ \r\nSilverman said. ï¿½Of course there are going to be some police departments\r\n and individual officers who chafe at the idea that their name might be \r\nattached to a public complaint. But if thatï¿½s the case, they should go \r\nahead and properly and swiftly investigate the complaint and theyï¿½ll \r\nhave an opportunity to post their findings.ï¿½</p>\r\n<p>The group said it would protect the site from misuse and false \r\nreports ï¿½ and potential libel suits ï¿½ by requiring that all police \r\ncomplaints be officially filed before they can be shared publicly, and \r\nby flagging ï¿½frequent flierï¿½ users and filling the site with disclaimer \r\nnotices reminding readers that the reports are allegations. It will also\r\n offer tools to connect citizens filing complaints with attorneys in \r\ntheir areas, as well as to other relevant resources.</p>\r\n<p>ï¿½We hope that by providing this kind of information in a public way, weï¿½ll urge departments to take action,ï¿½ Silverman said.</p>\r\n<p>But even if departments refuse to engage with the site ï¿½ and \r\nSilverman and Morgan Lesko, the projectï¿½s main developer, expect it will\r\n take a few years to compile a significant volume of complaints and get \r\ndepartments to take notice ï¿½ the reports will be accessible and easily \r\nsearchable by anyone.</p>\r\n<p>ï¿½In the worst case scenario ï¿½ that we donï¿½t get appropriate feedback \r\nfrom police departments ï¿½ we still have these collected online,ï¿½ said \r\nLesko. ï¿½And itï¿½s all published in one place; itï¿½s not just lost on \r\nFacebook somewhere, scattered around in rant form. Itï¿½s a public \r\nrecord.ï¿½</p></blockquote>\r\n    </div><p><br></p>'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 847,
			'NodeTree' => '20',
			'NodeType' => 'Page',
			'NodePromptNotes' => 'how-to-install-local-openpolice',
			'NodePromptAfter' => 'How To Install Local OpenPolice.org::M::The Open Police software is written atop the Laravel PHP framework. Homestead is Laravel\'s own development environment, powered by Vagrant and VirtualBox in this example. Below is a tutorial on one Homestead install process which should save you some time getting started.::M::::M::',
			'NodeCharLimit' => '-1'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 849,
			'NodeTree' => '12',
			'NodeParentID' => '793',
			'NodeParentOrder' => '12',
			'NodeType' => 'Instructions Raw',
			'NodePromptText' => '<p>ï¿½</p>\r\n<p>ï¿½</p>\r\n<div>{{Newsletter Sign Up}}</div>\r\n<p>ï¿½</p>\r\n<p>ï¿½</p>',
			'NodePromptAfter' => '<style>
#nBtn1125 { margin-bottom: 40px; }
#blockWrap849 { margin-bottom: -85px; }
</style>',
			'NodeDefault' => '#EDF8FF;;#333;;#416CBD;;;;w100;;N;;left;;auto',
			'NodeOpts' => '4757'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 852,
			'NodeTree' => '1',
			'NodeParentID' => '854',
			'NodeParentOrder' => '1',
			'NodeType' => 'Radio',
			'NodePromptText' => 'Do you think an officer <span class="slBlueDark">sexually <b><i>harassed</i></b></span> anybody? This includes the use of unwanted sexual advances or obscene remarks.',
			'NodeDataStore' => 'AllegSilver:AlleSilSexualHarass',
			'NodeOpts' => '5'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 853,
			'NodeTree' => '1',
			'NodeParentID' => '852',
			'NodeType' => 'Data Manip: Wrap',
			'NodeResponseSet' => '480',
			'NodeDataBranch' => 'Allegations',
			'NodeDataStore' => 'Allegations:AlleType'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 854,
			'NodeTree' => '1',
			'NodeParentID' => '200',
			'NodeType' => 'Page',
			'NodePromptNotes' => 'allegations-sexual-harassment-and-assault',
			'NodePromptAfter' => 'Allegations: Sexual Harassment & Assault::M::::M::::M::'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 855,
			'NodeTree' => '1',
			'NodeParentID' => '853',
			'NodeParentOrder' => '1',
			'NodeType' => 'Checkbox',
			'NodePromptText' => 'Which Officers?',
			'NodeResponseSet' => 'LoopItems::Officers',
			'NodeDataStore' => 'LinksOfficerAllegations:LnkOffAlleOffID'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 856,
			'NodeTree' => '1',
			'NodeParentID' => '853',
			'NodeType' => 'Checkbox',
			'NodePromptText' => 'Which Victims?',
			'NodeResponseSet' => 'LoopItems::Victims',
			'NodeDataStore' => 'LinksCivilianAllegations:LnkCivAlleCivID'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 857,
			'NodeTree' => '1',
			'NodeParentID' => '853',
			'NodeParentOrder' => '2',
			'NodeType' => 'Long Text',
			'NodePromptText' => 'What makes you think that sexual harassment occurred?',
			'NodeDataStore' => 'Allegations:AlleDescription',
			'NodeOpts' => '5'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 858,
			'NodeTree' => '21',
			'NodeType' => 'Page',
			'NodePromptNotes' => 'department-accessibility',
			'NodePromptAfter' => 'Police Departments\' Accessibility Scores | OpenPolice.org::M::The higher the score, the easier it is for people to share complaints with a department. Unfortunately, most get failing grades by making it too difficult. The good news is that most departments can improve their scores by making a few small changes.::M::::M::',
			'NodeCharLimit' => '-1'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 859,
			'NodeTree' => '21',
			'NodeParentID' => '858',
			'NodeParentOrder' => '2',
			'NodeType' => 'Instructions Raw',
			'NodePromptText' => '[ Chart of All Police Department Accessibility Scores ] hard-coded via OpenDepts.php function printDeptOverPublic, to view openpolice.nodes.859-depts-overview-public',
			'NodeOpts' => '97'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 862,
			'NodeTree' => '1',
			'NodeParentID' => '151',
			'NodeParentOrder' => '2',
			'NodeType' => 'Page',
			'NodePromptNotes' => 'chase',
			'NodePromptAfter' => 'Chase::M::::M::::M::'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 863,
			'NodeTree' => '1',
			'NodeParentID' => '862',
			'NodeParentOrder' => '1',
			'NodeType' => 'Loop Cycle',
			'NodeResponseSet' => 'LoopItems::Victims',
			'NodeDataBranch' => 'Civilians'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 865,
			'NodeTree' => '1',
			'NodeParentID' => '2119',
			'NodeParentOrder' => '2',
			'NodeType' => 'Loop Cycle',
			'NodeResponseSet' => 'LoopItems::Victims',
			'NodeDataBranch' => 'Civilians'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 867,
			'NodeTree' => '5',
			'NodeParentID' => '876',
			'NodeParentOrder' => '1',
			'NodeType' => 'Branch Title',
			'NodePromptText' => 'Privacy Options',
			'NodePromptNotes' => 'your-role'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 868,
			'NodeTree' => '5',
			'NodeParentID' => '867',
			'NodeType' => 'Data Manip: New',
			'NodeDefault' => 'Y',
			'NodeDataBranch' => 'CivCompliment',
			'NodeDataStore' => 'CivCompliment:CivCompIsCreator'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 869,
			'NodeTree' => '5',
			'NodeParentID' => '868',
			'NodeType' => 'Page',
			'NodePromptNotes' => 'your-role',
			'NodePromptAfter' => 'Your Role::M::::M::::M::'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 870,
			'NodeTree' => '5',
			'NodeParentID' => '869',
			'NodeParentOrder' => '1',
			'NodeType' => 'Radio',
			'NodePromptText' => 'How were <span class="slBlueDark">you</span> involved with this incident?',
			'NodeDataStore' => 'CivCompliment:CivCompRole',
			'NodeOpts' => '5'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 871,
			'NodeTree' => '5',
			'NodeParentID' => '872',
			'NodeType' => 'Radio',
			'NodePromptText' => '<h2 class=\"slBlueDark\">Publishing Privacy Options</h2>\r\n<h4>No matter which one you choose, we <nobr>will ...</nobr></h4>\r\n<ul>\r\n<li>Publish no oneï¿½s private information. That includes addresses, phone numbers, emails, etc.</li>\r\n<li>Try to send your full compliment to a police investigative agency.</li>\r\n</ul>\r\n<p>You have three options for how we collect your data and how we share it.</p>',
			'NodePromptAfter' => '<style>
#node138 div.nFld div label { padding: 40px; }
@media screen and (max-width: 768px) {
#node138 div.nFld div label { padding: 40px; padding-bottom: 40px; }
}
</style>',
			'NodeDataStore' => 'Compliments:CompliPrivacy',
			'NodeOpts' => '5'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 872,
			'NodeTree' => '5',
			'NodeParentID' => '867',
			'NodeParentOrder' => '2',
			'NodeType' => 'Page',
			'NodePromptNotes' => 'privacy-options',
			'NodePromptAfter' => 'Privacy Options::M::::M::::M::'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 873,
			'NodeTree' => '5',
			'NodeParentID' => '867',
			'NodeParentOrder' => '3',
			'NodeType' => 'Page',
			'NodePromptNotes' => 'login',
			'NodePromptAfter' => 'Login::M::::M::::M::'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 874,
			'NodeTree' => '5',
			'NodeParentID' => '873',
			'NodeType' => 'Instructions',
			'NodePromptText' => '<h2>Your Story Matters</h2>
<p>Please create a login. It will let you finish your compliment later, if we get interrupted. It is also important so we can contact you about the progress of your compliment.</p>'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 875,
			'NodeTree' => '5',
			'NodeParentID' => '873',
			'NodeParentOrder' => '1',
			'NodeType' => 'User Sign Up',
			'NodePromptText' => 'User Sign Up Form (Email, Password, Confirm Password)',
			'NodeOpts' => '5'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 876,
			'NodeTree' => '5',
			'NodeParentID' => '752',
			'NodeType' => 'Branch Title',
			'NodePromptText' => 'Basic Info Section',
			'NodePromptNotes' => 'when-was-the-incident'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 877,
			'NodeTree' => '5',
			'NodeParentID' => '876',
			'NodeParentOrder' => '2',
			'NodeType' => 'Branch Title',
			'NodePromptText' => 'When & Where',
			'NodePromptNotes' => 'when-where'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 878,
			'NodeTree' => '5',
			'NodeParentID' => '877',
			'NodeType' => 'Page',
			'NodePromptNotes' => 'when-where',
			'NodePromptAfter' => 'When & Where::M::::M::::M::',
			'NodeDataBranch' => 'Incidents'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 879,
			'NodeTree' => '5',
			'NodeParentID' => '2583',
			'NodeType' => 'Date',
			'NodePromptText' => '<h2 class="slBlueDark">When did this incident happen?</h2>
<br />Focus this compliment on one specific event.',
			'NodeDataStore' => 'Incidents:IncTimeStart',
			'NodeCharLimit' => '-1',
			'NodeOpts' => '5'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 880,
			'NodeTree' => '5',
			'NodeParentID' => '878',
			'NodeType' => 'Instructions',
			'NodePromptText' => '<h3>Where did this incident happen?</h3>'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 881,
			'NodeTree' => '5',
			'NodeParentID' => '878',
			'NodeParentOrder' => '1',
			'NodeType' => 'Text',
			'NodePromptText' => 'Street Address',
			'NodeDataStore' => 'Incidents:IncAddress'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 882,
			'NodeTree' => '5',
			'NodeParentID' => '878',
			'NodeParentOrder' => '2',
			'NodeType' => 'Text',
			'NodePromptText' => 'Address Line 2',
			'NodeDataStore' => 'Incidents:IncAddress2'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 883,
			'NodeTree' => '5',
			'NodeParentID' => '878',
			'NodeParentOrder' => '3',
			'NodeType' => 'Text',
			'NodePromptText' => 'City',
			'NodeDataStore' => 'Incidents:IncAddressCity',
			'NodeOpts' => '5'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 884,
			'NodeTree' => '5',
			'NodeParentID' => '878',
			'NodeParentOrder' => '4',
			'NodeType' => 'U.S. States',
			'NodePromptText' => 'State',
			'NodeDataStore' => 'Incidents:IncAddressState',
			'NodeOpts' => '5'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 885,
			'NodeTree' => '5',
			'NodeParentID' => '878',
			'NodeParentOrder' => '5',
			'NodeType' => 'Text',
			'NodePromptText' => 'Zip Code',
			'NodeDataStore' => 'Incidents:IncAddressZip'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 886,
			'NodeTree' => '5',
			'NodeParentID' => '878',
			'NodeParentOrder' => '6',
			'NodeType' => 'Text',
			'NodePromptText' => 'If the address is not known or not useful, please describe nearby landmarks.',
			'NodeDataStore' => 'Incidents:IncLandmarks'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 887,
			'NodeTree' => '5',
			'NodeParentID' => '876',
			'NodeParentOrder' => '3',
			'NodeType' => 'Branch Title',
			'NodePromptText' => 'The Scene',
			'NodePromptNotes' => 'the-scene'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 888,
			'NodeTree' => '5',
			'NodeParentID' => '887',
			'NodeType' => 'Page',
			'NodePromptNotes' => 'the-scene',
			'NodePromptAfter' => 'The Scene::M::::M::::M::',
			'NodeDataBranch' => 'Scenes'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 889,
			'NodeTree' => '5',
			'NodeParentID' => '888',
			'NodeType' => 'Radio',
			'NodePromptText' => 'Did this incident begin with a vehicle stop?',
			'NodeDataStore' => 'Scenes:ScnIsVehicle'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 890,
			'NodeTree' => '5',
			'NodeParentID' => '888',
			'NodeParentOrder' => '1',
			'NodeType' => 'Radio',
			'NodePromptText' => 'Where did this incident begin?',
			'NodeResponseSet' => 'Definition::Scene Type',
			'NodeDataStore' => 'Scenes:ScnType'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 891,
			'NodeTree' => '5',
			'NodeParentID' => '888',
			'NodeParentOrder' => '2',
			'NodeType' => 'Text',
			'NodePromptText' => 'Please use a few words to describe the scene?',
			'NodeDataStore' => 'Scenes:ScnDescription'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 893,
			'NodeTree' => '5',
			'NodeParentID' => '2593',
			'NodeType' => 'Data Manip: ',
			'NodeDataBranch' => 'PersonContact'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 894,
			'NodeTree' => '5',
			'NodeParentID' => '893',
			'NodeType' => 'Page',
			'NodePromptNotes' => 'your-name',
			'NodePromptAfter' => 'Your Name::M::::M::::M::'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 895,
			'NodeTree' => '5',
			'NodeParentID' => '894',
			'NodeType' => 'Instructions',
			'NodePromptText' => '<h3>Please provide basic information about yourself.</h3>'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 896,
			'NodeTree' => '5',
			'NodeParentID' => '894',
			'NodeParentOrder' => '1',
			'NodeType' => 'Text',
			'NodePromptText' => 'First Name',
			'NodeDataStore' => 'PersonContact:PrsnNameFirst',
			'NodeOpts' => '5'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 897,
			'NodeTree' => '5',
			'NodeParentID' => '894',
			'NodeParentOrder' => '2',
			'NodeType' => 'Text',
			'NodePromptText' => 'Middle Name',
			'NodeDataStore' => 'PersonContact:PrsnNameMiddle'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 898,
			'NodeTree' => '5',
			'NodeParentID' => '894',
			'NodeParentOrder' => '3',
			'NodeType' => 'Text',
			'NodePromptText' => 'Last Name',
			'NodeDataStore' => 'PersonContact:PrsnNameLast',
			'NodeOpts' => '5'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 899,
			'NodeTree' => '5',
			'NodeParentID' => '893',
			'NodeParentOrder' => '1',
			'NodeType' => 'Page',
			'NodePromptNotes' => 'your-contact-info',
			'NodePromptAfter' => 'Your Contact Info::M::::M::::M::'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 900,
			'NodeTree' => '5',
			'NodeParentID' => '899',
			'NodeType' => 'Instructions',
			'NodePromptText' => '<h2 class="slBlueDark" id="fixedHeader" style="width: 750px; min-width: 750px; max-width: 750px;">Your current contact information</h2>
<p style="margin-top: 35px; margin-bottom: -20px;">Most police investigators require this. We will never make it public, sell it, or mail you stuff.</p>'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 901,
			'NodeTree' => '5',
			'NodeParentID' => '899',
			'NodeParentOrder' => '1',
			'NodeType' => 'Text',
			'NodePromptText' => 'Street Address',
			'NodeDataStore' => 'PersonContact:PrsnAddress'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 902,
			'NodeTree' => '5',
			'NodeParentID' => '899',
			'NodeParentOrder' => '2',
			'NodeType' => 'Text',
			'NodePromptText' => 'Address Line 2',
			'NodeDataStore' => 'PersonContact:PrsnAddress2'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 903,
			'NodeTree' => '5',
			'NodeParentID' => '899',
			'NodeParentOrder' => '3',
			'NodeType' => 'Text',
			'NodePromptText' => 'City',
			'NodeDataStore' => 'PersonContact:PrsnAddressCity'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 904,
			'NodeTree' => '5',
			'NodeParentID' => '899',
			'NodeParentOrder' => '4',
			'NodeType' => 'U.S. States',
			'NodePromptText' => 'State',
			'NodeDataStore' => 'PersonContact:PrsnAddressState'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 905,
			'NodeTree' => '5',
			'NodeParentID' => '899',
			'NodeParentOrder' => '5',
			'NodeType' => 'Text',
			'NodePromptText' => 'Zip Code',
			'NodeDataStore' => 'PersonContact:PrsnAddressZip'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 906,
			'NodeTree' => '5',
			'NodeParentID' => '899',
			'NodeParentOrder' => '6',
			'NodeType' => 'Text',
			'NodePromptText' => 'Phone',
			'NodeDataStore' => 'PersonContact:PrsnPhoneHome'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 907,
			'NodeTree' => '5',
			'NodeParentID' => '899',
			'NodeParentOrder' => '7',
			'NodeType' => 'Email',
			'NodePromptText' => 'Email Address',
			'NodeInternalNotes' => 'Auto-fill if provided during login',
			'NodeDataStore' => 'PersonContact:PrsnEmail',
			'NodeOpts' => '5'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 909,
			'NodeTree' => '5',
			'NodeParentID' => '893',
			'NodeParentOrder' => '2',
			'NodeType' => 'Page',
			'NodePromptNotes' => 'about-you',
			'NodePromptAfter' => 'About You::M::::M::::M::',
			'NodeDataBranch' => 'PhysicalDesc'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 910,
			'NodeTree' => '5',
			'NodeParentID' => '909',
			'NodeType' => 'Instructions',
			'NodePromptText' => '<h2 class="slBlueDark" id="fixedHeader" style="width: 706px; min-width: 706px; max-width: 706px;">About You</h2>'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 911,
			'NodeTree' => '5',
			'NodeParentID' => '909',
			'NodeParentOrder' => '1',
			'NodeType' => 'Gender',
			'NodePromptText' => 'Gender',
			'NodeDataStore' => 'PhysicalDesc:PhysGender'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 912,
			'NodeTree' => '5',
			'NodeParentID' => '909',
			'NodeParentOrder' => '2',
			'NodeType' => 'Checkbox',
			'NodePromptText' => 'Race',
			'NodePromptNotes' => 'Check all that apply to you.',
			'NodeResponseSet' => 'Definition::Races',
			'NodeDataStore' => 'PhysicalDescRace:PhysRaceRace',
			'NodeTextSuggest' => 'Races'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 913,
			'NodeTree' => '5',
			'NodeParentID' => '909',
			'NodeParentOrder' => '3',
			'NodeType' => 'Date',
			'NodePromptText' => 'Date of Birth',
			'NodeDataStore' => 'PersonContact:PrsnBirthday',
			'NodeCharLimit' => '-1'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 914,
			'NodeTree' => '5',
			'NodeParentID' => '909',
			'NodeParentOrder' => '4',
			'NodeType' => 'Radio',
			'NodePromptText' => 'Age Range',
			'NodeResponseSet' => 'Definition::Age Ranges',
			'NodeDataStore' => 'PhysicalDesc:PhysAge'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 915,
			'NodeTree' => '5',
			'NodeParentID' => '765',
			'NodeType' => 'Page',
			'NodePromptNotes' => 'next-police-officers',
			'NodePromptAfter' => 'Next, Police Officers::M::::M::::M::'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 916,
			'NodeTree' => '5',
			'NodeParentID' => '915',
			'NodeType' => 'Instructions',
			'NodePromptText' => '<h2>Who\'s Involved: Police Officers</h2>
<p>Next, you\'ll share info about the police departments and officers, or private security firms, linked to the incident. This will help us get your compliment to the right place! Most questions are optional.</p>'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 917,
			'NodeTree' => '5',
			'NodeParentID' => '765',
			'NodeParentOrder' => '1',
			'NodeType' => 'Loop Root',
			'NodePromptText' => '<h2>Police Departments At The Scene</h2>
<br />Please identify the departments that were involved. These could also be federal agencies or private security firms.<br /><br />If there were no [other] departments, go to the next section.
<style> .loopItemBtn.editLoopItem { display: none; } </style>',
			'NodePromptNotes' => 'add-police-departments',
			'NodePromptAfter' => 'Add Police Departments::M::::M::::M::',
			'NodeDataBranch' => 'Departments',
			'NodeDataStore' => 'LinksComplimentDept:LnkCompliDeptID'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 918,
			'NodeTree' => '5',
			'NodeParentID' => '917',
			'NodeType' => 'Page',
			'NodePromptNotes' => 'find-a-police-department',
			'NodePromptAfter' => 'Find A Police Department::M::::M::::M::'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 919,
			'NodeTree' => '5',
			'NodeParentID' => '918',
			'NodeType' => 'Instructions',
			'NodePromptText' => '<div class="w100 taC mTn20 pB20"><img src="http://openpolice.local/openpolice/uploads/police-dept-icon-sm.png" style="width: 150px;" border="0"></div>
<div id="deptSearchTitle">
<h2>Find &amp; Select a <nobr>Police Department</nobr></h2>
</div>
<p>Please search for a police department, agency, or private security 
firm at the scene. Try typing the department name, city, or county. Then
 select the correct department below. <small class="slRedDark">*required</small></p>',
			'NodePromptAfter' => '<style>
.deptWrap {
  background: #FFF;
  padding: 30px 15px 15px 15px;
  border-bottom: 1px #888 solid;
}
.deptWrap:hover {
  background: #F5FBFF;
}
#deptSearchTitle {
width: 100%;
text-align: left;
}
#deptNameInWrap {
position: relative;
width: 100%;
}
#deptNameInID {
padding-left: 40px;
}
#ajaxSubmit {
position: absolute;
top: 12px;
left: 30px;
}
@media screen and (max-width: 992px) {
#deptSearchTitle { text-align: center; }
}
</style>'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 920,
			'NodeTree' => '5',
			'NodeParentID' => '918',
			'NodeParentOrder' => '1',
			'NodeType' => 'Hidden Field',
			'NodePromptText' => '[ Department Searcher ] hard-coded via OpenDepts.php function printDeptSearch, to views openpolice.nodes.145-dept-search and openpolice.nodes.145-ajax-dept-search',
			'NodeDataStore' => 'Departments:DeptID',
			'NodeOpts' => '5'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 921,
			'NodeTree' => '5',
			'NodeParentID' => '766',
			'NodeType' => 'Loop Root',
			'NodePromptText' => '<h2>Who\\'s Involved: Police Officers</h2>\r\n<br />Please provide information about the police officers or private security employees in this incident. These are people who were were involved in ï¿½ or witnessed ï¿½ an act of police excellence.<br /><br />If there were no [other] officers involved, go to the next section.',
			'NodePromptNotes' => 'add-police-officers',
			'NodePromptAfter' => 'Add Police Officers::M::::M::::M::',
			'NodeDataBranch' => 'Officers',
			'NodeDataStore' => 'OffCompliment:OffCompID'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 922,
			'NodeTree' => '5',
			'NodeParentID' => '921',
			'NodeType' => 'Page',
			'NodePromptNotes' => 'adding-police-officer',
			'NodePromptAfter' => 'Adding Police Officer::M::::M::::M::'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 923,
			'NodeTree' => '5',
			'NodeParentID' => '2591',
			'NodeType' => 'Data Manip: Wrap',
			'NodeDataBranch' => 'PhysicalDesc'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 924,
			'NodeTree' => '5',
			'NodeParentID' => '923',
			'NodeType' => 'Instructions',
			'NodePromptText' => '<h2 id="fixedHeader" class="slBlueDark">Officer #[LoopItemCnt]: <div id="nodeEcho925" class="disIn"></div></h2>'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 925,
			'NodeTree' => '5',
			'NodeParentID' => '923',
			'NodeParentOrder' => '1',
			'NodeType' => 'Text',
			'NodePromptText' => 'Please give a nickname for this officer:',
			'NodePromptNotes' => 'This shortcut will help us refer to them in later questions. For example, "Tall Man" or "Undercover Woman." Please try to keep this professional. ;-)',
			'NodeDataStore' => 'PersonContact:PrsnNickname',
			'NodeOpts' => '41'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 926,
			'NodeTree' => '5',
			'NodeParentID' => '923',
			'NodeParentOrder' => '2',
			'NodeType' => 'Radio',
			'NodePromptText' => 'Which Police Department?',
			'NodeResponseSet' => 'LoopItems::Departments',
			'NodeDataStore' => 'Officers:OffDeptID',
			'NodeOpts' => '5'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 927,
			'NodeTree' => '5',
			'NodeParentID' => '923',
			'NodeParentOrder' => '3',
			'NodeType' => 'Radio',
			'NodePromptText' => 'What was this officer\'s role in the incident?',
			'NodeDataStore' => 'Officers:OffRole',
			'NodeOpts' => '5'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 928,
			'NodeTree' => '5',
			'NodeParentID' => '923',
			'NodeParentOrder' => '4',
			'NodeType' => 'Radio',
			'NodePromptText' => 'At the time, this officer was...',
			'NodeDataStore' => 'Officers:OffDutyStatus'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 929,
			'NodeTree' => '5',
			'NodeParentID' => '923',
			'NodeParentOrder' => '5',
			'NodeType' => 'Radio',
			'NodePromptText' => 'Was this officer wearing a uniform?',
			'NodeDataStore' => 'Officers:OffUniform'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 930,
			'NodeTree' => '5',
			'NodeParentID' => '923',
			'NodeParentOrder' => '6',
			'NodeType' => 'Radio',
			'NodePromptText' => 'Was this officer wearing a body camera?',
			'NodeDataStore' => 'Officers:OffBodyCam'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 931,
			'NodeTree' => '5',
			'NodeParentID' => '923',
			'NodeParentOrder' => '7',
			'NodeType' => 'Radio',
			'NodePromptText' => 'Gender',
			'NodeDataStore' => 'PhysicalDesc:PhysGender',
			'NodeOpts' => '5'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 932,
			'NodeTree' => '5',
			'NodeParentID' => '923',
			'NodeParentOrder' => '8',
			'NodeType' => 'Checkbox',
			'NodePromptText' => 'Race',
			'NodeResponseSet' => 'Definition::Races',
			'NodeDataStore' => 'PhysicalDescRace:PhysRaceRace',
			'NodeOpts' => '5'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 933,
			'NodeTree' => '5',
			'NodeParentID' => '923',
			'NodeParentOrder' => '9',
			'NodeType' => 'Radio',
			'NodePromptText' => 'Age Estimate',
			'NodeResponseSet' => 'Definition::Age Ranges Officers',
			'NodeDataStore' => 'PhysicalDesc:PhysAge',
			'NodeOpts' => '5'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 934,
			'NodeTree' => '5',
			'NodeParentID' => '923',
			'NodeParentOrder' => '10',
			'NodeType' => 'Feet Inches',
			'NodePromptText' => 'Height Estimate',
			'NodeDataStore' => 'PhysicalDesc:PhysHeight'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 935,
			'NodeTree' => '5',
			'NodeParentID' => '923',
			'NodeParentOrder' => '11',
			'NodeType' => 'Radio',
			'NodePromptText' => 'Body Type',
			'NodeResponseSet' => 'Definition::Body Types',
			'NodeDataStore' => 'PhysicalDesc:PhysBodyType'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 936,
			'NodeTree' => '5',
			'NodeParentID' => '923',
			'NodeParentOrder' => '12',
			'NodeType' => 'Text',
			'NodePromptText' => 'Physical Description',
			'NodePromptNotes' => 'For example, do you remember what their hair, eyes, or uniform looked like? Did they have any distinguishing marks or a distinct voice? Any extra details can help identify this officer.',
			'NodeOpts' => '5'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 937,
			'NodeTree' => '5',
			'NodeParentID' => '923',
			'NodeParentOrder' => '13',
			'NodeType' => 'Radio',
			'NodePromptText' => 'Do you know this officer\'s name, badge number, precinct, or rank?',
			'NodeDataStore' => 'Officers:OffGiveName',
			'NodeOpts' => '5'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 938,
			'NodeTree' => '5',
			'NodeParentID' => '937',
			'NodeType' => 'Text',
			'NodePromptText' => 'First Name',
			'NodeDataStore' => 'PersonContact:PrsnNameFirst'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 939,
			'NodeTree' => '5',
			'NodeParentID' => '937',
			'NodeParentOrder' => '1',
			'NodeType' => 'Text',
			'NodePromptText' => 'Last Name',
			'NodeDataStore' => 'PersonContact:PrsnNameLast'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 940,
			'NodeTree' => '5',
			'NodeParentID' => '937',
			'NodeParentOrder' => '2',
			'NodeType' => 'Text',
			'NodePromptText' => 'Badge Number',
			'NodeDataStore' => 'Officers:OffBadgeNumber'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 941,
			'NodeTree' => '5',
			'NodeParentID' => '937',
			'NodeParentOrder' => '3',
			'NodeType' => 'Text',
			'NodePromptText' => 'Additional ID#',
			'NodeDataStore' => 'Officers:OffIDnumber'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 942,
			'NodeTree' => '5',
			'NodeParentID' => '937',
			'NodeParentOrder' => '4',
			'NodeType' => 'Text',
			'NodePromptText' => 'Precinct, District, or Division',
			'NodeDataStore' => 'Officers:OffPrecinct'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 943,
			'NodeTree' => '5',
			'NodeParentID' => '937',
			'NodeParentOrder' => '5',
			'NodeType' => 'Text',
			'NodePromptText' => 'Officer Rank',
			'NodeDataStore' => 'Officers:OffOfficerRank'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 944,
			'NodeTree' => '5',
			'NodeParentID' => '945',
			'NodeType' => 'Page',
			'NodePromptNotes' => 'select-officer-commendations',
			'NodePromptAfter' => 'Select Officer Commendations::M::::M::::M::'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 945,
			'NodeTree' => '5',
			'NodeParentID' => '763',
			'NodeType' => 'Loop Root',
			'NodePromptText' => '<h2 class="slBlueDark">Adding Compliments for Each Officer</h2>
<br>The blue "Next Event Details" button will take you through each officer. You can use the gray buttons later to edit anything you need.',
			'NodePromptNotes' => 'add-officer-compliments',
			'NodePromptAfter' => 'Add Officer Compliments::M::::M::::M::',
			'NodeDataBranch' => 'Excellent Officers',
			'NodeDataStore' => 'Officers:OffID'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 946,
			'NodeTree' => '5',
			'NodeParentID' => '2592',
			'NodeType' => 'Hidden Field',
			'NodePromptText' => '<h2 id="fixedHeader" class="slBlueDark">Complimenting [LoopItemLabel]: </h2>
<p>During this incident, did this officer earn any of the compliments listed below?</p>',
			'NodeDefault' => 'Y',
			'NodeDataStore' => 'Officers:OffGaveCompliment'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 947,
			'NodeTree' => '5',
			'NodeParentID' => '887',
			'NodeParentOrder' => '1',
			'NodeType' => 'Page',
			'NodePromptNotes' => 'scene-uploads',
			'NodePromptAfter' => 'Select Uploads::M::::M::::M::'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 948,
			'NodeTree' => '5',
			'NodeParentID' => '947',
			'NodeType' => 'Uploads',
			'NodePromptText' => 'Please upload any photos, sketches, official police reports, or link to any videos.',
			'NodePromptNotes' => 'These should help describe <span class="slBlueDark">the scene</span> or show proof of <span class="slBlueDark">what happened</span>.',
			'NodeDataStore' => 'Evidence:EvidID',
			'NodeCharLimit' => '5'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 949,
			'NodeTree' => '5',
			'NodeParentID' => '2592',
			'NodeParentOrder' => '1',
			'NodeType' => 'Radio',
			'NodePromptText' => '<span class="slBlueDark">Valor:</span> The officer showed extraordinary courage in the face of danger.',
			'NodeDataStore' => 'OffCompliment:OffCompValor'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 950,
			'NodeTree' => '5',
			'NodeParentID' => '2592',
			'NodeParentOrder' => '2',
			'NodeType' => 'Radio',
			'NodePromptText' => '<span class="slBlueDark">Lifesaving:</span> The officer applied medical aid exceeding the normal call of duty.',
			'NodeDataStore' => 'OffCompliment:OffCompLifesaving'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 951,
			'NodeTree' => '5',
			'NodeParentID' => '2592',
			'NodeParentOrder' => '3',
			'NodeType' => 'Radio',
			'NodePromptText' => '<span class="slBlueDark">De-escalation:</span> The officer skillfully calmed down a tense situation, using minimal or no force.',
			'NodeDataStore' => 'OffCompliment:OffCompDeescalation'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 952,
			'NodeTree' => '5',
			'NodeParentID' => '2592',
			'NodeParentOrder' => '4',
			'NodeType' => 'Radio',
			'NodePromptText' => '<span class="slBlueDark">Professionalism:</span> The officer behaved in a courteous, respectful, and straightforward manner.',
			'NodeDataStore' => 'OffCompliment:OffCompProfessionalism'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 953,
			'NodeTree' => '5',
			'NodeParentID' => '2592',
			'NodeParentOrder' => '5',
			'NodeType' => 'Radio',
			'NodePromptText' => '<span class="slBlueDark">Fairness:</span> The officer\'s use of power was reasonable, appropriate, and free from bias.',
			'NodeDataStore' => 'OffCompliment:OffCompFairness'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 954,
			'NodeTree' => '5',
			'NodeParentID' => '2592',
			'NodeParentOrder' => '6',
			'NodeType' => 'Radio',
			'NodePromptText' => '<span class=\"slBlueDark\">Constitutional Policing:</span> The officerï¿½s words and actions showed respect for the Bill of Rights.',
			'NodeDataStore' => 'OffCompliment:OffCompConstitutional'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 955,
			'NodeTree' => '5',
			'NodeParentID' => '2592',
			'NodeParentOrder' => '7',
			'NodeType' => 'Radio',
			'NodePromptText' => '<span class="slBlueDark">Compassion:</span> The officer displayed empathy and generosity beyond the call of duty.',
			'NodeDataStore' => 'OffCompliment:OffCompCompassion'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 956,
			'NodeTree' => '5',
			'NodeParentID' => '2592',
			'NodeParentOrder' => '8',
			'NodeType' => 'Radio',
			'NodePromptText' => '<span class="slBlueDark">Community Service:</span> The officer engaged the community to build bonds of trust.',
			'NodeDataStore' => 'OffCompliment:OffCompCommunity'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 957,
			'NodeTree' => '5',
			'NodeParentID' => '764',
			'NodeType' => 'Branch Title',
			'NodePromptText' => 'Review Narrative',
			'NodePromptNotes' => 'review-your-story'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 958,
			'NodeTree' => '5',
			'NodeParentID' => '957',
			'NodeType' => 'Page',
			'NodePromptNotes' => 'review-your-story',
			'NodePromptAfter' => 'Review Your Story::M::::M::::M::'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 959,
			'NodeTree' => '5',
			'NodeParentID' => '958',
			'NodeType' => 'Long Text',
			'NodePromptText' => '<h2>Congratulations! You\'re almost done.</h2>
<p>To make sure your official report gets the respect it deserves, double-check your spelling and grammar.</p>
<p>These are the compliments you gave: <span class="slBlueDark">[[List of Compliments]]</span></p>',
			'NodePromptAfter' => '<style>
#n[[nID]]FldID { height: 300px; margin-top: 20px; }
#nLabel[[nID]] label p.red { display: none; }
</style>',
			'NodeDataStore' => 'Compliments:CompliSummary',
			'NodeCharLimit' => '400',
			'NodeOpts' => '2015'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 960,
			'NodeTree' => '5',
			'NodeParentID' => '764',
			'NodeParentOrder' => '1',
			'NodeType' => 'Branch Title',
			'NodePromptText' => 'Submit Compliment',
			'NodePromptNotes' => 'feedback'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 961,
			'NodeTree' => '5',
			'NodeParentID' => '960',
			'NodeType' => 'Page',
			'NodePromptNotes' => 'feedback',
			'NodePromptAfter' => 'Feedback::M::::M::::M::'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 962,
			'NodeTree' => '5',
			'NodeParentID' => '961',
			'NodeType' => 'Text',
			'NodePromptText' => 'How did you hear about us?',
			'NodeDataStore' => 'Compliments:CompliHowHear',
			'NodeTextSuggest' => 'How Did You Hear'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 963,
			'NodeTree' => '5',
			'NodeParentID' => '961',
			'NodeParentOrder' => '1',
			'NodeType' => 'Long Text',
			'NodePromptText' => 'Do you have any suggestions or feedback for us?',
			'NodeDataStore' => 'Compliments:CompliFeedback'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 964,
			'NodeTree' => '5',
			'NodeParentID' => '960',
			'NodeParentOrder' => '1',
			'NodeType' => 'Page',
			'NodePromptNotes' => 'confirm-compliment',
			'NodePromptAfter' => 'Confirm Compliment::M::::M::::M::',
			'NodeCharLimit' => '-1'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 965,
			'NodeTree' => '5',
			'NodeParentID' => '964',
			'NodeType' => 'Instructions',
			'NodePromptText' => '<h2 class="slBlueDark">Confirm Your Compliment</h2>
<p>Below is a preview of your finished compliment. Remember that we will never publish anyone\'s private information. This includes addresses, phone numbers, emails, etc.</p>
<h3>This is what police oversight investigators will see:</h3>'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 966,
			'NodeTree' => '5',
			'NodeParentID' => '964',
			'NodeParentOrder' => '1',
			'NodeType' => 'Instructions',
			'NodePromptText' => '<h2 class="slBlueDark">Confirm Your Compliment</h2>
<p>Remember that we will never publish anything in your private compliment that could be used for personal identification. This includes your story and all open-ended questions.</p>
<hr>
<h3><span class="slBlueDark">This is what police oversight investigators will see:</span></h3>
<hr>'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 967,
			'NodeTree' => '5',
			'NodeParentID' => '964',
			'NodeParentOrder' => '2',
			'NodeType' => 'Instructions Raw',
			'NodePromptText' => '[[PreviewPrivate]]
<hr>'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 968,
			'NodeTree' => '5',
			'NodeParentID' => '964',
			'NodeParentOrder' => '3',
			'NodeType' => 'Big Button',
			'NodeDefault' => 'See how your compliment will appear to the public',
			'NodeOpts' => '2021'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 969,
			'NodeTree' => '5',
			'NodeParentID' => '968',
			'NodeType' => 'Instructions',
			'NodePromptText' => '<h2><span class="slBlueDark">This is what visitors to OpenPolice.org will see:</span></h2>
<hr>'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 970,
			'NodeTree' => '5',
			'NodeParentID' => '968',
			'NodeParentOrder' => '1',
			'NodeType' => 'Instructions Raw',
			'NodePromptText' => '[[PreviewPublic]]
<hr>'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 971,
			'NodeTree' => '5',
			'NodeParentID' => '964',
			'NodeParentOrder' => '4',
			'NodeType' => 'Checkbox',
			'NodePromptText' => '<h2 class="slBlueDark mR5">Please Confirm</h2>',
			'NodePromptAfter' => '<style>
#node967, #node968 { margin-top: -40px; }
.investigateStatus, .complaintReportTitle, .complaintFooter { display: none; } 
</style>',
			'NodeOpts' => '5'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 972,
			'NodeTree' => '5',
			'NodeParentID' => '964',
			'NodeParentOrder' => '5',
			'NodeType' => 'Checkbox',
			'NodePromptAfter' => '<style> #nLabel[[nID]] .red { display: none; } </style>',
			'NodeOpts' => '5'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 973,
			'NodeTree' => '5',
			'NodeParentID' => '974',
			'NodeType' => 'Instructions Raw',
			'NodePromptText' => '[ Compliment Submitted! Redirecting to the finished compliment... ] hard-coded via OpenComplaintPrints.php function printEndOfComplaintRedirect'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 974,
			'NodeTree' => '5',
			'NodeParentID' => '960',
			'NodeParentOrder' => '2',
			'NodeType' => 'Page',
			'NodePromptNotes' => 'finished',
			'NodePromptAfter' => 'You\'ve Finished Your Compliment!::M::::M::::M::',
			'NodeOpts' => '1711'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 975,
			'NodeTree' => '5',
			'NodeParentID' => '972',
			'NodeType' => 'Data Manip: Update',
			'NodeResponseSet' => '208',
			'NodeDataStore' => 'Compliments:CompliStatus'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 976,
			'NodeTree' => '1',
			'NodeParentID' => '767',
			'NodeType' => 'Data Manip: Update',
			'NodeResponseSet' => '196',
			'NodeDataStore' => 'Complaints:com_status'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 977,
			'NodeTree' => '8',
			'NodeParentID' => '1009',
			'NodeParentOrder' => '4',
			'NodeType' => 'Incomplete Sess Check',
			'NodePromptText' => '<style>
#n[[nID]]ajaxLoad .nodeGap { padding: 10px; }
</style>',
			'NodePromptAfter' => '<div class="p10"> </div>',
			'NodeResponseSet' => '5'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 978,
			'NodeTree' => '8',
			'NodeParentID' => '1009',
			'NodeParentOrder' => '3',
			'NodeType' => 'Instructions Raw',
			'NodePromptText' => '<a class="btn btn-xl btn-primary w100 mT10" href="[[DOMAIN]]/start/compliment">I Understand, Begin My Compliment</a>'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 980,
			'NodeTree' => '7',
			'NodeParentID' => '1008',
			'NodeParentOrder' => '3',
			'NodeType' => 'Instructions Raw',
			'NodePromptText' => '<a class="btn btn-xl btn-primary w100 mT10" href="[[DOMAIN]]/start/complaint">I Understand, Begin My Complaint</a>'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 982,
			'NodeTree' => '7',
			'NodeParentID' => '1008',
			'NodeParentOrder' => '4',
			'NodeType' => 'Incomplete Sess Check',
			'NodePromptText' => '<style>
#n[[nID]]ajaxLoad .nodeGap { padding: 10px; }
</style>',
			'NodePromptAfter' => '<div class="p10"> </div>',
			'NodeResponseSet' => '1'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 983,
			'NodeTree' => '6',
			'NodeType' => 'XML',
			'NodePromptText' => 'Compliments',
			'NodePromptNotes' => '170'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 984,
			'NodeTree' => '2',
			'NodeParentID' => '983',
			'NodeParentOrder' => '6',
			'NodeType' => 'XML',
			'NodePromptText' => 'Incidents',
			'NodePromptNotes' => '114',
			'NodeOpts' => '385'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 985,
			'NodeTree' => '6',
			'NodeParentID' => '983',
			'NodeType' => 'XML',
			'NodePromptText' => 'Incidents',
			'NodePromptNotes' => '114',
			'NodeOpts' => '385'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 986,
			'NodeTree' => '6',
			'NodeParentID' => '983',
			'NodeParentOrder' => '1',
			'NodeType' => 'XML',
			'NodePromptText' => 'Scenes',
			'NodePromptNotes' => '115',
			'NodeOpts' => '385'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 987,
			'NodeTree' => '6',
			'NodeParentID' => '983',
			'NodeParentOrder' => '2',
			'NodeType' => 'XML',
			'NodePromptText' => 'LinksComplimentDept',
			'NodePromptNotes' => '144',
			'NodeOpts' => '5'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 988,
			'NodeTree' => '6',
			'NodeParentID' => '987',
			'NodeType' => 'XML',
			'NodePromptText' => 'Departments',
			'NodePromptNotes' => '111'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 989,
			'NodeTree' => '6',
			'NodeParentID' => '983',
			'NodeParentOrder' => '3',
			'NodeType' => 'XML',
			'NodePromptText' => 'Officers',
			'NodePromptNotes' => '104'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 990,
			'NodeTree' => '6',
			'NodeParentID' => '989',
			'NodeType' => 'XML',
			'NodePromptText' => 'PersonContact',
			'NodePromptNotes' => '154'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 991,
			'NodeTree' => '6',
			'NodeParentID' => '989',
			'NodeParentOrder' => '1',
			'NodeType' => 'XML',
			'NodePromptText' => 'PhysicalDesc',
			'NodePromptNotes' => '153'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 992,
			'NodeTree' => '6',
			'NodeParentID' => '989',
			'NodeParentOrder' => '2',
			'NodeType' => 'XML',
			'NodePromptText' => 'OffCompliments',
			'NodePromptNotes' => '169'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 993,
			'NodeTree' => '6',
			'NodeParentID' => '983',
			'NodeParentOrder' => '4',
			'NodeType' => 'XML',
			'NodePromptText' => 'Civilians',
			'NodePromptNotes' => '102'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 994,
			'NodeTree' => '6',
			'NodeParentID' => '993',
			'NodeType' => 'XML',
			'NodePromptText' => 'PersonContact',
			'NodePromptNotes' => '154'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 995,
			'NodeTree' => '6',
			'NodeParentID' => '993',
			'NodeParentOrder' => '1',
			'NodeType' => 'XML',
			'NodePromptText' => 'PhysicalDesc',
			'NodePromptNotes' => '153'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 996,
			'NodeTree' => '6',
			'NodeParentID' => '983',
			'NodeParentOrder' => '5',
			'NodeType' => 'XML',
			'NodePromptText' => 'Evidence',
			'NodePromptNotes' => '119'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 997,
			'NodeTree' => '22',
			'NodeType' => 'Page',
			'NodePromptNotes' => 'my-profile',
			'NodePromptAfter' => 'My Profile::M::::M::::M::',
			'NodeCharLimit' => '-1'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 998,
			'NodeTree' => '22',
			'NodeParentID' => '2381',
			'NodeParentOrder' => '4',
			'NodeType' => 'Member Profile Basics',
			'NodeResponseSet' => '1'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1003,
			'NodeTree' => '22',
			'NodeParentID' => '1776',
			'NodeParentOrder' => '2',
			'NodeType' => 'Instructions Raw',
			'NodePromptText' => '<a href="/complaint-or-compliment" class="btn btn-lg btn-primary w100">Share A New Story</a>',
			'NodePromptAfter' => '<style> #blockWrap[[nID]] { margin-top: 40px; } </style>',
			'NodeResponseSet' => '1'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1005,
			'NodeTree' => '23',
			'NodeType' => 'Page',
			'NodePromptNotes' => 'about',
			'NodePromptAfter' => 'About OpenPolice.org::M::OpenPolice.org was developed with contributions from police oversight professionals and web developers from across the nation. Our tools are designed to serve the needs of police accountability activists, investigators, attorneys, police chiefs, and others.::M::::M::',
			'NodeCharLimit' => '-1'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1006,
			'NodeTree' => '23',
			'NodeParentID' => '1005',
			'NodeParentOrder' => '7',
			'NodeType' => 'Instructions',
			'NodePromptText' => '<p>&nbsp;</p>
<h2>More Resources</h2>
<ul>
<li><a href="../../../../web-app-technical-specs">Web App Technical Overview</a></li>
</ul>'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1007,
			'NodeTree' => '13',
			'NodeParentID' => '832',
			'NodeType' => 'Send Email',
			'NodePromptNotes' => '::TO::1::CC::::BCC::',
			'NodePromptAfter' => '::TO::1::CC::::BCC::',
			'NodeResponseSet' => '1',
			'NodeDefault' => '-69'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1008,
			'NodeTree' => '7',
			'NodeParentID' => '2251',
			'NodeType' => 'Page Block',
			'NodeOpts' => '5963'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1009,
			'NodeTree' => '8',
			'NodeParentID' => '2595',
			'NodeType' => 'Page Block',
			'NodeOpts' => '5963'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1011,
			'NodeTree' => '12',
			'NodeParentID' => '793',
			'NodeParentOrder' => '8',
			'NodeType' => 'Layout Row',
			'NodeCharLimit' => '3'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1012,
			'NodeTree' => '12',
			'NodeParentID' => '1011',
			'NodeType' => 'Layout Column',
			'NodeCharLimit' => '4'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1013,
			'NodeTree' => '12',
			'NodeParentID' => '1011',
			'NodeParentOrder' => '1',
			'NodeType' => 'Layout Column',
			'NodeCharLimit' => '4'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1014,
			'NodeTree' => '12',
			'NodeParentID' => '1011',
			'NodeParentOrder' => '2',
			'NodeType' => 'Layout Column',
			'NodeCharLimit' => '4'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1015,
			'NodeTree' => '12',
			'NodeParentID' => '1012',
			'NodeType' => 'Instructions',
			'NodePromptText' => '<p>&nbsp;</p>
<center><img src="/openpolice/uploads/puzzle-pieces-circle-2.png" style="width: 130px;" border="0">
        <div style="padding: 20px;">
        <h3>Prepare a complete report</h3>
        <p>Police encounters can be stressful and complex. Our web app will help you organize and discover all of the crucial details that make your story unique.</p>
        <p><a href="/share-complaint-or-compliment">BUILD YOUR REPORT</a></p>
        <p><br></p>
        </div></center>
'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1016,
			'NodeTree' => '12',
			'NodeParentID' => '1013',
			'NodeType' => 'Instructions',
			'NodePromptText' => '<p>&nbsp;</p>\n<center><img src=\"/openpolice/uploads/magnifying-eye.png\" style=\"width: 130px;\" border=\"0\">\r\n        <div style=\"padding: 20px;\">\r\n        <h3>Build better police transparency</h3>\r\n        <p>We canï¿½t trust police to police themselves without public transparency. Share your report online to create a permanent public record that canï¿½t be ignored. </p>\r\n        <p><a href=\"/frequently-asked-questions#privacy\">LEARN MORE</a></p>\r\n        <p><br></p>\r\n        </div></center>'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1017,
			'NodeTree' => '12',
			'NodeParentID' => '1014',
			'NodeType' => 'Instructions',
			'NodePromptText' => '<p>&nbsp;</p>\n<center><img src=\"/openpolice/uploads/universality.png\" style=\"width: 130px;\" border=\"0\">\r\n        <div style=\"padding: 20px;\">\r\n        <h3>One report to rule them all</h3>\r\n        <p>Want to file an official report with your local police department too? \r\nWe already know about their laws and procedures ï¿½ so we\\'ve got your \r\nback!</p>\r\n        <p><a href=\"/frequently-asked-questions#when-users-file\">LEARN MORE</a></p>\r\n        <p><br></p>\r\n        </div></center>'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1045,
			'NodeTree' => '23',
			'NodeParentID' => '1005',
			'NodeParentOrder' => '5',
			'NodeType' => 'Instructions',
			'NodePromptText' => '<p>&nbsp;</p>
<p><a name="Development-Team"></a></p>
<h2 class="slBlueDark">Development Team</h2>
<p>&nbsp;</p>',
			'NodeDefault' => '#EDF8FF;;#333;;#2B3493;;;;w100;;N;;left;;auto',
			'NodeOpts' => '71'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1046,
			'NodeTree' => '23',
			'NodeParentID' => '1045',
			'NodeType' => 'Layout Row',
			'NodeCharLimit' => '3'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1047,
			'NodeTree' => '23',
			'NodeParentID' => '1046',
			'NodeType' => 'Layout Column',
			'NodeCharLimit' => '4'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1048,
			'NodeTree' => '23',
			'NodeParentID' => '1046',
			'NodeParentOrder' => '1',
			'NodeType' => 'Layout Column',
			'NodeCharLimit' => '4'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1050,
			'NodeTree' => '23',
			'NodeParentID' => '1047',
			'NodeType' => 'Big Button',
			'NodeResponseSet' => 'Text',
			'NodeDefault' => '<center><p><img src="/openpolice/uploads/smile-cspan-steve.jpeg" alt="Steve Silverman" class="bigTmbRound"></p> <h3 style="margin-top: 20px;">Steve Silverman</h3> <h4 style="margin-top: 0px;">Creator</h4></center>',
			'NodeOpts' => '43'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1051,
			'NodeTree' => '23',
			'NodeParentID' => '1050',
			'NodeType' => 'Instructions',
			'NodePromptText' => '<div style=\"padding: 20px; font-size: 80%;\">\r\nSteve Silverman is the founder and executive director of <a href=\"https://www.flexyourrights.org/\">Flex Your Rights (Flex)</a>,\r\n the parent company of OpenPolice.org. In 2002, Silverman founded Flex to help \r\neducate people about their rights during police encounters. To this end,\r\n he created a pair of popular educational movies. The most recent work, <a href=\"https://www.flexyourrights.org/10-rules/\" target=\"_blank\"><i>10 Rules for Dealing with Police</i>,</a> is narrated by Billy Murphy, attorney for the family of Freddie Gray. (Both movies are available on the <a href=\"https://www.youtube.com/user/FlexYourRights/\" target=\"_blank\">Flex Your Rights YouTube channel</a>,\r\n which is about to hit 45 million views.) Frustrated by the innumerable \r\nfailures of police departments to properly collect, process, and share \r\npolice complaints information ï¿½ Silverman is working to build something \r\nbetter.\r\n</div>'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1052,
			'NodeTree' => '23',
			'NodeParentID' => '1048',
			'NodeType' => 'Big Button',
			'NodeResponseSet' => 'Text',
			'NodeDefault' => '<center><p><img src="/openpolice/uploads/morgan-lesko.png" alt="Morgan Lesko" class="bigTmbRound"></p>
<h3 style="margin-top: 20px;">Morgan Lesko</h3>
<h4 style="margin-top: 0px;">Lead Programmer</h4></center>',
			'NodeOpts' => '43'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1053,
			'NodeTree' => '23',
			'NodeParentID' => '1052',
			'NodeType' => 'Instructions',
			'NodePromptText' => '<div style="padding: 20px; font-size: 80%;">A longtime activist and 
coder, Morgan has focused the past four years on building OpenPolice.org . To do this, he developed an open data engine called <a href="https://survloop.org/" target="_blank">SurvLoop</a>,
 which creates a customized survey experience for end users and securely
 manages their data. It also helps customers manage web content and 
sharing of open data.<br></div>'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1054,
			'NodeTree' => '23',
			'NodeParentID' => '1983',
			'NodeType' => 'Big Button',
			'NodeResponseSet' => 'Text',
			'NodeDefault' => '<center><p><img src="/openpolice/uploads/cory-troup.jpeg" alt="Cory Troup" class="bigTmbRound"></p>
<h3 style="margin-top: 20px;">Cory Troup</h3>
<h4 style="margin-top: 0px;">Database Administrator</h4></center>',
			'NodeOpts' => '43'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1055,
			'NodeTree' => '23',
			'NodeParentID' => '1054',
			'NodeType' => 'Instructions',
			'NodePromptText' => '<div style="padding: 20px; font-size: 80%;">
Cory Troup is a Seattle-based IT professional. After a long day he likes to kick back with a laptop and a favorite IPA craft brew to catch up on the latest social justice news. (This is how he discovered Flex Your Rights and OpenPolice.org.) When the opportunity arose to volunteer with OpenPolice.org, Troup jumped at it. His contributions to OpenPolice.org include backend system administration, information security, and database design review.
</div>'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1056,
			'NodeTree' => '23',
			'NodeParentID' => '1045',
			'NodeParentOrder' => '3',
			'NodeType' => 'Instructions',
			'NodePromptText' => '<p><br></p><p><br></p>'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1057,
			'NodeTree' => '23',
			'NodeParentID' => '1005',
			'NodeParentOrder' => '3',
			'NodeType' => 'Instructions',
			'NodePromptText' => '<p>&nbsp;</p>
<h1>About Us</h1>
<p><a name="Advisory-Board"></a></p>
<p><br></p>
<h2>Advisory Board</h2>
<p>OpenPolice.org was developed with contributions from police oversight professionals and web developers from across the nation. Our tools are designed to serve the needs of police accountability activists, investigators, attorneys, police chiefs, and others working to advance police oversight and accountability through better, more open data.</p><p><br></p>'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1058,
			'NodeTree' => '23',
			'NodeParentID' => '1057',
			'NodeType' => 'Layout Row',
			'NodeCharLimit' => '3'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1059,
			'NodeTree' => '23',
			'NodeParentID' => '1058',
			'NodeType' => 'Layout Column',
			'NodeCharLimit' => '4'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1060,
			'NodeTree' => '23',
			'NodeParentID' => '1058',
			'NodeParentOrder' => '1',
			'NodeType' => 'Layout Column',
			'NodeCharLimit' => '4'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1061,
			'NodeTree' => '23',
			'NodeParentID' => '1058',
			'NodeParentOrder' => '2',
			'NodeType' => 'Layout Column',
			'NodeCharLimit' => '4'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1062,
			'NodeTree' => '23',
			'NodeParentID' => '1059',
			'NodeType' => 'Big Button',
			'NodeResponseSet' => 'Text',
			'NodeDefault' => '<center><p><img src="/openpolice/uploads/kelvyn-anderson.png" alt="Kelvyn Anderson" class="bigTmbRound"></p>
<h3 style="margin-top: 20px;">Kelvyn Anderson</h3></center>',
			'NodeOpts' => '43'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1063,
			'NodeTree' => '23',
			'NodeParentID' => '1062',
			'NodeType' => 'Instructions',
			'NodePromptText' => '<div style=\"padding: 20px; font-size: 80%;\">\r\nKelvyn Anderson is the executive director of <a href=\"http://www.phila.gov/pac/Pages/default.aspx\">Philadelphiaï¿½s Police Advisory Commission</a> and longtime board member of the <a href=\"https://nacole.org/\">National Association National Association for Civilian Oversight of Law Enforcement</a> (NACOLE). With more than fifteen years of experience as a police oversight professional, he is helping ensure that OpenPolice.orgï¿½s complaints data is maximally beneficial to the police oversight community.\r\n<em><a href=\"https://nacole.org/team/kelvyn-anderson/\" target=\"_blank\">Read Kelvynï¿½s full bio</a>.</em><p></p>\r\n</div>'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1064,
			'NodeTree' => '23',
			'NodeParentID' => '1060',
			'NodeType' => 'Big Button',
			'NodeResponseSet' => 'Text',
			'NodeDefault' => '<center><p><img src="/openpolice/uploads/brian-buchner.jpeg" alt="Brian Buchner NACOLE" class="bigTmbRound"></p>
<h3 style="margin-top: 20px;">Brian Buchner</h3></center>',
			'NodeOpts' => '43'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1065,
			'NodeTree' => '23',
			'NodeParentID' => '1064',
			'NodeType' => 'Instructions',
			'NodePromptText' => '<div style=\"padding: 20px; font-size: 80%;\">\r\nBrian Buchner is the past president of the <a href=\"https://nacole.org/\">National Association for Civilian Oversight of Law Enforcement </a>(NACOLE) and a policy director in Los Angeles Mayor Eric Garcettiï¿½s Office of Public Safety. With more than eleven years of experience as a police oversight professional, heï¿½s helping OpenPolice.org develop better metrics for evaluating and tracking the complaints we receive.\r\n<em><a href=\"https://nacole.org/team/brian-buchner/\" target=\"_blank\">Read Brianï¿½s full bio</a>.</em><p></p>\r\n</div>'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1066,
			'NodeTree' => '23',
			'NodeParentID' => '1061',
			'NodeType' => 'Big Button',
			'NodeResponseSet' => 'Text',
			'NodeDefault' => '<center><p><img src="/openpolice/uploads/cynthia-conti-cook.jpg" alt="Cynthia Conti-Cook" class="bigTmbRound"></p>
<h3 style="margin-top: 20px;">Cynthia Conti-Cook</h3></center>',
			'NodeOpts' => '43'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1067,
			'NodeTree' => '23',
			'NodeParentID' => '1066',
			'NodeType' => 'Instructions',
			'NodePromptText' => '<div style=\"padding: 20px; font-size: 80%;\">\r\nCynthia Conti-Cook is a staff attorney with the <a href=\"http://www.legal-aid.org/en/home.aspx\" target=\"_blank\">New York Legal Aid Society</a>. She runs their <a href=\"http://www.slate.com/articles/news_and_politics/crime/2015/02/bad_cops_a_new_database_collects_information_about_cop_misconduct_and_provides.html\" target=\"_blank\">Cop Accountability Project</a>, a database of police officers accused of wrongdoing. Sheï¿½s also leading legal efforts to force the City to release records of prior complaints against Daniel Pantaleo, the officer who killed Eric Garner. Her practical knowledge of the civilian complaints process and her commitment to open government data make her an indispensable advisor.\r\n<em><a href=\"https://www.linkedin.com/in/cynthia-conti-cook-a3392948\" target=\"_blank\">Read Cynthiaï¿½s full bio</a></em>.<p></p>\r\n</div>'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1068,
			'NodeTree' => '23',
			'NodeParentID' => '1057',
			'NodeParentOrder' => '2',
			'NodeType' => 'Layout Row',
			'NodeCharLimit' => '3'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1069,
			'NodeTree' => '23',
			'NodeParentID' => '1068',
			'NodeType' => 'Layout Column',
			'NodeCharLimit' => '4'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1070,
			'NodeTree' => '23',
			'NodeParentID' => '1068',
			'NodeParentOrder' => '1',
			'NodeType' => 'Layout Column',
			'NodeCharLimit' => '4'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1071,
			'NodeTree' => '23',
			'NodeParentID' => '1068',
			'NodeParentOrder' => '2',
			'NodeType' => 'Layout Column',
			'NodeCharLimit' => '4'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1072,
			'NodeTree' => '23',
			'NodeParentID' => '1069',
			'NodeType' => 'Big Button',
			'NodeResponseSet' => 'Text',
			'NodeDefault' => '<center><p><img src="/openpolice/uploads/LaDoris-Cordell.jpeg" alt="LaDoris Cordell" class="bigTmbRound"></p>
<h3 style="margin-top: 20px;">Judge LaDoris H. Cordell (Ret.)</h3></center>',
			'NodeOpts' => '43'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1073,
			'NodeTree' => '23',
			'NodeParentID' => '1072',
			'NodeType' => 'Instructions',
			'NodePromptText' => '<div style=\"padding: 20px; font-size: 80%;\">\r\nLaDoris H. Cordell is a retired judge of the Superior Court of California and former <a href=\"http://www.sanjoseca.gov/ipa/\" target=\"_blank\">Independent Police Auditor (IPA) for the city of San Jose, California</a>. Under her guidance, the IPA produced the nationï¿½s <a href=\"http://www.sanjoseca.gov/DocumentCenter/View/42029\" target=\"_blank\">most transparent and data-rich annual reports</a> regarding police complaints investigation. These reports, along with Cordellï¿½s individual guidance, were crucial building blocks for OpenPolice.orgï¿½s national complaints service.\r\n<em><a href=\"https://en.wikipedia.org/wiki/LaDoris_Cordell\" target=\"_blank\">Read Judge Cordellï¿½s full bio</a></em>.<p></p>\r\n</div>'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1074,
			'NodeTree' => '23',
			'NodeParentID' => '1070',
			'NodeType' => 'Big Button',
			'NodeResponseSet' => 'Text',
			'NodeDefault' => '<center><p><img src="/openpolice/uploads/neill-franklin.jpeg" alt="neill-franklin" class="bigTmbRound"></p>
<h3 style="margin-top: 20px;">Major Neill Franklin (Ret.)</h3></center>',
			'NodeOpts' => '43'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1075,
			'NodeTree' => '23',
			'NodeParentID' => '1074',
			'NodeType' => 'Instructions',
			'NodePromptText' => '<div style=\"padding: 20px; font-size: 80%;\">\r\nMajor Neill Franklin is a 34-year law enforcement veteran of the Maryland State Police and Baltimore Police Department. Franklin is a longtime friend and&nbsp;technical advisor to Flex Your Rights (OpenPolice.orgï¿½s parent company), making sure our information is accurate and reliable.<br><br>Franklin is committed to the principles of open government and police transparency that OpenPolice.org is working to fulfill.\r\n<a href=\"http://www.leap.cc/author/NeillF/\" target=\"_blank\"><em>Read Neill Franklinï¿½s full bio</em>.</a><p></p>\r\n</div>'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1076,
			'NodeTree' => '23',
			'NodeParentID' => '1071',
			'NodeType' => 'Big Button',
			'NodeResponseSet' => 'Text',
			'NodeDefault' => '<center><p><img src="/openpolice/uploads/Matthew-Hickman.jpeg" alt="Matthew Hickman" class="bigTmbRound"></p>
<h3 style="margin-top: 20px;">Matthew Hickman, Ph.D.</h3></center>',
			'NodeOpts' => '43'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1077,
			'NodeTree' => '23',
			'NodeParentID' => '1076',
			'NodeType' => 'Instructions',
			'NodePromptText' => '<div style=\"padding: 20px; font-size: 80%;\">\r\nMatthew Hickman is a an associate professor of criminal justice at Seattle University. A former staffer with the Bureau of Justice Statistics, <a href=\"https://nacole.org/wp-content/uploads/Hickman.National-Data-on-Citizen-Complaints-about-Police-Use-of-Force_Data-Quality-Concern-and-the-Potential-Mis-Use-of-Statistical-Evidence-to-Address-Police-Agency-Conduct.DRAFT_.pdf\" target=\"_blank\">Hickman has criticized the quality of the governmentï¿½s national data on citizen complaints and police use of force</a>. As such, he serves as OpenPolice.orgï¿½s data quality ombudsman, helping ensure the accuracy and reliability of our data.\r\n<em><a href=\"https://www.seattleu.edu/artsci/faculty-staff/hickman-matthew/\" target=\"_blank\">Read Matthewï¿½s full bio</a>.</em></div>'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1078,
			'NodeTree' => '23',
			'NodeParentID' => '1057',
			'NodeParentOrder' => '4',
			'NodeType' => 'Layout Row',
			'NodeCharLimit' => '3'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1079,
			'NodeTree' => '23',
			'NodeParentID' => '1078',
			'NodeType' => 'Layout Column',
			'NodeCharLimit' => '4'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1080,
			'NodeTree' => '23',
			'NodeParentID' => '1078',
			'NodeParentOrder' => '1',
			'NodeType' => 'Layout Column',
			'NodeCharLimit' => '4'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1081,
			'NodeTree' => '23',
			'NodeParentID' => '1078',
			'NodeParentOrder' => '2',
			'NodeType' => 'Layout Column',
			'NodeCharLimit' => '4'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1082,
			'NodeTree' => '23',
			'NodeParentID' => '1079',
			'NodeType' => 'Big Button',
			'NodeResponseSet' => 'Text',
			'NodeDefault' => '<center><p><img src="/openpolice/uploads/Fritz-Mulhauser.png" alt="Fritz Mulhauser" class="bigTmbRound"></p>
<h3 style="margin-top: 20px;">Fritz Mulhauser</h3></center>',
			'NodeOpts' => '43'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1083,
			'NodeTree' => '23',
			'NodeParentID' => '1082',
			'NodeType' => 'Instructions',
			'NodePromptText' => '<div style=\"padding: 20px; font-size: 80%;\">\r\nFritz Mulhauser is a retired ACLU attorney and current Flex Your Rights board member. Fritz has devoted his life to advancing the principles of the Bill of Rights, open government, and justice. Heï¿½s been a source of knowledge and wisdom, guiding OpenPolice.org from its inception.\r\n<em><a href=\"https://www.flexyourrights.org/about-us/board-of-directors/fritz-mulhauser/\" target=\"_blank\">Read Fritzï¿½s full bio.</a></em><p></p>\r\n</div>'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1084,
			'NodeTree' => '23',
			'NodeParentID' => '1080',
			'NodeType' => 'Big Button',
			'NodeResponseSet' => 'Text',
			'NodeDefault' => '<center><p><img src=\"/openpolice/uploads/billy-murphy.jpeg\" alt=\"William H. ï¿½Billyï¿½ Murphy, Jr.\" class=\"bigTmbRound\"></p>\r\n<h3 style=\"margin-top: 20px;\">William H. ï¿½Billyï¿½ Murphy, Jr.</h3></center>',
			'NodeOpts' => '43'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1085,
			'NodeTree' => '23',
			'NodeParentID' => '1084',
			'NodeType' => 'Instructions',
			'NodePromptText' => '<div style=\"padding: 20px; font-size: 80%;\">\r\nWilliam H. ï¿½Billyï¿½ Murphy, Jr. is an attorney and former judge in Baltimore, Maryland. In 2015, he served as attorney for the family of Freddie Gray, who died during an encounter with the Baltimore police. Murphy was the starring narrator and executive producer of Flex Your Rights most recent educational film, <a href=\"https://www.flexyourrights.org/10-rules/\" target=\"_blank\"><i>10 Rules for Dealing with Police</i>. Murphy</a>, a longtime civil rights advocate, provides OpenPolice.org strategic advice for identifying complainants who are credible candidates for potential civil litigation.\r\n<a href=\"https://en.wikipedia.org/wiki/William_%22Billy%22_Murphy,_Jr\" target=\"_blank\"><em>Read Billyï¿½s full bio.</em></a></div>'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1086,
			'NodeTree' => '23',
			'NodeParentID' => '1081',
			'NodeType' => 'Big Button',
			'NodeResponseSet' => 'Text',
			'NodeDefault' => '<center><p><img src="/openpolice/uploads/norm-stamper.jpeg" alt="Norm Stamper" class="bigTmbRound"></p>
<h3 style="margin-top: 20px;">Norm Stamper, Ph.D.</h3></center>',
			'NodeOpts' => '43'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1087,
			'NodeTree' => '23',
			'NodeParentID' => '1086',
			'NodeType' => 'Instructions',
			'NodePromptText' => '<div style=\"padding: 20px; font-size: 80%;\">\r\nNorm Stamper served as chief of the Seattle Police Department from 1994 to 2000. A prominent critic of the War on Drugï¿½s impact on policing culture, he is the author of <a href=\"http://www.amazon.com/Breaking-Rank-Expos%C3%A9-American-Policing/dp/1560258551/ref=sr_1_1?s=books&amp;ie=UTF8&amp;qid=1449697683&amp;sr=1-1&amp;keywords=breaking+rank+norm+stamper\" target=\"_blank\"><i>Breaking Rank: A Top Copï¿½s Expos\ï¿½ of the Dark Side of American Policing</i></a>. His new book, <i><a href=\"http://www.amazon.com/Protect-Serve-How-America%C2%92s-Police/dp/1568585403/ref=sr_1_1?s=books&amp;ie=UTF8&amp;qid=1450372080&amp;sr=1-1&amp;keywords=To+Protect+and+to+Serve%3A+How+to+Fix\" target=\"_blank\">To Protect and To Serve: How to Fix Americaï¿½s Police</a></i>, will be released in spring 2016. Stamper is advising OpenPolice.org on how our data can support conscientious police chiefs working to improve oversight and accountability.\r\n<em><a href=\"http://normstamper.com/\" target=\"_blank\">Read Normï¿½s full bio.</a></em><p></p>\r\n</div>'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1088,
			'NodeTree' => '23',
			'NodeParentID' => '1057',
			'NodeParentOrder' => '3',
			'NodeType' => 'Instructions',
			'NodePromptText' => '<p><br></p><p><br></p>'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1089,
			'NodeTree' => '23',
			'NodeParentID' => '1057',
			'NodeParentOrder' => '1',
			'NodeType' => 'Instructions',
			'NodePromptText' => '<p><br></p><p><br></p>'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1090,
			'NodeTree' => '1',
			'NodeParentID' => '529',
			'NodeType' => 'Send Email',
			'NodePromptNotes' => '::TO::-69::CC::::BCC::',
			'NodePromptAfter' => '::TO::-69::CC::::BCC::',
			'NodeResponseSet' => '1',
			'NodeDefault' => '5'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1091,
			'NodeTree' => '1',
			'NodeParentID' => '455',
			'NodeParentOrder' => '7',
			'NodeType' => 'Send Email',
			'NodePromptAfter' => '::TO::-69::CC::::BCC::',
			'NodeResponseSet' => '1',
			'NodeDefault' => '1'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1094,
			'NodeTree' => '1',
			'NodeParentID' => '455',
			'NodeParentOrder' => '9',
			'NodeType' => 'Radio',
			'NodePromptText' => 'Do you want to make the address of this incident public? This location data will help researchers to map policing problems in your community.',
			'NodeDataStore' => 'Incidents:IncPublic',
			'NodeOpts' => '5'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1096,
			'NodeTree' => '24',
			'NodeType' => 'Page',
			'NodePromptNotes' => 'complaint-or-compliment',
			'NodePromptAfter' => 'Complaint or Compliment? OpenPolice.org::M::OpenPolice.org helps you prepare, file, and track reports of police conduct. Would you like to share a complaint or a compliment?::M::Open Police, OpenPolice.org, Open Police Complaints, Police Departments, Cops, Police, Officers, file complaint, compliment, commendation, submit, victims, oversight, open source, transparency::M::',
			'NodeCharLimit' => '-1'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1097,
			'NodeTree' => '24',
			'NodeParentID' => '1096',
			'NodeParentOrder' => '1',
			'NodeType' => 'Instructions',
			'NodePromptText' => '<p>ï¿½</p>\r\n<center>\r\n<h3>Do you have a complaint or a compliment about the police?</h3>\r\n</center>\r\n<p>ï¿½</p>\r\n<p><a class=\"btn btn-xl btn-primary w100\" href=\"[[DOMAIN]]/filing-your-police-complaint\"><i class=\"fa fa-thumbs-o-down mR10\" aria-hidden=\"true\"></i>  Share a Complaint</a></p>\r\n<p>ï¿½</p>\r\n<p><a class=\"btn btn-xl btn-primary w100\" href=\"[[DOMAIN]]/filing-your-police-compliment\"><i class=\"fa fa-thumbs-o-up mR10\" aria-hidden=\"true\"></i> Share a Compliment</a></p>\r\n<p>ï¿½</p>',
			'NodeOpts' => '67'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1098,
			'NodeTree' => '25',
			'NodeType' => 'Page',
			'NodePromptNotes' => 'dept',
			'NodePromptAfter' => '[{ Complaint Police Department }] ([{ Police Department State Abbr }]) Complaint Info, History & File::M::OpenPolice.org helps you prepare, file, and track complaints with the [{ Complaint Police Department }] ([{ Police Department State Abbr }]). Because your story is too important to be ignored.::M::[{ Complaint Police Department }], [{ Police Department State Abbr }], OpenPolice.org, Cops, Officers, file complaint, submit, compliment, victims, accountability::M::',
			'NodeResponseSet' => '36',
			'NodeCharLimit' => '-1'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1105,
			'NodeTree' => '27',
			'NodeType' => 'Page',
			'NodePromptNotes' => 'site-map',
			'NodePromptAfter' => 'Site Map | OpenPolice.org::M::::M::::M::',
			'NodeCharLimit' => '-1'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1106,
			'NodeTree' => '27',
			'NodeParentID' => '1105',
			'NodeType' => 'Instructions',
			'NodePromptText' => '<p>&nbsp;</p>
<h2>OpenPolice.org Site Map</h2>
<ul><li style="margin-bottom: 30px;"><a href="http://openpolice.local/">Home Page</a></li><li style="margin-bottom: 30px;"><a href="http://openpolice.local/about">About Us</a><ul style="margin-top: 10px; padding-top: 0px;"><li><a href="http://openpolice.local/principles">Principles</a></li><li><a href="http://openpolice.local/frequently-asked-questions">Frequently Asked Questions</a></li></ul></li><li style="margin-bottom: 30px;">Share Your Story (public soon)<ul style="margin-top: 10px; padding-top: 0px;"><li><a href="http://openpolice.local/join-beta-test/site-map">Sign Up To Use As Beta Tester</a></li><li>Filing Your Complaint</li><li>Filing Your Compliment</li><li><a href="http://openpolice.local/complaint-privacy-options">User Privacy Options</a></li><li><a href="http://openpolice.local/allegations">Allegations &amp; Commendations Lists</a></li><li><a href="http://openpolice.local/go-gold-make-your-complaint-strong">"Go Gold" To Make Your Complaint As Strong As Possible</a></li><li><a href="http://openpolice.local/privacy-policy">Terms, Policies, &amp; Rules</a><br></li></ul></li><li style="margin-bottom: 30px;"><a href="http://openpolice.local/complaints">Search Submitted Complaints </a></li><li style="margin-bottom: 30px;"><a href="http://openpolice.local/for-law-enforcement">For Law Enforcement</a><ul style="margin-top: 10px; padding-top: 0px;"><li><a href="http://openpolice.local/department-accessibility">Department Accessibility Grades</a></li><li><a href="http://openpolice.local/how-we-rate-departments">How We Rate Departments</a></li></ul></li><li style="margin-bottom: 30px;"><a href="http://openpolice.local/volunteer">Volunteer Team</a><ul style="margin-top: 10px; padding-top: 0px;"><li><a href="http://openpolice.local/dash/volunteer">Volunteer Dashboard</a><span class="slGrey"> - Crowdsource research on police department complaint processes.</span></li></ul></li><a name="techstuff"></a><li style="margin-bottom: 30px;"><a href="http://openpolice.local/web-app-technical-specs">Web App Technical Stuff</a><ul style="margin-top: 10px; padding-top: 0px;"><li><a href="http://openpolice.local/web-app-workflows">Complaint Submission Process Flow Chart</a></li><li><a href="http://openpolice.local/db/OP" target="_blank">Full Database Design (in English)</a> - <a href="http://openpolice.local/complaint-xml-schema">XML Schema</a></li><li><a href="http://openpolice.local/tree/complaints" target="_blank">Full User Experience Design</a><br></li><li><a href="http://openpolice.local/how-to-install-local-openpolice">Installing Homestead, Laravel, &amp; OpenPolice Software for Development</a></li><li><a href="http://openpolice.local/code-package-files-folders-and-classes">OpenPolice Package\'s Files, Folders, &amp; Classes<br></a></li><li><a href="https://github.com/flexyourrights/openpolice" target="_blank">OpenPolice.org on GitHub</a><br></li></ul></li><li style="margin-bottom: 30px;"><a href="http://openpolice.local/contact">Contact Us</a><br></li><li style="margin-bottom: 30px;"><a href="http://openpolice.local/donate" target="_blank">Donate</a><br></li></ul>',
			'NodeOpts' => '67'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1114,
			'NodeTree' => '70',
			'NodeParentID' => '2094',
			'NodeType' => 'Instructions',
			'NodePromptText' => '<p>ï¿½</p>\r\n\r\n<center><h3>Sorry, but this isn\\'t quite ready for the public yet.</h3></center>',
			'NodeOpts' => '67'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1120,
			'NodeTree' => '70',
			'NodeParentID' => '1114',
			'NodeType' => 'Instructions Raw',
			'NodePromptText' => '<div class="p20"><br /></div>
<center><div>
{{Newsletter Sign Up}}
</div></center>
<style>
#heroImg .heroAction {
    background: #000;
    opacity:0.90; filter:alpha(opacity=90);
}
#heroImg .heroAction h1, .heroImg .heroAction h1 {
    color: #FFF;
    text-shadow: -1px 1px 3px #000;
}
</style>'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1121,
			'NodeTree' => '22',
			'NodeParentID' => '1437',
			'NodeType' => 'Search Results',
			'NodePromptText' => '<h2>Your Complaints</h2>',
			'NodeResponseSet' => '1',
			'NodeDataBranch' => 'users'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1122,
			'NodeTree' => '22',
			'NodeParentID' => '1437',
			'NodeParentOrder' => '1',
			'NodeType' => 'Search Results',
			'NodePromptText' => '<h2>Your Compliments</h2>',
			'NodeResponseSet' => '5',
			'NodeDataBranch' => 'users'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1125,
			'NodeTree' => '12',
			'NodeParentID' => '799',
			'NodeParentOrder' => '4',
			'NodeType' => 'Big Button',
			'NodeResponseSet' => 'Primary',
			'NodeDefault' => 'DONATE',
			'NodeDataStore' => 'window.location=\'https://www.flexyourrights.org/donate/\';'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1126,
			'NodeTree' => '28',
			'NodeType' => 'Page',
			'NodePromptNotes' => 'how-we-rate-departments',
			'NodePromptAfter' => 'Accessibility Score: How We Rate Departments::M::Below you can read a detailed description of each criteria for the OpenPolice.org Accessibility Score, and why we think it is important.::M::Open Police, OpenPolice.org, Open Police Complaints, Police Departments, accessibility, Cops, Police, Officers, file complaint, submit, victims, accountability, oversight, transparency::M::',
			'NodeCharLimit' => '-1'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1127,
			'NodeTree' => '28',
			'NodeParentID' => '1916',
			'NodeType' => 'Instructions',
			'NodePromptText' => '<p><b>Departments can earn an Accessibility Score of up to 100.</b></p>
<ul>
<li>20 - <a href="#n1827" class="hshoo">Has online complaint submission form</a></li>
<li>14 - <a href="#n1825" class="hshoo">Has complaint information on website</a></li>
<li>10 - <a href="http://openpolice.local/dashboard/surv-28/map/node/1127#n1829" class="hshoo">Investigates complaints sent via email</a></li><li>10 - <a href="http://openpolice.local/dashboard/surv-28/map/node/1127#n1831" class="hshoo">Official department form not required for investigation</a></li><li>10 - <a href="#n1" class="hshoo">Has complaint information linked from home page</a></li>
<li>10 - <a href="#n2" class="hshoo">Has complaint form PDF on website</a></li>
<li>15 - <a href="#n1833" class="hshoo">Anonymous complaints investigated</a></li>
<li>3 - <a href="#n1837" class="hshoo">Has a unique department website</a></li>
<li>3 - <a href="#n1806" class="hshoo">Has a Facebook page</a></li>
<li>3 - <a href="#n3" class="hshoo">Has a Twitter account</a></li>
<li>3 - <a href="#n4" class="hshoo">Has a YouTube channel</a></li>
<li>2 - <a href="#n5" class="hshoo">Investigates complaints sent via phone</a></li>
<li>2 - <a href="#n6" class="hshoo">Investigates complaints sent via snail mail</a></li>
<li>0 - <a href="#n7" class="hshoo">Requires complaints to be filed in person</a></li>
<li>-10 - <a href="#n1835" class="hshoo">Requires Notary (for any type of complaint)</a></li>
</ul>',
			'NodeOpts' => '67'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1128,
			'NodeTree' => '12',
			'NodeParentID' => '793',
			'NodeType' => 'Instructions Raw',
			'NodePromptText' => '<div id="homeHeroTop"></div><center>
<div id="homeHeroBox">
<img id="homeLogo" src="/openpolice/uploads/Flex_OpenPolice.org-shade-sm.png" border="0">
<h2 id="homeHeroHead">Prepare, file, and track reports of <nobr>police conduct</nobr></h2>
<h2 id="homeHero2">because your story is too important <nobr>to be ignored.</nobr></h2>
<a id="homeHeroBtn1" class="btn btn-primary btn-lg m15" href="/join-beta-test/home" onmouseover="this.style.color=\'#2B3493\';" onmouseout="this.style.color=\'#FFF\';">SHARE YOUR STORY</a>
<a id="homeHeroBtn2" class="btn btn-danger btn-lg m15" href="/donate" target="_blank" onmouseover="this.style.color=\'#EC2327\';" onmouseout="this.style.color=\'#FFF\';" style="color: rgb(255, 255, 255);">DONATE</a></div>
</center>
<div id="homeHeroBot"></div>',
			'NodePromptAfter' => '<style>
#slLogoWrap { display: none; }
#btnBig { display: block; }
#btnSm { display: none; }
#homeHeroTop, #homeHeroBot { width: 100%; height: 40px; }
#homeHeroBot { height: 80px; }
#homeLogo { width: 65%; }
#homeHeroHead { margin-top: 20px; }
#homeHeroBox { background: none; text-shadow: -1px 1px 1px #000; padding: 15px 0px; }
#homeHero2 { margin-top: 15px; }
#blockWrap[[nID]] { background: #333; text-shadow: -1px 1px 1px #000; min-height: 530px; }
#blockWrap[[nID]] a.btn:link, #blockWrap[[nID]] a.btn:visited, #blockWrap[[nID]] a.btn:active, #blockWrap[[nID]] a.btn:hover { width: 360px; }
#blockWrap2010 { margin-top: -17px; }
#deferNode2011 { height: 772px; }
#deferAnim2011 { margin-top: 250px; }
#homeHeroHead, #homeHero2, #homeHeroBtn1, #homeHeroBtn2, #mailchimpH2 { font-size: 1.75rem; }

@media screen and (max-width: 1200px) {
#deferNode2011 { height: 672px; }
}
@media screen and (max-width: 992px) {
#homeLogo { width: 90%; }
#homeHeroTop, #homeHeroBot { height: 20px; }
#deferNode2011 { height: 602px; }
#deferAnim2011 { margin-top: 200px; }
}
@media screen and (max-width: 768px) {
#homeHeroHead, #homeHero2, #homeHeroBtn1, #homeHeroBtn2, #mailchimpH2 { font-size: 1.5rem; }
#btnBig { display: none; }
#btnSm { display: block; }
#blockWrap[[nID]] a.btn:link, #blockWrap[[nID]] a.btn:visited, #blockWrap[[nID]] a.btn:active, #blockWrap[[nID]] a.btn:hover { width: 300px; }
#homeHeroBox { background: url(/survloop/uploads/trans-black-50.png); }
#deferNode2011 { height: 472px; }
}
@media screen and (max-width: 480px) {
#btnSm { margin-top: 10px; }
#homeHeroTop, #homeHeroBot { height: 0px; }
#homeLogo { margin-bottom: 10px; }
#blockWrap[[nID]] a.btn:link, #blockWrap[[nID]] a.btn:visited, #blockWrap[[nID]] a.btn:active, #blockWrap[[nID]] a.btn:hover { width: 250px; }
#deferNode2011 { height: 470px; }
}
</style>
<script type="text/javascript"> $(document).ready(function(){
function checkLogoScroll() {
    if (jQuery(this).scrollTop() > 170) $("#slLogoWrap").slideDown("fast");
    else $("#slLogoWrap").slideUp("fast");
}
setTimeout(function() { checkLogoScroll(); }, 50);
jQuery(window).scroll(function () { checkLogoScroll(); });
}); </script>',
			'NodeDefault' => '#000;;#EDF8FF;;#FFF;;/openpolice/open-police-hero-1J.jpg;;w100;;Y;;center;;h100',
			'NodeOpts' => '71'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1129,
			'NodeTree' => '29',
			'NodeType' => 'Page',
			'NodePromptNotes' => 'go-gold-make-your-complaint-strong',
			'NodePromptAfter' => 'Go Gold: Make Your Complaint Stronger::M::::M::::M::',
			'NodeCharLimit' => '-1'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1130,
			'NodeTree' => '29',
			'NodeParentID' => '1129',
			'NodeType' => 'Instructions',
			'NodePromptText' => '<h2>&nbsp;</h2>
<h2>"Go Gold" To Make Your Complaint As Strong As Possible&nbsp; (It\'s Free!)</h2>
<p><img src="/openpolice/uploads/flex-arm-gold2.png" width="20%" hspace="5" align="right"></p>
<p>You have completed a solid complaint. This includes basic info that most departments need to investigate your complaint.</p>
<p>But here are the benefits of taking a few more minutes to create a <span class="slBlueDark">GOLD STAR complaint</span>...</p>
<ul>
<li>Dive deeper into your incident to paint a more complete picture</li>
<li>Create a more complete complaint that\'s even stronger for investigators</li>
<li>Receive custom information on the many things you can learn from this police encounter</li>
<li>Helps us to better track problematic police behavior in your community and nationwide!</li>
</ul>
<p>Both the basic and the Gold Star complaints are free for users to file and publish.</p>',
			'NodeOpts' => '67'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1131,
			'NodeTree' => '1',
			'NodeParentID' => '56',
			'NodeType' => 'Page Block'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1132,
			'NodeTree' => '1',
			'NodeParentID' => '70',
			'NodeType' => 'Page Block'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1133,
			'NodeTree' => '1',
			'NodeParentID' => '447',
			'NodeType' => 'Page Block'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1134,
			'NodeTree' => '1',
			'NodeParentID' => '102',
			'NodeType' => 'Page Block'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1135,
			'NodeTree' => '1',
			'NodeParentID' => '165',
			'NodeType' => 'Page Block'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1152,
			'NodeTree' => '1',
			'NodeParentID' => '743',
			'NodeType' => 'Page Block'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1153,
			'NodeTree' => '1',
			'NodeParentID' => '322',
			'NodeType' => 'Page Block'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1155,
			'NodeTree' => '1',
			'NodeParentID' => '385',
			'NodeType' => 'Page Block'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1157,
			'NodeTree' => '1',
			'NodeParentID' => '370',
			'NodeType' => 'Page Block'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1162,
			'NodeTree' => '1',
			'NodeParentID' => '411',
			'NodeType' => 'Radio',
			'NodePromptText' => 'Did force used against [LoopItemLabel] result in injuries?',
			'NodeDataStore' => 'Civilians:CivHasInjury'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1163,
			'NodeTree' => '1',
			'NodeParentID' => '2050',
			'NodeType' => 'Checkbox',
			'NodePromptText' => '<h2>What injuries did [LoopItemLabel] experience?</h2>',
			'NodePromptAfter' => '<style>
.subRes { padding-left: 45px; }
</style><script type="text/javascript">
function checkYouFatal() {
    if (document.getElementById(\'nLabel1163cyc0\') && document.getElementById(\'n1163cyc0fld0lab\')) {
        var promptTxt = document.getElementById(\'nLabel1163cyc0\').innerHTML.trim();
        if (promptTxt.indexOf("you") > 0) {
            document.getElementById(\'n1163cyc0fld0lab\').style.display="none";
        }
    }
}
setTimeout("checkYouFatal()", 1);
</script>',
			'NodeResponseSet' => 'Definition::Injury Types',
			'NodeDataStore' => 'Injuries:InjType'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1164,
			'NodeTree' => '1',
			'NodeParentID' => '517',
			'NodeType' => 'Instructions',
			'NodePromptText' => '<h2>Physical Injuries</h2>',
			'NodePromptAfter' => '<style> #node[[nID]] { margin-bottom: -30px; } </style>'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1170,
			'NodeTree' => '1',
			'NodeParentID' => '414',
			'NodeType' => 'Loop Cycle',
			'NodeResponseSet' => 'LoopItems::Victims',
			'NodeDataBranch' => 'Civilians'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1172,
			'NodeTree' => '1',
			'NodeParentID' => '227',
			'NodeType' => 'Page Block'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1175,
			'NodeTree' => '1',
			'NodeParentID' => '529',
			'NodeParentOrder' => '1',
			'NodeType' => 'Send Email',
			'NodePromptNotes' => '::TO::1,32::CC::::BCC::',
			'NodePromptAfter' => '::TO::1,32::CC::::BCC::',
			'NodeResponseSet' => '1',
			'NodeDefault' => '23'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1176,
			'NodeTree' => '1',
			'NodeParentID' => '677',
			'NodeParentOrder' => '1',
			'NodeType' => 'Back Next Buttons',
			'NodeResponseSet' => '1'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1179,
			'NodeTree' => '1',
			'NodeParentID' => '1188',
			'NodeParentOrder' => '1',
			'NodeType' => 'Radio',
			'NodePromptText' => 'Do you think this property was <span class="slBlueDark">wrongfully</span> damaged?',
			'NodeDataStore' => 'AllegSilver:AlleSilPropertyDamage',
			'NodeOpts' => '5'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1180,
			'NodeTree' => '1',
			'NodeParentID' => '1179',
			'NodeType' => 'Data Manip: Wrap',
			'NodeResponseSet' => '496',
			'NodeDataBranch' => 'Allegations',
			'NodeDataStore' => 'Allegations:AlleType'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1181,
			'NodeTree' => '1',
			'NodeParentID' => '1180',
			'NodeParentOrder' => '1',
			'NodeType' => 'Checkbox',
			'NodePromptText' => 'Which officers seized or damaged property?',
			'NodeResponseSet' => 'LoopItems::Officers',
			'NodeDataStore' => 'LinksOfficerAllegations:LnkOffAlleOffID'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1182,
			'NodeTree' => '1',
			'NodeParentID' => '1180',
			'NodeType' => 'Checkbox',
			'NodePromptText' => 'Which victims did this property belong to?',
			'NodeResponseSet' => 'LoopItems::Victims',
			'NodeDataStore' => 'LinksCivilianAllegations:LnkCivAlleCivID'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1183,
			'NodeTree' => '1',
			'NodeParentID' => '1180',
			'NodeParentOrder' => '2',
			'NodeType' => 'Long Text',
			'NodePromptText' => 'What makes you think that wrongful property damage occurred?',
			'NodeDataStore' => 'Allegations:AlleDescription',
			'NodeOpts' => '155'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1187,
			'NodeTree' => '1',
			'NodeParentID' => '457',
			'NodeParentOrder' => '3',
			'NodeType' => 'Radio',
			'NodePromptText' => 'Did this incident begin with a traffic accident?',
			'NodeDataStore' => 'Scenes:ScnIsVehicleAccident'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1188,
			'NodeTree' => '1',
			'NodeParentID' => '217',
			'NodeType' => 'Page Block'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1189,
			'NodeTree' => '30',
			'NodeType' => 'Page',
			'NodePromptNotes' => 'testing',
			'NodePromptAfter' => 'Testing::M::::M::::M::',
			'NodeCharLimit' => '-1'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1190,
			'NodeTree' => '30',
			'NodeParentID' => '1189',
			'NodeType' => 'Instructions',
			'NodePromptText' => '<h2>Welcome to Testing.</h2>
<p>Edit this node to fill in your page! This node could be your entire page, or just one little component.</p>'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1191,
			'NodeTree' => '30',
			'NodeParentID' => '1189',
			'NodeParentOrder' => '1',
			'NodeType' => 'Checkbox',
			'NodePromptText' => 'What about this?',
			'NodeResponseSet' => 'Definition::Citation Charges',
			'NodeDataStore' => 'Charges:ChrgCharges'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1192,
			'NodeTree' => '30',
			'NodeParentID' => '1191',
			'NodeType' => 'Layout Sub-Response'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1193,
			'NodeTree' => '30',
			'NodeParentID' => '1192',
			'NodeType' => 'Text',
			'NodePromptText' => 'Test thisssss:'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1194,
			'NodeTree' => '1',
			'NodeParentID' => '451',
			'NodeParentOrder' => '2',
			'NodeType' => 'Instructions Raw',
			'NodePromptText' => 'Don\'t worry about spelling or grammar now because you can edit your story later. And <b>please do not provide addresses, phone numbers, or emails here.</b>',
			'NodePromptAfter' => '<style> #node1194 { margin: -40px 0px -20px 0px; } </style>'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1196,
			'NodeTree' => '1',
			'NodeParentID' => '679',
			'NodeType' => 'Instructions Raw',
			'NodePromptText' => '<h2>We will help you organize everything that a lawyer needs to <nobr>help you.</nobr></h2>\r\n<p>You might not know it, but some information you publish could hurt somebody\\'s legal case. That\\'s not what we want to happen, so you should share your complaint with a lawyer first. Later, you can file it with a police investigative agency.</p>\r\n<p>After you complete your complaint, you can save it in three <nobr>ways ...</nobr></p>\r\n<table border=0 class=\"w100\"><tr><td class=\"taC\">\r\n<h1 class=\"slBlueDark\" style=\"margin-top: 15px;\"><i class=\"fa fa-print\" aria-hidden=\"true\"></i></h1>\r\nPrint it\r\n</td><td class=\"taC\">\r\n<h1 class=\"slBlueDark\" style=\"margin-top: 15px;\"><i class=\"fa fa-cloud-download\" aria-hidden=\"true\"></i></h1>\r\nDownload it\r\n</td><td class=\"taC\">\r\n<h1 class=\"slBlueDark\" style=\"margin-top: 15px;\"><i class=\"fa fa-envelope\" aria-hidden=\"true\"></i></h1>\r\nEmail it\r\n</td></tr></table>\r\n<p>For your protection, we will delete your story from our system. But we will preserve some anonymous data for police accountability researchers.</p>\r\n<p>After you\\'ve checked with a lawyer ï¿½ or any charges are resolved ï¿½ you can re-upload your complaint. <b>That will publish your full story and file it with a police investigative agency.</b></p>\r\n<h3 class=\"slBlueDark\" style=\"margin-top: 20px;\">Remember: The more details you share, the better we can match you with a lawyer.</h3>',
			'NodeOpts' => '37'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1197,
			'NodeTree' => '1',
			'NodeParentID' => '458',
			'NodeParentOrder' => '1',
			'NodeType' => 'Data Manip: Wrap',
			'NodeDataBranch' => 'PhysicalDesc'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1198,
			'NodeTree' => '1',
			'NodeParentID' => '458',
			'NodeParentOrder' => '2',
			'NodeType' => 'Data Manip: Wrap',
			'NodeDataBranch' => 'PersonContact'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1199,
			'NodeTree' => '1',
			'NodeParentID' => '461',
			'NodeParentOrder' => '1',
			'NodeType' => 'Data Manip: Wrap',
			'NodeDataBranch' => 'PersonContact'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1200,
			'NodeTree' => '1',
			'NodeParentID' => '461',
			'NodeParentOrder' => '3',
			'NodeType' => 'Data Manip: Wrap',
			'NodeDataBranch' => 'PersonContact'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1201,
			'NodeTree' => '1',
			'NodeParentID' => '462',
			'NodeParentOrder' => '1',
			'NodeType' => 'Data Manip: Wrap',
			'NodeDataBranch' => 'PersonContact'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1202,
			'NodeTree' => '1',
			'NodeParentID' => '462',
			'NodeParentOrder' => '3',
			'NodeType' => 'Data Manip: Wrap',
			'NodeDataBranch' => 'PersonContact'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1203,
			'NodeTree' => '1',
			'NodeParentID' => '465',
			'NodeParentOrder' => '1',
			'NodeType' => 'Data Manip: Wrap',
			'NodeDataBranch' => 'PersonContact'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1204,
			'NodeTree' => '1',
			'NodeParentID' => '465',
			'NodeParentOrder' => '8',
			'NodeType' => 'Data Manip: Wrap',
			'NodeDataBranch' => 'PersonContact'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1210,
			'NodeTree' => '33',
			'NodeType' => 'Page',
			'NodePromptNotes' => 'volunteer',
			'NodePromptAfter' => 'Volunteer Dashboard::M::::M::::M::'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1211,
			'NodeTree' => '33',
			'NodeParentID' => '1756',
			'NodeType' => 'Instructions Raw',
			'NodePromptText' => '[ Priority Departments ] hard-coded via OpenVolunteers.php function printVolunPriorityList, to view openpolice.nodes.1755-volun-home-priority-depts'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1212,
			'NodeTree' => '33',
			'NodeParentID' => '1210',
			'NodeParentOrder' => '3',
			'NodeType' => 'Layout Row',
			'NodeCharLimit' => '3'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1213,
			'NodeTree' => '33',
			'NodeParentID' => '1212',
			'NodeType' => 'Layout Column',
			'NodeCharLimit' => '9'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1215,
			'NodeTree' => '33',
			'NodeParentID' => '1212',
			'NodeParentOrder' => '2',
			'NodeType' => 'Layout Column',
			'NodeCharLimit' => '3'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1216,
			'NodeTree' => '33',
			'NodeParentID' => '1213',
			'NodeType' => 'Instructions',
			'NodePromptText' => '<h2>Volunteer Dashboard: Department Research</h2>
<p>Please help us collect and verify police department information. This can include online research and making phone calls to departments. (You can do either or both types of research.)</p><p>Begin with the high-priority departments. Research on each department should take you about 30 minutes. But please take your time because research quality is crucial.</p><p>Thank you for helping to build the most transparent police complaints service in the United States!</p><p><a href="/dash/department-research-volunteer-instructions-checklist" class="btn btn-primary btn-lg">Volunteer Instructions and Checklists</a><br></p>',
			'NodePromptAfter' => '<style> #mainBody { background: #F5FBFF; } </style>',
			'NodeOpts' => '89'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1217,
			'NodeTree' => '33',
			'NodeParentID' => '1215',
			'NodeType' => 'Instructions Raw',
			'NodePromptText' => '[ Volunteer Location Form ] hard-coded via OpenVolunteers.php function printVolunLocationForm, to view openpolice.nodes.1217-volun-home-your-info',
			'NodeOpts' => '89'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1218,
			'NodeTree' => '34',
			'NodeType' => 'Page',
			'NodePromptNotes' => 'search',
			'NodePromptAfter' => 'Search::M::::M::::M::'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1219,
			'NodeTree' => '34',
			'NodeParentID' => '1218',
			'NodeType' => 'Instructions',
			'NodePromptText' => '<center><h1 style="margin-top: 50px;">Coming Soon</h1></center>'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1220,
			'NodeTree' => '35',
			'NodeType' => 'Page',
			'NodePromptNotes' => 'dashboard-search'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1221,
			'NodeTree' => '35',
			'NodeParentID' => '1220',
			'NodeType' => 'Instructions',
			'NodePromptText' => '<center><h1 style="margin-top: 50px;">Coming Soon</h1></center>'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1222,
			'NodeTree' => '36',
			'NodeType' => 'Data Manip: Wrap',
			'NodeDataBranch' => 'Departments'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1223,
			'NodeTree' => '36',
			'NodeParentID' => '1222',
			'NodeType' => 'Page',
			'NodePromptNotes' => 'form',
			'NodePromptAfter' => 'Department Crowd-Research::M::::M::::M::',
			'NodeCharLimit' => '-1'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1224,
			'NodeTree' => '37',
			'NodeType' => 'XML',
			'NodePromptText' => 'Departments',
			'NodePromptNotes' => '111'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1225,
			'NodeTree' => '36',
			'NodeParentID' => '1223',
			'NodeType' => 'Instructions Raw',
			'NodePromptText' => '[ Verfying Depatment Info: Header ] hard-coded via OpenDepts.php function printDeptEditHeader, to view openpolice.nodes.1225-volun-dept-edit-header'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1226,
			'NodeTree' => '36',
			'NodeParentID' => '1223',
			'NodeParentOrder' => '8',
			'NodeType' => 'Hidden Field',
			'NodePromptAfter' => '<style>
#slTopTabsWrap { background: #F5FBFF; }
#fixedHeader { margin-top: 39px; }
</style>',
			'NodeDataStore' => 'Departments:DeptScoreOpenness'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1227,
			'NodeTree' => '36',
			'NodeParentID' => '2155',
			'NodeType' => 'Instructions Raw',
			'NodePromptText' => '<div class="nodeAnchor"><a id="deptWeb" name="deptWeb"></a></div><hr><h2 class="mB0">Web Presence & Complaint Process</h2>
<p>Leave fields blank if the department doesn\'t have the thing.</p>',
			'NodeInternalNotes' => 'hard-coded in view 1227-volun-dept-edit-search-complaint'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1228,
			'NodeTree' => '36',
			'NodeParentID' => '2156',
			'NodeType' => 'Instructions Raw',
			'NodePromptText' => '<div class="nodeAnchor"><a id="deptIA" name="deptIA"></a></div><h2 class="m0">Internal Affairs Office</h2>',
			'NodePromptAfter' => '<style> #node1228 .nodeHalfGap { display: none; } </style>'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1229,
			'NodeTree' => '36',
			'NodeParentID' => '2157',
			'NodeType' => 'Drop Down',
			'NodePromptText' => '<div class="nodeAnchor"><a id="deptCiv" name="deptCiv"></a></div>
<h2 class="mTn10">Civilian Oversight Office</h2>
<p>Does this department have a separate civilian investigative agency?</p>',
			'NodePromptAfter' => '<script type="text/javascript"> $(document).ready(function(){
    function chkHasCiv() {
        var hasCiv = false;
        if (document.getElementById(\'n1229FldID\') && document.getElementById(\'n1229FldID\').value == \'Y\') {
            hasCiv = true;
            $("#node1319").slideDown("fast");
            setNodeVisib(1312, "", true);
            setNodeVisib(1341, "", true);
        } else {
            $("#node1319").slideUp("fast");
            setNodeVisib(1312, "", false);
            setNodeVisib(1341, "", false);
        }
        return true;
    }
    $(document).on("change", "#n1229FldID", function() { chkHasCiv(); });
    setTimeout(function() { chkHasCiv(); }, 1500);
}); </script>',
			'NodeDefault' => 'N'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1230,
			'NodeTree' => '36',
			'NodeParentID' => '2158',
			'NodeType' => 'Instructions Raw',
			'NodePromptText' => '<div class="nodeAnchor"><a id="deptSave" name="deptSave"></a></div><h2 class="mB0 slBlueDark">Save Departments Changes</h2>',
			'NodePromptAfter' => '<style>
#blockWrap1330 { margin-top: -30px; }
#node1230 .nodeHalfGap { display: none; }
#nLabel1334 { margin-top: 18px; }
#nFormNextBtn { width: 100%; }
#blockWrap2232, #blockWrap1226 { display: none; }
</style>
<script type="text/javascript">
setTimeout("document.getElementById(\'nFormNextBtn\').innerHTML=\'Save All Department Changes\'", 1);
</script>'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1231,
			'NodeTree' => '36',
			'NodeParentID' => '2159',
			'NodeType' => 'Instructions Raw',
			'NodePromptText' => '<div class="nodeAnchor"><a id="deptEdits" name="deptEdits"></a></div><hr><h2 class="mB0">Past Volunteer Edits</h2>',
			'NodeInternalNotes' => 'hard-coded in view openpolice.volun.volun-dept-edit-history'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1232,
			'NodeTree' => '97',
			'NodeParentID' => '2161',
			'NodeType' => 'Instructions Raw',
			'NodePromptText' => '<div class="nodeAnchor"><a id="deptChecklist" name="deptChecklist"></a></div><h2 class="mB0">Volunteer Checklist & Phone Scripts</h2>
<h2 class="slBlueDark">Phase 1:</h2>
<h3>Verify Department Contact Info</h3>

<div class="row"><div class="col-md-6">

<table class="table w100" border="0">
    <tbody><tr><td>
      <nobr><input id="step1" autocomplete="off" type="checkbox" class="mR5"> <h3 class="disIn m0">1)</h3></nobr>
    </td><td class="w100"><label for="step1">
      Look at the department\'s street address, then click the "<b>Begin Department Search</b>" button at the top. Scan the top results for a match on that address. Try to find the official website for the police department or municipality. (Sometimes they are part of the same website.) If you cannot find the department\'s website, you might be able to find a Google Business or Map result. This might have the phone number and other info.
    </label></td></tr>
    <tr><td>
     <nobr><input id="step2" autocomplete="off" type="checkbox" class="mR5"> <h3 class="disIn m0">2)</h3></nobr>
    </td><td class="w100"><label for="step2">
      Once you get to the police department\'s main webpage, look for basic contact information. Verify the department\'s <b>address</b>. Then enter their <b>main phone number</b> and <b>main email address</b> on this page. Last, be sure to specify what <b>type of department</b> this is (municipality, sheriff, state, etc).
    </label></td></tr>
</tbody></table>

<h3>Department Statistics</h3>

<table class="table w100" border="0">
    <tbody><tr><td>
      <nobr><input id="step3" autocomplete="off" type="checkbox" class="mR5"> <h3 class="disIn m0">3)</h3></nobr>
    </td><td class="w100"><label for="step3">
      Click the "<i class="fa fa-wikipedia-w"></i>ikipedia Department" button. If the department has a Wikipedia page, look for the number of employees in the top info box. Then copy that number into the <b>employed officers</b> field. If the department page has a population listing, copy that number into the <b>population served</b> field. If it doesn\'t have a population number, try to find it using the <b>population served</b> using the "<i class="fa fa-wikipedia-w"></i>ikipedia City" button.
    </label></td></tr>
</tbody></table>

</div><div class="col-md-1">
</div><div class="col-md-5">

<h3 id="chkLstWeb">Web Presence</h3>

<table class="table w100" border="0">
    <tbody><tr><td>
      <nobr><input id="step4" autocomplete="off" type="checkbox" class="mR5"> <h3 class="disIn m0">4)</h3></nobr>
    </td><td class="w100"><label for="step4">
      Copy the department\'s main (home page) <b>website URL</b> to this page. (It might be found within a city\'s municipal website.) If you can find a Facebook link, copy the <b>Facebook URL</b> to this page.
    </label></td></tr>
    <tr><td>
      <nobr><input id="step5" autocomplete="off" type="checkbox" class="mR5"> <h3 class="disIn m0">5)</h3></nobr>
    </td><td class="w100"><label for="step5">
      Next, you\'ll determine if the department\'s main website has a clear link to information about how to submit a complaint about the police. From the department\'s home page, scan for links like "complaint" or "forms". (If you can\'t easily see one, try using <span class="gry6"><b>Ctrl+F</b></span> with "complaint" or "forms".) If there is a link, be sure to click it to check that the page really has information about how to submit a complaint against the police. (Sometimes they only have information about <i>other</i> types of complaints.)
        <br><br>
        If the link does have real complaint information, click "Yes" on <b>Link to Complaint Info from Home Page</b>. Next, copy the link into the <b>Complaint Info URL</b> field.
        <br><br>
        If the home page does not link to complaint information, click "No". Then, to find out if there is a complaint information page, click the "<b>Department Complaint Search</b>" button. If you find it, copy its location into <b>Complaint Info URL</b>. 
    </label></td></tr>
    <tr><td>
       <nobr><input id="step6" autocomplete="off" type="checkbox" class="mR5"> <h3 class="disIn m0">6)</h3></nobr>
    </td><td class="w100"><label for="step6">
      If you find complaint information, look for a complaint form that can be printed. If you find one, copy the .PDF or .DOC link into the <b>Complaint Form PDF</b> field. In some rare cases, departments might also have an online-submittable complaint form, which is awesome. If so, check the <b>Online-Submittable Form</b> box, and copy the link into the <b>URL</b> box. <span class="gry6 f12">(Then do a little dance.)</span>
    </label></td></tr>
</tbody></table>

</div></div>

<h2 class="slBlueDark">Phase 2: Call Main Department</h2>
<div class="row"><div class="col-md-6">
<h3>Verify department info</h3>
Next, you\'ll call the police department\'s main, non-emergency phone number. If you find multiple addresses, ask for the <b>main address</b>. If you\'re unable to find a main <b>email address</b>, <b>website</b>, <b>Facebook</b>, number of <b>employees</b>, or <b>population</b> ? ask about those too.
<br><br>
Next, you\'ll ask for the <b>phone number</b> (and extension) of the department\'s <b>internal affairs</b> office. If they automatically patch you through, be sure to ask for their direct number.
<br><br>
Some departments are so small that they don\'t have separate contact info for an internal affairs office. If this is the case, copy the department info into the internal affairs section.
</div><div class="col-md-1">
</div><div class="col-md-5">
<h3 class="slBlueDark">Main Department Phone Script</h3>
{{Phone Script: Department}}
</div></div>
<div class="p20"></div>
  
<h2 class="slBlueDark">Phase 3: Call Internal Affairs</h2>
<div class="row"><div class="col-md-6">
<h3>Check complaint submission info</h3>
Due to the importance of this information in filing OpenPolice.org, we want to verify all internal affairs information by phone. The questions below should be asked in the order they are listed.
</div><div class="col-md-1">
</div><div class="col-md-5">
<h3 class="slBlueDark">Internal Affairs Phone Script</h3>
{{Phone Script: Internal Affairs}}
</div></div>
<div class="p20"></div>
<style> #chkLstWeb { margin-top: -35px; } @media screen and (max-width: 768px) { #chkLstWeb { margin-top: 5px; } }  </style>'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1234,
			'NodeTree' => '38',
			'NodeType' => 'Page',
			'NodePromptNotes' => 'volunteer-faqs',
			'NodePromptAfter' => 'Frequently Asked Volunteer Questions::M::::M::::M::',
			'NodeCharLimit' => '-1'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1235,
			'NodeTree' => '38',
			'NodeParentID' => '1234',
			'NodeType' => 'Instructions',
			'NodePromptText' => '<h2>Volunteers\' Frequently Asked Questions</h2>
<p>Coming Soon...</p>
<p>Let us know about your questions.</p><ul>
</ul><p></p>'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1236,
			'NodeTree' => '36',
			'NodeParentID' => '2154',
			'NodeParentOrder' => '1',
			'NodeType' => 'Layout Row',
			'NodeCharLimit' => '3'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1237,
			'NodeTree' => '36',
			'NodeParentID' => '1236',
			'NodeType' => 'Layout Column',
			'NodeCharLimit' => '6'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1238,
			'NodeTree' => '36',
			'NodeParentID' => '1236',
			'NodeParentOrder' => '1',
			'NodeType' => 'Layout Column',
			'NodeCharLimit' => '1'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1239,
			'NodeTree' => '36',
			'NodeParentID' => '1236',
			'NodeParentOrder' => '2',
			'NodeType' => 'Layout Column',
			'NodeCharLimit' => '5'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1240,
			'NodeTree' => '36',
			'NodeParentID' => '1237',
			'NodeType' => 'Text',
			'NodePromptText' => 'Department Name',
			'NodeDataStore' => 'Departments:DeptName'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1241,
			'NodeTree' => '36',
			'NodeParentID' => '1237',
			'NodeParentOrder' => '1',
			'NodeType' => 'Text',
			'NodePromptText' => 'Street Address',
			'NodeDataStore' => 'Departments:DeptAddress'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1242,
			'NodeTree' => '36',
			'NodeParentID' => '1237',
			'NodeParentOrder' => '2',
			'NodeType' => 'Text',
			'NodePromptText' => 'Address Line 2',
			'NodeDataStore' => 'Departments:DeptAddress2'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1243,
			'NodeTree' => '36',
			'NodeParentID' => '1247',
			'NodeType' => 'Text',
			'NodePromptText' => 'City',
			'NodeDataStore' => 'Departments:DeptAddressCity'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1244,
			'NodeTree' => '36',
			'NodeParentID' => '1248',
			'NodeType' => 'U.S. States',
			'NodePromptText' => 'State',
			'NodeDataStore' => 'Departments:DeptAddressState'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1245,
			'NodeTree' => '36',
			'NodeParentID' => '1237',
			'NodeParentOrder' => '4',
			'NodeType' => 'Text',
			'NodePromptText' => 'County',
			'NodeDataStore' => 'Departments:DeptAddressCounty'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1246,
			'NodeTree' => '36',
			'NodeParentID' => '1237',
			'NodeParentOrder' => '3',
			'NodeType' => 'Layout Row',
			'NodeCharLimit' => '3'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1247,
			'NodeTree' => '36',
			'NodeParentID' => '1246',
			'NodeType' => 'Layout Column',
			'NodeCharLimit' => '6'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1248,
			'NodeTree' => '36',
			'NodeParentID' => '1246',
			'NodeParentOrder' => '1',
			'NodeType' => 'Layout Column',
			'NodeCharLimit' => '3'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1249,
			'NodeTree' => '36',
			'NodeParentID' => '1246',
			'NodeParentOrder' => '2',
			'NodeType' => 'Layout Column',
			'NodeCharLimit' => '3'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1250,
			'NodeTree' => '36',
			'NodeParentID' => '1249',
			'NodeType' => 'Text',
			'NodePromptText' => 'Zip Code',
			'NodeDataStore' => 'Departments:DeptAddressZip'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1251,
			'NodeTree' => '36',
			'NodeParentID' => '1253',
			'NodeType' => 'Drop Down',
			'NodePromptText' => 'Type of Department',
			'NodeResponseSet' => 'Definition::Types of Departments',
			'NodeDataStore' => 'Departments:DeptType'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1252,
			'NodeTree' => '36',
			'NodeParentID' => '1239',
			'NodeType' => 'Layout Row',
			'NodeCharLimit' => '2'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1253,
			'NodeTree' => '36',
			'NodeParentID' => '1252',
			'NodeType' => 'Layout Column',
			'NodeCharLimit' => '6'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1254,
			'NodeTree' => '36',
			'NodeParentID' => '1252',
			'NodeParentOrder' => '1',
			'NodeType' => 'Layout Column',
			'NodeCharLimit' => '6'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1255,
			'NodeTree' => '36',
			'NodeParentID' => '1254',
			'NodeType' => 'Drop Down',
			'NodePromptText' => 'Activity Status',
			'NodeResponseSet' => 'Definition::Department Status',
			'NodeDataStore' => 'Departments:DeptStatus'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1256,
			'NodeTree' => '36',
			'NodeParentID' => '1239',
			'NodeParentOrder' => '1',
			'NodeType' => 'Text',
			'NodePromptText' => 'Main Phone Number',
			'NodeDataStore' => 'Departments:DeptPhoneWork'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1257,
			'NodeTree' => '36',
			'NodeParentID' => '1239',
			'NodeParentOrder' => '2',
			'NodeType' => 'Layout Row',
			'NodeCharLimit' => '2'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1258,
			'NodeTree' => '36',
			'NodeParentID' => '1257',
			'NodeType' => 'Layout Column',
			'NodeCharLimit' => '6'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1259,
			'NodeTree' => '36',
			'NodeParentID' => '1257',
			'NodeParentOrder' => '1',
			'NodeType' => 'Layout Column',
			'NodeCharLimit' => '6'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1260,
			'NodeTree' => '36',
			'NodeParentID' => '1258',
			'NodeType' => 'Instructions',
			'NodePromptText' => '<h3 class="mTn5">Stats</h3>',
			'NodePromptNotes' => '<div class="slGrey" style="margin-top: -10px;">Please provide numbers like "1600000", not "1.6 million".</div>
<style>
#blockWrap1257 { margin-top: 25px; }
#node1260 { margin-top: 10px; }
#node1260 .nodeHalfGap { display: none; }
</style>'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1261,
			'NodeTree' => '36',
			'NodeParentID' => '1259',
			'NodeType' => 'Instructions Raw',
			'NodePromptText' => '[ Volunteer Edit Stats ] hard-coded in view openpolice.nodes.1261-volun-dept-edit-wiki-stats'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1262,
			'NodeTree' => '36',
			'NodeParentID' => '1239',
			'NodeParentOrder' => '3',
			'NodeType' => 'Text:Number',
			'NodePromptText' => 'Total Number of Employees (not just officers)',
			'NodeDataStore' => 'Departments:DeptTotOfficers'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1263,
			'NodeTree' => '36',
			'NodeParentID' => '1239',
			'NodeParentOrder' => '4',
			'NodeType' => 'Text:Number',
			'NodePromptText' => 'Size of Population Served',
			'NodeDataStore' => 'Departments:DeptJurisdictionPopulation'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1264,
			'NodeTree' => '36',
			'NodeParentID' => '1319',
			'NodeType' => 'Layout Row',
			'NodeCharLimit' => '2'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1265,
			'NodeTree' => '36',
			'NodeParentID' => '1264',
			'NodeType' => 'Layout Column',
			'NodeCharLimit' => '6'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1266,
			'NodeTree' => '36',
			'NodeParentID' => '1264',
			'NodeParentOrder' => '1',
			'NodeType' => 'Layout Column',
			'NodeCharLimit' => '1'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1267,
			'NodeTree' => '36',
			'NodeParentID' => '1310',
			'NodeType' => 'Page Block'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1268,
			'NodeTree' => '36',
			'NodeParentID' => '2155',
			'NodeParentOrder' => '1',
			'NodeType' => 'Layout Row',
			'NodeCharLimit' => '3'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1269,
			'NodeTree' => '36',
			'NodeParentID' => '1268',
			'NodeType' => 'Layout Column',
			'NodeCharLimit' => '6'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1270,
			'NodeTree' => '36',
			'NodeParentID' => '1268',
			'NodeParentOrder' => '1',
			'NodeType' => 'Layout Column',
			'NodeCharLimit' => '1'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1271,
			'NodeTree' => '36',
			'NodeParentID' => '1268',
			'NodeParentOrder' => '2',
			'NodeType' => 'Layout Column',
			'NodeCharLimit' => '5'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1272,
			'NodeTree' => '36',
			'NodeParentID' => '1269',
			'NodeType' => 'Text',
			'NodePromptText' => 'Website URL <span class="slGreenLight fPerc66 mL10">Score+3</span>',
			'NodeDataStore' => 'Oversight:OverWebsite'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1273,
			'NodeTree' => '36',
			'NodeParentID' => '1223',
			'NodeParentOrder' => '2',
			'NodeType' => 'Data Manip: Wrap',
			'NodeResponseSet' => '303',
			'NodeDataBranch' => 'Oversight',
			'NodeDataStore' => 'Oversight:OverType'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1274,
			'NodeTree' => '36',
			'NodeParentID' => '1269',
			'NodeParentOrder' => '1',
			'NodeType' => 'Text',
			'NodePromptText' => 'Facebook URL <span class="slGreenLight fPerc66 mL10">Score+3</span>',
			'NodeDataStore' => 'Oversight:OverFacebook'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1275,
			'NodeTree' => '36',
			'NodeParentID' => '1269',
			'NodeParentOrder' => '2',
			'NodeType' => 'Text',
			'NodePromptText' => 'Twitter URL <span class="slGreenLight fPerc66 mL10">Score+3</span>',
			'NodeDataStore' => 'Oversight:OverTwitter'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1276,
			'NodeTree' => '36',
			'NodeParentID' => '1269',
			'NodeParentOrder' => '3',
			'NodeType' => 'Text',
			'NodePromptText' => 'YouTube Channel URL <span class="slGreenLight fPerc66 mL10">Score+3</span>',
			'NodeDataStore' => 'Oversight:OverYouTube'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1277,
			'NodeTree' => '36',
			'NodeParentID' => '1269',
			'NodeParentOrder' => '4',
			'NodeType' => 'Email',
			'NodePromptText' => 'Department Main Email Address',
			'NodeDataStore' => 'Departments:DeptEmail'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1278,
			'NodeTree' => '36',
			'NodeParentID' => '1271',
			'NodeType' => 'Radio',
			'NodePromptText' => 'Link to Complaint Info from Home Page? <span class="slGreenLight fPerc66 mL10">Score+10</span>',
			'NodeDataStore' => 'Oversight:OverHomepageComplaintLink'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1279,
			'NodeTree' => '36',
			'NodeParentID' => '1271',
			'NodeParentOrder' => '1',
			'NodeType' => 'Text',
			'NodePromptText' => 'Complaint Info URL <span class="slGreenLight fPerc66 mL10">Score+14</span>',
			'NodeDataStore' => 'Oversight:OverWebComplaintInfo'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1280,
			'NodeTree' => '36',
			'NodeParentID' => '1271',
			'NodeParentOrder' => '2',
			'NodeType' => 'Text',
			'NodePromptText' => 'Complaint Form PDF <span class="slGreenLight fPerc66 mL10">Score+10</span>',
			'NodeDataStore' => 'Oversight:OverComplaintPDF'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1281,
			'NodeTree' => '36',
			'NodeParentID' => '2155',
			'NodeParentOrder' => '3',
			'NodeType' => 'Layout Row',
			'NodeCharLimit' => '3'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1282,
			'NodeTree' => '36',
			'NodeParentID' => '1281',
			'NodeType' => 'Layout Column',
			'NodeCharLimit' => '6'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1283,
			'NodeTree' => '36',
			'NodeParentID' => '1281',
			'NodeParentOrder' => '1',
			'NodeType' => 'Layout Column',
			'NodeCharLimit' => '1'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1284,
			'NodeTree' => '36',
			'NodeParentID' => '1281',
			'NodeParentOrder' => '2',
			'NodeType' => 'Layout Column',
			'NodeCharLimit' => '5'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1285,
			'NodeTree' => '36',
			'NodeParentID' => '1282',
			'NodeType' => 'Checkbox',
			'NodePromptText' => '<style> #node1285 { margin-top: -50px; } </style>'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1286,
			'NodeTree' => '36',
			'NodeParentID' => '1271',
			'NodeParentOrder' => '3',
			'NodeType' => 'Text',
			'NodePromptText' => 'Online-Submittable Complaint Form <span class="slGreenLight fPerc66 mL10">Score+20</span>',
			'NodePromptNotes' => '<div style="margin-top: -10px;">(<i>This is rare.</i> <a href="https://www.phillypolice.com/forms/official-complaint-form/" target="_blank"><i>Here\'s an example</i></a>.)</div>',
			'NodeDataStore' => 'Oversight:OverComplaintWebForm'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1287,
			'NodeTree' => '36',
			'NodeParentID' => '1284',
			'NodeType' => 'Checkbox',
			'NodePromptText' => '<style> #node1287 { margin-top: -50px; } </style>'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1288,
			'NodeTree' => '36',
			'NodeParentID' => '1287',
			'NodeType' => 'Text:Number',
			'NodePromptText' => 'Must be submitted within how many days of incident?',
			'NodePromptAfter' => '<style> #node1288 { margin: -30px 0px 0px 20px; } </style>',
			'NodeDataStore' => 'Oversight:OverSubmitDeadline'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1289,
			'NodeTree' => '36',
			'NodeParentID' => '1291',
			'NodeType' => 'Email',
			'NodePromptText' => 'Email Address <span class="fPerc66 slGrey mL10">If no general email, then the best person to email with complaints.</span>',
			'NodeDataStore' => 'Oversight:OverEmail'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1290,
			'NodeTree' => '36',
			'NodeParentID' => '2156',
			'NodeParentOrder' => '1',
			'NodeType' => 'Layout Row',
			'NodeCharLimit' => '1'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1291,
			'NodeTree' => '36',
			'NodeParentID' => '1290',
			'NodeType' => 'Layout Column',
			'NodeCharLimit' => '6'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1292,
			'NodeTree' => '36',
			'NodeParentID' => '1290',
			'NodeParentOrder' => '1',
			'NodeType' => 'Layout Column',
			'NodeCharLimit' => '1'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1293,
			'NodeTree' => '36',
			'NodeParentID' => '1290',
			'NodeParentOrder' => '2',
			'NodeType' => 'Layout Column',
			'NodeCharLimit' => '5'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1294,
			'NodeTree' => '36',
			'NodeParentID' => '1291',
			'NodeParentOrder' => '1',
			'NodeType' => 'Text',
			'NodePromptText' => 'Phone Number <span class="fPerc66 slGrey mL10">w/ extension</span>',
			'NodeDataStore' => 'Oversight:OverPhoneWork'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1295,
			'NodeTree' => '36',
			'NodeParentID' => '1291',
			'NodeParentOrder' => '2',
			'NodeType' => 'Text',
			'NodePromptText' => 'Street Address',
			'NodeDataStore' => 'Oversight:OverAddress'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1296,
			'NodeTree' => '36',
			'NodeParentID' => '1291',
			'NodeParentOrder' => '3',
			'NodeType' => 'Text',
			'NodePromptText' => 'Address Line 2',
			'NodeDataStore' => 'Oversight:OverAddress2'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1297,
			'NodeTree' => '36',
			'NodeParentID' => '1291',
			'NodeParentOrder' => '4',
			'NodeType' => 'Layout Row',
			'NodeCharLimit' => '3'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1298,
			'NodeTree' => '36',
			'NodeParentID' => '1297',
			'NodeType' => 'Layout Column',
			'NodeCharLimit' => '6'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1299,
			'NodeTree' => '36',
			'NodeParentID' => '1297',
			'NodeParentOrder' => '1',
			'NodeType' => 'Layout Column',
			'NodeCharLimit' => '3'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1300,
			'NodeTree' => '36',
			'NodeParentID' => '1297',
			'NodeParentOrder' => '2',
			'NodeType' => 'Layout Column',
			'NodeCharLimit' => '3'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1301,
			'NodeTree' => '36',
			'NodeParentID' => '1298',
			'NodeType' => 'Text',
			'NodePromptText' => 'City',
			'NodeDataStore' => 'Oversight:OverAddressCity'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1302,
			'NodeTree' => '36',
			'NodeParentID' => '1299',
			'NodeType' => 'U.S. States',
			'NodePromptText' => 'State',
			'NodeDataStore' => 'Oversight:OverAddressState'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1303,
			'NodeTree' => '36',
			'NodeParentID' => '1300',
			'NodeType' => 'Text',
			'NodePromptText' => 'Zip Code',
			'NodeDataStore' => 'Oversight:OverAddressZip'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1304,
			'NodeTree' => '36',
			'NodeParentID' => '1265',
			'NodeParentOrder' => '3',
			'NodeType' => 'Text',
			'NodePromptText' => 'Email Address <span class="fPerc66 slGrey mL10">If no general email, then the best person to email with complaints.</span>',
			'NodeDataStore' => 'Oversight:OverEmail',
			'NodeOpts' => '43'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1305,
			'NodeTree' => '36',
			'NodeParentID' => '1293',
			'NodeParentOrder' => '1',
			'NodeType' => 'Page Block'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1306,
			'NodeTree' => '36',
			'NodeParentID' => '1305',
			'NodeType' => 'Text',
			'NodePromptText' => 'First Name',
			'NodeDataStore' => 'Oversight:OverNameFirst'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1307,
			'NodeTree' => '36',
			'NodeParentID' => '1305',
			'NodeParentOrder' => '1',
			'NodeType' => 'Text',
			'NodePromptText' => 'Last Name',
			'NodeDataStore' => 'Oversight:OverNameLast'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1308,
			'NodeTree' => '36',
			'NodeParentID' => '1305',
			'NodeParentOrder' => '2',
			'NodeType' => 'Text',
			'NodePromptText' => 'Job Title',
			'NodeDataStore' => 'Oversight:OverTitle'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1309,
			'NodeTree' => '36',
			'NodeParentID' => '1305',
			'NodeParentOrder' => '3',
			'NodeType' => 'Text',
			'NodePromptText' => 'ID#',
			'NodeDataStore' => 'Oversight:OverIDnumber'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1310,
			'NodeTree' => '36',
			'NodeParentID' => '1264',
			'NodeParentOrder' => '2',
			'NodeType' => 'Layout Column',
			'NodeCharLimit' => '5'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1311,
			'NodeTree' => '36',
			'NodeParentID' => '1265',
			'NodeParentOrder' => '4',
			'NodeType' => 'Text',
			'NodePromptText' => 'Phone Number <span class="fPerc66 slGrey mL10">w/ extension</span>',
			'NodeDataStore' => 'Oversight:OverPhoneWork'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1312,
			'NodeTree' => '36',
			'NodeParentID' => '1223',
			'NodeParentOrder' => '3',
			'NodeType' => 'Data Manip: Wrap',
			'NodeResponseSet' => '302',
			'NodeDataBranch' => 'Oversight',
			'NodeDataStore' => 'Oversight:OverType'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1313,
			'NodeTree' => '36',
			'NodeParentID' => '1265',
			'NodeParentOrder' => '5',
			'NodeType' => 'Text',
			'NodePromptText' => 'Street Address',
			'NodeDataStore' => 'Oversight:OverAddress'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1314,
			'NodeTree' => '36',
			'NodeParentID' => '1265',
			'NodeParentOrder' => '6',
			'NodeType' => 'Text',
			'NodePromptText' => 'Address Line 2',
			'NodeDataStore' => 'Oversight:OverAddress2'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1315,
			'NodeTree' => '36',
			'NodeParentID' => '1265',
			'NodeParentOrder' => '7',
			'NodeType' => 'Layout Row',
			'NodeCharLimit' => '3'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1316,
			'NodeTree' => '36',
			'NodeParentID' => '1315',
			'NodeType' => 'Layout Column',
			'NodeCharLimit' => '6'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1317,
			'NodeTree' => '36',
			'NodeParentID' => '1315',
			'NodeParentOrder' => '1',
			'NodeType' => 'Layout Column',
			'NodeCharLimit' => '3'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1318,
			'NodeTree' => '36',
			'NodeParentID' => '1315',
			'NodeParentOrder' => '2',
			'NodeType' => 'Layout Column',
			'NodeCharLimit' => '3'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1319,
			'NodeTree' => '36',
			'NodeParentID' => '1229',
			'NodeType' => 'Page Block'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1320,
			'NodeTree' => '36',
			'NodeParentID' => '1316',
			'NodeType' => 'Text',
			'NodePromptText' => 'City',
			'NodeDataStore' => 'Oversight:OverAddressCity'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1321,
			'NodeTree' => '36',
			'NodeParentID' => '1317',
			'NodeType' => 'U.S. States',
			'NodePromptText' => 'State',
			'NodeDataStore' => 'Oversight:OverAddressState'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1322,
			'NodeTree' => '36',
			'NodeParentID' => '1318',
			'NodeType' => 'Text',
			'NodePromptText' => 'Zip Code',
			'NodeDataStore' => 'Oversight:OverAddressZip'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1323,
			'NodeTree' => '36',
			'NodeParentID' => '1265',
			'NodeParentOrder' => '1',
			'NodeType' => 'Checkbox',
			'NodePromptText' => 'Civilian Oversight Model(s)',
			'NodeResponseSet' => 'Definition::Civilian Oversight Models',
			'NodeDataStore' => 'OversightModels:OverModCivModel'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1324,
			'NodeTree' => '36',
			'NodeParentID' => '1265',
			'NodeParentOrder' => '2',
			'NodeType' => 'Text',
			'NodePromptText' => 'Website',
			'NodeDataStore' => 'Oversight:OverWebsite'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1325,
			'NodeTree' => '36',
			'NodeParentID' => '1267',
			'NodeParentOrder' => '1',
			'NodeType' => 'Text',
			'NodePromptText' => 'First Name',
			'NodeDataStore' => 'Oversight:OverNameFirst'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1326,
			'NodeTree' => '36',
			'NodeParentID' => '1267',
			'NodeParentOrder' => '2',
			'NodeType' => 'Text',
			'NodePromptText' => 'Last Name',
			'NodeDataStore' => 'Oversight:OverNameLast'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1327,
			'NodeTree' => '36',
			'NodeParentID' => '1267',
			'NodeParentOrder' => '3',
			'NodeType' => 'Text',
			'NodePromptText' => 'Job Title',
			'NodeDataStore' => 'Oversight:OverTitle'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1328,
			'NodeTree' => '36',
			'NodeParentID' => '1267',
			'NodeParentOrder' => '4',
			'NodeType' => 'Text',
			'NodePromptText' => 'ID #',
			'NodeDataStore' => 'Oversight:OverIDnumber'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1329,
			'NodeTree' => '36',
			'NodeParentID' => '1331',
			'NodeType' => 'Checkbox',
			'NodePromptText' => '<p>This page is being auto-saved in the background every minute. But please let us know what you helped with this round.</p>',
			'NodeOpts' => '5'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1330,
			'NodeTree' => '36',
			'NodeParentID' => '2158',
			'NodeParentOrder' => '1',
			'NodeType' => 'Layout Row',
			'NodeCharLimit' => '3'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1331,
			'NodeTree' => '36',
			'NodeParentID' => '1330',
			'NodeType' => 'Layout Column',
			'NodeCharLimit' => '6'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1332,
			'NodeTree' => '36',
			'NodeParentID' => '1330',
			'NodeParentOrder' => '1',
			'NodeType' => 'Layout Column',
			'NodeCharLimit' => '1'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1333,
			'NodeTree' => '36',
			'NodeParentID' => '1330',
			'NodeParentOrder' => '2',
			'NodeType' => 'Layout Column',
			'NodeCharLimit' => '5'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1334,
			'NodeTree' => '36',
			'NodeParentID' => '1333',
			'NodeType' => 'Long Text',
			'NodePromptText' => 'Got notes for other staff and volunteers?'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1335,
			'NodeTree' => '36',
			'NodeParentID' => '1333',
			'NodeParentOrder' => '1',
			'NodeType' => 'Drop Down',
			'NodePromptText' => 'What\'s Next After Saving?',
			'NodeDefault' => 'dept-page'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1338,
			'NodeTree' => '97',
			'NodeParentID' => '2161',
			'NodeParentOrder' => '1',
			'NodeType' => 'Instructions',
			'NodePromptText' => '[ $GLOBALS["SL"]-&gt;getBlurbAndSwap(\'Volunteer Checklist\') ]'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1339,
			'NodeTree' => '36',
			'NodeParentID' => '1222',
			'NodeParentOrder' => '1',
			'NodeType' => 'Page',
			'NodePromptNotes' => 'save-and-redirect',
			'NodePromptAfter' => 'Save & Redirect::M::::M::::M::'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1340,
			'NodeTree' => '36',
			'NodeParentID' => '1339',
			'NodeType' => 'Instructions',
			'NodePromptText' => '[ save & redirect ]'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1341,
			'NodeTree' => '36',
			'NodeParentID' => '1265',
			'NodeType' => 'Text',
			'NodePromptText' => '<h3 class="slBlueDark">Civilian Investigative Agency Name</h3>',
			'NodeDataStore' => 'Oversight:OverAgncName',
			'NodeOpts' => '5'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1342,
			'NodeTree' => '11',
			'NodeParentID' => '2097',
			'NodeType' => 'Instructions Raw'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1343,
			'NodeTree' => '39',
			'NodeType' => 'Page',
			'NodePromptNotes' => 'verify-next-department',
			'NodePromptAfter' => 'Verify Next Department::M::::M::::M::',
			'NodeCharLimit' => '-1'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1344,
			'NodeTree' => '39',
			'NodeParentID' => '1343',
			'NodeType' => 'Instructions Raw',
			'NodePromptText' => '[ Verify Next Department ] hard-coded via OpenDepts.php function redirNextDeptEdit'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1345,
			'NodeTree' => '40',
			'NodeType' => 'Page',
			'NodePromptNotes' => 'volunteer-stars',
			'NodePromptAfter' => 'Volunteer Stars::M::::M::::M::',
			'NodeCharLimit' => '-1'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1346,
			'NodeTree' => '40',
			'NodeParentID' => '1345',
			'NodeType' => 'Instructions Raw',
			'NodePromptText' => '[ Volunteer Stars ] hard-coded via OpenPartners.php function publicPartnerHeader, to view openpolice.nodes.1961-public-partner-header'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1347,
			'NodeTree' => '22',
			'NodeParentID' => '1776',
			'NodeType' => 'Instructions Raw',
			'NodePromptText' => '<a href="/dash/volunteer" class="btn btn-lg btn-primary w100"><span class="fPerc133">VOLUNTEER</span><br />to help create the best database of police department information <nobr>in the world!</nobr></a>'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1348,
			'NodeTree' => '22',
			'NodeParentID' => '1776',
			'NodeParentOrder' => '1',
			'NodeType' => 'Instructions Raw',
			'NodePromptText' => '<a href="/join-beta-test/profile">Share A New Story</a>',
			'NodePromptAfter' => '<style> #blockWrap[[nID]] { margin-bottom: 40px; } </style>'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1349,
			'NodeTree' => '11',
			'NodeParentID' => '2098',
			'NodeParentOrder' => '1',
			'NodeType' => 'Instructions Raw',
			'NodePromptText' => '[ Recent Volunteer Stats ]'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1350,
			'NodeTree' => '41',
			'NodeType' => 'Page',
			'NodePromptNotes' => 'volunteer-edits-history',
			'NodePromptAfter' => 'Volunteer Edits History::M::::M::::M::',
			'NodeCharLimit' => '-1'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1351,
			'NodeTree' => '41',
			'NodeParentID' => '1350',
			'NodeType' => 'Instructions Raw',
			'NodePromptText' => '[ Volunteer Edits History ] hard-coded via OpenDashAdmin.php function volunDepts, to view openpolice.nodes.1351-admin-volun-edit-history'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1352,
			'NodeTree' => '11',
			'NodeParentID' => '791',
			'NodeParentOrder' => '1',
			'NodeType' => 'Layout Row',
			'NodeCharLimit' => '2'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1353,
			'NodeTree' => '11',
			'NodeParentID' => '1352',
			'NodeType' => 'Layout Column',
			'NodeCharLimit' => '7'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1354,
			'NodeTree' => '11',
			'NodeParentID' => '1352',
			'NodeParentOrder' => '1',
			'NodeType' => 'Layout Column',
			'NodeCharLimit' => '5'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1355,
			'NodeTree' => '11',
			'NodeParentID' => '791',
			'NodeParentOrder' => '2',
			'NodeType' => 'Layout Row',
			'NodeCharLimit' => '2'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1356,
			'NodeTree' => '11',
			'NodeParentID' => '1355',
			'NodeType' => 'Layout Column',
			'NodeCharLimit' => '7'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1357,
			'NodeTree' => '11',
			'NodeParentID' => '1355',
			'NodeParentOrder' => '1',
			'NodeType' => 'Layout Column',
			'NodeCharLimit' => '5'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1358,
			'NodeTree' => '11',
			'NodeParentID' => '2098',
			'NodeType' => 'Instructions Raw',
			'NodePromptText' => '<div class="mB10"><h2 class="slBlueDark"><i class="fa fa-users"></i> Department Data Mining Stats</h2></div>'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1359,
			'NodeTree' => '11',
			'NodeParentID' => '2344',
			'NodeParentOrder' => '1',
			'NodeType' => 'Instructions Raw',
			'NodePromptText' => '[[ Daily Usage Graph ]]'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1361,
			'NodeTree' => '11',
			'NodeParentID' => '2096',
			'NodeType' => 'Instructions Raw'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1362,
			'NodeTree' => '42',
			'NodeType' => 'Page',
			'NodePromptNotes' => 'complaint',
			'NodePromptAfter' => 'Complaint #[[corePubID]]::M::::M::::M::',
			'NodeResponseSet' => '1',
			'NodeDataBranch' => 'Complaints',
			'NodeCharLimit' => '-1'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1363,
			'NodeTree' => '42',
			'NodeParentID' => '2336',
			'NodeType' => 'Instructions Raw',
			'NodePromptText' => '<div class="pT5"> </div><div class="alert alert-primary w100" style="padding: 10px 15px;">The events described here are allegations, which may or may not be factually accurate.</div>'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1364,
			'NodeTree' => '42',
			'NodeParentID' => '2336',
			'NodeParentOrder' => '1',
			'NodeType' => 'Instructions Raw',
			'NodePromptText' => '<div class="pT5"> </div><div class="alert alert-primary fade in alert-dismissible show" style="padding: 10px 15px;">The events described here are allegations, which may or may not be factually accurate. We do not know if this complaint has been investigated yet.</div>'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1365,
			'NodeTree' => '42',
			'NodeParentID' => '1719',
			'NodeParentOrder' => '1',
			'NodeType' => 'Instructions Raw',
			'NodePromptText' => '<div class="alert alert-warning fade in alert-dismissible show" style="padding: 10px 15px;">We are reviewing this complaint. If there are no problems, we will try to file it with the department\'s investigative agency. Once it has been submitted, we can publish the complete report.</div>'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1366,
			'NodeTree' => '42',
			'NodeParentID' => '2336',
			'NodeParentOrder' => '3',
			'NodeType' => 'Instructions Raw',
			'NodePromptText' => '<div class="pT5"> </div><div class="alert alert-warning fade in alert-dismissible show" style="padding: 10px 15px;">We are reviewing this complaint. If there are no problems, we will try to file it with the department\'s investigative agency.</div>'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1367,
			'NodeTree' => '42',
			'NodeParentID' => '1719',
			'NodeParentOrder' => '2',
			'NodeType' => 'Instructions Raw',
			'NodePromptText' => '<div class="alert alert-danger fade in alert-dismissible show" style="padding: 10px 15px;">We are waiting for the user to confirm that they submitted it to the department\'s investigative agency. Only then can we publish the complete report.</div>'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1373,
			'NodeTree' => '42',
			'NodeParentID' => '1479',
			'NodeType' => 'Data Print',
			'NodePromptText' => '<h3 class="slBlueDark">Story</h3>',
			'NodeInternalNotes' => '[ Story Narrative ] hard-coded via OpenReport.php function reportStory',
			'NodeDataStore' => 'Complaints:ComSummary'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1374,
			'NodeTree' => '42',
			'NodeParentID' => '2326',
			'NodeType' => 'Data Print',
			'NodePromptText' => '<h3 class="slBlueDark">Allegations</h3>',
			'NodeInternalNotes' => '[ Allegations List ] hard-coded via OpenReport.php function reportAllegsWhy',
			'NodeDataStore' => 'Complaints:ComAllegList'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1382,
			'NodeTree' => '42',
			'NodeParentID' => '1718',
			'NodeType' => 'Data Print',
			'NodePromptText' => 'Department Involved',
			'NodeInternalNotes' => 'with OpenReport.php function getReportDept',
			'NodeDataStore' => 'Departments:DeptName'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1384,
			'NodeTree' => '42',
			'NodeParentID' => '1466',
			'NodeParentOrder' => '1',
			'NodeType' => 'Data Print Block',
			'NodeDataBranch' => 'Incidents'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1385,
			'NodeTree' => '42',
			'NodeParentID' => '1362',
			'NodeParentOrder' => '4',
			'NodeType' => 'Page Block'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1413,
			'NodeTree' => '43',
			'NodeType' => 'Page',
			'NodePromptNotes' => 'partner-dash',
			'NodePromptAfter' => 'Partner Dashboard::M::::M::::M::'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1414,
			'NodeTree' => '43',
			'NodeParentID' => '1413',
			'NodeType' => 'Instructions',
			'NodePromptText' => '<center><h1 style="margin-top: 50px;">Coming Soon</h1></center>'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1415,
			'NodeTree' => '45',
			'NodeType' => 'Page',
			'NodePromptNotes' => 'staff-dash',
			'NodePromptAfter' => 'Staff Dashboard::M::::M::::M::'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1416,
			'NodeTree' => '45',
			'NodeParentID' => '1415',
			'NodeType' => 'Instructions',
			'NodePromptText' => '<center><h1 style="margin-top: 50px;">Coming Soon</h1></center>'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1417,
			'NodeTree' => '44',
			'NodeType' => 'Page',
			'NodePromptNotes' => 'all-complete-complaints',
			'NodePromptAfter' => 'All Complete Complaints::M::::M::::M::',
			'NodeResponseSet' => '1',
			'NodeDataBranch' => 'Complaints',
			'NodeCharLimit' => '-1'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1418,
			'NodeTree' => '44',
			'NodeParentID' => '2152',
			'NodeType' => 'Instructions Raw',
			'NodePromptText' => '[ All Complete Complaints ] hard-coded via OpenListing.php function printComplaintListing, to view openpolice.nodes.1418-admin-complaints-listing'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1419,
			'NodeTree' => '46',
			'NodeType' => 'Page',
			'NodePromptNotes' => 'all-incomplete-complaints',
			'NodePromptAfter' => 'All Incomplete Complaints::M::::M::::M::',
			'NodeCharLimit' => '-1'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1420,
			'NodeTree' => '46',
			'NodeParentID' => '2153',
			'NodeType' => 'Instructions Raw',
			'NodePromptText' => '[ All Incomplete Complaints ] hard-coded via OpenListing.php function printComplaintListing, to view openpolice.nodes.1418-admin-complaints-listing'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1421,
			'NodeTree' => '1',
			'NodeParentID' => '2128',
			'NodeType' => 'Page',
			'NodePromptNotes' => 'adding-a-vehicle',
			'NodePromptAfter' => 'Adding A Vehicle::M::::M::::M::'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1426,
			'NodeTree' => '1',
			'NodeParentID' => '1421',
			'NodeParentOrder' => '3',
			'NodeType' => 'Text',
			'NodePromptText' => 'Vehicle Make',
			'NodeDataStore' => 'Vehicles:VehicVehicleMake'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1427,
			'NodeTree' => '1',
			'NodeParentID' => '1421',
			'NodeParentOrder' => '4',
			'NodeType' => 'Text',
			'NodePromptText' => 'Vehicle Model',
			'NodeDataStore' => 'Vehicles:VehicVehicleModel'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1429,
			'NodeTree' => '1',
			'NodeParentID' => '1421',
			'NodeParentOrder' => '6',
			'NodeType' => 'Text',
			'NodePromptText' => '<nobr>License Number</nobr>',
			'NodeDataStore' => 'Vehicles:VehicVehicleLicence'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1430,
			'NodeTree' => '1',
			'NodeParentID' => '2141',
			'NodeType' => 'Radio',
			'NodePromptText' => 'Was this an <span class="slBlueDark">unmarked or undercover</span> police vehicle? That means it looks like a normal vehicle with no badges, graphics, or visible police lights.',
			'NodeDataStore' => 'Vehicles:VehicUnmarked'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1431,
			'NodeTree' => '1',
			'NodeParentID' => '1421',
			'NodeParentOrder' => '1',
			'NodeType' => 'Drop Down',
			'NodePromptText' => '<nobr>Type of Vehicle</nobr>',
			'NodePromptAfter' => '<style> #node[[nID]] { margin-top: -20px; } </style>',
			'NodeResponseSet' => 'Definition::Transportation',
			'NodeDataStore' => 'Vehicles:VehicTransportation'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1432,
			'NodeTree' => '1',
			'NodeParentID' => '1421',
			'NodeParentOrder' => '5',
			'NodeType' => 'Text',
			'NodePromptText' => 'Description',
			'NodeDataStore' => 'Vehicles:VehicVehicleDesc'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1434,
			'NodeTree' => '1',
			'NodeParentID' => '1430',
			'NodeType' => 'Text',
			'NodePromptText' => 'Vehicle Number',
			'NodeDataStore' => 'Vehicles:VehicVehicleNumber'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1437,
			'NodeTree' => '22',
			'NodeParentID' => '2048',
			'NodeParentOrder' => '1',
			'NodeType' => 'Page Block',
			'NodePromptText' => '<br>'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1441,
			'NodeTree' => '1',
			'NodeParentID' => '566',
			'NodeType' => 'Data Manip: Wrap',
			'NodeDefault' => 'Y',
			'NodeDataBranch' => 'Civilians',
			'NodeDataStore' => 'Civilians:CivIsCreator'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1444,
			'NodeTree' => '1',
			'NodeParentID' => '1163',
			'NodeType' => 'Layout Sub-Response',
			'NodeDataBranch' => 'Injuries'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1445,
			'NodeTree' => '47',
			'NodeType' => 'Page',
			'NodePromptNotes' => 'volunteer',
			'NodePromptAfter' => 'Volunteer with OpenPolice.org::M::You can help build the nation\\'s most powerful database of police complaints. Youï¿½ll help build a national open-source directory of police department contact information.::M::Open Police, OpenPolice.org, Open Police Complaints, Police Departments, Cops, Police, Officers, file complaint, submit, victims, accountability, oversight, open source, transparency, volunteer, database::M::',
			'NodeCharLimit' => '-1'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1452,
			'NodeTree' => '47',
			'NodeParentID' => '1445',
			'NodeType' => 'Instructions',
			'NodePromptText' => '<p>&nbsp;</p>\r\n<h2 class=\"slBlueDark\">Please Volunteer To Help OpenPolice.org</h2>\r\n<h4>You can help build the nation\\'s most powerful database of police complaints.</h4>\r\n<p></p>\r\n<p><b>Your research will do three important things:</b></p><ol>\r\n<li>Youï¿½ll help build a national open-source directory of police department contact information.</li><li>The up-to-date directory will help OpenPolice.org users file complaints the right way with the right department.</li><li>Your research will reveal a ï¿½Complaints Accessibility Scoreï¿½ for each department. This score shows how easy or difficult it is for people to share complaints with departments.</li></ol><h4>Thank you for helping to make OpenPolice.org stronger!</h4>\n<p>&nbsp;</p>',
			'NodeOpts' => '67'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1453,
			'NodeTree' => '48',
			'NodeType' => 'Page',
			'NodePromptNotes' => 'departments',
			'NodePromptAfter' => 'Departments::M::::M::::M::',
			'NodeCharLimit' => '-1'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1454,
			'NodeTree' => '48',
			'NodeParentID' => '1453',
			'NodeType' => 'Instructions Raw',
			'NodePromptText' => '[ Departments Overview ] hard-coded via OpenDepts.php function printDeptOverPublic, to view openpolice.nodes.859-depts-overview-public'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1455,
			'NodeTree' => '49',
			'NodeType' => 'Page',
			'NodePromptNotes' => 'oversight',
			'NodePromptAfter' => 'Investigative Agencies::M::::M::::M::',
			'NodeCharLimit' => '-1'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1456,
			'NodeTree' => '49',
			'NodeParentID' => '1455',
			'NodeType' => 'Instructions',
			'NodePromptText' => '<h2><br></h2><h2>Investigative Agencies Overview<br></h2>
<p>Coming back real soon!<br></p>'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1457,
			'NodeTree' => '50',
			'NodeType' => 'Page',
			'NodePromptNotes' => 'officers',
			'NodePromptAfter' => 'Officers::M::::M::::M::',
			'NodeCharLimit' => '-1'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1458,
			'NodeTree' => '50',
			'NodeParentID' => '1457',
			'NodeType' => 'Instructions',
			'NodePromptText' => '<h2><br></h2><h2>Police Officers Overview<br></h2>
<p>Coming back real soon!<br></p>'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1459,
			'NodeTree' => '51',
			'NodeType' => 'Page',
			'NodePromptNotes' => 'attorneys',
			'NodePromptAfter' => 'Attorneys::M::::M::::M::',
			'NodeCharLimit' => '-1'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1460,
			'NodeTree' => '51',
			'NodeParentID' => '1459',
			'NodeType' => 'Instructions',
			'NodePromptText' => '<h2><br></h2><h2>Attorneys Overview<br></h2>
<p>Coming back real soon!<br></p>'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1461,
			'NodeTree' => '52',
			'NodeType' => 'Page',
			'NodePromptNotes' => 'complaint-review',
			'NodePromptAfter' => 'Complaint Review::M::::M::::M::',
			'NodeResponseSet' => '1',
			'NodeCharLimit' => '-1'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1462,
			'NodeTree' => '52',
			'NodeParentID' => '1461',
			'NodeType' => 'Instructions',
			'NodePromptText' => '<h2>Welcome to Complaint Review.</h2>
<p>Edit this node to fill in your page! This node could be your entire page, or just one little component.</p>'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1465,
			'NodeTree' => '42',
			'NodeParentID' => '1750',
			'NodeParentOrder' => '1',
			'NodeType' => 'Instructions Raw',
			'NodePromptText' => '<div class=\"pT5\">ï¿½</div>',
			'NodePromptAfter' => '<style>
#node2326kids { margin-bottom: -20px; }
#repNode1384 { margin-top: 30px; }
#deferAnim2632, #deferAnim2633, #deferAnim2634 { padding: 0px; margin: 0px; }
#deferAnim2632 div.w100, #deferAnim2633 div.w100, #deferAnim2634 div.w100 { padding: 0px; margin-bottom: -5px; }
</style>
<script type="text/javascript">
function checkIncBlock() {
if (document.getElementById("col2328") && document.getElementById("col2338")) {
document.getElementById("col2328").className = "col-lg-6";
document.getElementById("col2338").className = "col-lg-6";
}
}
setTimeout("checkIncBlock()", 100);
</script>'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1466,
			'NodeTree' => '42',
			'NodeParentID' => '1750',
			'NodeParentOrder' => '3',
			'NodeType' => 'Page Block',
			'NodeOpts' => '89'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1467,
			'NodeTree' => '42',
			'NodeParentID' => '2330',
			'NodeParentOrder' => '1',
			'NodeType' => 'Print Vert Progress'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1468,
			'NodeTree' => '42',
			'NodeParentID' => '1470',
			'NodeType' => 'Instructions Raw',
			'NodePromptText' => '[ Subject Header ] hard-coded via OpenReport.php function getCivReportNameHeader'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1469,
			'NodeTree' => '42',
			'NodeParentID' => '1750',
			'NodeParentOrder' => '9',
			'NodeType' => 'Loop Cycle',
			'NodeResponseSet' => 'LoopItems::Civilians',
			'NodeDataBranch' => 'Civilians'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1470,
			'NodeTree' => '42',
			'NodeParentID' => '1469',
			'NodeType' => 'Page Block',
			'NodeOpts' => '89'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1473,
			'NodeTree' => '42',
			'NodeParentID' => '1470',
			'NodeParentOrder' => '1',
			'NodeType' => 'Data Print Columns'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1474,
			'NodeTree' => '42',
			'NodeParentID' => '1750',
			'NodeParentOrder' => '10',
			'NodeType' => 'Loop Cycle',
			'NodePromptText' => '<div class="p20"> </div>',
			'NodeResponseSet' => 'LoopItems::Officers',
			'NodeDataBranch' => 'Officers'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1475,
			'NodeTree' => '42',
			'NodeParentID' => '1474',
			'NodeType' => 'Page Block',
			'NodeOpts' => '89'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1476,
			'NodeTree' => '42',
			'NodeParentID' => '1475',
			'NodeType' => 'Instructions Raw',
			'NodePromptText' => '[ Officer Header ] hard-coded via OpenReport.php function getOffReportNameHeader'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1477,
			'NodeTree' => '42',
			'NodeParentID' => '1475',
			'NodeParentOrder' => '1',
			'NodeType' => 'Data Print Columns'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1478,
			'NodeTree' => '42',
			'NodeParentID' => '1512',
			'NodeType' => 'Data Print Row',
			'NodeInternalNotes' => 'with OpenReport.php function getCivSnstvFldsNotPrinted'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1479,
			'NodeTree' => '42',
			'NodeParentID' => '1750',
			'NodeParentOrder' => '5',
			'NodeType' => 'Page Block',
			'NodeOpts' => '89'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1480,
			'NodeTree' => '42',
			'NodeParentID' => '1513',
			'NodeParentOrder' => '1',
			'NodeType' => 'Data Print Row',
			'NodeDataStore' => 'PhysicalDescRace:PhysRaceRace'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1481,
			'NodeTree' => '42',
			'NodeParentID' => '1513',
			'NodeParentOrder' => '2',
			'NodeType' => 'Data Print Row',
			'NodeDataStore' => 'PhysicalDesc:PhysGender'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1482,
			'NodeTree' => '42',
			'NodeParentID' => '1513',
			'NodeParentOrder' => '3',
			'NodeType' => 'Data Print Row',
			'NodeDataStore' => 'PhysicalDesc:PhysGenderOther'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1483,
			'NodeTree' => '42',
			'NodeParentID' => '1512',
			'NodeParentOrder' => '9',
			'NodeType' => 'Data Print Row',
			'NodeDataStore' => 'PersonContact:PrsnBirthday'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1484,
			'NodeTree' => '42',
			'NodeParentID' => '1513',
			'NodeType' => 'Data Print Row',
			'NodeDataStore' => 'PhysicalDesc:PhysAge'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1485,
			'NodeTree' => '42',
			'NodeParentID' => '1473',
			'NodeParentOrder' => '3',
			'NodeType' => 'Data Print Row',
			'NodeDataStore' => 'Civilians:CivOccupation'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1486,
			'NodeTree' => '42',
			'NodeParentID' => '1513',
			'NodeParentOrder' => '4',
			'NodeType' => 'Data Print Row',
			'NodeDataStore' => 'PhysicalDesc:PhysHeight'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1487,
			'NodeTree' => '42',
			'NodeParentID' => '1513',
			'NodeParentOrder' => '5',
			'NodeType' => 'Data Print Row',
			'NodeDataStore' => 'PhysicalDesc:PhysBodyType'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1488,
			'NodeTree' => '42',
			'NodeParentID' => '1513',
			'NodeParentOrder' => '6',
			'NodeType' => 'Data Print Row',
			'NodeDataStore' => 'PhysicalDesc:PhysGeneralDesc'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1489,
			'NodeTree' => '42',
			'NodeParentID' => '1490',
			'NodeType' => 'Loop Cycle',
			'NodeResponseSet' => 'LoopItems::Civilian Vehicles',
			'NodeDataBranch' => 'Vehicles'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1490,
			'NodeTree' => '42',
			'NodeParentID' => '1750',
			'NodeParentOrder' => '11',
			'NodeType' => 'Page Block',
			'NodeOpts' => '89'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1492,
			'NodeTree' => '42',
			'NodeParentID' => '1493',
			'NodeType' => 'Data Print Row',
			'NodeDataStore' => 'Vehicles:VehicTransportation'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1493,
			'NodeTree' => '42',
			'NodeParentID' => '1489',
			'NodeType' => 'Data Print Columns',
			'NodePromptText' => 'Civilian Vehicle #[LoopItemCnt]'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1494,
			'NodeTree' => '42',
			'NodeParentID' => '1742',
			'NodeParentOrder' => '1',
			'NodeType' => 'Data Print Row',
			'NodeDataStore' => 'Vehicles:VehicUnmarked'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1495,
			'NodeTree' => '42',
			'NodeParentID' => '1493',
			'NodeParentOrder' => '1',
			'NodeType' => 'Data Print Row',
			'NodeDataStore' => 'Vehicles:VehicVehicleMake'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1496,
			'NodeTree' => '42',
			'NodeParentID' => '1493',
			'NodeParentOrder' => '2',
			'NodeType' => 'Data Print Row',
			'NodeDataStore' => 'Vehicles:VehicVehicleModel'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1497,
			'NodeTree' => '42',
			'NodeParentID' => '1493',
			'NodeParentOrder' => '3',
			'NodeType' => 'Data Print Row',
			'NodeDataStore' => 'Vehicles:VehicVehicleDesc'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1498,
			'NodeTree' => '42',
			'NodeParentID' => '1493',
			'NodeParentOrder' => '4',
			'NodeType' => 'Data Print Row',
			'NodeDataStore' => 'Vehicles:VehicVehicleLicence'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1499,
			'NodeTree' => '42',
			'NodeParentID' => '1742',
			'NodeParentOrder' => '3',
			'NodeType' => 'Data Print Row',
			'NodeDataStore' => 'Vehicles:VehicVehicleNumber'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1500,
			'NodeTree' => '42',
			'NodeParentID' => '1473',
			'NodeParentOrder' => '5',
			'NodeType' => 'Data Print Row',
			'NodeDataStore' => 'Civilians:CivCameraRecord'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1501,
			'NodeTree' => '42',
			'NodeParentID' => '1473',
			'NodeParentOrder' => '13',
			'NodeType' => 'Loop Cycle',
			'NodeResponseSet' => 'LoopItems::Injuries',
			'NodeDataBranch' => 'Injuries'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1502,
			'NodeTree' => '42',
			'NodeParentID' => '1501',
			'NodeType' => 'Data Print Row',
			'NodeDataStore' => 'Injuries:InjType'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1503,
			'NodeTree' => '42',
			'NodeParentID' => '1501',
			'NodeParentOrder' => '2',
			'NodeType' => 'Data Print Row',
			'NodeDataStore' => 'Injuries:InjDescription'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1504,
			'NodeTree' => '42',
			'NodeParentID' => '1473',
			'NodeParentOrder' => '16',
			'NodeType' => 'Data Print Row',
			'NodeDataStore' => 'Charges:ChrgCharges'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1505,
			'NodeTree' => '42',
			'NodeParentID' => '1512',
			'NodeParentOrder' => '1',
			'NodeType' => 'Data Print Row',
			'NodeInternalNotes' => 'with OpenReport.php function getCivReportNameRow',
			'NodeDataStore' => 'PersonContact:PrsnNameFirst'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1506,
			'NodeTree' => '42',
			'NodeParentID' => '1512',
			'NodeParentOrder' => '3',
			'NodeType' => 'Data Print Row',
			'NodeInternalNotes' => 'with OpenReport.php function getCivReportNameRow',
			'NodeDataStore' => 'PersonContact:PrsnNameLast'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1507,
			'NodeTree' => '42',
			'NodeParentID' => '1512',
			'NodeParentOrder' => '4',
			'NodeType' => 'Data Print Row',
			'NodeInternalNotes' => 'with OpenReport.php function getCivReportNameRow',
			'NodeDataStore' => 'PersonContact:PrsnNickname'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1508,
			'NodeTree' => '42',
			'NodeParentID' => '1512',
			'NodeParentOrder' => '5',
			'NodeType' => 'Data Print Row',
			'NodeDataStore' => 'PersonContact:PrsnEmail'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1509,
			'NodeTree' => '42',
			'NodeParentID' => '1512',
			'NodeParentOrder' => '6',
			'NodeType' => 'Data Print Row',
			'NodeDataStore' => 'PersonContact:PrsnFacebook'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1510,
			'NodeTree' => '42',
			'NodeParentID' => '1512',
			'NodeParentOrder' => '7',
			'NodeType' => 'Data Print Row',
			'NodeDataStore' => 'PersonContact:PrsnPhoneHome'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1511,
			'NodeTree' => '42',
			'NodeParentID' => '1512',
			'NodeParentOrder' => '8',
			'NodeType' => 'Data Print Row',
			'NodeInternalNotes' => 'with OpenReport.php function reportCivAddy',
			'NodeDataStore' => 'PersonContact:PrsnAddress'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1512,
			'NodeTree' => '42',
			'NodeParentID' => '1473',
			'NodeParentOrder' => '1',
			'NodeType' => 'Data Manip: Wrap',
			'NodeDataBranch' => 'PersonContact'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1513,
			'NodeTree' => '42',
			'NodeParentID' => '1473',
			'NodeParentOrder' => '2',
			'NodeType' => 'Data Manip: Wrap',
			'NodeDataBranch' => 'PhysicalDesc'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1514,
			'NodeTree' => '42',
			'NodeParentID' => '1477',
			'NodeType' => 'Data Manip: Wrap',
			'NodeDataBranch' => 'PersonContact'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1515,
			'NodeTree' => '42',
			'NodeParentID' => '1477',
			'NodeParentOrder' => '5',
			'NodeType' => 'Data Manip: Wrap',
			'NodeDataBranch' => 'PhysicalDesc'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1516,
			'NodeTree' => '42',
			'NodeParentID' => '1514',
			'NodeParentOrder' => '1',
			'NodeType' => 'Data Print Row',
			'NodeDataStore' => 'PersonContact:PrsnNameFirst'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1517,
			'NodeTree' => '42',
			'NodeParentID' => '1514',
			'NodeParentOrder' => '3',
			'NodeType' => 'Data Print Row',
			'NodeDataStore' => 'PersonContact:PrsnNameLast'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1518,
			'NodeTree' => '42',
			'NodeParentID' => '1514',
			'NodeParentOrder' => '5',
			'NodeType' => 'Data Print Row',
			'NodeDataStore' => 'Officers:OffBadgeNumber'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1519,
			'NodeTree' => '42',
			'NodeParentID' => '1514',
			'NodeType' => 'Data Print Row',
			'NodeInternalNotes' => 'with OpenReport.php function getOffSnstvFldsNotPrinted'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1520,
			'NodeTree' => '42',
			'NodeParentID' => '1521',
			'NodeType' => 'Data Print Row',
			'NodeDataStore' => 'Departments:DeptName'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1521,
			'NodeTree' => '42',
			'NodeParentID' => '1477',
			'NodeParentOrder' => '1',
			'NodeType' => 'Data Manip: Wrap',
			'NodeDataBranch' => 'LinksComplaintDept'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1522,
			'NodeTree' => '42',
			'NodeParentID' => '1514',
			'NodeParentOrder' => '6',
			'NodeType' => 'Data Print Row',
			'NodeDataStore' => 'Officers:OffIDnumber'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1523,
			'NodeTree' => '42',
			'NodeParentID' => '1514',
			'NodeParentOrder' => '7',
			'NodeType' => 'Data Print Row',
			'NodeDataStore' => 'Officers:OffPrecinct'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1524,
			'NodeTree' => '42',
			'NodeParentID' => '1514',
			'NodeParentOrder' => '8',
			'NodeType' => 'Data Print Row',
			'NodeDataStore' => 'Officers:OffOfficerRank'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1525,
			'NodeTree' => '42',
			'NodeParentID' => '1477',
			'NodeParentOrder' => '2',
			'NodeType' => 'Data Print Row',
			'NodeDataStore' => 'Officers:OffRole'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1526,
			'NodeTree' => '42',
			'NodeParentID' => '1515',
			'NodeParentOrder' => '1',
			'NodeType' => 'Data Print Row',
			'NodeDataStore' => 'PhysicalDescRace:PhysRaceRace'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1527,
			'NodeTree' => '42',
			'NodeParentID' => '1515',
			'NodeParentOrder' => '2',
			'NodeType' => 'Data Print Row',
			'NodeDataStore' => 'PhysicalDesc:PhysGender'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1528,
			'NodeTree' => '42',
			'NodeParentID' => '1515',
			'NodeParentOrder' => '3',
			'NodeType' => 'Data Print Row',
			'NodeDataStore' => 'PhysicalDesc:PhysHeight'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1529,
			'NodeTree' => '42',
			'NodeParentID' => '1515',
			'NodeParentOrder' => '4',
			'NodeType' => 'Data Print Row',
			'NodeDataStore' => 'PhysicalDesc:PhysBodyType'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1531,
			'NodeTree' => '42',
			'NodeParentID' => '1477',
			'NodeParentOrder' => '6',
			'NodeType' => 'Data Print Row',
			'NodeDataStore' => 'Officers:OffBodyCam'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1532,
			'NodeTree' => '42',
			'NodeParentID' => '1750',
			'NodeParentOrder' => '12',
			'NodeType' => 'Page Block',
			'NodeOpts' => '89'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1533,
			'NodeTree' => '42',
			'NodeParentID' => '1532',
			'NodeType' => 'Data Print Columns',
			'NodePromptText' => 'What Happened'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1534,
			'NodeTree' => '42',
			'NodeParentID' => '1533',
			'NodeType' => 'Data Manip: Wrap',
			'NodeDataBranch' => 'Scenes'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1535,
			'NodeTree' => '42',
			'NodeParentID' => '1534',
			'NodeType' => 'Data Print Row',
			'NodeDataStore' => 'Scenes:ScnType'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1536,
			'NodeTree' => '42',
			'NodeParentID' => '1534',
			'NodeParentOrder' => '1',
			'NodeType' => 'Data Print Row',
			'NodeDataStore' => 'Scenes:ScnDescription'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1537,
			'NodeTree' => '42',
			'NodeParentID' => '1534',
			'NodeParentOrder' => '3',
			'NodeType' => 'Data Print Row',
			'NodeDataStore' => 'Scenes:ScnIsVehicle'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1538,
			'NodeTree' => '42',
			'NodeParentID' => '1534',
			'NodeParentOrder' => '5',
			'NodeType' => 'Data Print Row',
			'NodeDataStore' => 'Scenes:ScnCCTV'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1539,
			'NodeTree' => '42',
			'NodeParentID' => '1534',
			'NodeParentOrder' => '6',
			'NodeType' => 'Data Print Row',
			'NodeDataStore' => 'Scenes:ScnCCTVDesc'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1540,
			'NodeTree' => '42',
			'NodeParentID' => '1533',
			'NodeParentOrder' => '1',
			'NodeType' => 'Data Manip: Wrap',
			'NodeDataBranch' => 'AllegSilver'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1541,
			'NodeTree' => '42',
			'NodeParentID' => '1540',
			'NodeType' => 'Data Print Row',
			'NodeDataStore' => 'AllegSilver:AlleSilStopYN'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1542,
			'NodeTree' => '42',
			'NodeParentID' => '1540',
			'NodeParentOrder' => '1',
			'NodeType' => 'Data Print Row',
			'NodeDataStore' => 'AllegSilver:AlleSilStopWrongful'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1543,
			'NodeTree' => '42',
			'NodeParentID' => '1540',
			'NodeParentOrder' => '2',
			'NodeType' => 'Data Print Row',
			'NodeDataStore' => 'AllegSilver:AlleSilOfficerID'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1544,
			'NodeTree' => '42',
			'NodeParentID' => '1540',
			'NodeParentOrder' => '3',
			'NodeType' => 'Data Print Row',
			'NodeDataStore' => 'AllegSilver:AlleSilOfficerRefuseID'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1545,
			'NodeTree' => '42',
			'NodeParentID' => '1540',
			'NodeParentOrder' => '4',
			'NodeType' => 'Data Print Row',
			'NodeDataStore' => 'AllegSilver:AlleSilSearchYN'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1546,
			'NodeTree' => '42',
			'NodeParentID' => '1540',
			'NodeParentOrder' => '5',
			'NodeType' => 'Data Print Row',
			'NodeDataStore' => 'AllegSilver:AlleSilSearchWrongful'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1547,
			'NodeTree' => '42',
			'NodeParentID' => '1540',
			'NodeParentOrder' => '6',
			'NodeType' => 'Data Print Row',
			'NodeDataStore' => 'AllegSilver:AlleSilPropertyYN'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1548,
			'NodeTree' => '42',
			'NodeParentID' => '1540',
			'NodeParentOrder' => '7',
			'NodeType' => 'Data Print Row',
			'NodeDataStore' => 'AllegSilver:AlleSilPropertyWrongful'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1549,
			'NodeTree' => '42',
			'NodeParentID' => '1540',
			'NodeParentOrder' => '8',
			'NodeType' => 'Data Print Row',
			'NodeDataStore' => 'AllegSilver:AlleSilPropertyDamage'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1550,
			'NodeTree' => '42',
			'NodeParentID' => '1540',
			'NodeParentOrder' => '9',
			'NodeType' => 'Data Print Row',
			'NodeDataStore' => 'AllegSilver:AlleSilSexualHarass'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1551,
			'NodeTree' => '42',
			'NodeParentID' => '1540',
			'NodeParentOrder' => '10',
			'NodeType' => 'Data Print Row',
			'NodeDataStore' => 'AllegSilver:AlleSilSexualAssault'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1552,
			'NodeTree' => '42',
			'NodeParentID' => '1540',
			'NodeParentOrder' => '11',
			'NodeType' => 'Data Print Row',
			'NodeDataStore' => 'AllegSilver:AlleSilForceYN'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1553,
			'NodeTree' => '42',
			'NodeParentID' => '1540',
			'NodeParentOrder' => '12',
			'NodeType' => 'Data Print Row',
			'NodeDataStore' => 'AllegSilver:AlleSilForceUnreason'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1554,
			'NodeTree' => '42',
			'NodeParentID' => '1540',
			'NodeParentOrder' => '13',
			'NodeType' => 'Data Print Row',
			'NodeDataStore' => 'AllegSilver:AlleSilArrestYN'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1555,
			'NodeTree' => '42',
			'NodeParentID' => '1540',
			'NodeParentOrder' => '14',
			'NodeType' => 'Data Print Row',
			'NodeDataStore' => 'AllegSilver:AlleSilArrestWrongful'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1556,
			'NodeTree' => '42',
			'NodeParentID' => '1540',
			'NodeParentOrder' => '15',
			'NodeType' => 'Data Print Row',
			'NodeDataStore' => 'AllegSilver:AlleSilArrestMiranda'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1557,
			'NodeTree' => '42',
			'NodeParentID' => '1540',
			'NodeParentOrder' => '16',
			'NodeType' => 'Data Print Row',
			'NodeDataStore' => 'AllegSilver:AlleSilCitationYN'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1558,
			'NodeTree' => '42',
			'NodeParentID' => '1540',
			'NodeParentOrder' => '17',
			'NodeType' => 'Data Print Row',
			'NodeDataStore' => 'AllegSilver:AlleSilCitationExcessive'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1559,
			'NodeTree' => '42',
			'NodeParentID' => '1540',
			'NodeParentOrder' => '18',
			'NodeType' => 'Data Print Row',
			'NodeDataStore' => 'AllegSilver:AlleSilNeglectDuty'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1560,
			'NodeTree' => '42',
			'NodeParentID' => '1540',
			'NodeParentOrder' => '19',
			'NodeType' => 'Data Print Row',
			'NodeDataStore' => 'AllegSilver:AlleSilProcedure'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1561,
			'NodeTree' => '42',
			'NodeParentID' => '1540',
			'NodeParentOrder' => '20',
			'NodeType' => 'Data Print Row',
			'NodeDataStore' => 'AllegSilver:AlleSilIntimidatingWeapon'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1562,
			'NodeTree' => '42',
			'NodeParentID' => '1540',
			'NodeParentOrder' => '21',
			'NodeType' => 'Data Print Row',
			'NodeDataStore' => 'AllegSilver:AlleSilIntimidatingWeaponType'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1563,
			'NodeTree' => '42',
			'NodeParentID' => '1540',
			'NodeParentOrder' => '22',
			'NodeType' => 'Data Print Row',
			'NodeDataStore' => 'AllegSilver:AlleSilBias'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1564,
			'NodeTree' => '42',
			'NodeParentID' => '1540',
			'NodeParentOrder' => '23',
			'NodeType' => 'Data Print Row',
			'NodeDataStore' => 'AllegSilver:AlleSilRetaliation'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1565,
			'NodeTree' => '42',
			'NodeParentID' => '1540',
			'NodeParentOrder' => '24',
			'NodeType' => 'Data Print Row',
			'NodeDataStore' => 'AllegSilver:AlleSilDiscourteous'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1566,
			'NodeTree' => '42',
			'NodeParentID' => '1540',
			'NodeParentOrder' => '25',
			'NodeType' => 'Data Print Row',
			'NodeInternalNotes' => 'with OpenReport.php function getOffProfan'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1567,
			'NodeTree' => '42',
			'NodeParentID' => '1540',
			'NodeParentOrder' => '26',
			'NodeType' => 'Data Print Row',
			'NodeInternalNotes' => 'with OpenReport.php function getCivProfan'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1568,
			'NodeTree' => '42',
			'NodeParentID' => '1540',
			'NodeParentOrder' => '27',
			'NodeType' => 'Data Print Row',
			'NodeDataStore' => 'AllegSilver:AlleSilUnbecoming'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1569,
			'NodeTree' => '42',
			'NodeParentID' => '1750',
			'NodeParentOrder' => '2',
			'NodeType' => 'Page Block',
			'NodeOpts' => '89'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1571,
			'NodeTree' => '42',
			'NodeParentID' => '1473',
			'NodeType' => 'Data Print Row',
			'NodeDefault' => 'N',
			'NodeDataStore' => 'Civilians:CivIsCreator'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1572,
			'NodeTree' => '42',
			'NodeParentID' => '1750',
			'NodeParentOrder' => '13',
			'NodeType' => 'Loop Cycle',
			'NodeResponseSet' => 'LoopItems::Events',
			'NodeDataBranch' => 'EventSequence'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1573,
			'NodeTree' => '42',
			'NodeParentID' => '1572',
			'NodeType' => 'Page Block',
			'NodeOpts' => '89'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1574,
			'NodeTree' => '42',
			'NodeParentID' => '1573',
			'NodeType' => 'Instructions Raw',
			'NodePromptText' => '[ Event Header ] with OpenReport.php function reportEventTitle'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1575,
			'NodeTree' => '42',
			'NodeParentID' => '1573',
			'NodeParentOrder' => '1',
			'NodeType' => 'Data Print Columns',
			'NodeDataBranch' => 'Stops'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1576,
			'NodeTree' => '42',
			'NodeParentID' => '1573',
			'NodeParentOrder' => '2',
			'NodeType' => 'Data Print Columns',
			'NodeDataBranch' => 'Searches'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1577,
			'NodeTree' => '42',
			'NodeParentID' => '1573',
			'NodeParentOrder' => '3',
			'NodeType' => 'Data Print Columns',
			'NodeDataBranch' => 'Force'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1578,
			'NodeTree' => '42',
			'NodeParentID' => '1573',
			'NodeParentOrder' => '4',
			'NodeType' => 'Data Print Columns',
			'NodeDataBranch' => 'Arrests'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1579,
			'NodeTree' => '42',
			'NodeParentID' => '1575',
			'NodeType' => 'Data Print Row',
			'NodeDataStore' => 'StopReasons:StopReasReason'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1580,
			'NodeTree' => '42',
			'NodeParentID' => '1575',
			'NodeParentOrder' => '1',
			'NodeType' => 'Data Print Row',
			'NodeDataStore' => 'Stops:StopStatedReasonDesc'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1581,
			'NodeTree' => '42',
			'NodeParentID' => '1575',
			'NodeParentOrder' => '2',
			'NodeType' => 'Data Print Row',
			'NodeDataStore' => 'Stops:StopSubjectAskedToLeave'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1582,
			'NodeTree' => '42',
			'NodeParentID' => '1575',
			'NodeParentOrder' => '3',
			'NodeType' => 'Data Print Row',
			'NodeDataStore' => 'Stops:StopSubjectStatementsDesc'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1583,
			'NodeTree' => '42',
			'NodeParentID' => '1575',
			'NodeParentOrder' => '4',
			'NodeType' => 'Data Print Row',
			'NodeDataStore' => 'Stops:StopRequestID'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1584,
			'NodeTree' => '42',
			'NodeParentID' => '1575',
			'NodeParentOrder' => '5',
			'NodeType' => 'Data Print Row',
			'NodeDataStore' => 'Stops:StopRefuseID'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1585,
			'NodeTree' => '42',
			'NodeParentID' => '1575',
			'NodeParentOrder' => '6',
			'NodeType' => 'Data Print Row',
			'NodeDataStore' => 'Stops:StopRequestOfficerID'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1586,
			'NodeTree' => '42',
			'NodeParentID' => '1575',
			'NodeParentOrder' => '7',
			'NodeType' => 'Data Print Row',
			'NodeDataStore' => 'Stops:StopOfficerRefuseID'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1587,
			'NodeTree' => '42',
			'NodeParentID' => '1575',
			'NodeParentOrder' => '8',
			'NodeType' => 'Data Print Row',
			'NodeDataStore' => 'Stops:StopBreathAlcohol'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1588,
			'NodeTree' => '42',
			'NodeParentID' => '1575',
			'NodeParentOrder' => '9',
			'NodeType' => 'Data Print Row',
			'NodeDataStore' => 'Stops:StopBreathAlcoholFailed'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1589,
			'NodeTree' => '42',
			'NodeParentID' => '1575',
			'NodeParentOrder' => '10',
			'NodeType' => 'Data Print Row',
			'NodeDataStore' => 'Stops:StopBreathCannabis'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1590,
			'NodeTree' => '42',
			'NodeParentID' => '1575',
			'NodeParentOrder' => '11',
			'NodeType' => 'Data Print Row',
			'NodeDataStore' => 'Stops:StopBreathCannabisFailed'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1591,
			'NodeTree' => '42',
			'NodeParentID' => '1575',
			'NodeParentOrder' => '12',
			'NodeType' => 'Data Print Row',
			'NodeDataStore' => 'Stops:StopSalivaTest'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1592,
			'NodeTree' => '42',
			'NodeParentID' => '1575',
			'NodeParentOrder' => '13',
			'NodeType' => 'Data Print Row',
			'NodeDataStore' => 'Stops:StopSobrietyOther'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1593,
			'NodeTree' => '42',
			'NodeParentID' => '1575',
			'NodeParentOrder' => '14',
			'NodeType' => 'Data Print Row',
			'NodeDataStore' => 'Stops:StopSobrietyOtherDescribe'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1594,
			'NodeTree' => '42',
			'NodeParentID' => '1575',
			'NodeParentOrder' => '15',
			'NodeType' => 'Data Print Row',
			'NodeDataStore' => 'Stops:StopSubjectFrisk'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1595,
			'NodeTree' => '42',
			'NodeParentID' => '1575',
			'NodeParentOrder' => '16',
			'NodeType' => 'Data Print Row',
			'NodeDataStore' => 'Stops:StopSubjectHandcuffed'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1596,
			'NodeTree' => '42',
			'NodeParentID' => '1575',
			'NodeParentOrder' => '17',
			'NodeType' => 'Data Print Row',
			'NodeDataStore' => 'Stops:StopStopSubjectHandcuffInjYN'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1597,
			'NodeTree' => '42',
			'NodeParentID' => '1575',
			'NodeParentOrder' => '18',
			'NodeType' => 'Data Print Row',
			'NodeDataStore' => 'Stops:StopEnterPrivateProperty'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1598,
			'NodeTree' => '42',
			'NodeParentID' => '1575',
			'NodeParentOrder' => '22',
			'NodeType' => 'Data Print Row',
			'NodeDataStore' => 'Stops:StopEnterPrivatePropertyDesc'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1599,
			'NodeTree' => '42',
			'NodeParentID' => '1575',
			'NodeParentOrder' => '19',
			'NodeType' => 'Data Print Row',
			'NodeDataStore' => 'Stops:StopPermissionEnter'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1600,
			'NodeTree' => '42',
			'NodeParentID' => '1575',
			'NodeParentOrder' => '20',
			'NodeType' => 'Data Print Row',
			'NodeDataStore' => 'Stops:StopPermissionEnterGranted'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1601,
			'NodeTree' => '42',
			'NodeParentID' => '1576',
			'NodeType' => 'Data Print Row',
			'NodeDataStore' => 'Searches:SrchStatedReason'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1602,
			'NodeTree' => '42',
			'NodeParentID' => '1576',
			'NodeParentOrder' => '1',
			'NodeType' => 'Data Print Row',
			'NodeDataStore' => 'Searches:SrchStatedReasonDesc'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1603,
			'NodeTree' => '42',
			'NodeParentID' => '1576',
			'NodeParentOrder' => '2',
			'NodeType' => 'Data Print Row',
			'NodeDataStore' => 'Searches:SrchOfficerWarrant'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1604,
			'NodeTree' => '42',
			'NodeParentID' => '1576',
			'NodeParentOrder' => '3',
			'NodeType' => 'Data Print Row',
			'NodeDataStore' => 'Searches:SrchOfficerWarrantSay'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1605,
			'NodeTree' => '42',
			'NodeParentID' => '1576',
			'NodeParentOrder' => '4',
			'NodeType' => 'Data Print Row',
			'NodeDataStore' => 'Searches:SrchOfficerRequest'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1606,
			'NodeTree' => '42',
			'NodeParentID' => '1576',
			'NodeParentOrder' => '5',
			'NodeType' => 'Data Print Row',
			'NodeDataStore' => 'Searches:SrchOfficerRequestDesc'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1607,
			'NodeTree' => '42',
			'NodeParentID' => '1576',
			'NodeParentOrder' => '6',
			'NodeType' => 'Data Print Row',
			'NodeDataStore' => 'Searches:SrchSubjectConsent'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1608,
			'NodeTree' => '42',
			'NodeParentID' => '1576',
			'NodeParentOrder' => '7',
			'NodeType' => 'Data Print Row',
			'NodeDataStore' => 'Searches:SrchSubjectSay'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1609,
			'NodeTree' => '42',
			'NodeParentID' => '1576',
			'NodeParentOrder' => '8',
			'NodeType' => 'Data Print Row',
			'NodeDataStore' => 'Searches:SrchOfficerThreats'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1610,
			'NodeTree' => '42',
			'NodeParentID' => '1576',
			'NodeParentOrder' => '9',
			'NodeType' => 'Data Print Row',
			'NodeDataStore' => 'Searches:SrchOfficerThreatsDesc'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1611,
			'NodeTree' => '42',
			'NodeParentID' => '1576',
			'NodeParentOrder' => '10',
			'NodeType' => 'Data Print Row',
			'NodeDataStore' => 'Searches:SrchK9sniff'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1612,
			'NodeTree' => '42',
			'NodeParentID' => '1576',
			'NodeParentOrder' => '11',
			'NodeType' => 'Data Print Row',
			'NodeDataStore' => 'Searches:SrchStrip'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1613,
			'NodeTree' => '42',
			'NodeParentID' => '1576',
			'NodeParentOrder' => '12',
			'NodeType' => 'Data Print Row',
			'NodeDataStore' => 'Searches:SrchStripSearchDesc'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1614,
			'NodeTree' => '42',
			'NodeParentID' => '1576',
			'NodeParentOrder' => '13',
			'NodeType' => 'Data Print Row',
			'NodeDataStore' => 'Searches:SrchContrabandDiscovered'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1615,
			'NodeTree' => '42',
			'NodeParentID' => '1576',
			'NodeParentOrder' => '14',
			'NodeType' => 'Data Print Row',
			'NodeDataStore' => 'SearchContra:SrchConType'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1616,
			'NodeTree' => '42',
			'NodeParentID' => '1576',
			'NodeParentOrder' => '15',
			'NodeType' => 'Data Print Row',
			'NodeDataStore' => 'Searches:SrchSeized'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1617,
			'NodeTree' => '42',
			'NodeParentID' => '1576',
			'NodeParentOrder' => '17',
			'NodeType' => 'Data Print Row',
			'NodeDataStore' => 'Searches:SrchSeizedDesc'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1618,
			'NodeTree' => '42',
			'NodeParentID' => '1576',
			'NodeParentOrder' => '16',
			'NodeType' => 'Data Print Row',
			'NodeDataStore' => 'SearchSeize:SrchSeizType'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1619,
			'NodeTree' => '42',
			'NodeParentID' => '1576',
			'NodeParentOrder' => '18',
			'NodeType' => 'Data Print Row',
			'NodeDataStore' => 'Searches:SrchDamage'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1620,
			'NodeTree' => '42',
			'NodeParentID' => '1576',
			'NodeParentOrder' => '19',
			'NodeType' => 'Data Print Row',
			'NodeDataStore' => 'Searches:SrchDamageDesc'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1621,
			'NodeTree' => '42',
			'NodeParentID' => '1577',
			'NodeType' => 'Data Print Row',
			'NodeDataStore' => 'Force:ForType'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1622,
			'NodeTree' => '42',
			'NodeParentID' => '1577',
			'NodeParentOrder' => '1',
			'NodeType' => 'Data Print Row',
			'NodeDataStore' => 'ForceSubType:ForceSubType'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1623,
			'NodeTree' => '42',
			'NodeParentID' => '1577',
			'NodeParentOrder' => '2',
			'NodeType' => 'Data Print Row',
			'NodeDataStore' => 'Force:ForGunDesc'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1624,
			'NodeTree' => '42',
			'NodeParentID' => '1577',
			'NodeParentOrder' => '3',
			'NodeType' => 'Data Print Row',
			'NodeDataStore' => 'Force:ForGunAmmoType'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1625,
			'NodeTree' => '42',
			'NodeParentID' => '1577',
			'NodeParentOrder' => '4',
			'NodeType' => 'Data Print Row',
			'NodeDataStore' => 'Force:ForWhileHandcuffed'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1626,
			'NodeTree' => '42',
			'NodeParentID' => '1577',
			'NodeParentOrder' => '5',
			'NodeType' => 'Data Print Row',
			'NodeDataStore' => 'Force:ForWhileHeldDown'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1627,
			'NodeTree' => '42',
			'NodeParentID' => '1577',
			'NodeParentOrder' => '6',
			'NodeType' => 'Data Print Row',
			'NodeDataStore' => 'Force:ForHowManyTimes'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1628,
			'NodeTree' => '42',
			'NodeParentID' => '1577',
			'NodeParentOrder' => '7',
			'NodeType' => 'Data Print Row',
			'NodeDataStore' => 'ForceBodyParts:FrcBdyPart'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1629,
			'NodeTree' => '42',
			'NodeParentID' => '1578',
			'NodeType' => 'Data Print Row',
			'NodeDataStore' => 'Arrests:ArstStatedReason'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1630,
			'NodeTree' => '42',
			'NodeParentID' => '1578',
			'NodeParentOrder' => '1',
			'NodeType' => 'Data Print Row',
			'NodeDataStore' => 'Arrests:ArstStatedReasonDesc'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1631,
			'NodeTree' => '42',
			'NodeParentID' => '1578',
			'NodeParentOrder' => '2',
			'NodeType' => 'Data Print Row',
			'NodeDataStore' => 'Arrests:ArstStripSearchDesc'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1632,
			'NodeTree' => '42',
			'NodeParentID' => '1578',
			'NodeParentOrder' => '3',
			'NodeType' => 'Data Print Row',
			'NodeDataStore' => 'Arrests:ArstStrip'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1633,
			'NodeTree' => '42',
			'NodeParentID' => '1578',
			'NodeParentOrder' => '4',
			'NodeType' => 'Data Print Row',
			'NodeDataStore' => 'Arrests:ArstStripSearchDesc'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1634,
			'NodeTree' => '42',
			'NodeParentID' => '1578',
			'NodeParentOrder' => '5',
			'NodeType' => 'Data Print Row',
			'NodeDataStore' => 'Arrests:ArstChargesFiled'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1637,
			'NodeTree' => '42',
			'NodeParentID' => '1578',
			'NodeParentOrder' => '6',
			'NodeType' => 'Data Print Row',
			'NodeDataStore' => 'Arrests:ArstNoChargesFiled'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1638,
			'NodeTree' => '42',
			'NodeParentID' => '1575',
			'NodeParentOrder' => '23',
			'NodeType' => 'Data Print Row',
			'NodeDataStore' => 'Stops:StopCitationNumber'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1642,
			'NodeTree' => '42',
			'NodeParentID' => '1473',
			'NodeParentOrder' => '6',
			'NodeType' => 'Data Print Row',
			'NodeDataStore' => 'Civilians:CivChase'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1643,
			'NodeTree' => '42',
			'NodeParentID' => '1473',
			'NodeParentOrder' => '7',
			'NodeType' => 'Data Print Row',
			'NodeDataStore' => 'Civilians:CivChaseType'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1644,
			'NodeTree' => '42',
			'NodeParentID' => '1473',
			'NodeParentOrder' => '8',
			'NodeType' => 'Data Print Row',
			'NodeDataStore' => 'CivWeapons:CivWeapBodyWeapon'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1645,
			'NodeTree' => '42',
			'NodeParentID' => '1473',
			'NodeParentOrder' => '9',
			'NodeType' => 'Data Print Row',
			'NodeDataStore' => 'Civilians:CivVictimHadWeapon'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1646,
			'NodeTree' => '42',
			'NodeParentID' => '1473',
			'NodeParentOrder' => '10',
			'NodeType' => 'Data Print Row',
			'NodeDataStore' => 'Civilians:CivVictimWhatWeapon'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1647,
			'NodeTree' => '42',
			'NodeParentID' => '1473',
			'NodeParentOrder' => '11',
			'NodeType' => 'Data Print Row',
			'NodeDataStore' => 'Civilians:CivVictimUseWeapon'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1648,
			'NodeTree' => '42',
			'NodeParentID' => '1533',
			'NodeParentOrder' => '2',
			'NodeType' => 'Data Print Row',
			'NodeDataStore' => 'Complaints:ComOfficerInjured'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1649,
			'NodeTree' => '42',
			'NodeParentID' => '1533',
			'NodeParentOrder' => '3',
			'NodeType' => 'Data Print Row',
			'NodeDataStore' => 'Complaints:ComOfficerInjuredDesc'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1650,
			'NodeTree' => '42',
			'NodeParentID' => '1473',
			'NodeParentOrder' => '12',
			'NodeType' => 'Data Print Row',
			'NodeDataStore' => 'Civilians:CivHasInjury'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1651,
			'NodeTree' => '42',
			'NodeParentID' => '1473',
			'NodeParentOrder' => '14',
			'NodeType' => 'Data Print Row',
			'NodeDataStore' => 'Civilians:CivHasInjuryCare'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1652,
			'NodeTree' => '42',
			'NodeParentID' => '1501',
			'NodeParentOrder' => '1',
			'NodeType' => 'Data Print Row',
			'NodeDataStore' => 'InjuryBodyParts:InjBdyPart'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1653,
			'NodeTree' => '42',
			'NodeParentID' => '1473',
			'NodeParentOrder' => '15',
			'NodeType' => 'Data Manip: Wrap',
			'NodeDataBranch' => 'InjuryCare'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1654,
			'NodeTree' => '42',
			'NodeParentID' => '1653',
			'NodeType' => 'Data Print Row',
			'NodeDefault' => 'N',
			'NodeDataStore' => 'InjuryCare:InjCareResultInDeath'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1655,
			'NodeTree' => '42',
			'NodeParentID' => '1653',
			'NodeParentOrder' => '1',
			'NodeType' => 'Data Print Row',
			'NodeDataStore' => 'InjuryCare:InjCareTimeOfDeath'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1656,
			'NodeTree' => '42',
			'NodeParentID' => '1653',
			'NodeParentOrder' => '2',
			'NodeType' => 'Data Print Row',
			'NodeDataStore' => 'InjuryCare:InjCareHospitalTreated'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1657,
			'NodeTree' => '42',
			'NodeParentID' => '1653',
			'NodeParentOrder' => '3',
			'NodeType' => 'Data Print Row',
			'NodeDataStore' => 'InjuryCare:InjCareDoctorNameFirst'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1658,
			'NodeTree' => '42',
			'NodeParentID' => '1653',
			'NodeParentOrder' => '4',
			'NodeType' => 'Data Print Row',
			'NodeDataStore' => 'InjuryCare:InjCareDoctorNameLast'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1659,
			'NodeTree' => '42',
			'NodeParentID' => '1653',
			'NodeParentOrder' => '5',
			'NodeType' => 'Data Print Row',
			'NodeDataStore' => 'InjuryCare:InjCareDoctorEmail'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1660,
			'NodeTree' => '42',
			'NodeParentID' => '1653',
			'NodeParentOrder' => '6',
			'NodeType' => 'Data Print Row',
			'NodeDataStore' => 'InjuryCare:InjCareDoctorPhone'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1661,
			'NodeTree' => '42',
			'NodeParentID' => '1653',
			'NodeParentOrder' => '7',
			'NodeType' => 'Data Print Row',
			'NodeDataStore' => 'InjuryCare:InjCareEmergencyOnScene'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1662,
			'NodeTree' => '42',
			'NodeParentID' => '1653',
			'NodeParentOrder' => '8',
			'NodeType' => 'Data Print Row',
			'NodeDataStore' => 'InjuryCare:InjCareEmergencyDeptName'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1663,
			'NodeTree' => '42',
			'NodeParentID' => '1653',
			'NodeParentOrder' => '9',
			'NodeType' => 'Data Print Row',
			'NodeDataStore' => 'InjuryCare:InjCareEmergencyNameFirst'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1664,
			'NodeTree' => '42',
			'NodeParentID' => '1653',
			'NodeParentOrder' => '10',
			'NodeType' => 'Data Print Row',
			'NodeDataStore' => 'InjuryCare:InjCareEmergencyNameLast'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1665,
			'NodeTree' => '42',
			'NodeParentID' => '1653',
			'NodeParentOrder' => '11',
			'NodeType' => 'Data Print Row',
			'NodeDataStore' => 'InjuryCare:InjCareEmergencyIDnumber'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1666,
			'NodeTree' => '42',
			'NodeParentID' => '1653',
			'NodeParentOrder' => '12',
			'NodeType' => 'Data Print Row',
			'NodeDataStore' => 'InjuryCare:InjCareEmergencyVehicleNumber'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1667,
			'NodeTree' => '42',
			'NodeParentID' => '1653',
			'NodeParentOrder' => '13',
			'NodeType' => 'Data Print Row',
			'NodeDataStore' => 'InjuryCare:InjCareEmergencyLicenceNumber'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1668,
			'NodeTree' => '42',
			'NodeParentID' => '1676',
			'NodeParentOrder' => '2',
			'NodeType' => 'Data Print Row',
			'NodeDataStore' => 'Complaints:ComTriedOtherWays'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1669,
			'NodeTree' => '42',
			'NodeParentID' => '1676',
			'NodeParentOrder' => '3',
			'NodeType' => 'Data Print Row',
			'NodeDataStore' => 'Complaints:ComTriedOtherWaysDesc'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1673,
			'NodeTree' => '42',
			'NodeParentID' => '1676',
			'NodeParentOrder' => '4',
			'NodeType' => 'Data Print Row',
			'NodeDataStore' => 'Complaints:ComHowHear'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1674,
			'NodeTree' => '42',
			'NodeParentID' => '1676',
			'NodeParentOrder' => '5',
			'NodeType' => 'Data Print Row',
			'NodeDataStore' => 'Complaints:ComFeedback'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1675,
			'NodeTree' => '42',
			'NodeParentID' => '1750',
			'NodeParentOrder' => '6',
			'NodeType' => 'Page Block',
			'NodeOpts' => '89'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1676,
			'NodeTree' => '42',
			'NodeParentID' => '1675',
			'NodeType' => 'Data Print Columns',
			'NodePromptText' => 'Legal Needs'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1677,
			'NodeTree' => '42',
			'NodeParentID' => '1676',
			'NodeType' => 'Data Print Row',
			'NodeDataStore' => 'Complaints:ComAttorneyHas'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1678,
			'NodeTree' => '42',
			'NodeParentID' => '1676',
			'NodeParentOrder' => '1',
			'NodeType' => 'Data Print Row',
			'NodeDataStore' => 'Complaints:ComAttorneyWant'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1679,
			'NodeTree' => '42',
			'NodeParentID' => '1676',
			'NodeParentOrder' => '6',
			'NodeType' => 'Data Print Row',
			'NodeDataStore' => 'Complaints:ComHoneyPot'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1680,
			'NodeTree' => '42',
			'NodeParentID' => '1473',
			'NodeParentOrder' => '4',
			'NodeType' => 'Data Print Row',
			'NodeDataStore' => 'Civilians:CivResident'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1681,
			'NodeTree' => '42',
			'NodeParentID' => '1533',
			'NodeParentOrder' => '4',
			'NodeType' => 'Data Print Row',
			'NodeDataStore' => 'Complaints:ComAnyoneCharged'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1682,
			'NodeTree' => '42',
			'NodeParentID' => '1533',
			'NodeParentOrder' => '5',
			'NodeType' => 'Data Print Row',
			'NodeDataStore' => 'Complaints:ComAllChargesResolved'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1683,
			'NodeTree' => '42',
			'NodeParentID' => '1477',
			'NodeParentOrder' => '3',
			'NodeType' => 'Data Print Row',
			'NodeDataStore' => 'Officers:OffDutyStatus'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1684,
			'NodeTree' => '42',
			'NodeParentID' => '1477',
			'NodeParentOrder' => '4',
			'NodeType' => 'Data Print Row',
			'NodeDataStore' => 'Officers:OffUniform'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1685,
			'NodeTree' => '42',
			'NodeParentID' => '1534',
			'NodeParentOrder' => '4',
			'NodeType' => 'Data Print Row',
			'NodeDataStore' => 'Scenes:ScnIsVehicleAccident'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1687,
			'NodeTree' => '42',
			'NodeParentID' => '1384',
			'NodeType' => 'Data Print Row',
			'NodeInternalNotes' => 'with OpenReport.php function getReportWhenLine',
			'NodeDataStore' => 'Incidents:IncTimeStart'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1688,
			'NodeTree' => '42',
			'NodeParentID' => '1384',
			'NodeParentOrder' => '1',
			'NodeType' => 'Data Print Row',
			'NodeInternalNotes' => 'with OpenReport.php function getReportWhereLine',
			'NodeDataStore' => 'Incidents:IncAddress'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1689,
			'NodeTree' => '42',
			'NodeParentID' => '1384',
			'NodeParentOrder' => '3',
			'NodeType' => 'Data Print Row',
			'NodeDataStore' => 'Incidents:IncLandmarks'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1690,
			'NodeTree' => '42',
			'NodeParentID' => '1384',
			'NodeParentOrder' => '4',
			'NodeType' => 'Data Print Row',
			'NodeInternalNotes' => 'with OpenReport.php function getReportByLine',
			'NodeDataStore' => 'PersonContact:PrsnNickname'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1691,
			'NodeTree' => '42',
			'NodeParentID' => '1384',
			'NodeParentOrder' => '5',
			'NodeType' => 'Data Print Row',
			'NodeInternalNotes' => 'with OpenReport.php function getReportPrivacy',
			'NodeDataStore' => 'Complaints:ComPrivacy'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1692,
			'NodeTree' => '42',
			'NodeParentID' => '2326',
			'NodeParentOrder' => '1',
			'NodeType' => 'Instructions Raw',
			'NodePromptText' => '<div>&nbsp;</div>'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1695,
			'NodeTree' => '42',
			'NodeParentID' => '1467',
			'NodeType' => 'Data Print Row',
			'NodeDataStore' => 'Complaints:ComRecordSubmitted'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1696,
			'NodeTree' => '42',
			'NodeParentID' => '1467',
			'NodeParentOrder' => '1',
			'NodeType' => 'Data Print Row',
			'NodeDataStore' => 'LinksComplaintOversight:LnkComOverSubmitted'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1697,
			'NodeTree' => '42',
			'NodeParentID' => '1467',
			'NodeParentOrder' => '3',
			'NodeType' => 'Data Print Row',
			'NodeDataStore' => 'LinksComplaintOversight:LnkComOverReceived'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1698,
			'NodeTree' => '42',
			'NodeParentID' => '1467',
			'NodeParentOrder' => '4',
			'NodeType' => 'Data Print Row',
			'NodeDataStore' => 'LinksComplaintOversight:LnkComOverInvestigated'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1699,
			'NodeTree' => '42',
			'NodeParentID' => '1467',
			'NodeParentOrder' => '5',
			'NodeType' => 'Data Print Row',
			'NodeDataStore' => 'LinksComplaintOversight:LnkComOverReportDate'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1700,
			'NodeTree' => '42',
			'NodeParentID' => '1467',
			'NodeParentOrder' => '2',
			'NodeType' => 'Data Print Row',
			'NodeDefault' => '0',
			'NodeDataStore' => 'LinksComplaintOversight:LnkComOverStillNoResponse'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1701,
			'NodeTree' => '42',
			'NodeParentID' => '1466',
			'NodeType' => 'Loop Cycle',
			'NodeResponseSet' => 'LoopItems::Investigative Agencies',
			'NodeDataBranch' => 'LinksComplaintOversight'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1702,
			'NodeTree' => '42',
			'NodeParentID' => '1473',
			'NodeParentOrder' => '17',
			'NodeType' => 'Data Print Row',
			'NodeDataStore' => 'Civilians:CivChargesOther'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1703,
			'NodeTree' => '42',
			'NodeParentID' => '1362',
			'NodeType' => 'Page Block'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1704,
			'NodeTree' => '42',
			'NodeParentID' => '1362',
			'NodeParentOrder' => '2',
			'NodeType' => 'Page Block',
			'NodeOpts' => '67'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1705,
			'NodeTree' => '42',
			'NodeParentID' => '1750',
			'NodeParentOrder' => '18',
			'NodeType' => 'Page Block',
			'NodeOpts' => '89'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1706,
			'NodeTree' => '42',
			'NodeParentID' => '1750',
			'NodeParentOrder' => '16',
			'NodeType' => 'Page Block',
			'NodeOpts' => '89'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1707,
			'NodeTree' => '42',
			'NodeParentID' => '1706',
			'NodeType' => 'Instructions Raw',
			'NodePromptText' => '[ Glossary ] hard-coded via SurvLoop\Controllers\Tree\TreeSurvReport.php function printGlossary'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1708,
			'NodeTree' => '42',
			'NodeParentID' => '1705',
			'NodeType' => 'Instructions Raw',
			'NodePromptText' => '[ Flex Your Rights Articles ] hard-coded via OpenReport.php function printFlexArts, to view openpolice.nodes.1708-report-flex-articles'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1709,
			'NodeTree' => '42',
			'NodeParentID' => '1750',
			'NodeParentOrder' => '19',
			'NodeType' => 'Page Block',
			'NodeOpts' => '89'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1710,
			'NodeTree' => '42',
			'NodeParentID' => '1709',
			'NodeType' => 'Instructions Raw',
			'NodePromptText' => '[ Share, Print, Save ] hard-coded via OpenReport.php function printReportShare, to view openpolice.nodes.1710-report-inc-share'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1711,
			'NodeTree' => '42',
			'NodeParentID' => '1362',
			'NodeParentOrder' => '1',
			'NodeType' => 'Page Block'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1712,
			'NodeTree' => '42',
			'NodeParentID' => '2632',
			'NodeType' => 'Instructions Raw',
			'NodePromptText' => '[ Toolkit for Staff ] hard-coded via OpenReportToolsAdmin.php function printComplaintAdmin, to view openpolice.nodes.1712-report-inc-staff-tools'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1713,
			'NodeTree' => '42',
			'NodeParentID' => '2633',
			'NodeType' => 'Instructions Raw',
			'NodePromptText' => '[ Toolkit for Investigative Agency ] hard-coded via OpenReportToolsOversight.php function printComplaintOversight, to view openpolice.nodes.1711-report-inc-oversight-tools'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1714,
			'NodeTree' => '42',
			'NodeParentID' => '2634',
			'NodeType' => 'Instructions Raw',
			'NodePromptText' => '[ Toolkit for Complainant ] hard-coded via OpenReportTools.php function printComplaintOwner, to view openpolice.nodes.1714-report-inc-owner-tools'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1718,
			'NodeTree' => '42',
			'NodeParentID' => '2330',
			'NodeType' => 'Data Manip: Wrap',
			'NodeDataBranch' => 'Departments'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1719,
			'NodeTree' => '42',
			'NodeParentID' => '1479',
			'NodeParentOrder' => '1',
			'NodeType' => 'Page Block'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1732,
			'NodeTree' => '42',
			'NodeParentID' => '1384',
			'NodeParentOrder' => '2',
			'NodeType' => 'Data Print Row',
			'NodeInternalNotes' => 'with OpenReport.php function getReportWhereLine',
			'NodeDataStore' => 'Incidents:IncAddressCity'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1734,
			'NodeTree' => '42',
			'NodeParentID' => '1746',
			'NodeType' => 'Data Print',
			'NodeDataBranch' => 'Departments',
			'NodeDataStore' => 'Departments:DeptName'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1742,
			'NodeTree' => '42',
			'NodeParentID' => '1744',
			'NodeType' => 'Data Print Columns',
			'NodePromptText' => 'Police Vehicle #[LoopItemCnt]'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1743,
			'NodeTree' => '42',
			'NodeParentID' => '1742',
			'NodeType' => 'Data Print Row',
			'NodeDataStore' => 'Vehicles:VehicTransportation'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1744,
			'NodeTree' => '42',
			'NodeParentID' => '1490',
			'NodeParentOrder' => '1',
			'NodeType' => 'Loop Cycle',
			'NodeResponseSet' => 'LoopItems::Officer Vehicles',
			'NodeDataBranch' => 'Vehicles'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1745,
			'NodeTree' => '42',
			'NodeParentID' => '1742',
			'NodeParentOrder' => '2',
			'NodeType' => 'Data Print Row',
			'NodeDataStore' => 'Vehicles:VehicVehicleMake'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1749,
			'NodeTree' => '42',
			'NodeParentID' => '1362',
			'NodeParentOrder' => '5',
			'NodeType' => 'Instructions Raw',
			'NodePromptText' => '<div class=\"pT5\">ï¿½</div><div class=\"alert alert-danger fade in alert-dismissible show\" style=\"padding: 10px 15px;\">This complaint is not public while it awaits further review or legal counsel.</div>'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1750,
			'NodeTree' => '42',
			'NodeParentID' => '1362',
			'NodeParentOrder' => '6',
			'NodeType' => 'Page Block'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1752,
			'NodeTree' => '42',
			'NodeParentID' => '1750',
			'NodeParentOrder' => '17',
			'NodeType' => 'Page Block',
			'NodeOpts' => '89'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1753,
			'NodeTree' => '42',
			'NodeParentID' => '1752',
			'NodeType' => 'Instructions Raw',
			'NodePromptText' => '[ Flex Your Rights Videos ] hard-coded via OpenReport.php function printFlexVids, to view openpolice.nodes.1753-report-flex-videos'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1754,
			'NodeTree' => '33',
			'NodeParentID' => '1215',
			'NodeParentOrder' => '1',
			'NodeType' => 'Instructions Raw',
			'NodePromptText' => '<i class="slBlueDark">Watch the full-length video tutorial here:</i>
<iframe class="mT20" src="https://www.youtube.com/embed/VoLEkx8iK0A" allowfullscreen="" width="100%" height="250" frameborder="0"></iframe>',
			'NodeOpts' => '89'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1755,
			'NodeTree' => '33',
			'NodeParentID' => '1757',
			'NodeType' => 'Instructions Raw',
			'NodePromptText' => '[ All Departments ] hard-coded via OpenVolunteers.php function printVolunAllList, to view openpolice.nodes.1211-volun-home-all-depts'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1756,
			'NodeTree' => '33',
			'NodeParentID' => '1210',
			'NodeType' => 'Page Block',
			'NodeOpts' => '89'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1757,
			'NodeTree' => '33',
			'NodeParentID' => '1210',
			'NodeParentOrder' => '1',
			'NodeType' => 'Page Block',
			'NodeOpts' => '89'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1758,
			'NodeTree' => '42',
			'NodeParentID' => '1362',
			'NodeParentOrder' => '3',
			'NodeType' => 'Page Block',
			'NodeDefault' => '#EDF8FF;;#333;;#416CBD;;;;w100;;N;;left;;auto',
			'NodeOpts' => '71'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1771,
			'NodeTree' => '22',
			'NodeParentID' => '2381',
			'NodeParentOrder' => '2',
			'NodeType' => 'Page Block',
			'NodeCharLimit' => '2'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1776,
			'NodeTree' => '22',
			'NodeParentID' => '2381',
			'NodeParentOrder' => '1',
			'NodeType' => 'Page Block'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1779,
			'NodeTree' => '22',
			'NodeParentID' => '1771',
			'NodeType' => 'Instructions Raw',
			'NodePromptText' => '[ Police Department\'s Complaints ] hard-coded via OpenDepts.php function printDeptComplaints, OpenListings.php function printComplaintListing, to view openpolice.nodes.1418-admin-complaints-listing'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1780,
			'NodeTree' => '42',
			'NodeParentID' => '1758',
			'NodeType' => 'Instructions Raw',
			'NodePromptText' => '[ Token Dialogue ] hard-coded via OpenReportToolsOversight.php function printMfaInstruct, to view openpolice.nodes.1780-mfa-instructions'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1781,
			'NodeTree' => '12',
			'NodeParentID' => '1847',
			'NodeType' => 'Instructions Raw',
			'NodePromptText' => '<center>\r\n<h3 style=\"margin-bottom: 40px;\">Our Principles</h3>\r\n</center>\r\n<p>ï¿½</p>\r\n<div class=\"row\"><div class=\"col-lg-5 col-md-12 col-sm-12\">\r\n\r\n<div class=\"row mB20\"><div class=\"col-lg-4 col-md-3 col-sm-3\"><div class=\"bigIcoWrap\">\r\n<img src=\"/openpolice/uploads/universality-sm.jpg\" style=\"height: 65px;\" border=\"0\">\r\n</div></div><div class=\"col-lg-8 col-md-9 col-sm-9\">\r\n<h4>Universality</h4>\r\n<p>Consistent user experience for all 18,000 police departments in the U.S.</p>\r\n</div></div>\r\n\r\n</div><div class=\"col-lg-1 col-0\">\r\n</div><div class=\"col-lg-5 col-md-12 col-sm-12\">\r\n\r\n<div class=\"row mB20\"><div class=\"col-lg-4 col-md-3 col-sm-3\"><div class=\"bigIcoWrap\">\r\n<img src=\"/openpolice/uploads/balance-sm.jpg\" style=\"height: 65px;\" border=\"0\">\r\n</div></div><div class=\"col-lg-8 col-md-9 col-sm-9\">\r\n<h4>Objectivity</h4>\r\n<p>Neutral, non-leading questions seeking truth and accuracy</p>\r\n</div></div>\r\n\r\n</div><div class=\"col-lg-1 col-0\"></div></div>\r\n<div class=\"row\"><div class=\"col-lg-5 col-md-12 col-sm-12\">\r\n\r\n<div class=\"row mB20\"><div class=\"col-lg-4 col-md-3 col-sm-3\"><div class=\"bigIcoWrap\">\r\n<img src=\"/openpolice/uploads/magnifying-eye-sm.jpg\" style=\"height: 65px;\" border=\"0\">\r\n</div></div><div class=\"col-lg-8 col-md-9 col-sm-9\">\r\n<h4>Transparency</h4>\r\n<p>Bypass state secrecy laws with uncensored public reporting<br></p>\r\n</div></div>\r\n\r\n</div><div class=\"col-lg-1 col-0\">\r\n</div><div class=\"col-lg-5 col-md-12 col-sm-12\">\r\n\r\n<div class=\"row mB20\"><div class=\"col-lg-4 col-md-3 col-sm-3\"><div class=\"bigIcoWrap\">\r\n<i class=\"fa fa-lock\" aria-hidden=\"true\"></i>\r\n</div></div><div class=\"col-lg-8 col-md-9 col-sm-9\">\r\n<h4>Privacy</h4>\r\n<p>Multiple options for how your information is shared with police and with the public</p>\r\n</div></div>\r\n\r\n</div><div class=\"col-lg-1 col-0\">\r\n</div></div>\r\n\r\n<p>ï¿½</p>\r\n<center><a href=\"/principles\" class=\"btn btn-lg btn-secondary\" onmouseover=\"this.style.color=\\'#FFF\\';\" onmouseout=\"this.style.color=\\'#2B3493\\';\" style=\"color: #2B3493;\">Learn more</a></center>',
			'NodePromptAfter' => '<style>
#blockWrap1847 { padding: 60px 0px; }
.bigIcoWrap { width: 120px; height: 120px; -moz-border-radius: 60px; border-radius: 60px; text-align: center; padding-top: 27px; border: 2px #2B3493 solid; background: #FFF; }
.bigIcoWrap i { font-size: 75px; margin-top: -7px; color: #000; }
</style>'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1783,
			'NodeTree' => '53',
			'NodeType' => 'Page',
			'NodePromptNotes' => 'for-law-enforcement',
			'NodePromptAfter' => 'OpenPolice.org for Law Enforcement::M::Did you receive a complaint through OpenPolice.org? Or do you want to improve your department\'s Accessibility Grade? We can help!::M::::M::',
			'NodeCharLimit' => '-1'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1784,
			'NodeTree' => '53',
			'NodeParentID' => '1785',
			'NodeType' => 'Instructions Raw',
			'NodePromptText' => '<p><br></p>
<p><br></p>
<p><br></p>
<div class="row">
<div class="col-md-5"> </div><div class="col-md-7">
<div class="w100" style="background: url(/survloop/uploads/trans-black-50.png); padding: 30px; text-shadow: -1px 1px 0px #000;">
<h1>For Law Enforcement</h1>
<p>Did you receive a complaint through OpenPolice.org? Or do you want to improve your department\'s Accessibility Grade? We can help!</p>
</div>
</div></div>
<p><br></p>
<p><br></p>
<p><br></p>
<p><br></p>
<p><br></p>'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1785,
			'NodeTree' => '53',
			'NodeParentID' => '1783',
			'NodeType' => 'Page Block',
			'NodeDefault' => '#000;;#FCFEFF;;#EDF8FF;;/openpolice/uploads/ten-rules-still-bg2.jpg;;w100;;Y;;left;;h100',
			'NodeOpts' => '71'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1786,
			'NodeTree' => '53',
			'NodeParentID' => '1789',
			'NodeType' => 'Instructions',
			'NodePromptText' => '<p><br></p>\r\n<h2>How OpenPolice.org can help your department</h2>\r\n<p>OpenPolice.org is a web app that helps people prepare, file, and track reports of police conduct. <b>This includes <i>compliments</i> as well as complaints.</b> For law enforcement agencies that value constitutional, community policing ï¿½ this is a tool for you.\r\n</p><p>\r\nOpenPolice.org was developed with contributions from police oversight professionals from across the country. The tools are designed to serve the needs of police commanders, attorneys, and others working to advance police oversight and accountability through better, more open data.\r\n</p><p>\r\nTogether, we can foster a culture of transparency and accountability to build community trust.\r\n</p>\r\n<p><br></p>'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1789,
			'NodeTree' => '53',
			'NodeParentID' => '1783',
			'NodeParentOrder' => '1',
			'NodeType' => 'Page Block',
			'NodeOpts' => '67'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1794,
			'NodeTree' => '42',
			'NodeParentID' => '1750',
			'NodeParentOrder' => '8',
			'NodeType' => 'Page Block',
			'NodeOpts' => '89'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1795,
			'NodeTree' => '42',
			'NodeParentID' => '1794',
			'NodeType' => 'Instructions Raw',
			'NodePromptText' => '[ Uploads ] hard-coded via OpenComplaintPrints.php function getReportUploads'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1796,
			'NodeTree' => '9',
			'NodeParentID' => '787',
			'NodeParentOrder' => '1',
			'NodeType' => 'Instructions',
			'NodePromptText' => '<p>&nbsp;</p>\r\n<h1 class=\"slBlueDark\">Misconduct Allegations</h1>\r\n\r\n<div class=\"relDiv\"><a name=\"wrongful-detention\" class=\"absDiv\" style=\"top: -60px;\"></a></div>\r\n<p>&nbsp;</p>\r\n<h3>Wrongful Detention</h3>\r\n<p>Police pulled over a vehicle or stopped someone without reasonable suspicion.</p>\r\n<p class=\"slGrey\">\"Do do you think anybody was wrongfully stopped or detained?\"</p>\r\n<p class=\"slGrey\">\"What makes you think that this stop was wrongful?\"</p>\r\n<p class=\"slGrey\"><i>Example: Police are called to a high school after a student is accused of theft. Police and teachers interrogate him as he\\'s held against his will. His parents are not contacted until many hours later.</i></p>\r\n<p class=\"slGrey\"><i>Example: A motorists gets pulled over for speeding. When the officer asks to search his vehicle, he says no. The officer then detains him for 30 minutes until drug dogs arrive.</i></p>\r\n\r\n<div class=\"relDiv\"><a name=\"wrongful-search\" class=\"absDiv\" style=\"top: -60px;\"></a></div>\r\n<p>&nbsp;</p>\r\n<h3>Wrongful Search</h3>\r\n<p>Police conducted a search without a warrant, probable cause, or consent.</p>\r\n<p class=\"slGrey\">\"Do you think anybody was wrongfully searched?\"</p>\r\n<p class=\"slGrey\">\"What makes you think that this search was wrongful?\"</p>\r\n<p class=\"slGrey\"><i>Example: An officer writes a man a ticket after pulling him over for an unsafe lane change. When the officer asks to search the car, the man refuses. The officer then orders the man out of his vehicle and searches it without the man\\'s consent.</i></p>\r\n\r\n<div class=\"relDiv\"><a name=\"wrongful-property-seizure\" class=\"absDiv\" style=\"top: -60px;\"></a></div>\r\n<p>&nbsp;</p>\r\n<h3>Wrongful Property Seizure</h3>\r\n<p>Property seizure which violated the protections provided by the 4th Amendment of the United States Constitution.</p>\r\n<p class=\"slGrey\">\"Do you think this property was wrongfully seized?\"</p>\r\n<p class=\"slGrey\">\"What makes you think that this property seizure was wrongful?\"</p>\r\n<p class=\"slGrey\"><i>Example: Rudy Ramirez was pulled over driving to Missouri to buy a used Corvette. A search turned up no drugs. But under civil forfeiture laws, the officers confiscated $6,000 in cash he had on hand to buy the car.</i></p>\r\n\r\n<div class=\"relDiv\"><a name=\"wrongful-property-damage\" class=\"absDiv\" style=\"top: -60px;\"></a></div>\r\n<p>&nbsp;</p>\r\n<h3>Wrongful Property Damage</h3>\r\n<p>Property damage which violated the protections provided by the 4th Amendment of the United States Constitution.</p>\r\n<p class=\"slGrey\">\"Do you think this property was wrongfully damaged?\"</p>\r\n<p class=\"slGrey\">\"What makes you think that this property damage was wrongful?\"</p>\r\n<p class=\"slGrey\"><i>Example: </i></p>\r\n\r\n<div class=\"relDiv\"><a name=\"sexual-harassment\" class=\"absDiv\" style=\"top: -60px;\"></a></div>\r\n<p>&nbsp;</p>\r\n<h3>Sexual Harassment</h3>\r\n<p>This includes the use of unwanted sexual advances or obscene remarks.</p>\r\n<p class=\"slGrey\">\"Do you think an officer sexually harassed someone? This includes the use of unwanted sexual advances or obscene remarks.\"</p>\r\n<p class=\"slGrey\">\"What makes you think that sexual harassment occurred?\"</p>\r\n\r\n<div class=\"relDiv\"><a name=\"sexual-assault\" class=\"absDiv\" style=\"top: -60px;\"></a></div>\r\n<p>&nbsp;</p>\r\n<h3>Sexual Assault</h3>\r\n<p>Any sexual act that a person is forced to engage in against their will. This includes any non-consensual sexual touching.</p>\r\n<p class=\"slGrey\">\"Do you think an officer sexually assaulted someone? Sexual assault is any sexual act that a person is forced to engage in against their will. This includes any non-consensual sexual touching.\"</p>\r\n<p class=\"slGrey\">\"What makes you think that a sexual assault occurred? We understand that this isn\\'t easy, but please provide as much detail as you can.\"</p>\r\n<p class=\"slGrey\"><i>Example: An officer put his hand down a motorist\\'s pants, groping his genitals. He said he was looking for drugs.</i></p>\r\n\r\n<div class=\"relDiv\"><a name=\"unreasonable-force\" class=\"absDiv\" style=\"top: -60px;\"></a></div>\r\n<p>&nbsp;</p>\r\n<h3>Unreasonable Force</h3>\r\n<p>\"Reasonable force\" is the amount of effort required by police to compel an unwilling person to comply. So \"unreasonable force\" is any unnecessary or excessive force beyond what\\'s required to do that.</p>\r\n<p class=\"slGrey\">\"Do you think the use of physical force on someone was unreasonable?\"</p>\r\n<p class=\"slGrey\">\"What makes you think that this use of physical force was unreasonable?\"</p>\r\n<p class=\"slGrey\"><i>Example: A woman drove into a road construction area by accident. An officer directing traffic approached her and yelled at her to get off the road. He then put his hand through her open window and twisted her arm until she moved her car.</i></p>\r\n\r\n<div class=\"relDiv\"><a name=\"wrongful-arrest\" class=\"absDiv\" style=\"top: -60px;\"></a></div>\r\n<p>&nbsp;</p>\r\n<h3>Wrongful Arrest</h3>\r\n<p>Police took someone into custody without a warrant or probable cause.</p>\r\n<p class=\"slGrey\">\"Do do you think anybody was arrested wrongfully?\"</p>\r\n<p class=\"slGrey\">\"What makes you think that their arrest was wrongful?\"</p>\r\n<p class=\"slGrey\"><i>Example: A woman asserts her first-amendment rights by video recording on-duty police. An officer arrests her after she refuses to turn off her camera.</i></p>\r\n\r\n<div class=\"relDiv\"><a name=\"excessive-arrest-charges\" class=\"absDiv\" style=\"top: -60px;\"></a></div>\r\n<p>&nbsp;</p>\r\n<h3>Excessive Arrest Charges</h3>\r\n<p>Police filed arrest charges to punish someone beyond what\\'s legal or appropriate.</p>\r\n<p class=\"slGrey\">\"Do you think the arrest charges filed against anyone were a form of retaliation?\"</p>\r\n<p class=\"slGrey\">\"What makes you think that these charges were retaliatory?\"</p>\r\n<p class=\"slGrey\"><i>Example: Upset about the arrest of his wife, a man accidentally shoves an officer. Another officer responds by violently arresting the man. He\\'s charged with \"disturbing the peace,\" \"resisting arrest,\" and \"assaulting an officer.\"</i></p>\r\n\r\n<div class=\"relDiv\"><a name=\"excessive-citation\" class=\"absDiv\" style=\"top: -60px;\"></a></div>\r\n<p>&nbsp;</p>\r\n<h3>Excessive Citation</h3>\r\n<p>Police filed citations to punish someone beyond what\\'s legal or appropriate.</p>\r\n<p class=\"slGrey\">\"Do you think the citations filed against anyone were wrongful or excessive?\"</p>\r\n<p class=\"slGrey\">\"What makes you think that these citations were excessive?\"</p>\r\n<p class=\"slGrey\"><i>Example: A motorist gets pulled over and cited for speeding. On the same ticket, the officer also cites him for \"illegal window tint,\" \"muffler violation,\" \"seat belt violation,\" and \"illegal lane change.\"</i></p>\r\n\r\n<div class=\"relDiv\"><a name=\"intimidation-weapon\" class=\"absDiv\" style=\"top: -60px;\"></a></div>\r\n<p>&nbsp;</p>\r\n<h3>Intimidation With Weapon</h3>\r\n<p>Police pointed or flaunted a weapon to intimidate someone who isnï¿½t a threat.</p>\r\n<p class=\"slGrey\">\"Police are legally allowed to display a weapon if they feel threatened. But it\\'s wrongful for police to use a weapon to intimidate people who aren\\'t a threat. Do you think an officer wrongfully intimidated someone by displaying a weapon or a police dog? (This does not include any violent use of force.)\"</p>\r\n<p class=\"slGrey\">\"What type of weapon?\"</p>\r\n<p class=\"slGrey\">\"What makes you think that this was wrongful?\"</p>\r\n<p class=\"slGrey\"><i>Example: While questioning a pedestrian, the officer pointed a taser at her in a threatening manner.</i></p>\r\n\r\n<div class=\"relDiv\"><a name=\"repeat-harassment\" class=\"absDiv\" style=\"top: -60px;\"></a></div>\r\n<p>&nbsp;</p>\r\n<h3>Repeat Harassment</h3>\n<p>Circumstances where a department member has had repeated or continued contact with a person without lawful police justification.</p>\r\n<p class=\"slGrey\">We asked you to focus this complaint on a single incident. But was this incident part of continued contact with an officer?</p>\n<p class=\"slGrey\">Do you think this incident was part of repeated harassment without lawful justification?</p>\r\n<p class=\"slGrey\">\"What makes you think that this was wrongful?\"</p>\r\n<p class=\"slGrey\"><i>Example of Repeated Harassment: Every few weeks, the same officer stops, questions, and frisks the same group of teenagers. He does this when theyï¿½re on their way home from school. But he never finds illegal items or arrests them.</i></p>\r\n\r\n<div class=\"relDiv\"><a name=\"bias-based\" class=\"absDiv\" style=\"top: -60px;\"></a></div>\r\n<p>&nbsp;</p>\r\n<h3>Bias-Based Policing</h3>\r\n<p>An officer\\'s conduct was based on a person\\'s race, gender, appearance, nationality, religion, age, class, sexual orientation, residence, disability, etc.</p>\r\n<p class=\"slGrey\">\"Do you think an officer acted in a biased or discriminatory manner? This means an officer\\'s conduct was based on a person\\'s race, gender, appearance, nationality, religion, age, class, sexual orientation, residence, disability, etc.\"</p>\r\n<p class=\"slGrey\">\"What makes you think that an officer\\'s conduct was biased or discriminatory?\"</p>\r\n<p class=\"slGrey\"><i>Example: An officer stops a black motorist in a primarily white neighborhood. The officer claimed he fit the description of a suspect.</i></p>\r\n\r\n<div class=\"relDiv\"><a name=\"neglect-of-duty\" class=\"absDiv\" style=\"top: -60px;\"></a></div>\r\n<p>&nbsp;</p>\r\n<h3>Neglect of Duty</h3>\r\n<p>The officer\\'s inaction did not follow appropriate policy, procedure, or guidelines. These are things an officer should have done, but didn\\'t do.</p>\r\n<p class=\"slGrey\">\"Do you think an officer neglected their duty by failing to take appropriate action? These are things an officer should have done, but didn\\'t do.\"</p>\r\n<p class=\"slGrey\">\"What makes you think that an officer neglected their duty?\"</p>\r\n<p class=\"slGrey\"><i>Example: A woman is groped on the street by an unknown man. When the police arrive, they refuse to file an official report or investigate.</i></p>\r\n\r\n<div class=\"relDiv\"><a name=\"policy-procedure\" class=\"absDiv\" style=\"top: -60px;\"></a></div>\r\n<p>&nbsp;</p>\r\n<h3>Policy or Procedure Violation</h3>\r\n<p>An officer took actions which did not follow appropriate policy, procedure, or guidelines.</p>\r\n<p class=\"slGrey\">\"Do you think an officer took actions that did not follow appropriate policy or procedure?\"</p>\r\n<p class=\"slGrey\">\"What actions do you think weren\\'t appropriate?\"</p>\r\n<p class=\"slGrey\"><i>Example: An officer parked his police vehicle in a handicap spot. There did not seem to be any emergency to justify this.</i></p>\r\n\r\n<div class=\"relDiv\"><a name=\"conduct-unbecoming\" class=\"absDiv\" style=\"top: -60px;\"></a></div>\r\n<p>&nbsp;</p>\r\n<h3>Conduct Unbecoming an Officer</h3>\r\n<p>A reasonable person would find the officer\\'s on or off duty conduct to be unbecoming a police officer, and such conduct reflected adversely on the department.</p>\r\n<p class=\"slGrey\">\"Do you think an officer\\'s on-duty or off-duty conduct was improper or unprofessional? This includes conduct that looks bad for the department or for police in general.\"</p>\r\n<p class=\"slGrey\">\"What makes you think that the conduct was unbecoming?\"</p>\r\n<p class=\"slGrey\"><i>Example: An off-duty officer likes to get drunk at a local bar. He sometimes gets in fights, threatens patrons, and drives home drunk.</i></p>\r\n\r\n<div class=\"relDiv\"><a name=\"officer-discourtesy\" class=\"absDiv\" style=\"top: -60px;\"></a></div>\r\n<p>&nbsp;</p>\r\n<h3>Officer Discourtesy</h3>\r\n<p>This includes the use of profanity, offensive language, loss of temper, verbal threats, impatience, or any rude behavior.</p>\r\n<p class=\"slGrey\">\"Was an officer discourteous in ways not included in other allegations? This includes the use of profanity, offensive language, loss of temper, verbal threats, impatience, or any discourteous behavior.\"</p>\r\n<p class=\"slGrey\">\"What makes you think that these actions were discourteous?\"</p>\r\n\r\n<div class=\"relDiv\"><a name=\"officer-no-id\" class=\"absDiv\" style=\"top: -60px;\"></a></div>\r\n<p>&nbsp;</p>\r\n<h3>Officer failed to provide ID upon request</h3>\r\n<p>An officer refused to provide ID when requested by a subject, though this may be allowed by police and law.</p>\r\n<p class=\"slGrey\">\"Did an officer refuse to provide identification?\"</p>\r\n\r\n<div class=\"relDiv\"><a name=\"wrongful-entry\" class=\"absDiv\" style=\"top: -60px;\"></a></div>\r\n<p>&nbsp;</p>\r\n<h3>Wrongful Entry</h3>\r\n<p>Police entered private property without a warrant or consent. (Gold Star only)</p>\r\n<p class=\"slGrey\">\"Did an officer enter a private home or workplace? (Yes) \r\nDid someone grant permission for an officer to enter? (No or Not sure)\r\nDid an officer enter anyway without a warrant? (Yes)\r\nDescribe what happened.\"</p>',
			'NodeOpts' => '67'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1797,
			'NodeTree' => '9',
			'NodeParentID' => '787',
			'NodeParentOrder' => '2',
			'NodeType' => 'Instructions',
			'NodePromptText' => '<p>&nbsp;</p>
<p>&nbsp;</p>
<div class="relDiv"><a name="valor" class="absDiv" style="top: -60px;"></a></div>
<h1 class="slBlueDark">Conduct Commendations</h1>

<p>&nbsp;</p>
<h3>Valor</h3>
<p>The officer showed extraordinary courage in the face of danger.</p>

<div class="relDiv"><a name="lifesaving" class="absDiv" style="top: -60px;"></a></div>
<p>&nbsp;</p>
<h3>Lifesaving</h3>
<p>The officer applied medical aid exceeding the normal call of duty.</p>

<div class="relDiv"><a name="de-escalation" class="absDiv" style="top: -60px;"></a></div>
<p>&nbsp;</p>
<h3>De-escalation</h3>
<p>The officer skillfully calmed down a tense situation, using minimal or no force.</p>

<div class="relDiv"><a name="professionalism" class="absDiv" style="top: -60px;"></a></div>
<p>&nbsp;</p>
<h3>Professionalism</h3>
<p>The officer behaved in a courteous, respectful, and straightforward manner.</p>

<div class="relDiv"><a name="fairness" class="absDiv" style="top: -60px;"></a></div>
<p>&nbsp;</p>
<h3>Fairness</h3>
<p>The officer\'s use of power was reasonable, appropriate, and free from bias.</p>

<div class="relDiv"><a name="constitutional-policing" class="absDiv" style="top: -60px;"></a></div>
<p>&nbsp;</p>
<h3>Constitutional Policing</h3>
<p>The officer\'s words and actions showed respect for the Bill of Rights.</p>

<div class="relDiv"><a name="compassion" class="absDiv" style="top: -60px;"></a></div>
<p>&nbsp;</p>
<h3>Compassion</h3>
<p>The officer displayed empathy and generosity beyond the call of duty.</p>

<div class="relDiv"><a name="community-service" class="absDiv" style="top: -60px;"></a></div>
<p>&nbsp;</p>
<h3>Community Service</h3>
<p>The officer engaged the community to build bonds of trust.</p>

<p>&nbsp;</p>

<p class="slGrey">Updated: February 25, 2019</p>

<p>&nbsp;</p>',
			'NodeOpts' => '67'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1806,
			'NodeTree' => '28',
			'NodeParentID' => '1819',
			'NodeType' => 'Instructions Raw',
			'NodePromptText' => '<p><br></p>
<p><br></p>
<div class="row">
<div class="col-md-1"><div class="icoHuge slBlueDark" style="margin-top: -20px;"><i class="fa fa-facebook-official" aria-hidden="true"></i></div></div>
<div class="col-md-1 fPerc133 slBlueDark icoScoreVal">+3</div>
<div class="col-md-8">
<div class="fPerc133 disIn slBlueDark">Has a Facebook page </div><div class="disIn fPerc66 slGrey">(with public comments on)</div>
<p><b>What\'s this?</b><br />
This department has a public Facebook page that allows public comments.</p>
<p><b>Why is this important?</b><br />
Departments that use social media are better able to address community needs and concerns.</p>
</div>
</div>
<p><br></p>
<p><br></p>'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1807,
			'NodeTree' => '21',
			'NodeParentID' => '858',
			'NodeType' => 'Layout Row',
			'NodeCharLimit' => '2'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1808,
			'NodeTree' => '21',
			'NodeParentID' => '1814',
			'NodeParentOrder' => '1',
			'NodeType' => 'Instructions',
			'NodePromptText' => '<p>The higher the score, the easier it is for people to share complaints with a department. Unfortunately, most get failing grades by making it too difficult. The good news is that most departments can improve their scores by making a few small changes.</p>
<p><a href="/how-we-rate-departments" class="btn btn-lg btn-secondary">About Scoring Criteria Details</a></p>
<p><br></p>
<p><br></p>
<p><br></p>',
			'NodePromptAfter' => '<style> #node1815kids { margin: 20px 0px; } </style>'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1809,
			'NodeTree' => '36',
			'NodeParentID' => '2155',
			'NodeParentOrder' => '2',
			'NodeType' => 'Instructions Raw',
			'NodePromptText' => '[ How Can Complaints Be Submitted AND Investigated? ] hard-coded in view openpolice.nodes.1809-volun-dept-edit-how-investigate',
			'NodePromptAfter' => '<style> #node1281kids { margin-top: 10px; } </style>'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1810,
			'NodeTree' => '1',
			'NodeParentID' => '275',
			'NodeType' => 'Radio',
			'NodePromptText' => 'Did this incident begin with a forcible entry or SWAT raid?',
			'NodeDataStore' => 'Scenes:ScnForcibleEntry'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1811,
			'NodeTree' => '42',
			'NodeParentID' => '1534',
			'NodeParentOrder' => '2',
			'NodeType' => 'Data Print Row',
			'NodeDataStore' => 'Scenes:ScnForcibleEntry'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1814,
			'NodeTree' => '21',
			'NodeParentID' => '1807',
			'NodeParentOrder' => '1',
			'NodeType' => 'Layout Column',
			'NodeCharLimit' => '4'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1815,
			'NodeTree' => '21',
			'NodeParentID' => '1807',
			'NodeParentOrder' => '3',
			'NodeType' => 'Layout Column',
			'NodeCharLimit' => '7'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1816,
			'NodeTree' => '21',
			'NodeParentID' => '1852',
			'NodeParentOrder' => '1',
			'NodeType' => 'Instructions Raw',
			'NodePromptText' => '[ Bar Graphs of Criteria ] hard-coded via OpenPartners.php function printDeptAccScoreBars, DepartmentScores.php function printTotsBars, to view openpolice.nodes.1816-depts-score-criteria-bars',
			'NodeOpts' => '97'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1819,
			'NodeTree' => '28',
			'NodeParentID' => '1126',
			'NodeParentOrder' => '11',
			'NodeType' => 'Page Block'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1820,
			'NodeTree' => '28',
			'NodeParentID' => '1126',
			'NodeParentOrder' => '12',
			'NodeType' => 'Page Block',
			'NodeDefault' => '#2B3493;;#FFF;;#EDF8FF;;;;w100;;N;;left;;auto',
			'NodeOpts' => '71'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1821,
			'NodeTree' => '28',
			'NodeParentID' => '1820',
			'NodeType' => 'Instructions Raw',
			'NodePromptText' => '<p><br></p>
<p><br></p>
<h2>About other <nobr>grading criteria ...</nobr></h2>
<p><br></p>
<p><br></p>'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1822,
			'NodeTree' => '28',
			'NodeParentID' => '1126',
			'NodeParentOrder' => '3',
			'NodeType' => 'Page Block',
			'NodeDefault' => '#2B3493;;#FFF;;#FCFEFF;;;;w100;;N;;left;;auto',
			'NodeOpts' => '71'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1823,
			'NodeTree' => '28',
			'NodeParentID' => '1822',
			'NodeType' => 'Instructions',
			'NodePromptText' => '<a id="gradeDesc" name="gradeDesc"></a>
<p><br></p>
<p><br></p>
<h2>About grading criteria <nobr>highlighted in charts ...</nobr></h2>
<p><br></p>
<p><br></p>',
			'NodePromptAfter' => '<style> #blockWrap1822 { margin-top: 50px; } </style>'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1824,
			'NodeTree' => '28',
			'NodeParentID' => '1126',
			'NodeParentOrder' => '4',
			'NodeType' => 'Page Block'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1825,
			'NodeTree' => '28',
			'NodeParentID' => '1824',
			'NodeType' => 'Instructions Raw',
			'NodePromptText' => '<p><br></p>
<div class="row">
<div class="col-md-1 slBlueDark"><div class="icoHuge" style="margin-top: -20px;"><i class="fa fa-info-circle" aria-hidden="true"></i></div></div>
<div class="col-md-1 fPerc133 slBlueDark icoScoreVal">+14</div>
<div class="col-md-10">
<div class="fPerc133 disIn slBlueDark">Has complaint information on unique web page </div><div class="disIn fPerc80">(not just on PDF)</div>
<p><b>What\'s this?</b><br />
Users can find a distinct department webpage featuring information about how complaints can be filed for investigation. The page must include information about the department\'s policies and procedures for processing complaints. PDF-only pages do not count.</p>
<p><b>Why is this important?</b><br />
Departments should devote a single webpage to the topic of police complaints. Including this information on a static URL improves page accessibility.</p>
</div>
</div>
<p><br></p>'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1826,
			'NodeTree' => '28',
			'NodeParentID' => '1126',
			'NodeParentOrder' => '5',
			'NodeType' => 'Page Block'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1827,
			'NodeTree' => '28',
			'NodeParentID' => '1826',
			'NodeType' => 'Instructions Raw',
			'NodePromptText' => '<p><br></p>
<div class="row">
<div class="col-md-1"><div class="icoHuge slBlueDark" style="margin-top: -20px;"><i class="fa fa-cloud-upload" aria-hidden="true"></i></div></div>
<div class="col-md-1 fPerc133 slBlueDark icoScoreVal">+20</div>
<div class="col-md-8">
<div class="fPerc133 disIn slBlueDark">Has online-submittable complaint form </div><div class="disIn fPerc80">(not just a PDF)</div>
<p><b>What\'s this?</b><br />
Users can file detailed complaints through an online form. This could be a single-page form or a multi-step form wizard. PDF-only forms do not count.</p>
<p><b>Why is this important?</b><br />
Providing this option gives users a friendly and low-stress option to submit a complaint. Departments will soon be able to offer this option on their website by linking to a unique OpenPolice.org page for their department. Offering this easy and low-stress submission tool signals a willingness to accept and investigate complaints.</p>
</div>
</div>
<p><br></p>'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1828,
			'NodeTree' => '28',
			'NodeParentID' => '1126',
			'NodeParentOrder' => '6',
			'NodeType' => 'Page Block'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1829,
			'NodeTree' => '28',
			'NodeParentID' => '1828',
			'NodeType' => 'Instructions Raw',
			'NodePromptText' => '<p><br></p>
<div class="row">
<div class="col-md-1 slBlueDark"><div class="icoHuge" style="margin-top: -20px;"><i class="fa fa-at" aria-hidden="true"></i></div></div>
<div class="col-md-1 fPerc133 slBlueDark icoScoreVal">+10</div>
<div class="col-md-8">
<div class="fPerc133 slBlueDark">Investigates complaints sent via email</div>
<p><b>What\'s this?</b><br />
This department accepts and investigates complaints that are emailed in.</p>
<p><b>Why is this important?</b><br />
Departments should provide multiple ways to accept complaints, including by email. This is also the optimal way for OpenPolice.org to send departments new user-generated complaints.</p>
</div>
</div>
<p><br></p>
'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1830,
			'NodeTree' => '28',
			'NodeParentID' => '1126',
			'NodeParentOrder' => '7',
			'NodeType' => 'Page Block'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1831,
			'NodeTree' => '28',
			'NodeParentID' => '1830',
			'NodeType' => 'Instructions Raw',
			'NodePromptText' => '<p><br></p>
<div class="row">
<div class="col-md-1"><div class="icoHuge slBlueDark" style="margin-top: -20px;"><i class="fa fa-file-text" aria-hidden="true"></i></div></div>
<div class="col-md-1 fPerc133 slBlueDark icoScoreVal">+10</div>
<div class="col-md-8">
<div class="fPerc133 slBlueDark">Official department form not required for investigation</div>
<p><b>What\'s this?</b><br />
This department doesn\'t require users to submit complaints using their official form or format.</p>
<p><b>Why is this important?</b><br />
Departments should allow users to submit complaints using alternative formats. This also means the department is open to investigate complaints submitted using third-party formats, like OpenPolice.org.</p>
</div>
</div>
<p><br></p>'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1832,
			'NodeTree' => '28',
			'NodeParentID' => '1126',
			'NodeParentOrder' => '8',
			'NodeType' => 'Page Block'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1833,
			'NodeTree' => '28',
			'NodeParentID' => '1832',
			'NodeType' => 'Instructions Raw',
			'NodePromptText' => '<p><br></p>
<div class="row">
<div class="col-md-1 slBlueDark"><div class="icoHuge" style="margin-top: -20px;"><i class="fa fa-user-secret" aria-hidden="true"></i></div></div>
<div class="col-md-1 fPerc133 slBlueDark icoScoreVal">+10</div>
<div class="col-md-8">
<div class="fPerc133 slBlueDark">Anonymous complaints investigated</div>
<p><b>What\'s this?</b><br />
This department accepts and investigates complaints submitted by people who don\'t want to be identified.</p>
<p><b>Why is this important?</b><br />
Many people who wish to submit complaints fear police retaliation. They shouldn\'t be silenced and may have crucial information that deserves to be investigated.</p>
</div>
</div>
<p><br></p>
'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1834,
			'NodeTree' => '28',
			'NodeParentID' => '1126',
			'NodeParentOrder' => '9',
			'NodeType' => 'Page Block'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1835,
			'NodeTree' => '28',
			'NodeParentID' => '1834',
			'NodeType' => 'Instructions Raw',
			'NodePromptText' => '<p><br></p>
<div class="row">
<div class="col-md-1"><div class="icoHuge slRedDark" style="margin-top: -20px;"><i class="fa fa-certificate" aria-hidden="true"></i></div></div>
<div class="col-md-1 fPerc133 slRedDark icoScoreVal">-10</div>
<div class="col-md-8">
<div class="fPerc133 slRedDark">Requires notary </div><div class="disIn fPerc80">(for one or more types of complaint)</div>
<p><b>What\'s this?</b><br />
Some state and local lawmakers have passed so-called Law Enforcement Officers\' Bill of Rights (LEOBR) laws. These often include provisions requiring certain types of complaints to be certifed by a public notary.</p>
<p><b>Why is this important?</b><br />
Departments should never put up legalistic barriers against people who want to report misconduct. Because these laws are hostile to people\'s right to report abuse, departments that adhere to them will be docked 10 points.</p>
</div>
</div>
<p><br></p>'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1836,
			'NodeTree' => '28',
			'NodeParentID' => '1126',
			'NodeParentOrder' => '10',
			'NodeType' => 'Page Block'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1837,
			'NodeTree' => '28',
			'NodeParentID' => '1836',
			'NodeType' => 'Instructions Raw',
			'NodePromptText' => '<p><br></p>
<div class="row">
<div class="col-md-1 slBlueDark"><div class="icoHuge" style="margin-top: -20px;"><i class="fa fa-globe" aria-hidden="true"></i></div></div>
<div class="col-md-1 fPerc133 slBlueDark icoScoreVal">+3</div>
<div class="col-md-8">
<div class="fPerc133 slBlueDark">Has unique department website</div>
<p><b>What\'s this?</b><br />
This department has a website. It may exist as a standalone site or within a larger municipal website.</p>
<p><b>Why is this important?</b><br />
Smaller departments must, at minimum, have a webpage with a static URL. Those lacking the capacity to build one should either disincorporate or merge with a better-resourced department.</p>
</div>
</div>
<p><br></p>
'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1838,
			'NodeTree' => '28',
			'NodeParentID' => '1126',
			'NodeParentOrder' => '13',
			'NodeType' => 'Page Block'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1839,
			'NodeTree' => '28',
			'NodeParentID' => '1838',
			'NodeType' => 'Instructions Raw',
			'NodePromptText' => '<p><br></p>
<div class="nodeAnchor"><a id="n1" name="n1"></a></div>
<p><br></p>
<div class="row">
<div class="col-md-1"></div>
<div class="col-md-1 fPerc133 slBlueDark">+10</div>
<div class="col-md-8">
<div class="fPerc133 disIn slBlueDark">Has complaint information linked from home page</div>
<p><b>What\'s this?</b><br />
On the department\'s home page, users can find a clear link to information about how to submit a complaint.</p>
<p><b>Why is this important?</b><br />
Departments should make it easy for users to find this important information from their homepage. It should not be hidden on a remote page or buried among other topics.</p>
</div>
</div>
<p><br></p>

<div class="nodeAnchor"><a id="n2" name="n2"></a></div>
<p><br></p>
<div class="row">
<div class="col-md-1"></div>
<div class="col-md-1 fPerc133 slBlueDark">+10</div>
<div class="col-md-8">
<div class="fPerc133 disIn slBlueDark">Has complaint form PDF on website</div>
<p><b>What\'s this?</b><br />
Users can download and print a PDF version of the department complaint form.</p>
<p><b>Why is this important?</b><br />
For departments that haven\'t yet built online-submittable complaint forms, PDFs can provide a stopgap solution.</p>
</div>
</div>
<p><br></p>

<div class="nodeAnchor"><a id="n3" name="n3"></a></div>
<p><br></p>
<div class="row">
<div class="col-md-1"></div>
<div class="col-md-1 fPerc133 slBlueDark">+3</div>
<div class="col-md-8">
<div class="fPerc133 disIn slBlueDark">Has a Twitter account</div>
<p><b>What\'s this?</b><br />
This department has a public Twitter account.</p>
<p><b>Why is this important?</b><br />
Departments that use social media are better able to address community needs and concerns.</p>
</div>
</div>
<p><br></p>

<div class="nodeAnchor"><a id="n4" name="n4"></a></div>
<p><br></p>
<div class="row">
<div class="col-md-1"></div>
<div class="col-md-1 fPerc133 slBlueDark">+3</div>
<div class="col-md-8">
<div class="fPerc133 disIn slBlueDark">Has a YouTube channel</div>
<p><b>What\'s this?</b><br />
This department has a public YouTube channel.</p>
<p><b>Why is this important?</b><br />
Departments that use social media are better able to address community needs and concerns.</p>
</div>
</div>
<p><br></p>

<div class="nodeAnchor"><a id="n5" name="n5"></a></div>
<p><br></p>
<div class="row">
<div class="col-md-1"></div>
<div class="col-md-1 fPerc133 slBlueDark">+2</div>
<div class="col-md-8">
<div class="fPerc133 disIn slBlueDark">Investigates complaints sent via phone</div>
<p><b>What\'s this?</b><br />
This department accepts and investigates complaints made over the phone.</p>
<p><b>Why is this important?</b><br />
Departments should provide multiple ways to accept complaints, including over the phone.</p>
</div>
</div>
<p><br></p>

<div class="nodeAnchor"><a id="n6" name="n6"></a></div>
<p><br></p>
<div class="row">
<div class="col-md-1"></div>
<div class="col-md-1 fPerc133 slBlueDark">+2</div>
<div class="col-md-8">
<div class="fPerc133 disIn slBlueDark">Investigates complaints sent via postal mail</div>
<p><b>What\'s this?</b><br />
This department accepts and investigates complaints that are mailed in.</p>
<p><b>Why is this important?</b><br />
Departments should provide multiple ways to accept complaints, including postal mail.</p>
</div>
</div>
<p><br></p>

<div class="nodeAnchor"><a id="n7" name="n7"></a></div>
<p><br></p>
<div class="row">
<div class="col-md-1"></div>
<div class="col-lg-1 col-md-12 col-sm-12 slRedDark"><div class="fPerc66">(Misses out <nobr>on 34</nobr> other points)</div></div>
<div class="col-md-8">
<div class="fPerc133 disIn slRedDark">Requires complaints to be filed in person</div>
<p><b>What\'s this?</b><br />
This department only accepts or investigate complaints that are filed at the station.</p>
<p><b>Why is this important?</b><br />
Departments should never require that people visit the station to report misconduct or have their complaints investigated. Because many users want to avoid another in-person police encounter,  departments should provide one or more additional ways to submit complaints.</p>
</div>
</div>
<p><br></p>

<p><br></p>'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1841,
			'NodeTree' => '12',
			'NodeParentID' => '793',
			'NodeParentOrder' => '10',
			'NodeType' => 'Page Block',
			'NodeDefault' => '#2B3493;;#FFF;;#EDF8FF;;/openpolice/uploads/ten-rules-still-bg3.jpg;;w100;;Y;;left;;auto',
			'NodeOpts' => '71'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1842,
			'NodeTree' => '12',
			'NodeParentID' => '1841',
			'NodeType' => 'Layout Row',
			'NodeCharLimit' => '2'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1843,
			'NodeTree' => '12',
			'NodeParentID' => '1842',
			'NodeType' => 'Layout Column',
			'NodeCharLimit' => '8'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1844,
			'NodeTree' => '12',
			'NodeParentID' => '1842',
			'NodeParentOrder' => '1',
			'NodeType' => 'Layout Column',
			'NodeCharLimit' => '4'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1846,
			'NodeTree' => '12',
			'NodeParentID' => '1843',
			'NodeType' => 'Instructions',
			'NodePromptText' => '<div id="forLawSpcTop"><br></div>
<div id="" style="background: url(/survloop/uploads/trans-black-50.png); padding: 30px; text-shadow: -1px 1px 1px #000;">
<a href="/law-enforcement-faq"><h3>For Law Enforcement</h3></a>
<p>Did you receive a complaint through OpenPolice.org? Or do you want to improve your department\'s Accessibility Grade? We can help!</p>
<p><a class="btn btn-secondary btn-lg m15" href="/for-law-enforcement" style="color: rgb(43, 52, 147);" onmouseover="this.style.color=\'#EDF8FF\';" onmouseout="this.style.color=\'#2B3493\';">Explore our law enforcement tools</a></p>
</div>
<div id="forLawSpcBot"><br></div>',
			'NodePromptAfter' => '<style>
#blockWrap1841 { padding: 60px 0px; }
#blockWrap1107 { margin-bottom: 0px; }
#forLawSpcTop, #forLawSpcBot { margin-bottom: 120px; }

@media screen and (max-width: 768px) {
  #forLawSpcTop, #forLawSpcBot { margin-bottom: 60px; }
}
@media screen and (max-width: 480px) {
  #forLawSpcTop, #forLawSpcBot { margin-bottom: 10px; }
}
</style>'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1847,
			'NodeTree' => '12',
			'NodeParentID' => '793',
			'NodeParentOrder' => '6',
			'NodeType' => 'Page Block',
			'NodeDefault' => '#2B3493;;#FFF;;#2B3493;;;;w100;;N;;left;;auto',
			'NodeOpts' => '71'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1848,
			'NodeTree' => '12',
			'NodeParentID' => '793',
			'NodeParentOrder' => '3',
			'NodeType' => 'Page Block',
			'NodeDefault' => '#000;;#FFF;;#FFF;;;;w100;;N;;left;;auto',
			'NodeOpts' => '4757'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1849,
			'NodeTree' => '12',
			'NodeParentID' => '1848',
			'NodeType' => 'Instructions Raw',
			'NodePromptText' => '<!-- Begin Mailchimp Signup Form -->
<link href="//cdn-images.mailchimp.com/embedcode/horizontal-slim-10_7.css" rel="stylesheet" type="text/css">
<div id="mc_embed_signup">
<form action="https://flexyourrights.us5.list-manage.com/subscribe/post?u=6b424f1b6d7c45a5906cd7579&id=31f97a79b7" 
    method="post" id="mc-embedded-subscribe-form" name="mc-embedded-subscribe-form" class="validate" target="_blank" 
    novalidate>
    <div id="mc_embed_signup_scroll" style="color: #fff;">
        <div class="row"><div class="col-md-4" style="text-align: left;">
          <h3 id="mailchimpH2" style="display: inline; margin: 30px 10px 0px 0px;"><nobr>Join Our Newsletter</nobr></h3>
        </div><div class="col-md-8" style="text-align: left;">
          <div style="padding-top: 9px;">Get email updates about the app, policing news, and your rights.</div>
        </div></div>
        <div class="row">
            <div class="col-md-9">
                <div class="mc-field-group w100 mT10">
                    <input type="email" value="" name="EMAIL" class="form-control form-control-lg w100" id="mce-EMAIL" 
                        placeholder="Email Address" required>
                </div>
                <div id="mce-responses" class="clear">
                    <div class="response" id="mce-error-response" style="display:none"></div>
                    <div class="response" id="mce-success-response" style="display:none"></div>
                </div>
                <div style="position: absolute; left: -5000px;" aria-hidden="true">
                    <input type="text" name="b_6b424f1b6d7c45a5906cd7579_31f97a79b7" tabindex="-1" value=""></div>
            </div>
            <div class="col-md-3 taL">
                <input type="submit" value="Subscribe" name="subscribe" id="mc-embedded-subscribe" 
                    class="btn btn-secondary btn-lg w100 mT10">
            </div>
        </div>
</div></form></div>
<!--End mc_embed_signup-->',
			'NodePromptAfter' => '<style>
#blockWrap1848 { padding: 60px 0px; }
#mc_embed_signup_scroll{ padding-bottom: 30px; }
#mc_embed_signup{ color: #FFF; margin: 33px 0px -7px 0px; }
@media screen and (max-width: 768px) { #mc-embedded-subscribe { max-width: 180px; } }
</style>'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1850,
			'NodeTree' => '21',
			'NodeParentID' => '1852',
			'NodeType' => 'Instructions',
			'NodePromptText' => '<h3 style="margin: 0px 0px 15px 0px;">Frequency of Key Accessibility Measurements<br></h3>',
			'NodePromptAfter' => '<style> #blockWrap1852 { margin-top: 50px; } </style>'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1851,
			'NodeTree' => '21',
			'NodeParentID' => '1807',
			'NodeParentOrder' => '2',
			'NodeType' => 'Layout Column',
			'NodeCharLimit' => '1'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1852,
			'NodeTree' => '21',
			'NodeParentID' => '1815',
			'NodeType' => 'Page Block',
			'NodeOpts' => '89'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1853,
			'NodeTree' => '12',
			'NodeParentID' => '793',
			'NodeParentOrder' => '9',
			'NodeType' => 'Page Block',
			'NodeDefault' => '#EDF8FF;;#000;;#416CBD;;;;w100;;N;;left;;auto',
			'NodeOpts' => '71'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1854,
			'NodeTree' => '12',
			'NodeParentID' => '1853',
			'NodeType' => 'Layout Row',
			'NodeCharLimit' => '3'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1855,
			'NodeTree' => '12',
			'NodeParentID' => '1854',
			'NodeType' => 'Layout Column',
			'NodeCharLimit' => '7'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1856,
			'NodeTree' => '12',
			'NodeParentID' => '1854',
			'NodeParentOrder' => '1',
			'NodeType' => 'Layout Column',
			'NodeCharLimit' => '1'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1857,
			'NodeTree' => '12',
			'NodeParentID' => '1854',
			'NodeParentOrder' => '2',
			'NodeType' => 'Layout Column',
			'NodeCharLimit' => '4'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1858,
			'NodeTree' => '12',
			'NodeParentID' => '1860',
			'NodeType' => 'Instructions Raw',
			'NodePromptText' => '<p><!-- ( dept accessibility us map ) --></p>',
			'NodeOpts' => '97'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1859,
			'NodeTree' => '12',
			'NodeParentID' => '1855',
			'NodeType' => 'Instructions',
			'NodePromptText' => '<h3>Police Department <nobr>Accessibility Grades</nobr></h3><p>
The higher the score, the easier it is for people to share complaints. Most departments fail, but they can improve their scores by making a few small changes.<br></p>',
			'NodePromptAfter' => '<style>
#blockWrap1853 { padding: 60px 0px; }
</style>'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1860,
			'NodeTree' => '12',
			'NodeParentID' => '1853',
			'NodeParentOrder' => '1',
			'NodeType' => 'Page Block',
			'NodeOpts' => '89'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1861,
			'NodeTree' => '12',
			'NodeParentID' => '1857',
			'NodeType' => 'Instructions',
			'NodePromptText' => '<div id="deptAccMoreGap"> </div><p><a id="btnDeptAccMore" class="btn btn-primary btn-lg" href="/department-accessibility">How we score departments</a></p>',
			'NodePromptAfter' => '<script type="text/javascript"> setTimeout("document.getElementById(\'node1860\').style.background=\'#FFF\'", 100); </script>
<style>
a#btnDeptAccMore:link, a#btnDeptAccMore:active, a#btnDeptAccMore:visited { color: #FFF; }
a#btnDeptAccMore:hover { color: #2B3493; }
#deptAccMoreGap { height: 80px; }
@media screen and (max-width: 992px) { #deptAccMoreGap { height: 115px; } }
@media screen and (max-width: 768px) { #deptAccMoreGap { height: 0px; } }
</style>'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1863,
			'NodeTree' => '21',
			'NodeParentID' => '1864',
			'NodeType' => 'Instructions Raw',
			'NodePromptText' => '[ Map of All Police Department Accessibility Scores ] hard-coded via OpenPartners.php function publicDeptAccessMap, Geographs.php function embedMap, to view survloop.reports.embed-google-map',
			'NodeOpts' => '97'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1864,
			'NodeTree' => '21',
			'NodeParentID' => '858',
			'NodeParentOrder' => '1',
			'NodeType' => 'Page Block',
			'NodeOpts' => '89'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1865,
			'NodeTree' => '12',
			'NodeParentID' => '793',
			'NodeParentOrder' => '11',
			'NodeType' => 'Page Block',
			'NodeDefault' => '#EDF8FF;;#333;;#416CBD;;;;w100;;N;;left;;auto',
			'NodeOpts' => '71'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1866,
			'NodeTree' => '12',
			'NodeParentID' => '1865',
			'NodeParentOrder' => '1',
			'NodeType' => 'Layout Row',
			'NodeCharLimit' => '3'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1867,
			'NodeTree' => '12',
			'NodeParentID' => '1866',
			'NodeType' => 'Layout Column',
			'NodeCharLimit' => '4'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1868,
			'NodeTree' => '12',
			'NodeParentID' => '1866',
			'NodeParentOrder' => '1',
			'NodeType' => 'Layout Column',
			'NodeCharLimit' => '4'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1869,
			'NodeTree' => '12',
			'NodeParentID' => '1866',
			'NodeParentOrder' => '2',
			'NodeType' => 'Layout Column',
			'NodeCharLimit' => '4'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1870,
			'NodeTree' => '12',
			'NodeParentID' => '2103',
			'NodeType' => 'Instructions Raw',
			'NodePromptText' => '<div class=\"pB20\"><img class=\"bigTmbRound\" src=\"/openpolice/uploads/katryna-smile-crop-sm.jpg\" border=0 ></div>\r\n<div class=\"bigQuote\"><span class=\"slBlueDark\">ï¿½</span></div>\r\n<div class=\"quoteTxt\"><p>I\\'ve never used a police complaints software before ï¿½ but I\\'m feelin\\' this!</p></div>\r\n<p><b class=\"slBlueDark\">Katryna Lawson</b><br />OpenPolice.org User</p>'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1872,
			'NodeTree' => '12',
			'NodeParentID' => '2102',
			'NodeType' => 'Instructions Raw',
			'NodePromptText' => '<div class=\"pB20\"><img class=\"bigTmbRound\" src=\"/openpolice/uploads/norm-stamper.jpeg\" border=0 ></div>\r\n<div class=\"bigQuote\"><span class=\"slBlueDark\">ï¿½</span></div>\r\n<div class=\"quoteTxt\"><p>OpenPolice.org will upset some officers, but it will help police leaders identify, analyze, and correct problematic police conduct.</p></div>\r\n<p><b class=\"slBlueDark\">Norm Stamper</b><br />Former Chief of Police, Seattle PD</p>'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1873,
			'NodeTree' => '12',
			'NodeParentID' => '1865',
			'NodeType' => 'Instructions Raw',
			'NodePromptText' => '<h3>What others say</h3>',
			'NodePromptAfter' => '<style>
#blockWrap1865 { padding: 60px 0px; margin-bottom: -75px; } 
#node1873 { padding-bottom: 30px; }
.bigQuote { font-size: 140px; line-height: 70px; margin: -10px 0px -45px 0px; font-family: Georgia, serif; }
.quoteTxt { min-height: 90px; }
@media screen and (max-width: 992px) { .quoteTxt { min-height: 140px; } }
@media screen and (max-width: 768px) { .quoteTxt { min-height: 80px; } }
@media screen and (max-width: 480px) { .quoteTxt { min-height: 80px; } }
</style>'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1874,
			'NodeTree' => '12',
			'NodeParentID' => '2101',
			'NodeType' => 'Instructions',
			'NodePromptText' => '<div class=\"pB20\"><img class=\"bigTmbRound\" src=\"/openpolice/uploads/cynthia-conti-cook.jpg\" border=0 ></div>\r\n<div class=\"bigQuote\"><span class=\"slBlueDark\">ï¿½</span></div>\r\n<div class=\"quoteTxt\"><p>OpenPolice.org helps people document police misconduct without relying on the police. This independence ensures that this vital data is transparent and accessible to the public.</p></div>\r\n<p><b class=\"slBlueDark\">Cynthia Conti-Cook</b><br />Staff Attorney, New York Legal Aid Society</p>'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1876,
			'NodeTree' => '12',
			'NodeParentID' => '793',
			'NodeParentOrder' => '1',
			'NodeType' => 'Instructions Raw',
			'NodePromptText' => '[ Hero Image Credit ] hard-coded view openpolice.nodes.1876-home-page-hero-credit'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1877,
			'NodeTree' => '54',
			'NodeType' => 'Page',
			'NodePromptNotes' => 'attorneys-faq',
			'NodePromptAfter' => 'Attorneys FAQ::M::::M::::M::',
			'NodeCharLimit' => '-1'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1878,
			'NodeTree' => '54',
			'NodeParentID' => '1877',
			'NodeType' => 'Instructions',
			'NodePromptText' => '<h2>Welcome to Attorneys FAQ.</h2>
<p>Edit this node to fill in your page! This node could be your entire page, or just one little component.</p>'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1879,
			'NodeTree' => '13',
			'NodeParentID' => '829',
			'NodeType' => 'Radio',
			'NodePromptText' => '<div style=\"margin-top: -20px;\"><p>If you haven\\'t done so already, please review our <a href=\"/frequently-asked-questions#faq-complaint\" target=\"_blank\">Complaint Process FAQs</a>.</p></div>\r\n<p>ï¿½</p>\r\n<div style=\"margin-top: -20px;\"><p><b>Type of police incident inquiry</b></p></div>',
			'NodeOpts' => '5'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1880,
			'NodeTree' => '13',
			'NodeParentID' => '829',
			'NodeParentOrder' => '1',
			'NodeType' => 'Radio',
			'NodePromptText' => '<div style=\"margin-top: -20px;\"><p>If you haven\\'t done so already, please review our <a href=\"/frequently-asked-questions#faq-law-enforcement\" target=\"_blank\">FAQs for Law Enforcement</a>.</p></div>\r\n<p>ï¿½</p>\r\n<div style=\"margin-top: -20px;\"><p><b>Type of law enforcement inquiry</b></p></div>',
			'NodeOpts' => '5'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1881,
			'NodeTree' => '13',
			'NodeParentID' => '829',
			'NodeParentOrder' => '2',
			'NodeType' => 'Radio',
			'NodePromptText' => '<div style=\"margin-top: -20px;\"><p>If you haven\\'t done so already, please review our <a href=\"/frequently-asked-questions#faq-attorneys\" target=\"_blank\">FAQs for Attorneys</a>.</p></div>\r\n<p>ï¿½</p>\r\n<div style=\"margin-top: -20px;\"><p><b>Type of attorney inquiry</b></p></div>',
			'NodeOpts' => '5'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1882,
			'NodeTree' => '17',
			'NodeParentID' => '839',
			'NodeParentOrder' => '3',
			'NodeType' => 'Instructions Raw',
			'NodePromptText' => '<br /><br />\r\n<div class=\"nodeAnchor\"><a id=\"faq-complaint\" name=\"faq-complaint\"></a></div>\r\n<br />\r\n<h2 class=\"slBlueDark\">The Complaint Process</h2>\r\n<br />\r\n\r\n<div class=\"nodeAnchor\"><a id=\"when-users-file\" name=\"when-users-file\"></a></div>\r\n<a id=\"hidivBtnAfterFile\" class=\"btn btn-secondary btn-lg w100 taL hidivBtn hidivCrt\" href=\"javascript:;\"\r\n>What happens when users file reports with OpenPolice.org?\r\n<div class=\"pull-right\"><i id=\"hidivCrtAfterFile\" class=\"fa fa-chevron-down\" aria-hidden=\"true\"></i></div></a>\r\n<div id=\"hidivAfterFile\" class=\"disNon brd mTn5 p15\">\r\n<p>We aim to make it as easy as possible for users to file reports directly with police department investigators. \r\nThe challenge is that there are about 18,000 law enforcement agencies in the United States. Each one has it\\'s own rules \r\nfor how they accept ï¿½ or <em>donï¿½t accept</em> ï¿½ reports that can be investigated.</p>\r\n<p>The goods news is that OpenPolice.org has built a <a href=\"#track\">crowdsourced knowledge base</a> containing \r\ninformation about these department rules. This tool makes it easy as possible for users to submit an official report \r\nto the appropriate department contact. But regardless of how departments accept reports, OpenPolice.org allows users to \r\npublish their reports on our website with <a href=\"#privacy\">privacy settings</a> that fit their needs. So even if \r\ncertain departments disregard user complaints, these reports will be forever visible to the public.</p>\r\n</div>\r\n\r\n<br /><br />\r\n\r\n<div class=\"nodeAnchor\"><a id=\"departments-ignore\" name=\"departments-ignore\"></a></div>\r\n<a id=\"hidivBtnIgnore\" class=\"btn btn-secondary btn-lg w100 taL hidivBtn hidivCrt\" href=\"javascript:;\"\r\n>What if police departments ignore OpenPolice.org reports?\r\n<div class=\"pull-right\"><i id=\"hidivCrtIgnore\" class=\"fa fa-chevron-down\" aria-hidden=\"true\"></i></div></a>\r\n<div id=\"hidivIgnore\" class=\"disNon brd mTn5 p15\">\r\n<p>We look forward to working with departments that accept OpenPolice.org reports. But we understand that many departments \r\nhave broken oversight systems that disregard police misconduct complaints. Either way, we will prompt users who submit \r\ncomplaints to report back to us about how departments are responding.</p>\r\n<p>As we gather and track thousands of new user complaints, we\\'ll be able to publicly track how individual officers \r\ninteract with the public. Weï¿½ll also begin to see important police behavioral trends across all police jurisdictions \r\nin the United States. At the same time, we\\'ll be able to see how well ï¿½ or how poorly ï¿½ individual departments are \r\nresponding to reports of police misconduct. In other words, OpenPolice.org will provide open source oversight of police \r\noversight!</p>\r\n</div>\r\n\r\n<br /><br />\r\n\r\n<div class=\"nodeAnchor\"><a id=\"privacy\" name=\"privacy\"></a></div>\r\n<a id=\"hidivBtnPrivacy\" class=\"btn btn-secondary btn-lg w100 taL hidivBtn hidivCrt\" href=\"javascript:;\"\r\n>What can users do with OpenPolice.org?\r\n<div class=\"pull-right\"><i id=\"hidivCrtPrivacy\" class=\"fa fa-chevron-down\" aria-hidden=\"true\"></i></div></a>\r\n<div id=\"hidivPrivacy\" class=\"disNon brd mTn5 p15\">\r\n<p>We believe that victims of police misconduct must control who has access to their private information. Different \r\nusers will have different privacy needs, so we\\'ve developed three unique privacy options that control how we collect \r\nand share and individual user\\'s data.ï¿½Victims can publish their complaint with full transparency, no names made \r\npublic, or complete anonymity. <a href=\"http://openpolice.local/complaint-privacy-options\">See how these privacy options \r\nappear to new users</a>.</p>\r\n<p>No matter which option users select, we\\'ll never publish anyone\\'s private information. (This includes addresses, \r\nphone numbers, emails, etc.) We will only share this with appropriate agencies who can investigate your complaint.</p>\r\n</div>\r\n\r\n<br /><br />\r\n\r\n<div class=\"nodeAnchor\"><a id=\"anonymous\" name=\"anonymous\"></a></div>\r\n<a id=\"hidivBtnAnonymous\" class=\"btn btn-secondary btn-lg w100 taL hidivBtn hidivCrt\" href=\"javascript:;\"\r\n>Can users submit anonymous reports?\r\n<div class=\"pull-right\"><i id=\"hidivCrtAnonymous\" class=\"fa fa-chevron-down\" aria-hidden=\"true\"></i></div></a>\r\n<div id=\"hidivAnonymous\" class=\"disNon brd mTn5 p15\">\r\n<p>Absolutely. Police misconduct victims who fear police retaliation <a href=\"http://openpolice.local/complaint-privacy-options\">can submit OpenPolice.org complaints anonymously</a>. These complaints don\\'t require users to share personally-identifiable information with us or police departments. Neither OpenPolice.org staff nor investigators will receive contact information from anonymous complainants. But they can submit crucial details about the incident ï¿½ including officer names and descriptions ï¿½ which OpenPolice.org will only share with investigative agencies.</p>\r\n</div>\r\n\r\n<br /><br />\r\n\r\n<div class=\"nodeAnchor\"><a id=\"anonymousOver\" name=\"anonymousOver\"></a></div>\r\n<a id=\"hidivBtnAnonymousOver\" class=\"btn btn-secondary btn-lg w100 taL hidivBtn hidivCrt\" href=\"javascript:;\"\r\n>How can we track officers associated with anonymous complaints?\r\n<div class=\"pull-right\"><i id=\"hidivCrtAnonymousOver\" class=\"fa fa-chevron-down\" aria-hidden=\"true\"></i></div></a>\r\n<div id=\"hidivAnonymousOver\" class=\"disNon brd mTn5 p15\">\r\n<p>Approved community organizers can create OpenPolice.org affiliate accounts to collect local complaints. Such organizers can see the full details of these reports ï¿½ including officerï¿½s names. With equal access to complaints data, they will have more power to pressure local officials to take appropriate action when problematic behavior gets reported.\r\n</p><p>\r\nFor public reporting, OpenPolice.org can track unpublished officers using assigned identification numbers. These will help organizers and third-party researches to, for example, spot a single officer engaging in repeat sexual harassment of female motorists.\r\n</p>\r\n</div>\r\n\r\n<br /><br />\r\n\r\n<div class=\"nodeAnchor\"><a id=\"sell-data\" name=\"sell-data\"></a></div>\r\n<a id=\"hidivBtnSell\" class=\"btn btn-secondary btn-lg w100 taL hidivBtn hidivCrt\" href=\"javascript:;\"\r\n>Will you sell my my data?\r\n<div class=\"pull-right\"><i id=\"hidivCrtSell\" class=\"fa fa-chevron-down\" aria-hidden=\"true\"></i></div></a>\r\n<div id=\"hidivSell\" class=\"disNon brd mTn5 p15\">\r\n<p>Definitely not! We respect your privacy and only collect the necessary information to create a police report in accordance with usersï¿½ privacy needs.<br></p>\r\n</div>\r\n\r\n<br /><br />\r\n\r\n<div class=\"nodeAnchor\"><a id=\"what-allegations\" name=\"what-allegations\"></a></div>\r\n<a id=\"hidivBtnAllegs\" class=\"btn btn-secondary btn-lg w100 taL hidivBtn hidivCrt\" href=\"javascript:;\"\r\n>What types of police misconduct are you tracking?\r\n<div class=\"pull-right\"><i id=\"hidivCrtAllegs\" class=\"fa fa-chevron-down\" aria-hidden=\"true\"></i></div></a>\r\n<div id=\"hidivAllegs\" class=\"disNon brd mTn5 p15\">\r\n<p>During the basic complaint process, users can make <a href=\"/allegations\">allegations of various types of police misconduct</a>:</p>\r\n<p><b>Tier 1</b></p>\r\n<ul>\r\n<li>Sexual Assault</li>\r\n<li>Unreasonable Force</li>\r\n<li>Wrongful Arrest</li>\r\n<li>Wrongful Property Seizure or Damage</li>\r\n</ul>\r\n<p><b>Tier 2</b></p>\r\n<ul>\r\n<li>Sexual Harassment</li>\r\n<li>Intimidating Display of Weapon</li>\r\n<li>Wrongful Search</li>\r\n<li>Wrongful Entry</li>\r\n<li>Wrongful Detention</li>\r\n</ul>\r\n<p><b>Tier 3</b></p>\r\n<ul>\r\n<li>Bias-Based Policing</li>\r\n<li>Retaliation<ul>\r\n<li>Unnecessary Charges</li>\r\n</ul></li>\r\n<li>Conduct Unbecoming an Officer</li>\r\n<li>Officer Discourtesy\r\n<ul>\r\n<li>Profanity</li>\r\n</ul></li>\r\n<li>Neglect of Duty</li>\r\n<li>Policy or Procedure Violation\r\n<ul>\r\n<li>Officer failed to provide ID upon request</li>\r\n</ul></li>\r\n</ul>\r\n</div>',
			'NodeOpts' => '67'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1883,
			'NodeTree' => '17',
			'NodeParentID' => '839',
			'NodeParentOrder' => '4',
			'NodeType' => 'Instructions Raw',
			'NodePromptText' => '<br /><br />
<div class="nodeAnchor"><a id="faq-law-enforcement" name="faq-law-enforcement"></a></div>
<br />
<h2 class="slBlueDark">For Law Enforcement</h2>
<br />

<div class="nodeAnchor"><a id="dept-got-email" name="dept-got-email"></a></div>
<a id="hidivBtnGotEmail" class="btn btn-secondary btn-lg w100 taL hidivBtn hidivCrt" href="javascript:;"
>I got an email linking to a complaint against my department. What should I do next?
<div class="pull-right"><i id="hidivCrtGotEmail" class="fa fa-chevron-down" aria-hidden="true"></i></div></a>
<div id="hidivGotEmail" class="disNon brd mTn5 p15">
<p>When you receive an emailed report from OpenPolice.org, you should see a special link and a temporary key code. 
After you go to the special link page, enter the key code to access the detailed complaint (or compliment) report. 
From there, you can view, download, and print the detailed report.</p>
<p><b>If your office can investigate the complaint ...</b><br />
We encourage your office to promptly investigate it. If possible and appropriate, investigators should contact the 
complainant to confirm their identity and corroborate their testimony. Then, within a reasonable period of time, our 
users expect to receive a final disposition letter that includes the details of your investigation\'s findings.</p>
<p>We encourage users to upload investigation findings and attach them to their complaints. This allows OpenPolice.org 
visitors to see which allegations were sustained or unfounded.</p>
<p>If your investigative agency creates an authenticated user account on OpenPolice.org, you will also be able to instantly 
upload the findings of your investigations. Participating in this clearinghouse for complaints is a great way to engage 
with the community and build trust.</p>
<p><b>If your office cannot investigate the complaint ...</b><br />
If your department cannot investigate this complaint as is, please tell us why. We can then update your department\'s 
complaint submission information on OpenPolice.org. We can also let the user know that they need to submit their 
complaint another way.</p>
</div>

<br /><br />

<div class="nodeAnchor"><a id="dept-integrate" name="dept-integrate"></a></div>
<a id="hidivBtnIntegrate" class="btn btn-secondary btn-lg w100 taL hidivBtn hidivCrt" href="javascript:;"
>Can I integrate OpenPolice.org reports into my department\'s system?
<div class="pull-right"><i id="hidivCrtIntegrate" class="fa fa-chevron-down" aria-hidden="true"></i></div></a>
<div id="hidivIntegrate" class="disNon brd mTn5 p15">
<p>Yes! We make it easy to integrate OpenPolice.org data into most police software systems.</p>
<p>OpenPolice.org provides a computer-readable XML export of all the data in the complaint.</p>
<p>We will be building more exports to be imported in software commonly used by police investigative agencies. But a geek 
on your team is already empowered to check out the <a href="/site-map#techstuff">tech stuff</a> and build a script to 
instantly import every future complaint into your pre-existing software.</p>
<p>A built-in API empowers the potential to automatically import OpenPolice.org complaints into your investigative agency\'s 
pre-existing software. The database design is well documented and the code is all open source.</p>
<p>Please <a href="/contact?who=law-enforcement&inquiry=schedule">contact us</a> if you have any questions about OpenPolice.org\'s 
data integration tools. We might be able to help out.</p>
</div>

<br /><br />

<div class="nodeAnchor"><a id="dept-correct" name="dept-correct"></a></div>
<a id="hidivBtnCorrection" class="btn btn-secondary btn-lg w100 taL hidivBtn hidivCrt" href="javascript:;"
>You have incorrect information associated with my department\'s page listing or Accessibility Grade. How do I correct it?
<div class="pull-right"><i id="hidivCrtCorrection" class="fa fa-chevron-down" aria-hidden="true"></i></div></a>
<div id="hidivCorrection" class="disNon brd mTn5 p15">
<p>We appreciate your feedback! Please send corrections and updates to 
<a href="mailto:info@flexyourrights.org">info@flexyourrights.org</a> 
with "Department Update" in the subject line. We will update your department\'s score and grade accordingly.</p>
</div>

<br /><br />

<div class="nodeAnchor"><a id="anonymous" name="anonymous"></a></div>
<a id="hidivBtnRemove" class="btn btn-secondary btn-lg w100 taL hidivBtn hidivCrt" href="javascript:;"
>A false allegation is connected to my name or department. How do I remove remove it?
<div class="pull-right"><i id="hidivCrtRemove" class="fa fa-chevron-down" aria-hidden="true"></i></div></a>
<div id="hidivRemove" class="disNon brd mTn5 p15">
<p>All complaints submitted to OpenPolice.org are authored by third-party users. As such, we have no knowledge of the truth or 
falsity of individual complaints (or allegations within complaints.) Therefore, <b>we will only consider requests to 
remove or redact complaint information under rare and narrow circumstances.</b></p>
<p>Before you or your attorney consider submitting such a request, we urge you to familiarize yourself with 
<a href="https://www.eff.org/issues/cda230" target="_blank">Section 230 of the the Communications Decency Act (CDA)</a>.
It states that "No provider or user of an interactive computer service shall be treated as the publisher or speaker of 
any information provided by another information content provider." In other words, we cannot be held liable for the 
content our users\' post to this site.</p>
<p>We will only consider requests for removal or redaction that fulfill all the following requirements:</p>
<ul>
<li>Requests must be submitted via PDF on appropriate law enforcement agency letterhead to 
<a href="mailto:removals@flexyourrights.org">removals@flexyourrights.org</a>.</li>
<li>Requests must include the URL link and complaint number of the complaint in question.</li>
<li>Requests must include the name and contact information of both subject officers and their attorneys.</li>
</ul>
<p>If your request fulfills all the above requirements, we will submit it to our pro bono legal team for review.</p>
</div>',
			'NodeOpts' => '67'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1884,
			'NodeTree' => '17',
			'NodeParentID' => '839',
			'NodeParentOrder' => '1',
			'NodeType' => 'Instructions Raw',
			'NodePromptText' => '<p>ï¿½</p>\r\n<div>\r\n<a class=\"hidTogAll pull-right btn btn-secondary\" data-list=\"UsersCan,Compliment,Launch,Names,False,18000,App,Video,Sue,Money,Contribute,AfterFile,Ignore,Privacy,Anonymous,AnonymousOver,Sell,Allegs,GotEmail,Integrate,Correction,Remove,AttrIntak\" href=\"javascript:;\">Toggle All</a>\r\n<h1>Frequently Asked Questions</h1>\r\n</div>\r\n<div id=\"faqCats\" class=\"faqNav\">\r\n<div class=\"disIn slGrey\">Categories:ï¿½ï¿½<a href=\"#faq-general\" class=\"hsho\">General</a>ï¿½ï¿½|ï¿½ï¿½<a href=\"#faq-complaint\" class=\"hsho\">Complaint Process</a></div>ï¿½<div id=\"faqLine2\" class=\"slGrey\">ï¿½|ï¿½<a href=\"#faq-law-enforcement\" class=\"hsho\">Law Enforcement</a>ï¿½ï¿½|ï¿½ï¿½<a href=\"#faq-attorneys\" class=\"hsho\">Attorneys</a></div>\r\n</div>',
			'NodePromptAfter' => '<style>
.faqNav { position: relative; width: 100%; margin: 0px; }
.faqNavScroll {
  position: fixed;
  z-index: 100;
  width: 1187px;
  margin-left: -30px;
  margin-top: -110px;
  background: #FFF;
  padding: 12px 0px 12px 30px;
}
#faqLine2 { display: inline; }
.nodeAnchor a { margin-top: -80px; }
@media screen and (max-width: 570px) {
.faqNavScroll { margin-top: -143px; height: 65px; }
#faqLine2 { display: block; margin-left: 78px; }
}
</style>
<script type="text/javascript">
function bodyOnScroll() {
    var currScroll = window.pageYOffset;
    if (document.getElementById("faqCats")) {
        if (currScroll > 100) document.getElementById("faqCats").className="faqNavScroll";
        else document.getElementById("faqCats").className="faqNav";
    }
    return true;
}
addHshoo("#faq-general");
addHshoo("#faq-complaint");
addHshoo("#faq-law-enforcement");
addHshoo("#faq-attorneys");
</script>',
			'NodeOpts' => '67'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1890,
			'NodeTree' => '1',
			'NodeParentID' => '443',
			'NodeType' => 'Radio',
			'NodePromptText' => '<b>Did your lawyer say it\'s okay</b> to submit this complaint through OpenPolice.org? (This will file it with the appropriate police investigative agency and publish your complaint on this website.)',
			'NodeDataStore' => 'Complaints:ComAttorneyOKedOPC',
			'NodeOpts' => '5'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1891,
			'NodeTree' => '42',
			'NodeParentID' => '1515',
			'NodeType' => 'Data Print Row',
			'NodeInternalNotes' => 'with OpenReport.php function getReportOffAge',
			'NodeDataStore' => 'PhysicalDesc:PhysAge'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1892,
			'NodeTree' => '42',
			'NodeParentID' => '1514',
			'NodeParentOrder' => '4',
			'NodeType' => 'Data Print Row',
			'NodeDataStore' => 'PersonContact:PrsnNickname'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1893,
			'NodeTree' => '22',
			'NodeParentID' => '2048',
			'NodeType' => 'Instructions Raw',
			'NodePromptText' => '<h2 class="slBlueDark">Your Complaints & Compliments</h2>'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1894,
			'NodeTree' => '42',
			'NodeParentID' => '1515',
			'NodeParentOrder' => '5',
			'NodeType' => 'Data Print Row',
			'NodeDataStore' => 'PhysicalDesc:PhysGeneralDesc'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1895,
			'NodeTree' => '55',
			'NodeType' => 'Page',
			'NodePromptNotes' => 'attorney-referral-listings',
			'NodePromptAfter' => 'Attorney Referral Listings::M::::M::::M::',
			'NodeCharLimit' => '-1'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1896,
			'NodeTree' => '55',
			'NodeParentID' => '1895',
			'NodeType' => 'Instructions Raw',
			'NodePromptText' => '[ Attorney Referral Listings ] hard-coded via OpenPartners.php function printAttorneyReferrals, to view openpolice.nodes.1896-attorney-referral-listings'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1897,
			'NodeTree' => '56',
			'NodeType' => 'Page',
			'NodePromptNotes' => 'attorney',
			'NodePromptAfter' => 'Attorney Profile::M::::M::::M::',
			'NodeResponseSet' => '58',
			'NodeDataBranch' => 'Partners',
			'NodeCharLimit' => '-1'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1898,
			'NodeTree' => '56',
			'NodeParentID' => '1897',
			'NodeParentOrder' => '1',
			'NodeType' => 'Instructions Raw',
			'NodePromptText' => '[ Partner Page Body ] hard-coded via OpenPartners.php function publicPartnerPage, to view openpolice.nodes.1898-public-partner-page'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1899,
			'NodeTree' => '57',
			'NodeType' => 'Page',
			'NodePromptNotes' => 'donate',
			'NodePromptAfter' => 'Donate to OpenPolice.org::M::A project of Flex Your Rights, the OpenPolice.org web app empowers people to prepare, file, and track reports of police misconduct. Your contribution fuels the movement for better police transparency and accountability.::M::::M::',
			'NodeCharLimit' => '-1'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1900,
			'NodeTree' => '57',
			'NodeParentID' => '1903',
			'NodeType' => 'Instructions Raw',
			'NodePromptText' => '<script src="https://donorbox.org/widget.js" paypalExpress="true"></script><iframe src="https://donorbox.org/embed/open-police-complaints?hide_donation_meter=true" height="960px" width="100%" style="max-width:500px; min-width:310px; max-height:none!important" seamless="seamless" name="donorbox" frameborder="0" scrolling="no" allowpaymentrequest></iframe>
<div class="nodeAnchor"><a id="faq" name="faq"></a></div>'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1901,
			'NodeTree' => '57',
			'NodeParentID' => '1899',
			'NodeType' => 'Page Block',
			'NodeOpts' => '67'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1902,
			'NodeTree' => '57',
			'NodeParentID' => '1901',
			'NodeParentOrder' => '1',
			'NodeType' => 'Layout Row',
			'NodeCharLimit' => '2'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1903,
			'NodeTree' => '57',
			'NodeParentID' => '1902',
			'NodeType' => 'Layout Column',
			'NodeCharLimit' => '8'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1904,
			'NodeTree' => '57',
			'NodeParentID' => '1902',
			'NodeParentOrder' => '1',
			'NodeType' => 'Layout Column',
			'NodeCharLimit' => '4'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1905,
			'NodeTree' => '57',
			'NodeParentID' => '1901',
			'NodeType' => 'Instructions',
			'NodePromptText' => '<p>&nbsp;</p>
<h2 class="slBlueDark m0">Donate to OpenPolice.org</h2>
<p>A project of Flex Your Rights, the OpenPolice.org web app 
empowers people to prepare, file, and track reports of police 
misconduct. Your contribution fuels the movement for better police 
transparency and accountability.</p>'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1906,
			'NodeTree' => '57',
			'NodeParentID' => '1904',
			'NodeType' => 'Instructions',
			'NodePromptText' => '<p>Flex Your Rights is a 501(c)(3) charitable organization (EIN 
32-0022088). All contributions are tax deductible. No goods or services 
are provided in exchange for this contribution.</p>'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1907,
			'NodeTree' => '57',
			'NodeParentID' => '1904',
			'NodeParentOrder' => '1',
			'NodeType' => 'Instructions Raw',
			'NodePromptText' => '<p>(Social Media Buttons)<br></p>'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1908,
			'NodeTree' => '53',
			'NodeParentID' => '1783',
			'NodeParentOrder' => '2',
			'NodeType' => 'Page Block',
			'NodeDefault' => '#2B3493;;#FFF;;#EDF8FF;;;;w100;;N;;left;;auto',
			'NodeOpts' => '71'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1909,
			'NodeTree' => '53',
			'NodeParentID' => '1783',
			'NodeParentOrder' => '4',
			'NodeType' => 'Page Block',
			'NodeDefault' => '#EDF8FF;;#333;;#2B3493;;;;w100;;N;;left;;auto',
			'NodeOpts' => '71'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1910,
			'NodeTree' => '53',
			'NodeParentID' => '1909',
			'NodeType' => 'Instructions',
			'NodePromptText' => '<p><br></p>
<div class="row"><div class="col-md-9">
<div id="icoPhone1" class="icoMssv mTn20 w100 taC"><i class="fa fa-phone slBlueDark" aria-hidden="true"></i></div>
<h3><span class="slBlueDark">Want to learn more about how your department can interact with OpenPolice.org?</span></h3>
<p>Please contact us to schedule a 20-minute phone or web chat.</p>
<p><a href="/contact?who=law-enforcement&amp;inquiry=schedule" class="btn btn-lg btn-primary">Contact us</a></p>
</div><div class="col-md-3 taC">
<div id="icoPhone2" class="icoMssv mTn20"><i class="fa fa-phone slBlueDark" aria-hidden="true"></i></div>
</div></div>
<p><br></p>',
			'NodePromptAfter' => '<style>
#nLabel1910 a.btn.btn-lg.btn-primary:link, #nLabel1910 a.btn.btn-lg.btn-primary:active, #nLabel1910 a.btn.btn-lg.btn-primary:visited { color: #FFF; }
#nLabel1910 a.btn.btn-lg.btn-primary:hover { color: #2B3493; }
#icoPhone1 { display: none; } #icoPhone2 { display: block; }
@media screen and (max-width: 768px) { #icoPhone1 { display: block; } #icoPhone2 { display: none; } }
</style>'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1911,
			'NodeTree' => '53',
			'NodeParentID' => '1908',
			'NodeType' => 'Instructions',
			'NodePromptText' => '<p><br></p>
<div class="row"><div class="col-md-9">
<div id="icoEmail1" class="icoMssv mTn20 pB15 w100 taC"><i class="fa fa-envelope-open-o" aria-hidden="true"></i></div>
<h3>I got an email linking to a complaint against my department</h3>
<p>You should have been emailed a special link and a temporary key code. After you go to the special link page, enter the key code to access the detailed complaint (or compliment) report.</p>
<p><a href="/frequently-asked-questions#faq-law-enforcement" class="btn btn-lg btn-secondary">Read more about receiving complaints...</a></p>
</div><div class="col-md-3 taC icoMssv">
<div id="icoEmail2" class="icoMssv"><i class="fa fa-envelope-open-o" aria-hidden="true"></i></div>
</div></div>
<p><br></p>',
			'NodePromptAfter' => '<style>
#nLabel1911 a.btn.btn-lg.btn-secondary:link, #nLabel1911 a.btn.btn-lg.btn-secondary:active, #nLabel1911 a.btn.btn-lg.btn-secondary:visited { color: #2B3493; }
#nLabel1911 a.btn.btn-lg.btn-secondary:hover { color: #FFF; }
#icoEmail1 { display: none; } #icoEmail2 { display: block; }
@media screen and (max-width: 768px) { #icoEmail1 { display: block; } #icoEmail2 { display: none; } }
</style>'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1912,
			'NodeTree' => '53',
			'NodeParentID' => '1783',
			'NodeParentOrder' => '3',
			'NodeType' => 'Page Block'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1913,
			'NodeTree' => '53',
			'NodeParentID' => '1912',
			'NodeType' => 'Instructions',
			'NodePromptText' => '<p><br></p>
<div class="row"><div class="col-md-3 taC icoMssv">
<div id="icoLine1"><i class="fa fa-line-chart" aria-hidden="true"></i></div>
</div><div class="col-md-9">
<h3>Improve your department\'s accessibility grade</h3>
<p>There are many easy ways to improve your department\'s <a href="/department-accessibility#gradeDesc">accessibility grading criteria</a>. It might be easy to pick up points for setting social media accounts on Facebook, Twitter, and YouTube. But bigger points are awarded for having an online-submittable complaint form.</p>
<p>If your department investigates complaints sent via email, then you can take advantage of the software we spent years building. By adding a simple link to your website allowing the public to submit complaints using OpenPolice.org, we will automatically email you access to each completed, and you\'ll earn 20 accessibility points for having an online form.</p>
<p><a href="/department-accessibility#gradeDesc" class="btn btn-lg btn-secondary">Read more about accessibility grading criteria</a></p>
</div></div>
<p><br></p>',
			'NodePromptAfter' => '<style> @media screen and (max-width: 768px) { #icoLine1 { margin-top: -20px; } } </style>'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1914,
			'NodeTree' => '28',
			'NodeParentID' => '1126',
			'NodeType' => 'Layout Row',
			'NodeCharLimit' => '2'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1915,
			'NodeTree' => '28',
			'NodeParentID' => '1914',
			'NodeType' => 'Layout Column',
			'NodeCharLimit' => '4'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1916,
			'NodeTree' => '28',
			'NodeParentID' => '1914',
			'NodeParentOrder' => '2',
			'NodeType' => 'Layout Column',
			'NodeCharLimit' => '6'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1917,
			'NodeTree' => '28',
			'NodeParentID' => '1915',
			'NodeType' => 'Instructions',
			'NodePromptText' => '<h2 class="slBlueDark mT5 mB10">How We Rate Departments:<br>Accessibility Score</h2>
<h4 class="mT10">Below you can read a detailed description of each criteria, and why we think it is important.</h4>
<p><a href="/department-accessibility" class="btn btn-secondary">Back to all departments\' Accessibility Scores</a></p>
<p>&nbsp;</p>',
			'NodePromptAfter' => '<style> #node1914kids { margin-top: 40px; } #nLabel1917 { margin-top: 5px; } </style>'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1918,
			'NodeTree' => '28',
			'NodeParentID' => '1914',
			'NodeParentOrder' => '1',
			'NodeType' => 'Layout Column',
			'NodeCharLimit' => '2'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1919,
			'NodeTree' => '21',
			'NodeParentID' => '858',
			'NodeParentOrder' => '3',
			'NodeType' => 'Instructions',
			'NodePromptText' => '<p><br></p>
<p><br></p>
<h3>Don\'t see your department graded?</h3>
<div class="pT20"><a href="/volunteer" class="btn btn-lg btn-primary"><i class="fa fa-users mR5" aria-hidden="true"></i> Volunteer To Help Department Research</a></div>
<p><br></p>'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1920,
			'NodeTree' => '17',
			'NodeParentID' => '839',
			'NodeParentOrder' => '5',
			'NodeType' => 'Instructions Raw',
			'NodePromptText' => '<br /><br /><div class="nodeAnchor"><a id="faq-attorneys" name="faq-attorneys"></a></div>
<br />
<h2 class="slBlueDark">For Attorneys</h2>
<br />

<div class="nodeAnchor"><a id="attorney-intake" name="attorney-intake"></a></div>
<a id="hidivBtnAttrIntak" class="btn btn-secondary btn-lg w100 taL hidivBtn hidivCrt" href="javascript:;"
>How can attorneys use OpenPolice.org for the intake process of potential police misconduct cases?
<div class="pull-right"><i id="hidivCrtAttrIntak" class="fa fa-chevron-down" aria-hidden="true"></i></div></a>
<div id="hidivAttrIntak" class="disNon brd mTn5 p15">
<p>Victims of police misconduct can use OpenPolice.org to create a comprehensive report about their incident, and have it emailed to their attorney. After they and/or their attorney have downloaded a PDF and raw complaint data file, <a href="/complaint-privacy-options#attorneys">our server\'s copy of the user\'s data is anonymized</a>.
</p>
</div>

<br /><br />',
			'NodeOpts' => '67'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1921,
			'NodeTree' => '58',
			'NodeType' => 'Data Manip: New',
			'NodeDataBranch' => 'Partners'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1922,
			'NodeTree' => '58',
			'NodeParentID' => '1921',
			'NodeType' => 'Page',
			'NodePromptNotes' => 'info',
			'NodePromptAfter' => 'Partner Profile::M::::M::::M::',
			'NodeCharLimit' => '-1'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1923,
			'NodeTree' => '59',
			'NodeType' => 'XML',
			'NodePromptText' => 'Partners',
			'NodePromptNotes' => '110'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1924,
			'NodeTree' => '58',
			'NodeParentID' => '2178',
			'NodeType' => 'Instructions',
			'NodePromptText' => '<h2 class="m0 slBlueDark">Edit Partner Profile</h2>',
			'NodePromptAfter' => '<style> #node1924 .nodeHalfGap { display: none; } </style>
<script type="text/javascript"> 
function loadAttProf() {
  document.getElementById(\'nFormNextBtn\').innerHTML=\'Save Profile\';
}
setTimeout("loadAttProf()", 1);
</script>'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1925,
			'NodeTree' => '58',
			'NodeParentID' => '2178',
			'NodeParentOrder' => '1',
			'NodeType' => 'Text',
			'NodePromptText' => 'Publicly-visible Name',
			'NodeDataStore' => 'PersonContact:PrsnNickname',
			'NodeOpts' => '5'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1926,
			'NodeTree' => '58',
			'NodeParentID' => '2173',
			'NodeParentOrder' => '7',
			'NodeType' => 'Drop Down',
			'NodePromptText' => 'Status of Profile',
			'NodeDataStore' => 'Partners:PartStatus'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1927,
			'NodeTree' => '58',
			'NodeParentID' => '2081',
			'NodeParentOrder' => '1',
			'NodeType' => 'Text',
			'NodePromptText' => 'Company/Firm Name',
			'NodeDataStore' => 'Partners:PartCompanyName'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1928,
			'NodeTree' => '58',
			'NodeParentID' => '2081',
			'NodeParentOrder' => '2',
			'NodeType' => 'Text',
			'NodePromptText' => 'Company/Firm Website',
			'NodeDataStore' => 'Partners:PartCompanyWebsite'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1929,
			'NodeTree' => '58',
			'NodeParentID' => '2081',
			'NodeType' => 'Text',
			'NodePromptText' => 'Attorney Title',
			'NodeDataStore' => 'Partners:PartTitle'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1930,
			'NodeTree' => '58',
			'NodeParentID' => '2081',
			'NodeParentOrder' => '3',
			'NodeType' => 'Text',
			'NodePromptText' => 'Attorney Online Bio',
			'NodeDataStore' => 'Partners:PartBioUrl'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1934,
			'NodeTree' => '58',
			'NodeParentID' => '2082',
			'NodeType' => 'Instructions',
			'NodePromptText' => '<h3 class="m0 disIn">Cases I\'d Like To Handle</h3><small class="rqd mL10">*required</small>
<p>Create one or more case profiles to filter your referral search results.</p><p>For each case profile, a matching complaint must meet <b>all</b> of your selected conditions. Select one condition at a time with the dropdowns below.<br></p>'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1935,
			'NodeTree' => '58',
			'NodeParentID' => '1962',
			'NodeType' => 'Drop Down',
			'NodePromptText' => '<h4 class="m0 slBlueDark">Case Profile #[LoopItemCnt]</h4>',
			'NodeResponseSet' => 'Definition::Attorney Complaint Filters',
			'NodeDataBranch' => 'PartnerFilters',
			'NodeDataStore' => 'PartnerFilters:PrtFltFilter',
			'NodeTextSuggest' => 'select a condition to require it...',
			'NodeOpts' => '53'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1936,
			'NodeTree' => '58',
			'NodeParentID' => '2082',
			'NodeParentOrder' => '1',
			'NodeType' => 'Loop Cycle',
			'NodeResponseSet' => 'LoopItems::Case Types',
			'NodeDataBranch' => 'PartnerCaseTypes'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1937,
			'NodeTree' => '58',
			'NodeParentID' => '2178',
			'NodeParentOrder' => '2',
			'NodeType' => 'Text',
			'NodePromptText' => '<div class="pull-right mT5 mB5">[[PartnerUrl]]</div>
Partner URL Slug',
			'NodeDefault' => 'partner-url',
			'NodeDataStore' => 'Partners:PartSlug',
			'NodeOpts' => '5'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1938,
			'NodeTree' => '60',
			'NodeType' => 'Page',
			'NodePromptNotes' => 'manage-partners',
			'NodePromptAfter' => 'Manage Partners::M::::M::::M::',
			'NodeCharLimit' => '-1'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1939,
			'NodeTree' => '60',
			'NodeParentID' => '2655',
			'NodeType' => 'Instructions Raw',
			'NodePromptText' => '[ Partners Overview Totals ] hard-coded via OpenPartners.php function printPartnersOverview, to view openpolice.nodes.1939-manage-partners-overview'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1940,
			'NodeTree' => '58',
			'NodeParentID' => '2176',
			'NodeType' => 'Instructions',
			'NodePromptText' => '<h3>Public Contact Info</h3>'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1941,
			'NodeTree' => '58',
			'NodeParentID' => '1953',
			'NodeType' => 'Instructions',
			'NodePromptText' => '<h3 class="m0">Private Contact Info</h3>'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1942,
			'NodeTree' => '58',
			'NodeParentID' => '1946',
			'NodeType' => 'Text',
			'NodePromptText' => 'Organization Phone Number',
			'NodeDataStore' => 'PersonContact:PrsnPhoneWork'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1943,
			'NodeTree' => '58',
			'NodeParentID' => '1946',
			'NodeParentOrder' => '1',
			'NodeType' => 'Text',
			'NodePromptText' => 'Organization Address',
			'NodeDataStore' => 'PersonContact:PrsnAddress'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1944,
			'NodeTree' => '58',
			'NodeParentID' => '1946',
			'NodeParentOrder' => '2',
			'NodeType' => 'Text',
			'NodePromptText' => 'Organization Address Line 2',
			'NodeDataStore' => 'PersonContact:PrsnAddress2'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1945,
			'NodeTree' => '58',
			'NodeParentID' => '1946',
			'NodeParentOrder' => '3',
			'NodeType' => 'Text',
			'NodePromptText' => 'Organization City',
			'NodeDataStore' => 'PersonContact:PrsnAddressCity'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1946,
			'NodeTree' => '58',
			'NodeParentID' => '2176',
			'NodeParentOrder' => '3',
			'NodeType' => 'Data Manip: Wrap',
			'NodeDataBranch' => 'PersonContact'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1947,
			'NodeTree' => '58',
			'NodeParentID' => '1946',
			'NodeParentOrder' => '4',
			'NodeType' => 'Drop Down',
			'NodePromptText' => 'Organization State',
			'NodeResponseSet' => 'Definition::--STATES--',
			'NodeDataStore' => 'PersonContact:PrsnAddressState'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1948,
			'NodeTree' => '58',
			'NodeParentID' => '1946',
			'NodeParentOrder' => '5',
			'NodeType' => 'Text',
			'NodePromptText' => 'Organization Zip Code',
			'NodeDataStore' => 'PersonContact:PrsnAddressZip'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1949,
			'NodeTree' => '58',
			'NodeParentID' => '1953',
			'NodeParentOrder' => '4',
			'NodeType' => 'Text',
			'NodePromptText' => 'Phone Number',
			'NodeDataStore' => 'PersonContact:PrsnPhoneMobile',
			'NodeOpts' => '5'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1950,
			'NodeTree' => '58',
			'NodeParentID' => '1953',
			'NodeParentOrder' => '3',
			'NodeType' => 'Text',
			'NodePromptText' => 'Email Address',
			'NodeDataStore' => 'PersonContact:PrsnEmail',
			'NodeOpts' => '5'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1951,
			'NodeTree' => '58',
			'NodeParentID' => '2082',
			'NodeParentOrder' => '2',
			'NodeType' => 'Radio',
			'NodePromptText' => '<p>ï¿½</p>\r\n<h3>Referral Alert Options</h3>',
			'NodeResponseSet' => 'Definition::Attorney Referral Alerts',
			'NodeDefault' => '556',
			'NodeDataStore' => 'Partners:PartAlerts'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1953,
			'NodeTree' => '58',
			'NodeParentID' => '2177',
			'NodeType' => 'Data Manip: Wrap',
			'NodeDataBranch' => 'PersonContact'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1954,
			'NodeTree' => '58',
			'NodeParentID' => '1921',
			'NodeParentOrder' => '1',
			'NodeType' => 'Page',
			'NodePromptNotes' => 'complete',
			'NodePromptAfter' => 'Attorney Profile::M::::M::::M::'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1955,
			'NodeTree' => '58',
			'NodeParentID' => '1954',
			'NodeType' => 'Instructions Raw',
			'NodePromptText' => '<center><img src="/openpolice/logo-ico-loading-anim.gif" border=0 class="round10 mT20 mB20" style="width: 75px;" ></center>
<script type="text/javascript">
setTimeout("window.location=\'/dash/manage-organizations\'", 5);
</script>
<style> #nodeSubBtns, #sessMgmtWrap { display: none; } </style>'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1956,
			'NodeTree' => '58',
			'NodeParentID' => '1954',
			'NodeParentOrder' => '2',
			'NodeType' => 'Instructions Raw',
			'NodePromptText' => '<center><img src="/openpolice/logo-ico-loading-anim.gif" border=0 class="round10 mT20 mB20" style="width: 75px;" ></center>
<script type="text/javascript">
$(document).ready(function(){
    $("#nFormBack").trigger("click");
});
</script>
<style> #nodeSubBtns, #sessMgmtWrap { display: none; } </style>'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1957,
			'NodeTree' => '58',
			'NodeParentID' => '1953',
			'NodeParentOrder' => '1',
			'NodeType' => 'Text',
			'NodePromptText' => 'First Name',
			'NodeDataStore' => 'PersonContact:PrsnNameFirst',
			'NodeOpts' => '5'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1959,
			'NodeTree' => '58',
			'NodeParentID' => '1953',
			'NodeParentOrder' => '2',
			'NodeType' => 'Text',
			'NodePromptText' => 'Last Name',
			'NodeDataStore' => 'PersonContact:PrsnNameLast',
			'NodeOpts' => '5'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1960,
			'NodeTree' => '56',
			'NodeParentID' => '1897',
			'NodeType' => 'Page Block',
			'NodeDefault' => '#2B3493;;#FCFEFF;;#2B3493;;;;w100;;N;;left;;auto',
			'NodeOpts' => '71'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1961,
			'NodeTree' => '56',
			'NodeParentID' => '1960',
			'NodeType' => 'Instructions Raw',
			'NodePromptText' => '[ Partner Page Header ] hard-coded via OpenPartners.php function publicPartnerHeader, to view openpolice.nodes.1961-public-partner-header'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1962,
			'NodeTree' => '58',
			'NodeParentID' => '1936',
			'NodeType' => 'Page Block'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1963,
			'NodeTree' => '58',
			'NodeParentID' => '1936',
			'NodeParentOrder' => '1',
			'NodeType' => 'Instructions Raw',
			'NodePromptText' => '<center><div>OR...</div></center>',
			'NodePromptAfter' => '<style> #node1963cyc2 { display: none; } #nLabel1963cyc0, #nLabel1963cyc1 { margin: -26px 0px 0px 0px; } </style>'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1964,
			'NodeTree' => '58',
			'NodeParentID' => '2173',
			'NodeParentOrder' => '1',
			'NodeType' => 'U.S. States',
			'NodePromptText' => '<h3 class="disIn">Licensed In</h3>',
			'NodeResponseSet' => 'Definition::--STATES--',
			'NodeDataStore' => 'PartnerStates:PrtStaState',
			'NodeTextSuggest' => 'select a state to add it',
			'NodeOpts' => '265'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1965,
			'NodeTree' => '58',
			'NodeParentID' => '2175',
			'NodeType' => 'Long Text',
			'NodePromptText' => 'Bio Paragraph',
			'NodeDataStore' => 'Partners:PartBio'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1966,
			'NodeTree' => '58',
			'NodeParentID' => '2175',
			'NodeParentOrder' => '1',
			'NodeType' => 'Text',
			'NodePromptText' => 'Profile Picture URL',
			'NodeDataStore' => 'Partners:PartPhotoUrl'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1968,
			'NodeTree' => '21',
			'NodeParentID' => '1814',
			'NodeType' => 'Instructions Raw',
			'NodePromptText' => '<h1 class="slBlueDark">Police Department <nobr>Accessibility Grades</nobr></h1>'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1969,
			'NodeTree' => '47',
			'NodeParentID' => '1445',
			'NodeParentOrder' => '2',
			'NodeType' => 'Instructions',
			'NodePromptText' => '<p>&nbsp;</p>\r\n<p>Every time someone submits a complaint or compliment here, we check if our database has recent information for the department(s) involved. If the department\\'s complaint process needs to be researched, we alert our team of volunteers.</p>\r\n<div class=\"pull-right slBlueDark\" style=\"font-size: 80px;\">&nbsp;&nbsp;<i class=\"fa fa-users\" aria-hidden=\"true\"></i></div>\r\n<p>Volunteers help out by doing online research into the department\\'s basic contact information and web presence. This is followed up by a phone call to the department (with non-emergency number) to confirm the information found online. Finally a phone call is made to the internal affairs department ï¿½ or sometimes an independent civilian investigative agency ï¿½ to fill in remaining questions, and confirm important info.</p>\r\n<p>&nbsp;</p>',
			'NodeOpts' => '67'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1971,
			'NodeTree' => '47',
			'NodeParentID' => '1445',
			'NodeParentOrder' => '1',
			'NodeType' => 'Instructions',
			'NodePromptText' => '<a class="btn btn-xl btn-primary w100" href="/register?volunteer=yes">Sign Up To Volunteer</a>',
			'NodeOpts' => '67'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1972,
			'NodeTree' => '13',
			'NodeParentID' => '827',
			'NodeParentOrder' => '2',
			'NodeType' => 'Text',
			'NodePromptText' => '<b>Name</b>',
			'NodeOpts' => '5'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1973,
			'NodeTree' => '13',
			'NodeParentID' => '829',
			'NodeParentOrder' => '3',
			'NodeType' => 'Checkbox',
			'NodePromptText' => '<b>What skills can you contribute?</b>',
			'NodeOpts' => '5'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1974,
			'NodeTree' => '13',
			'NodeParentID' => '829',
			'NodeParentOrder' => '4',
			'NodeType' => 'Instructions',
			'NodePromptText' => '<div style="margin-top: -20px;"><p>Are you selling an advertising, content marketing/partnership, or SEO optimization service? If so, we are not interested.</p></div>'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1975,
			'NodeTree' => '13',
			'NodeParentID' => '1973',
			'NodeType' => 'Instructions Raw',
			'NodePromptText' => '<div style="margin-top: -40px;"><p>If you haven\'t done so already, please review the start of the <a href="/web-app-technical-specs">OpenPolice.org Technical Stuff</a>.<br></p></div>'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1976,
			'NodeTree' => '13',
			'NodeParentID' => '1973',
			'NodeParentOrder' => '1',
			'NodeType' => 'Instructions Raw',
			'NodePromptText' => '<div style="margin-top: -40px;"><p>If you haven\'t done so already, please learn on how to <a href="/volunteer">Volunteer for Department Research</a>.<br></p></div>'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1977,
			'NodeTree' => '23',
			'NodeParentID' => '1045',
			'NodeParentOrder' => '2',
			'NodeType' => 'Layout Row',
			'NodeCharLimit' => '2'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1978,
			'NodeTree' => '23',
			'NodeParentID' => '1977',
			'NodeType' => 'Layout Column',
			'NodeCharLimit' => '4'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1979,
			'NodeTree' => '23',
			'NodeParentID' => '1977',
			'NodeParentOrder' => '1',
			'NodeType' => 'Layout Column',
			'NodeCharLimit' => '4'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1980,
			'NodeTree' => '23',
			'NodeParentID' => '1978',
			'NodeType' => 'Big Button',
			'NodeResponseSet' => 'Text',
			'NodeDefault' => '<center><p><img src="/openpolice/uploads/james_carroll-.jpg" alt="James Carroll" class="bigTmbRound"></p><h3 style="margin-top: 20px;">James Carroll</h3><h4 style="margin-top: 0px;">Volunteer Coordinator</h4></center>',
			'NodeOpts' => '43'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1981,
			'NodeTree' => '23',
			'NodeParentID' => '1980',
			'NodeType' => 'Instructions',
			'NodePromptText' => '<div style="padding: 20px; font-size: 80%;">
James became fascinated with civil liberties while studying political science in college. Coming from the freedom loving state of New Hampshire, he quickly became a prominent know-your-rights advocate in his community. He recruits and trains research volunteers to maintain OpenPolice.org\'s directory of police departments. He also coordinates user testing to track user onboarding.
</div>'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1982,
			'NodeTree' => '23',
			'NodeParentID' => '1045',
			'NodeParentOrder' => '1',
			'NodeType' => 'Instructions',
			'NodePromptText' => '<p><br></p><p><br></p>'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1983,
			'NodeTree' => '23',
			'NodeParentID' => '1046',
			'NodeParentOrder' => '2',
			'NodeType' => 'Layout Column',
			'NodeCharLimit' => '4'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1984,
			'NodeTree' => '61',
			'NodeType' => 'Page',
			'NodePromptNotes' => 'team-resources',
			'NodePromptAfter' => 'Team Resources::M::::M::::M::',
			'NodeCharLimit' => '-1'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1985,
			'NodeTree' => '61',
			'NodeParentID' => '1987',
			'NodeParentOrder' => '2',
			'NodeType' => 'Instructions',
			'NodePromptText' => '<div class="nodeAnchor"><a name="find-complainants"></a></div>
<h3>To Find Complainants</h3>
<p>These are places to look for new potential complaints to recruit for using OpenPolice.org.</p>
<ul>
<li><a href="https://www.reddit.com/r/AmIFreeToGo/" target="_blank">reddit/AmIFreeToGo</a></li>
<li><a href="https://www.reddit.com/r/Bad_Cop_No_Donut/" target="_blank">reddit/Bad_Cop_No_Donut</a></li>
</ul>',
			'NodeOpts' => '89'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1986,
			'NodeTree' => '61',
			'NodeParentID' => '1984',
			'NodeType' => 'Layout Row',
			'NodeCharLimit' => '2'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1987,
			'NodeTree' => '61',
			'NodeParentID' => '1986',
			'NodeType' => 'Layout Column',
			'NodeCharLimit' => '8'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1988,
			'NodeTree' => '61',
			'NodeParentID' => '1986',
			'NodeParentOrder' => '1',
			'NodeType' => 'Layout Column',
			'NodeCharLimit' => '4'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1989,
			'NodeTree' => '61',
			'NodeParentID' => '1987',
			'NodeType' => 'Instructions',
			'NodePromptText' => '<h1 class="slBlueDark">Team Resources</h1>
<p><nobr><a href="#daily-checklist">Daily Staff Checklist</a></nobr> - <nobr><a href="#find-complainants">Find Complainants</a></nobr> - <nobr><a href="#find-attorneys">Find Attorneys</a></nobr></p>',
			'NodePromptAfter' => '<style> #mainBody { background: #F5FBFF; } </style>',
			'NodeOpts' => '89'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1990,
			'NodeTree' => '61',
			'NodeParentID' => '1987',
			'NodeParentOrder' => '1',
			'NodeType' => 'Instructions',
			'NodePromptText' => '<div class=\"nodeAnchor\"><a name=\"daily-checklist\"></a></div>\r\n<h3>Daily Staff Checklist</h3>\r\n<p>Every day, OpenPolice.org staff needs to do these things.</p>\r\n<ul>\r\n<li><a href=\"/dash/all-complete-complaints\"><b>Check for new complaints</b></a><ul><li>Is this story about the police? Is it about misconduct?</li><li>Does this person need a lawyer? (criminal or civil)</li><li>Does this department need research? If so, do research or alert volunteers.</li><li>If research is complete, send the apppropriate email(s)<br><br></li></ul></li>\r\n<li><a href=\"/dash/all-complete-complaints?fltView=all&amp;fltStatus=200\">Check for auto-emailed complaints</a>&nbsp;whose secure links have not yet been opened by the police (after 24 hours)<ul><li>Call internal affairs to confirm they received the complaint<br><br></li></ul></li>\r\n</ul>\r\n<p>&nbsp;Every day, a team member should also do the following.</p>\r\n<ul>\r\n<li>Search for new complainants to use OpenPolice.org.</li>\r\n<li>Search for lawyers in places where we donï¿½t have them (especially for new complaints).</li>\r\n<li><a href=\"/dash/volunteer\">Perform department research</a> on large cities that need it.<br><br></li></ul><p><a href=\"/openpolice/uploads/OPC_Complaint_Process.jpg\" target=\"_blank\" class=\"btn btn-secondary\"><i class=\"fa fa-external-link mR3\" aria-hidden=\"true\"></i>\r\n Full Process Workflow</a><br></p><ul>\r\n</ul>\r\n<p class=\"slGrey\"><span style=\"font-size: 10.56px;\">Updated: Oct 1, 2019</span></p>',
			'NodeOpts' => '89'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1991,
			'NodeTree' => '61',
			'NodeParentID' => '1988',
			'NodeType' => 'Instructions',
			'NodePromptText' => '<h3>Legal Help<br></h3>
<p>These are also places to look for new potential partners.</p>
<ul><li><a href="https://www.nlg-npap.org/find-an-attorney" target="_blank">National Police Accountability Project</a></li><li><a href="https://www.aclu.org/about/affiliates" target="_blank">ACLU Affiliates</a></li><li><a href="https://lawyers.norml.org/" target="_blank">NORML</a></li><li><a href="http://www.legalzoom.com/" target="_blank">LegalZoom</a></li></ul>

<h3>Free Legal Help<br></h3>
<ul><li><a href="https://www.lsc.gov/what-legal-aid/find-legal-aid" target="_blank">Legal Services Corporation</a>
 - LSC is an independent nonprofit established by Congress in 1974 to 
provide financial support for civil legal aid to low-income Americans. 
The Corporation currently provides funding to 134 independent nonprofit 
legal aid organizations in every state.</li></ul>
<p><br></p>',
			'NodeOpts' => '89'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1992,
			'NodeTree' => '62',
			'NodeType' => 'Page',
			'NodePromptNotes' => 'prepare-complaint-for-attorney',
			'NodePromptAfter' => 'Preparing Your Complaint for an Attorney::M::::M::::M::',
			'NodeResponseSet' => '58',
			'NodeDataBranch' => 'Partners',
			'NodeCharLimit' => '-1'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1993,
			'NodeTree' => '62',
			'NodeParentID' => '1994',
			'NodeParentOrder' => '1',
			'NodeType' => 'Instructions',
			'NodePromptText' => '<!--- <h3 class="m0">This free web app will help you to ...</h3>
<ul>
<li>Prepare and save a professional-grade police misconduct report.</li>
<li>Upload photos, documents, video, and other evidence.</li>
<li>Get matched with legal help.</li>
</ul>
<p><b>Even if OpenPolice.org can\'t match you up with the legal assistance you need, this free web app can help you to ...</b></p>
<ul>
<li>File your report with the right police investigative agency.</li>
<li>Publish your complaint online and share on social media.</li>
</ul> --->
<p><b>OpenPolice.org</b> will never sell your data, and we will never share anything without your permission. This website is an independent project developed by Flex Your Rights, a 501(c)(3) educational nonprofit.<br></p>
<p><b>By completing this process, you confirm that, to the best of your knowledge, the information in this complaint is truthful and accurate.</b></p>',
			'NodePromptAfter' => '<style> #ajaxWrap { background: #F5FBFF; } #blockWrap1994, #blockWrap2271 { margin-top: 30px; } </style>'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1994,
			'NodeTree' => '62',
			'NodeParentID' => '2268',
			'NodeType' => 'Page Block',
			'NodeOpts' => '5963'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1995,
			'NodeTree' => '62',
			'NodeParentID' => '1994',
			'NodeParentOrder' => '2',
			'NodeType' => 'Instructions Raw',
			'NodePromptText' => '<a class="btn btn-xl btn-primary nFldBtn mT10 mB10" href="[[DOMAIN]]/start/complaint">I Understand, Begin My Complaint</a>
<a class="btn btn-xl btn-secondary nFldBtn mT10 mB10" href="[[DOMAIN]]/login">Log Back In, Continue My Complaint</a>'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1996,
			'NodeTree' => '62',
			'NodeParentID' => '1994',
			'NodeParentOrder' => '3',
			'NodeType' => 'Instructions Raw',
			'NodePromptText' => '<a class="btn btn-xl btn-primary w100 mT10 mB10" href="[[DOMAIN]]/start/complaint">I Understand, Share My Story</a>'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1997,
			'NodeTree' => '62',
			'NodeParentID' => '1994',
			'NodeParentOrder' => '4',
			'NodeType' => 'Incomplete Sess Check',
			'NodeResponseSet' => '1'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1998,
			'NodeTree' => '23',
			'NodeParentID' => '1005',
			'NodeParentOrder' => '4',
			'NodeType' => 'Instructions',
			'NodePromptText' => '<p>&nbsp;</p><p>&nbsp;</p>'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 1999,
			'NodeTree' => '63',
			'NodeType' => 'Page',
			'NodePromptNotes' => 'resources',
			'NodePromptAfter' => 'Open Data Resources::M::Below are police accountability resources we think are particularly valuable. Most of these links are to deep databases focused on adjacent problems or regional data.::M::::M::',
			'NodeCharLimit' => '-1'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2000,
			'NodeTree' => '63',
			'NodeParentID' => '2001',
			'NodeType' => 'Instructions',
			'NodePromptText' => '<p>&nbsp;</p>
<h1>Open Data Resources</h1>
<div class="icoMssv slBlueFaint fR"><i class="fa fa-bar-chart" aria-hidden="true"></i></div>
<p class="w50">Below are police accountability resources we think are particularly valuable. Most of these links are to deep databases focused on adjacent problems or regional data.</p>
<div class="fC mB10"></div>'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2001,
			'NodeTree' => '63',
			'NodeParentID' => '1999',
			'NodeType' => 'Page Block',
			'NodeDefault' => '#EDF8FF;;#2B3493;;#2B3493;;;;w100;;N;;left;;auto',
			'NodeOpts' => '4757'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2002,
			'NodeTree' => '63',
			'NodeParentID' => '1999',
			'NodeParentOrder' => '4',
			'NodeType' => 'Page Block',
			'NodeOpts' => '67'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2003,
			'NodeTree' => '63',
			'NodeParentID' => '2002',
			'NodeType' => 'Instructions',
			'NodePromptText' => '<p>&nbsp;</p>\r\n<div class=\"row\">\r\n<div class=\"col-md-4\"><img src=\"/openpolice/uploads/invisible-institute-logo.png\" class=\"w100\" border=\"0\"></div>\r\n<div class=\"col-md-8\">\r\n<h2>Citizens Police Data Project (Chicago)</h2>\r\n<p>The Invisible Institute\\'s <a href=\"https://CPDP.co\" target=\"_blank\">Citizens Police Data Project (CPDP.co)</a> is a tool for holding police accountable to the public they serve. CPDP takes records of police interactions with the public that would otherwise be buried in internal databases and opens them up to make the data useful to the public, creating a permanent record for every police officer and a public record for every civilian complaint.</p>\r\n<p>Designed to serve as a national model for transparency, the Citizens Police Data Project is the product of a decade-long <a href=\"https://invisible.institute/news/2014/cpd-lists-of-officers-with-the-most-complaints-are-now-public\" target=\"_blank\">collaboration</a> with the University of Chicago Law Schoolï¿½s Mandel Legal Aid Clinic.</p>\n<div class=\"mT20\"><a href=\"https://cpdp.co/\" target=\"_blank\" class=\"btn btn-lg btn-primary\">Explore The Data</a></div>\r\n</div></div>\r\n<p>&nbsp;</p>'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2004,
			'NodeTree' => '63',
			'NodeParentID' => '1999',
			'NodeParentOrder' => '2',
			'NodeType' => 'Page Block',
			'NodeDefault' => '#2B3493;;#FFF;;#2B3493;;;;w100;;N;;left;;auto',
			'NodeOpts' => '4757'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2005,
			'NodeTree' => '63',
			'NodeParentID' => '2004',
			'NodeType' => 'Instructions',
			'NodePromptText' => '<p>&nbsp;</p>
<div class="row">
<div class="col-md-8">
<h2>New York Legal Aid Society\'s Cop Accountability Project</h2>
<p>Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry\'s standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged.</p>
<div class="mT20 mB20"><a href="#" target="_blank" class="btn btn-lg btn-secondary" onmouseover="this.style.color=\'#FFF\';" onmouseout="this.style.color=\'#2B3493\';">Explore The Data</a></div>
</div>
<div class="col-md-4"><img src="/openpolice/uploads/cynthia-conti-cook1.jpeg" class="w100" border="0"></div>
</div>
<p>&nbsp;</p>'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2006,
			'NodeTree' => '63',
			'NodeParentID' => '1999',
			'NodeParentOrder' => '1',
			'NodeType' => 'Page Block',
			'NodeOpts' => '67'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2007,
			'NodeTree' => '63',
			'NodeParentID' => '2006',
			'NodeType' => 'Instructions',
			'NodePromptText' => '<p>&nbsp;</p>
<div class="row">
<div class="col-md-4"><img src="/openpolice/uploads/fair-police-union-contracts.jpg" class="w100" border="0"></div>
<div class="col-md-8">
<h2>Police Union Contract Project Database</h2>
<p>Learn how police union contracts make it more difficult to hold police officers accountable for misconduct. We are assembling the first open-source database of police union contracts and other documents related to police accountability for the 100 largest U.S. cities. These documents, obtained through FOIA requests via MuckRock, will be used for future analyses identifying the ways in which they impact police accountability.</p>
<div class="mT20"><a href="http://www.checkthepolice.org/" target="_blank" class="btn btn-lg btn-primary">Explore The Data</a></div>
</div></div>
<p>&nbsp;</p>'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2008,
			'NodeTree' => '63',
			'NodeParentID' => '1999',
			'NodeParentOrder' => '6',
			'NodeType' => 'Page Block',
			'NodeDefault' => '#EDF8FF;;#2B3493;;#FFF;;;;w100;;N;;left;;auto',
			'NodeOpts' => '4757'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2009,
			'NodeTree' => '63',
			'NodeParentID' => '2008',
			'NodeType' => 'Instructions',
			'NodePromptText' => '<p>&nbsp;</p>\n<img src=\"/openpolice/uploads/open-data-policing-logo.png\" class=\"w100 mTn20\" border=\"0\">\r\n<h2>Search all known North Carolina, Maryland, and Illinois traffic stops.</h2>\r\n<p>Open Data Policing is a first-of-its-kind platform that aims to make real the recommendation of the Presidentï¿½s Task Force on 21st Century Policing to make stop, search, and use-of-force ï¿½data...publicly available to ensure transparency.ï¿½ The site currently aggregates, visualizes, and publishes public records related to all known traffic stops to have occurred in North Carolina since 2002, in Maryland since 2013, and in Illinois since 2005. Data is collected in all states pursuant to mandatory data collection statutes and reported monthly to the NC State Bureau of Investigation, Maryland State Police, and Illinois State Police.</p>\r\n<div class=\"mT20 mB20\"><a href=\"https://opendatapolicing.com/\" target=\"_blank\" class=\"btn btn-lg btn-primary\" onmouseover=\"this.style.color=\\'#2B3493\\';\" onmouseout=\"this.style.color=\\'#FFF\\';\">Explore The Data</a></div>\r\n<p>&nbsp;</p>'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2012,
			'NodeTree' => '64',
			'NodeType' => 'Page',
			'NodePromptNotes' => 'tmp',
			'NodePromptAfter' => 'Temporary Testing Grounds::M::::M::::M::',
			'NodeCharLimit' => '-1'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2013,
			'NodeTree' => '64',
			'NodeParentID' => '2014',
			'NodeType' => 'Instructions',
			'NodePromptText' => '<h2>Welcome to Temporary Testing Grounds.</h2>
<p>Edit this node to fill in your page! This node could be your entire page, or just one little component.</p>'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2014,
			'NodeTree' => '64',
			'NodeParentID' => '2012',
			'NodeParentOrder' => '1',
			'NodeType' => 'Page Block',
			'NodeOpts' => '89'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2015,
			'NodeTree' => '64',
			'NodeParentID' => '2012',
			'NodeType' => 'Instructions',
			'NodePromptText' => '<p><br></p><h2>Police Department Accessibility Scores</h2><br />'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2016,
			'NodeTree' => '1',
			'NodeParentID' => '268',
			'NodeParentOrder' => '1',
			'NodeType' => 'Radio',
			'NodePromptText' => 'Is anybody involved trying to <b>file a lawsuit</b> against the police?',
			'NodeDataStore' => 'Complaints:ComFileLawsuit',
			'NodeOpts' => '5'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2018,
			'NodeTree' => '1',
			'NodeParentID' => '453',
			'NodeParentOrder' => '1',
			'NodeType' => 'Radio',
			'NodePromptText' => '<h4>No matter which one you choose, we <nobr>will ...</nobr></h4>\r\n<ul>\r\n<li>Publish no oneï¿½s private information. That includes addresses, phone numbers, emails, etc.</li>\r\n<li>Try to send your full complaint to a police investigative agency.</li>\r\n</ul>\r\n<p>You have three options for how we collect your data and how we share it.</p>',
			'NodePromptAfter' => '<style>
.privOptPadL { padding-left: 10px; padding-top: 10px; }
#node138 div.nFld div label { padding: 40px; }
@media screen and (max-width: 768px) {
#node138 div.nFld div label { padding: 40px; padding-bottom: 40px; }
}
</style>',
			'NodeDataStore' => 'Complaints:ComPrivacy',
			'NodeOpts' => '5'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2019,
			'NodeTree' => '1',
			'NodeParentID' => '453',
			'NodeParentOrder' => '2',
			'NodeType' => 'Instructions Raw',
			'NodePromptText' => '<a href="/complaint-privacy-options" target="_blank"><i class="fa fa-external-link mL10" aria-hidden="true"></i> Read more about your privacy options</a>'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2020,
			'NodeTree' => '36',
			'NodeParentID' => '1267',
			'NodeType' => 'Instructions Raw',
			'NodePromptText' => '<h3 style="margin-bottom: -32px;">Primary Contact:</h3>'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2021,
			'NodeTree' => '1',
			'NodeParentID' => '488',
			'NodeType' => 'Data Manip: Wrap',
			'NodeDefault' => 'Stops',
			'NodeDataBranch' => 'EventSequence',
			'NodeDataStore' => 'EventSequence:EveType'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2022,
			'NodeTree' => '1',
			'NodeParentID' => '505',
			'NodeType' => 'Data Manip: Wrap',
			'NodeDefault' => 'Searches',
			'NodeDataBranch' => 'EventSequence',
			'NodeDataStore' => 'EventSequence:EveType'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2023,
			'NodeTree' => '1',
			'NodeParentID' => '512',
			'NodeType' => 'Data Manip: Wrap',
			'NodeDefault' => 'Arrests',
			'NodeDataBranch' => 'EventSequence',
			'NodeDataStore' => 'EventSequence:EveType'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2026,
			'NodeTree' => '1',
			'NodeParentID' => '2021',
			'NodeType' => 'Data Manip: Wrap',
			'NodeDataBranch' => 'Stops'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2027,
			'NodeTree' => '1',
			'NodeParentID' => '2022',
			'NodeType' => 'Data Manip: Wrap',
			'NodeDataBranch' => 'Searches'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2028,
			'NodeTree' => '1',
			'NodeParentID' => '500',
			'NodeType' => 'Data Manip: Wrap',
			'NodeDefault' => 'Searches',
			'NodeDataBranch' => 'EventSequence',
			'NodeDataStore' => 'EventSequence:EveType'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2029,
			'NodeTree' => '1',
			'NodeParentID' => '2028',
			'NodeType' => 'Data Manip: Wrap',
			'NodeDataBranch' => 'Searches'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2030,
			'NodeTree' => '1',
			'NodeParentID' => '2023',
			'NodeType' => 'Data Manip: Wrap',
			'NodeDataBranch' => 'Arrests'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2031,
			'NodeTree' => '1',
			'NodeParentID' => '148',
			'NodeType' => 'Data Manip: Wrap',
			'NodeDataBranch' => 'Force'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2032,
			'NodeTree' => '1',
			'NodeParentID' => '151',
			'NodeType' => 'Page',
			'NodePromptNotes' => 'gold-types-of-force',
			'NodePromptAfter' => 'Gold Types of Force::M::::M::::M::'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2033,
			'NodeTree' => '1',
			'NodeParentID' => '204',
			'NodeType' => 'Page Block'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2034,
			'NodeTree' => '1',
			'NodeParentID' => '212',
			'NodeParentOrder' => '1',
			'NodeType' => 'Page Block'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2035,
			'NodeTree' => '1',
			'NodeParentID' => '222',
			'NodeType' => 'Page Block'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2036,
			'NodeTree' => '1',
			'NodeParentID' => '234',
			'NodeType' => 'Page Block'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2038,
			'NodeTree' => '1',
			'NodeParentID' => '2033',
			'NodeType' => 'Data Manip: Wrap',
			'NodeInternalNotes' => 'triggers OpenComplaintPrints.php function initBlnkAllegsSilv',
			'NodeDefault' => 'Stops',
			'NodeDataBranch' => 'EventSequence',
			'NodeDataStore' => 'EventSequence:EveType'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2039,
			'NodeTree' => '1',
			'NodeParentID' => '2034',
			'NodeType' => 'Data Manip: Wrap',
			'NodeDefault' => 'Searches',
			'NodeDataBranch' => 'EventSequence',
			'NodeDataStore' => 'EventSequence:EveType'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2040,
			'NodeTree' => '1',
			'NodeParentID' => '2035',
			'NodeType' => 'Data Manip: Wrap',
			'NodeDefault' => 'Force',
			'NodeDataBranch' => 'EventSequence',
			'NodeDataStore' => 'EventSequence:EveType'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2041,
			'NodeTree' => '1',
			'NodeParentID' => '1172',
			'NodeType' => 'Data Manip: Wrap',
			'NodeDefault' => 'Arrests',
			'NodeDataBranch' => 'EventSequence',
			'NodeDataStore' => 'EventSequence:EveType'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2042,
			'NodeTree' => '1',
			'NodeParentID' => '742',
			'NodeType' => 'Layout Sub-Response'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2043,
			'NodeTree' => '1',
			'NodeParentID' => '2042',
			'NodeType' => 'Checkbox',
			'NodeResponseSet' => 'LoopItems::Victims',
			'NodeDataStore' => 'LinksCivilianEvents:LnkCivEveCivID'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2044,
			'NodeTree' => '1',
			'NodeParentID' => '2032',
			'NodeParentOrder' => '1',
			'NodeType' => 'Checkbox',
			'NodePromptText' => 'Which types of force were used by an officer?',
			'NodeResponseSet' => 'Definition::Force Type',
			'NodeDataStore' => 'Force:ForType',
			'NodeOpts' => '5'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2045,
			'NodeTree' => '1',
			'NodeParentID' => '2032',
			'NodeType' => 'Instructions',
			'NodePromptText' => '<h2>More about the Use of Force:</h2>',
			'NodePromptAfter' => '<style> #node[[nID]] { margin-bottom: -30px; } </style>'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2047,
			'NodeTree' => '1',
			'NodeParentID' => '2031',
			'NodeType' => 'Page Block'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2048,
			'NodeTree' => '22',
			'NodeParentID' => '2381',
			'NodeType' => 'Page Block'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2049,
			'NodeTree' => '1',
			'NodeParentID' => '457',
			'NodeParentOrder' => '6',
			'NodeType' => 'Data Manip: Wrap',
			'NodeDefault' => 'Y',
			'NodeDataBranch' => 'Civilians',
			'NodeDataStore' => 'Civilians:CivIsCreator'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2050,
			'NodeTree' => '1',
			'NodeParentID' => '1170',
			'NodeType' => 'Page Block'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2052,
			'NodeTree' => '1',
			'NodeParentID' => '520',
			'NodeType' => 'Data Manip: New',
			'NodeDataBranch' => 'InjuryCare'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2053,
			'NodeTree' => '1',
			'NodeParentID' => '2054',
			'NodeParentOrder' => '2',
			'NodeType' => 'Data Manip: Wrap',
			'NodeDataBranch' => 'InjuryCare'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2054,
			'NodeTree' => '1',
			'NodeParentID' => '410',
			'NodeParentOrder' => '2',
			'NodeType' => 'Page',
			'NodePromptNotes' => 'gold-emergency-staff',
			'NodePromptAfter' => 'Gold Emergency Staff::M::::M::::M::'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2055,
			'NodeTree' => '1',
			'NodeParentID' => '2054',
			'NodeParentOrder' => '1',
			'NodeType' => 'Loop Cycle',
			'NodeResponseSet' => 'LoopItems::Victims',
			'NodeDataBranch' => 'Civilians'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2056,
			'NodeTree' => '1',
			'NodeParentID' => '2055',
			'NodeType' => 'Data Manip: Wrap',
			'NodeDataBranch' => 'InjuryCare'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2057,
			'NodeTree' => '1',
			'NodeParentID' => '2054',
			'NodeType' => 'Instructions',
			'NodePromptText' => '<h2>Final Medical Care Details</h2>',
			'NodePromptAfter' => '<style> #node[[nID]] { margin-bottom: -30px; } </style>'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2058,
			'NodeTree' => '1',
			'NodeParentID' => '400',
			'NodeType' => 'Page Block'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2059,
			'NodeTree' => '65',
			'NodeType' => 'Page',
			'NodePromptNotes' => 'org',
			'NodePromptAfter' => 'Organization Profile::M::::M::::M::',
			'NodeResponseSet' => '58',
			'NodeDataBranch' => 'Partners',
			'NodeCharLimit' => '-1'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2060,
			'NodeTree' => '65',
			'NodeParentID' => '2059',
			'NodeParentOrder' => '1',
			'NodeType' => 'Instructions Raw',
			'NodePromptText' => '[ Partner Page Body ] hard-coded via OpenPartners.php function publicPartnerPage, to view openpolice.nodes.1898-public-partner-page<br>'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2061,
			'NodeTree' => '65',
			'NodeParentID' => '2059',
			'NodeType' => 'Page Block',
			'NodeDefault' => '#2B3493;;#FCFEFF;;#2B3493;;;;w100;;N;;left;;auto',
			'NodeOpts' => '71'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2062,
			'NodeTree' => '65',
			'NodeParentID' => '2061',
			'NodeType' => 'Instructions Raw',
			'NodePromptText' => '[ Partner Page Header ] hard-coded via OpenPartners.php function publicPartnerHeader, to view openpolice.nodes.1961-public-partner-header'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2063,
			'NodeTree' => '66',
			'NodeType' => 'Page',
			'NodePromptNotes' => 'prepare-complaint-for-org',
			'NodePromptAfter' => 'Prepare Your Complaint for an Organization::M::::M::::M::',
			'NodeResponseSet' => '58',
			'NodeDataBranch' => 'Partners',
			'NodeCharLimit' => '-1'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2064,
			'NodeTree' => '66',
			'NodeParentID' => '2246',
			'NodeParentOrder' => '1',
			'NodeType' => 'Instructions',
			'NodePromptText' => '<!--- <h4 class="m0">Even if OpenPolice.org can\'t match you up with the legal assistance you need, this free web app can help you to ...</h4>
<ul>
<li>Prepare and save a professional-grade police misconduct report.</li>
<li>File your report with the right police investigative agency.</li>
<li>Publish your complaint online and share on social media.</li>
<li>Upload photos, documents, video, and other evidence.</li>
</ul> --->
<p><b>OpenPolice.org</b> will never sell your data, and we will never share anything without your permission. This website is an independent project developed by Flex Your Rights, a 501(c)(3) educational nonprofit.<br></p>
<p><b>By completing this process, you confirm that, to the best of your knowledge, the information in this complaint is truthful and accurate.</b></p>',
			'NodePromptAfter' => '<style> #ajaxWrap { background: #F5FBFF; } #blockWrap2246, #blockWrap2065 { margin-top: 30px; } #blockWrap2065 { padding-bottom: 60px; margin-bottom: -50px; } </style>'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2065,
			'NodeTree' => '66',
			'NodeParentID' => '2274',
			'NodeType' => 'Page Block',
			'NodeOpts' => '5963'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2066,
			'NodeTree' => '66',
			'NodeParentID' => '2246',
			'NodeParentOrder' => '2',
			'NodeType' => 'Instructions Raw',
			'NodePromptText' => '<a class="btn btn-xl btn-primary nFldBtn mT10 mB10" href="[[DOMAIN]]/start/complaint">I Understand, Share My Story</a>
<a class="btn btn-xl btn-secondary nFldBtn mT10 mB10" href="[[DOMAIN]]/login">Log Back In, Continue My Complaint</a>'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2067,
			'NodeTree' => '66',
			'NodeParentID' => '2246',
			'NodeParentOrder' => '3',
			'NodeType' => 'Instructions Raw',
			'NodePromptText' => '<a class="btn btn-xl btn-primary nFldBtn mT10 mB10" href="[[DOMAIN]]/start/complaint">I Understand, Begin My Complaint</a>'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2068,
			'NodeTree' => '66',
			'NodeParentID' => '2246',
			'NodeParentOrder' => '4',
			'NodeType' => 'Incomplete Sess Check',
			'NodeResponseSet' => '1'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2069,
			'NodeTree' => '66',
			'NodeParentID' => '2246',
			'NodeType' => 'Instructions',
			'NodePromptText' => '<h2 class="slBlueDark">Preparing Your Story for an Organization</h2>'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2070,
			'NodeTree' => '58',
			'NodeParentID' => '1922',
			'NodeParentOrder' => '1',
			'NodeType' => 'Layout Row',
			'NodeCharLimit' => '3'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2071,
			'NodeTree' => '58',
			'NodeParentID' => '2070',
			'NodeType' => 'Layout Column',
			'NodeCharLimit' => '6'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2073,
			'NodeTree' => '58',
			'NodeParentID' => '2070',
			'NodeParentOrder' => '1',
			'NodeType' => 'Layout Column',
			'NodeCharLimit' => '6'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2074,
			'NodeTree' => '58',
			'NodeParentID' => '2173',
			'NodeType' => 'Drop Down',
			'NodePromptText' => 'Type of Partner',
			'NodeResponseSet' => 'Definition::Partner Types',
			'NodeDataStore' => 'Partners:PartType',
			'NodeOpts' => '5'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2075,
			'NodeTree' => '58',
			'NodeParentID' => '2173',
			'NodeParentOrder' => '2',
			'NodeType' => 'Drop Down',
			'NodePromptText' => '<h3 class="disIn">Operating In</h3>',
			'NodeResponseSet' => 'Definition::--STATES--',
			'NodeDataStore' => 'PartnerStates:PrtStaState',
			'NodeOpts' => '53'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2081,
			'NodeTree' => '58',
			'NodeParentID' => '2176',
			'NodeParentOrder' => '1',
			'NodeType' => 'Page Block'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2082,
			'NodeTree' => '58',
			'NodeParentID' => '2085',
			'NodeType' => 'Page Block'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2084,
			'NodeTree' => '58',
			'NodeParentID' => '2176',
			'NodeParentOrder' => '2',
			'NodeType' => 'Page Block'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2085,
			'NodeTree' => '58',
			'NodeParentID' => '2174',
			'NodeType' => 'Checkbox',
			'NodePromptText' => '<h3 class="m0 disIn">Capabilities to Help Complainants</h3><small class="rqd mL10">*required</small>
<p>This helps complainants, OpenPolice.org staff, and other organizations find the right help for each situation.<br></p>',
			'NodeResponseSet' => 'Definition::Organization Capabilities',
			'NodeDataStore' => 'PartnerCapac:PrtCapCapacity'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2086,
			'NodeTree' => '58',
			'NodeParentID' => '2084',
			'NodeType' => 'Text',
			'NodePromptText' => 'Organization Website',
			'NodeDataStore' => 'Partners:PartCompanyWebsite'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2087,
			'NodeTree' => '58',
			'NodeParentID' => '2173',
			'NodeParentOrder' => '3',
			'NodeType' => 'Text',
			'NodePromptText' => 'Description of Service Area',
			'NodeDataStore' => 'Partners:PartGeoDesc'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2088,
			'NodeTree' => '58',
			'NodeParentID' => '2084',
			'NodeParentOrder' => '1',
			'NodeType' => 'Text',
			'NodePromptText' => 'Website About Page',
			'NodeDataStore' => 'Partners:PartBioUrl'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2089,
			'NodeTree' => '58',
			'NodeParentID' => '2173',
			'NodeParentOrder' => '4',
			'NodeType' => 'Long Text',
			'NodePromptText' => 'Specific instructions about what types of complainants should share their story with this organization.',
			'NodeDataStore' => 'Partners:PartHelpReqs'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2090,
			'NodeTree' => '67',
			'NodeType' => 'Page',
			'NodePromptNotes' => 'staff-search'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2091,
			'NodeTree' => '67',
			'NodeParentID' => '2090',
			'NodeType' => 'Instructions',
			'NodePromptText' => '<center><h1 style="margin-top: 50px;">Coming Soon</h1></center>'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2092,
			'NodeTree' => '68',
			'NodeType' => 'Page',
			'NodePromptNotes' => 'partner-search',
			'NodePromptAfter' => 'Partner Search::M::::M::::M::'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2093,
			'NodeTree' => '68',
			'NodeParentID' => '2092',
			'NodeType' => 'Instructions',
			'NodePromptText' => '<center><h1 style="margin-top: 50px;">Coming Soon</h1></center>'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2094,
			'NodeTree' => '70',
			'NodeType' => 'Page',
			'NodePromptNotes' => 'share-complaint-or-compliment',
			'NodePromptAfter' => 'Complaint or Compliment? OpenPolice.org::M::OpenPolice.org helps you prepare, file, and track reports of police conduct. Would you like to share a complaint or a compliment?::M::::M::',
			'NodeCharLimit' => '-1'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2096,
			'NodeTree' => '11',
			'NodeParentID' => '1354',
			'NodeType' => 'Page Block',
			'NodeOpts' => '89'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2097,
			'NodeTree' => '11',
			'NodeParentID' => '1353',
			'NodeType' => 'Page Block',
			'NodeOpts' => '89'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2098,
			'NodeTree' => '11',
			'NodeParentID' => '1356',
			'NodeType' => 'Page Block',
			'NodeOpts' => '89'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2099,
			'NodeTree' => '11',
			'NodeParentID' => '1357',
			'NodeType' => 'Page Block',
			'NodeOpts' => '89'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2100,
			'NodeTree' => '11',
			'NodeParentID' => '2099',
			'NodeType' => 'Instructions Raw'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2101,
			'NodeTree' => '12',
			'NodeParentID' => '1867',
			'NodeType' => 'Page Block',
			'NodeDefault' => '#FFF;;#333;;#416CBD;;;;w100;;N;;left;;auto',
			'NodeOpts' => '6319'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2102,
			'NodeTree' => '12',
			'NodeParentID' => '1869',
			'NodeType' => 'Page Block',
			'NodeDefault' => '#FFF;;#333;;#416CBD;;;;w100;;N;;left;;auto',
			'NodeOpts' => '6319'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2103,
			'NodeTree' => '12',
			'NodeParentID' => '1868',
			'NodeType' => 'Page Block',
			'NodeDefault' => '#FFF;;#333;;#416CBD;;;;w100;;N;;left;;auto',
			'NodeOpts' => '6319'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2104,
			'NodeTree' => '71',
			'NodeType' => 'Page',
			'NodePromptNotes' => 'features',
			'NodePromptAfter' => 'Features of OpenPolice.org::M::::M::::M::',
			'NodeCharLimit' => '-1'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2105,
			'NodeTree' => '71',
			'NodeParentID' => '2109',
			'NodeType' => 'Instructions Raw',
			'NodePromptText' => '<p>&nbsp;</p><h1>Our Core Features</h1>\n<p>&nbsp;</p>\n<div class=\"row pB20\"><div class=\"col-3\"><div class=\"bigIcoWrap\">\n<img src=\"/openpolice/uploads/puzzle-pieces-circle-2-sm.jpg\" style=\"height: 65px;\" border=\"0\">\n</div></div><div class=\"col-9\">\n<h3 class=\"slBlueDark\">Prepare and save a professional-grade police misconduct report</h3>\n<p>Each one of the 18,000 police departments in the U.S. collects complaints in its own unique way. This poor data consistency creates huge headaches for researchers. To gain better insight into police behavior across the country, we\\'re helping to establish national police complaint data standards.</p>\n</div></div>\n<p>&nbsp;</p>\n<div class=\"row pB20\"><div class=\"col-3\"><div class=\"bigIcoWrap\">\n<img src=\"/openpolice/uploads/universality-sm.jpg\" style=\"height: 65px;\" border=\"0\">\n</div></div><div class=\"col-9\">\n<h3 class=\"slBlueDark\">File your report with the right police investigative agency</h3>\n<p>We strive to be fair and neutral in the way we collect and share data. We cannot check the accuracy of complaint allegations, so we never assume that they are true or false. We only present questions and response options that are non-leading. And we always encourage users to share information thatï¿½s accurate and truthful.</p>\n</div></div>\n<p>&nbsp;</p>\n<div class=\"row pB20\"><div class=\"col-3\"><div class=\"bigIcoWrap\">\n<img src=\"/openpolice/uploads/balance-sm.jpg\" style=\"height: 65px;\" border=\"0\">\n</div></div><div class=\"col-9\">\n<h3 class=\"slBlueDark\">Get matched with civil rights attorneys</h3>\n<p>Many state and local laws conceal government-collected police misconduct records from public view. To counter this problem, OpenPolice.org enables users to publish uncensored complaints online. Because the best antidote to state secrecy is public transparency!<br></p>\n</div></div>\n<p>&nbsp;</p>\n<div class=\"row pB20\"><div class=\"col-3\"><div class=\"bigIcoWrap\">\n<img src=\"/openpolice/uploads/openness-sm.jpg\" style=\"height: 65px;\" border=\"0\">\n</div></div><div class=\"col-9\">\n<h3 class=\"slBlueDark\">Publish your complaint online and share on social media</h3>\n<p>Police misconduct victims should never have to deal with rude or intimidating police station employees. That\\'s the <i>opposite</i> of openness ï¿½ because openness requires <i>accessibility</i>. OpenPolice.org is always easy to use and easy to understand. And, of course, weï¿½re always open to receive your complaint!</p>\n</div></div>\n<p>&nbsp;</p>\n<div class=\"row pB20\"><div class=\"col-3\"><div class=\"bigIcoWrap\">\n<img src=\"/openpolice/uploads/empowered-arm-2b-sm.jpg\" style=\"height: 65px;\" border=\"0\">\n</div></div><div class=\"col-9\">\n<h3 class=\"slBlueDark\">Upload photos, documents, video, and other evidence</h3>\n<p>The people who report misconduct should be at the center of the police oversight process. Filing a complaint is not the end of the road for OpenPolice.org users. We keep in touch because we care about how well ï¿½ or how poorly ï¿½ your department responds to your complaint. Your story is too important to be ignored!</p>\n</div></div>\n<p>&nbsp;</p>\n<div class=\"row pB20\"><div class=\"col-3\"><div class=\"bigIcoWrap\">\n<img src=\"/openpolice/uploads/magnifying-eye-sm.jpg\" style=\"height: 65px;\" border=\"0\">\n</div></div><div class=\"col-9\">\n<h3 class=\"slBlueDark\">Select from three privacy options</h3>\n<p>Police encounters can be chaotic, and the law is complex. Thatï¿½s why people who report misconduct often miss important things or pick allegations that arenï¿½t quite right. OpenPolice.org helps you find and organize the details that matter most. We also know the law inside and out, so we\\'ll make sure your allegations match the facts of your story.</p>\n</div></div>\n<p>&nbsp;</p>\n<p><a href=\"/principles\" class=\"btn btn-xl btn-primary w100\">Our Core Principles</a></p>\n<p>&nbsp;</p>',
			'NodePromptAfter' => '<style> .bigIcoWrap { width: 120px; height: 120px; -moz-border-radius: 60px; border-radius: 60px; text-align: center; padding-top: 27px; border: 2px #2B3493 solid; }</style>'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2106,
			'NodeTree' => '72',
			'NodeType' => 'Page',
			'NodePromptNotes' => 'principles',
			'NodePromptAfter' => 'Principles Behind OpenPolice.org::M::OpenPolice.org was built with core principles including universality, objectivity, transparency, privacy, openness, empowerment, and completeness.::M::::M::',
			'NodeCharLimit' => '-1'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2107,
			'NodeTree' => '72',
			'NodeParentID' => '2108',
			'NodeType' => 'Instructions Raw',
			'NodePromptText' => '<p>&nbsp;</p>\n<div class=\"row pB20\"><div class=\"col-sm-3 col-4\"><div class=\"bigIcoWrap\">\n<img src=\"/openpolice/uploads/universality-sm.jpg\" style=\"height: 65px;\" border=\"0\">\n</div></div><div class=\"col-sm-9 col-8\">\n<h1 class=\"slBlueDark\">Universality</h1>\n<p>Each one of the 18,000 police departments in the U.S. collects complaints in its own unique way. This poor data consistency creates huge headaches for researchers. To gain better insight into police behavior across the country, we\\'re helping to establish national police complaint data standards.</p>\n</div></div>\n<p>&nbsp;</p>\n<div class=\"row pB20\"><div class=\"col-sm-3 col-4\"><div class=\"bigIcoWrap\">\n<img src=\"/openpolice/uploads/balance-sm.jpg\" style=\"height: 65px;\" border=\"0\">\n</div></div><div class=\"col-sm-9 col-8\">\n<h1 class=\"slBlueDark\">Objectivity</h1>\n<p>We strive to be fair and neutral in the way we collect and share data. We cannot check the accuracy of complaint allegations, so we never assume that they are true or false. We only present questions and response options that are non-leading. And we always encourage users to share information thatï¿½s accurate and truthful.</p>\n</div></div>\n<p>&nbsp;</p>\n<div class=\"row pB20\"><div class=\"col-sm-3 col-4\"><div class=\"bigIcoWrap\">\n<img src=\"/openpolice/uploads/magnifying-eye-sm.jpg\" style=\"height: 65px;\" border=\"0\">\n</div></div><div class=\"col-sm-9 col-8\">\n<h1 class=\"slBlueDark\">Transparency</h1>\n<p>Many state and local laws conceal government-collected police misconduct records from public view. To counter this problem, OpenPolice.org enables users to publish uncensored complaints online. Because the best antidote to state secrecy is public transparency!<br></p>\n</div></div>\n<p>&nbsp;</p>\n<div class=\"row pB20\"><div class=\"col-sm-3 col-4\"><div class=\"bigIcoWrap\">\n<i class=\"fa fa-lock\" aria-hidden=\"true\"></i>\n</div></div><div class=\"col-sm-9 col-8\">\n<h1 class=\"slBlueDark\">Privacy</h1>\n<p>You choose how your complaint information is shared with police and with the public. For example, you can choose to be anonymous. But no matter which option you choose, we will never publish anyoneï¿½s private information. Learn more about your privacy options.\n<a href=\"/complaint-privacy-options\">Read more about privacy options</a></p>\n</div></div>\n<p>&nbsp;</p>\n<div class=\"row pB20\"><div class=\"col-sm-3 col-4\"><div class=\"bigIcoWrap\">\n<img src=\"/openpolice/uploads/openness-sm.jpg\" style=\"height: 65px;\" border=\"0\">\n</div></div><div class=\"col-sm-9 col-8\">\n<h1 class=\"slBlueDark\">Openness</h1>\n<p>Police misconduct victims should never have to deal with rude or intimidating police station employees. That\\'s the <i>opposite</i> of openness ï¿½ because openness requires <i>accessibility</i>. OpenPolice.org is always easy to use and easy to understand. And, of course, weï¿½re always open to receive your complaint!</p>\n</div></div>\n<p>&nbsp;</p>\n<div class=\"row pB20\"><div class=\"col-sm-3 col-4\"><div class=\"bigIcoWrap\">\n<img src=\"/openpolice/uploads/empowered-arm-2b-sm.jpg\" style=\"height: 65px;\" border=\"0\">\n</div></div><div class=\"col-sm-9 col-8\">\n<h1 class=\"slBlueDark\">Empowerment</h1>\n<p>The people who report misconduct should be at the center of the police oversight process. Filing a complaint is not the end of the road for OpenPolice.org users. We keep in touch because we care about how well ï¿½ or how poorly ï¿½ your department responds to your complaint. Your story is too important to be ignored!</p>\n</div></div>\n<p>&nbsp;</p>\n<div class=\"row pB20\"><div class=\"col-sm-3 col-4\"><div class=\"bigIcoWrap\">\n<img src=\"/openpolice/uploads/puzzle-pieces-circle-2-sm.jpg\" style=\"height: 65px;\" border=\"0\">\n</div></div><div class=\"col-sm-9 col-8\">\n<h1 class=\"slBlueDark\">Completeness</h1>\n<p>Police encounters can be chaotic, and the law is complex. Thatï¿½s why people who report misconduct often miss important things or pick allegations that arenï¿½t quite right. OpenPolice.org helps you find and organize the details that matter most. We also know the law inside and out, so we\\'ll make sure your allegations match the facts of your story.</p>\n</div></div>\n<!--\n<p>&nbsp;</p>\n<p><center><a href=\"/features\" class=\"btn btn-lg btn-primary\">Our Key Features</a></center></p>\n<p>&nbsp;</p>\n-->',
			'NodePromptAfter' => '<style>
.bigIcoWrap { width: 120px; height: 120px; -moz-border-radius: 60px; border-radius: 60px; text-align: center; padding-top: 27px; border: 2px #2B3493 solid; }
.bigIcoWrap i { font-size: 75px; margin-top: -7px; color: #000; }
</style>'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2108,
			'NodeTree' => '72',
			'NodeParentID' => '2106',
			'NodeParentOrder' => '1',
			'NodeType' => 'Page Block',
			'NodeOpts' => '67'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2109,
			'NodeTree' => '71',
			'NodeParentID' => '2104',
			'NodeType' => 'Page Block',
			'NodeOpts' => '67'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2110,
			'NodeTree' => '72',
			'NodeParentID' => '2106',
			'NodeType' => 'Page Block',
			'NodeDefault' => '#000;;#FFF;;#FFF;;http://openpolice.local/openpolice/uploads/compass-us.jpg;;w100;;Y;;left;;auto',
			'NodeOpts' => '71'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2111,
			'NodeTree' => '72',
			'NodeParentID' => '2110',
			'NodeType' => 'Instructions',
			'NodePromptText' => '<p>&nbsp;</p>
<center><div id="pageHeroTitle"><h1>Our Principles</h1></div></center>
<p>&nbsp;</p>',
			'NodePromptAfter' => '<style>
#pageHeroTitle { padding: 150px 0px 180px 0px; }
#pageHeroTitle h1 {
text-shadow: -1px 1px 1px #000;
font-size: 50px;
}
@media screen and (max-width: 768px) {
#pageHeroTitle { padding: 100px 0px 120px 0px; }
}
</style>'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2112,
			'NodeTree' => '1',
			'NodeParentID' => '459',
			'NodeType' => 'Instructions',
			'NodePromptText' => '<h2>Your Involvement</h2>',
			'NodePromptAfter' => '<style> #node[[nID]] { margin-bottom: -30px; } </style>'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2113,
			'NodeTree' => '7',
			'NodeParentID' => '2253',
			'NodeType' => 'Instructions',
			'NodePromptText' => '<h3>Publishing Options</h3>\r\n<p>You can choose to file your complaint with investigative agencies and publish your story on OpenPolice.org. You\\'ll have three privacy options to control what personal information you want to share.</p>\r\n<p><a id=\"hidivBtnReadPriv\" class=\"hidivBtnSelf btn btn-secondary\" href=\"javascript:;\">Read More</a></p>\r\n<div id=\"hidivReadPriv\" class=\"disNon\">\r\n<p>Whichever you choose, we will try to send your full complaint to a police investigative agency.</p>\r\n<ul>\r\n<li>\r\n<b style=\"font-weight: bold;\">Full Transparency</b><br>You want to publish the names of all civilians and police officers to this website.</li>\r\n<li>\r\n<b style=\"font-weight: bold;\">No Names Public<br></b>You donï¿½t want to publish any names to this website. This includes police officersï¿½ names and badge numbers too.</li>\r\n<li>\r\n<b style=\"font-weight: bold;\">Anonymous</b><br>You need your complaint to be anonymous, even though it will be harder to investigate. No names will be published on this website. Neither OpenPolice.org staff nor investigators will be able to contact you. Any details that could be used for personal identification may be deleted from the database.</li>\r\n</ul>\r\n<p><a href=\"/frequently-asked-questions\" target=\"_blank\" class=\"btn btn-secondary\"><i class=\"fa fa-external-link\" aria-hidden=\"true\"></i> Frequently Asked Questions</a></p>\r\n</div>'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2114,
			'NodeTree' => '8',
			'NodeParentID' => '2597',
			'NodeType' => 'Instructions',
			'NodePromptText' => '<h3>Sharing Your Story <nobr>with OpenPolice.org</nobr></h3>
<center><div class="ovrNo w66 pT20"><div id="usrFloWrap">
<a href="/openpolice/uploads/user-flow-compliment.jpg" target="_blank"><img src="/openpolice/uploads/user-flow-compliment.jpg" class="w100" border="0"></a>
</div></div></center>',
			'NodePromptAfter' => '<style>
#usrFloWrap { margin-top: -70px; }
</style>'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2115,
			'NodeTree' => '62',
			'NodeParentID' => '1994',
			'NodeType' => 'Instructions',
			'NodePromptText' => '<h2 class="slBlueDark">Preparing Your Complaint for an Attorney</h2>'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2116,
			'NodeTree' => '58',
			'NodeParentID' => '1954',
			'NodeParentOrder' => '1',
			'NodeType' => 'Instructions Raw',
			'NodePromptText' => '<center><img src="/openpolice/logo-ico-loading-anim.gif" border=0 class="round10 mT20 mB20" style="width: 75px;" ></center>
<script type="text/javascript">
setTimeout("window.location=\'/dash/manage-attorneys\'", 5);
</script>
<style> #nodeSubBtns, #sessMgmtWrap { display: none; } </style>'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2117,
			'NodeTree' => '58',
			'NodeParentID' => '1954',
			'NodeParentOrder' => '3',
			'NodeType' => 'Data Manip: Close Sess',
			'NodeResponseSet' => '58'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2118,
			'NodeTree' => '58',
			'NodeParentID' => '2173',
			'NodeParentOrder' => '5',
			'NodeType' => 'Hidden Field',
			'NodeDefault' => '219',
			'NodeDataStore' => 'Partners:PartType'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2119,
			'NodeTree' => '1',
			'NodeParentID' => '151',
			'NodeParentOrder' => '3',
			'NodeType' => 'Page',
			'NodePromptNotes' => 'force-against-officer',
			'NodePromptAfter' => 'Force Against an Officer::M::::M::::M::'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2120,
			'NodeTree' => '1',
			'NodeParentID' => '862',
			'NodeType' => 'Instructions',
			'NodePromptText' => '<h2>Questions about Police Chases</h2>',
			'NodePromptAfter' => '<style> #node[[nID]] { margin-bottom: -30px; } </style>'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2121,
			'NodeTree' => '1',
			'NodeParentID' => '2119',
			'NodeType' => 'Instructions',
			'NodePromptText' => '<h2>Use of Force against an Officer</h2>',
			'NodePromptAfter' => '<style> #node[[nID]] { margin-bottom: -30px; } </style>'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2122,
			'NodeTree' => '1',
			'NodeParentID' => '707',
			'NodeParentOrder' => '1',
			'NodeType' => 'Page',
			'NodePromptNotes' => 'uploads',
			'NodePromptAfter' => 'Upload Documentation::M::::M::::M::'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2123,
			'NodeTree' => '1',
			'NodeParentID' => '528',
			'NodeType' => 'Instructions',
			'NodePromptText' => '<h2 class="slBlueDark">Confirm Your Complaint</h2>
<h3>Below is what attorneys and legal experts will see:</h3>'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2124,
			'NodeTree' => '1',
			'NodeParentID' => '528',
			'NodeParentOrder' => '1',
			'NodeType' => 'Page Block'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2125,
			'NodeTree' => '1',
			'NodeParentID' => '528',
			'NodeParentOrder' => '6',
			'NodeType' => 'Checkbox',
			'NodePromptAfter' => '<style> #nLabel[[nID]] label { display: none; } #nLabel[[nID]] { margin-top: -50px; } 
</style>',
			'NodeOpts' => '5'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2126,
			'NodeTree' => '1',
			'NodeParentID' => '528',
			'NodeParentOrder' => '7',
			'NodeType' => 'Checkbox',
			'NodePromptAfter' => '<style> #nLabel[[nID]] label { display: none; } #nLabel[[nID]] { margin-top: -50px; } 
</style>',
			'NodeOpts' => '5'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2127,
			'NodeTree' => '1',
			'NodeParentID' => '2050',
			'NodeParentOrder' => '1',
			'NodeType' => 'Instructions Raw',
			'NodePromptText' => '<style> #n1163cyc0fld0lab, #blockWrap2127cyc0 { display: none; } </style>'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2128,
			'NodeTree' => '1',
			'NodeParentID' => '4',
			'NodeParentOrder' => '6',
			'NodeType' => 'Loop Root',
			'NodePromptText' => '<h2>Vehicles at the Scene</h2>
Please share information about <span class="slBlueDark">civilian and police vehicles</span> involved in the incident. This includes cars, trucks, vans, motorcycles, bicycles, boats, or other.<br /><br />If there were no [other] vehicles involved, go to the next section.',
			'NodePromptNotes' => 'add-vehicles',
			'NodePromptAfter' => 'Add Vehicles That Were Involved::M::::M::::M::',
			'NodeDataBranch' => 'Vehicles',
			'NodeDataStore' => 'Vehicles:VehicID'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2129,
			'NodeTree' => '1',
			'NodeParentID' => '1421',
			'NodeType' => 'Instructions',
			'NodePromptText' => '<h2 id="fixedHeader" style="width: 1185px; min-width: 1185px; max-width: 1185px;">Vehicle #[LoopItemCnt]:</h2>',
			'NodePromptAfter' => '<style>
#node[[nID]] { margin-bottom: -30px; } 
#blockWrap2135, #blockWrap2136 { display: none; } 
</style>
<script type="text/javascript"> $(document).ready(function(){
function checkVehicType() {
  if (document.getElementById("blockWrap2135") && document.getElementById("blockWrap2136")) {
    if (!document.getElementById("blockWrap2136").style.display) document.getElementById("blockWrap2136").style.display = \'none\';
    if (!document.getElementById("blockWrap2135").style.display) document.getElementById("blockWrap2135").style.display = \'none\';
    var isOfficer = false;
    if (document.getElementById("n2137fld0") && document.getElementById("n2137fld0").checked) {
      isOfficer = true;
    }
    if (document.getElementById("n2133fld") && document.getElementById("n2133fld").length > 0) {
      isOfficer = true;
    }
    if (isOfficer) {
      kidsVisible(2136, \'\', false);
      kidsVisible(2135, \'\', true);
      if (document.getElementById("blockWrap2136").style.display == \'block\') {
        $("#blockWrap2136").slideUp("fast");
      }
      if (document.getElementById("blockWrap2135").style.display == \'none\') {
        setTimeout(function() { $("#blockWrap2135").slideDown("fast"); }, 330);
      }
    } else {
      kidsVisible(2135, \'\', false);
      kidsVisible(2136, \'\', true);
      if (document.getElementById("blockWrap2135").style.display == \'block\') {
        $("#blockWrap2135").slideUp("fast");
      }
      if (document.getElementById("blockWrap2136").style.display == \'none\') {
        setTimeout(function() { $("#blockWrap2136").slideDown("fast"); }, 330);
      }
    }
  }
  setTimeout(function() { checkVehicType(); }, 700);
}
setTimeout(function() { checkVehicType(); }, 100);
}); </script>'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2130,
			'NodeTree' => '1',
			'NodeParentID' => '2142',
			'NodeType' => 'Checkbox',
			'NodePromptText' => '<h3>[LoopItemLabel]</h3>
Who was riding this vehicle during this incident?',
			'NodePromptAfter' => '<style> #nLabel[[nID]] { margin-bottom: -20px; } </style>',
			'NodeResponseSet' => 'Table::Civilians',
			'NodeDataStore' => 'LinksCivilianVehicles:LnkCivVehicCivID'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2131,
			'NodeTree' => '1',
			'NodeParentID' => '2130',
			'NodeType' => 'Layout Sub-Response',
			'NodeDataBranch' => 'LinksCivilianVehicles'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2132,
			'NodeTree' => '1',
			'NodeParentID' => '2131',
			'NodeType' => 'Radio',
			'NodePromptAfter' => '<style> #node[[nID]] { margin-top: -20px; } </style>',
			'NodeResponseSet' => 'Definition::Vehicle Roles',
			'NodeDataStore' => 'LinksCivilianVehicles:LnkCivVehicRole'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2133,
			'NodeTree' => '1',
			'NodeParentID' => '2142',
			'NodeParentOrder' => '1',
			'NodeType' => 'Checkbox',
			'NodePromptAfter' => '<style> #node[[nID]] { margin: -60px 0px 0px 0px; } </style>',
			'NodeResponseSet' => 'Table::Officers',
			'NodeDataStore' => 'LinksOfficerVehicles:LnkOffVehicOffID'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2140,
			'NodeTree' => '1',
			'NodeParentID' => '1421',
			'NodeParentOrder' => '2',
			'NodeType' => 'Radio',
			'NodePromptText' => 'Was this an officer\'s vehicle?',
			'NodeDataStore' => 'Vehicles:VehicIsCivilian',
			'NodeOpts' => '5'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2141,
			'NodeTree' => '1',
			'NodeParentID' => '2140',
			'NodeType' => 'Page Block'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2142,
			'NodeTree' => '1',
			'NodeParentID' => '2143',
			'NodeParentOrder' => '2',
			'NodeType' => 'Loop Cycle',
			'NodeResponseSet' => 'LoopItems::Vehicles',
			'NodeDataBranch' => 'Vehicles'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2143,
			'NodeTree' => '1',
			'NodeParentID' => '4',
			'NodeParentOrder' => '7',
			'NodeType' => 'Page',
			'NodePromptNotes' => 'vehicle-roles',
			'NodePromptAfter' => 'Vehicle Roles::M::::M::::M::'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2144,
			'NodeTree' => '1',
			'NodeParentID' => '2143',
			'NodeType' => 'Instructions',
			'NodePromptText' => '<h2>Vehicle Use</h2>',
			'NodePromptAfter' => '<style> #node[[nID]] { margin-bottom: -30px; } </style>'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2146,
			'NodeTree' => '1',
			'NodeParentID' => '2133',
			'NodeType' => 'Layout Sub-Response',
			'NodeDataBranch' => 'LinksOfficerVehicles'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2147,
			'NodeTree' => '1',
			'NodeParentID' => '2146',
			'NodeType' => 'Radio',
			'NodePromptAfter' => '<style> #node[[nID]] { margin-top: -20px; } </style>',
			'NodeResponseSet' => 'Definition::Vehicle Roles',
			'NodeDataStore' => 'LinksOfficerVehicles:LnkOffVehicRole'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2149,
			'NodeTree' => '73',
			'NodeType' => 'Page',
			'NodePromptNotes' => 'partners',
			'NodePromptAfter' => 'Partners::M::::M::::M::',
			'NodeResponseSet' => '58',
			'NodeCharLimit' => '-1'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2150,
			'NodeTree' => '73',
			'NodeParentID' => '2149',
			'NodeType' => 'Instructions',
			'NodePromptText' => '<p>&nbsp;</p>
<h2 class="slBlueDark">Organizations Partnering with OpenPolice.org</h2>'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2151,
			'NodeTree' => '60',
			'NodeParentID' => '1938',
			'NodeType' => 'Page Block',
			'NodeOpts' => '89'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2152,
			'NodeTree' => '44',
			'NodeParentID' => '1417',
			'NodeType' => 'Page Block'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2153,
			'NodeTree' => '46',
			'NodeParentID' => '1419',
			'NodeType' => 'Page Block'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2154,
			'NodeTree' => '36',
			'NodeParentID' => '1223',
			'NodeParentOrder' => '1',
			'NodeType' => 'Page Block',
			'NodeOpts' => '89'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2155,
			'NodeTree' => '36',
			'NodeParentID' => '1273',
			'NodeType' => 'Page Block',
			'NodeOpts' => '89'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2156,
			'NodeTree' => '36',
			'NodeParentID' => '1273',
			'NodeParentOrder' => '1',
			'NodeType' => 'Page Block',
			'NodeOpts' => '89'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2157,
			'NodeTree' => '36',
			'NodeParentID' => '1312',
			'NodeType' => 'Page Block',
			'NodeOpts' => '89'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2158,
			'NodeTree' => '36',
			'NodeParentID' => '1223',
			'NodeParentOrder' => '4',
			'NodeType' => 'Page Block',
			'NodeOpts' => '89'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2159,
			'NodeTree' => '36',
			'NodeParentID' => '1223',
			'NodeParentOrder' => '5',
			'NodeType' => 'Page Block',
			'NodeOpts' => '89'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2161,
			'NodeTree' => '97',
			'NodeParentID' => '2373',
			'NodeParentOrder' => '6',
			'NodeType' => 'Page Block',
			'NodeOpts' => '89'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2162,
			'NodeTree' => '36',
			'NodeParentID' => '2154',
			'NodeType' => 'Instructions Raw',
			'NodePromptText' => '[ Department Main Contact Info ] hard-coded via OpenDepts.php function printDeptEditHeader2, to view openpolice.nodes.2162-volun-dept-edit-header2'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2163,
			'NodeTree' => '42',
			'NodeParentID' => '1362',
			'NodeParentOrder' => '8',
			'NodeType' => 'Page Block',
			'NodeDefault' => '#EDF8FF;;#000;;#416CBD;;;;w100;;N;;left;;auto',
			'NodeOpts' => '71'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2164,
			'NodeTree' => '42',
			'NodeParentID' => '2163',
			'NodeType' => 'Instructions Raw',
			'NodePromptText' => '[ Incomplete Complaint Session History ] hard-coded via OpenReportTools.php function printComplaintSessPath, to view survloop.admin.tree.tree-session-attempt-history'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2165,
			'NodeTree' => '74',
			'NodeType' => 'Page',
			'NodePromptNotes' => 'manage-attorneys',
			'NodePromptAfter' => 'Manage Attorneys::M::::M::::M::',
			'NodeCharLimit' => '-1'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2166,
			'NodeTree' => '74',
			'NodeParentID' => '2167',
			'NodeType' => 'Instructions Raw',
			'NodePromptText' => '[ List of Attorneys ] hard-coded via OpenPartners.php function printManagePartners, to view openpolice.nodes.2166-manage-partners'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2167,
			'NodeTree' => '74',
			'NodeParentID' => '2165',
			'NodeType' => 'Page Block',
			'NodeOpts' => '89'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2169,
			'NodeTree' => '60',
			'NodeParentID' => '2656',
			'NodeType' => 'Instructions Raw',
			'NodePromptText' => '[ Capabilities Totals ] hard-coded via OpenPartners.php function printPartnerCapabilitiesOverview, to view openpolice.nodes.2169-partner-overview-capabilities'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2170,
			'NodeTree' => '75',
			'NodeType' => 'Page',
			'NodePromptNotes' => 'manage-organizations',
			'NodePromptAfter' => 'Manage Organizations::M::::M::::M::',
			'NodeCharLimit' => '-1'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2171,
			'NodeTree' => '75',
			'NodeParentID' => '2172',
			'NodeType' => 'Instructions Raw',
			'NodePromptText' => '[ List of All Partner Organizations ] hard-coded via OpenPartners.php function printManagePartners, to view openpolice.nodes.2166-manage-partners'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2172,
			'NodeTree' => '75',
			'NodeParentID' => '2170',
			'NodeType' => 'Page Block',
			'NodeOpts' => '89'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2173,
			'NodeTree' => '58',
			'NodeParentID' => '2073',
			'NodeType' => 'Page Block',
			'NodeOpts' => '89'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2174,
			'NodeTree' => '58',
			'NodeParentID' => '2073',
			'NodeParentOrder' => '1',
			'NodeType' => 'Page Block',
			'NodeOpts' => '89'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2175,
			'NodeTree' => '58',
			'NodeParentID' => '2071',
			'NodeType' => 'Page Block',
			'NodeOpts' => '89'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2176,
			'NodeTree' => '58',
			'NodeParentID' => '2071',
			'NodeParentOrder' => '1',
			'NodeType' => 'Page Block',
			'NodeOpts' => '89'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2177,
			'NodeTree' => '58',
			'NodeParentID' => '2071',
			'NodeParentOrder' => '2',
			'NodeType' => 'Page Block',
			'NodeOpts' => '89'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2178,
			'NodeTree' => '58',
			'NodeParentID' => '1922',
			'NodeType' => 'Page Block',
			'NodeOpts' => '89'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2179,
			'NodeTree' => '73',
			'NodeParentID' => '2149',
			'NodeParentOrder' => '1',
			'NodeType' => 'Instructions Raw',
			'NodePromptText' => '[ Partners Listing ]',
			'NodeResponseSet' => 'LoopItems::',
			'NodeDataBranch' => 'Partners'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2181,
			'NodeTree' => '58',
			'NodeParentID' => '2178',
			'NodeParentOrder' => '3',
			'NodeType' => 'Instructions Raw'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2184,
			'NodeTree' => '1',
			'NodeParentID' => '154',
			'NodeParentOrder' => '2',
			'NodeType' => 'Page',
			'NodePromptNotes' => 'allegation-repeat-contact',
			'NodePromptAfter' => 'Allegation: Ongoing / Repeated Police Contact::M::::M::::M::'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2185,
			'NodeTree' => '1',
			'NodeParentID' => '2184',
			'NodeParentOrder' => '1',
			'NodeType' => 'Radio',
			'NodePromptText' => 'We asked you to focus this complaint on a single, specific incident. But was this incident part of <span class="slBlueDark">repeated or continued contact with the same officer</span>?<br /><br />These contacts could have happened over days, weeks, or months.',
			'NodeDataStore' => 'AllegSilver:AlleSilRepeatContact'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2186,
			'NodeTree' => '1',
			'NodeParentID' => '2185',
			'NodeType' => 'Radio',
			'NodePromptText' => 'Do you think this specific incident is part of <span class="slBlueDark">repeated harassment</span>? That means an officer continued to contact someone without lawful justification.',
			'NodePromptNotes' => '<span class=\"slBlueDark\">Example of Repeated Harassment:</span> Every few weeks, the same officer stops, questions, and frisks the same group of teenagers. He does this when theyï¿½re on their way home from school. But he never finds illegal items or arrests them.',
			'NodeDataStore' => 'AllegSilver:AlleSilRepeatHarass',
			'NodeOpts' => '5'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2187,
			'NodeTree' => '1',
			'NodeParentID' => '2186',
			'NodeType' => 'Data Manip: Wrap',
			'NodeResponseSet' => '608',
			'NodeDataBranch' => 'Allegations',
			'NodeDataStore' => 'Allegations:AlleType'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2188,
			'NodeTree' => '1',
			'NodeParentID' => '2187',
			'NodeType' => 'Checkbox',
			'NodePromptText' => 'Which people were victims of repeated harassed?',
			'NodeResponseSet' => 'LoopItems::Victims',
			'NodeDataStore' => 'LinksCivilianAllegations:LnkCivAlleCivID'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2189,
			'NodeTree' => '1',
			'NodeParentID' => '2187',
			'NodeParentOrder' => '1',
			'NodeType' => 'Checkbox',
			'NodePromptText' => 'Which officers conducted repeated harassment?',
			'NodeResponseSet' => 'LoopItems::Officers',
			'NodeDataStore' => 'LinksOfficerAllegations:LnkOffAlleOffID'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2190,
			'NodeTree' => '1',
			'NodeParentID' => '2187',
			'NodeParentOrder' => '2',
			'NodeType' => 'Long Text',
			'NodePromptText' => 'What makes you think that repeated harassment occurred?',
			'NodeDataStore' => 'Allegations:AlleDescription',
			'NodeOpts' => '5'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2191,
			'NodeTree' => '76',
			'NodeType' => 'Page',
			'NodePromptNotes' => 'pilot-program',
			'NodePromptAfter' => 'Pilot Program::M::This document provides guidance on what to expect during this pilot testing phase. In the short term, you can help make OpenPolice.org more resilient and user-friendly.::M::Open Police, OpenPolice.org, Open Police Complaints, Police Departments, Cops, Police, Officers, file complaint, submit, victims, accountability, oversight, open source, transparency, pilot program::M::',
			'NodeCharLimit' => '-1'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2192,
			'NodeTree' => '76',
			'NodeParentID' => '2194',
			'NodeType' => 'Instructions',
			'NodePromptText' => '<h2 class=\"slBlueDark\">Welcome to the OpenPolice.org Pilot Program!</h2>\r\n<p>This document provides guidance on what to expect during this pilot testing phase. In the short term, you can help make OpenPolice.org more resilient and user-friendly. In the long term, you can help OpenPolice.org become the national center for accessible and transparent police complaint data.</p>\r\n<p>We designed OpenPolice.org to make it easy as possible for people to build complete reports that are accurate and easy for you to evaluate. If we do this right, the experience will not only help you better serve complaints; it will empower complainants to become better advocates for themselves and others who face police misconduct.</p>\r\n<p>&nbsp;</p>\n<h3>Identifying New Complainants</h3>\r\n<p>We invited you to join this program because youï¿½re an attorney or activist working with people who experience police misconduct. We are excited for you to introduce them to OpenPolice.org. In particular, we are looking for users who are credible and motivated to test a new app.</p>\r\n<p>&nbsp;</p>\n<h3>Working With Complainants</h3>\r\n<p>Once youï¿½ve identified a qualified complainant, please tell them they are part of an exclusive private beta testing program for an important new web app. They should not share the app link with others. If testers know people who want to use it, they should refer them to you. (See sample invitation email template below.)</p>\r\n<p>Remind complainants that they might hit an error or bug while using the app. If that happens, they should refresh the page in the browser. If the problem persists, they should email morgan<span style=\"margin-right: -7px;\">&nbsp;&nbsp;</span>@<span style=\"margin-right: -7px;\">&nbsp;&nbsp;</span>flexyourrights.org using their account email. Morgan will then help them through the problem.</p>\r\n<p>Once a complainant agrees to participate, you can send them the custom link created for your organization (e.g. http://openpolice.local/prepare-complaint-for-org/cuapb). This will tell us that your organization referred this complaint to OpenPolice.org.</p>\r\n<p>&nbsp;</p>\n<h3>Timeline</h3>\r\n<p>A crucial part of our pilot program will involve streamlining our administrative tools and processes for reviewing and submitting complaints to investigative agencies.</p>\r\n<p>We are ready to process a handful of new complaints per day. But we will rapidly scale up as our process becomes more stable and efficient. Because many invited participants will not complete the survey ï¿½ you can invite up to 3-5 participants per day.</p>\r\n<p>We aim to collect our first 100 complaints by early April 2019. Soon after, we will quietly open OpenPolice.org to the public. Then you can share the link far and wide as we invite all reports of police misconduct to use OpenPolice.org.</p>\n<p>&nbsp;</p>'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2193,
			'NodeTree' => '76',
			'NodeParentID' => '2191',
			'NodeParentOrder' => '1',
			'NodeType' => 'Layout Row',
			'NodeCharLimit' => '2'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2194,
			'NodeTree' => '76',
			'NodeParentID' => '2193',
			'NodeType' => 'Layout Column',
			'NodeCharLimit' => '6'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2195,
			'NodeTree' => '76',
			'NodeParentID' => '2193',
			'NodeParentOrder' => '2',
			'NodeType' => 'Layout Column',
			'NodeCharLimit' => '5'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2196,
			'NodeTree' => '76',
			'NodeParentID' => '2195',
			'NodeParentOrder' => '1',
			'NodeType' => 'Instructions',
			'NodePromptText' => '<h3>Sample Email to Invite Complainant\r\n<hr></h3>\r\n<p>Dear {Complainant Name},<br><br>Iï¿½m so sorry to hear about your experience. {Partner Organition} partnered with OpenPolice.org to help point you in the right direction.<br><br>OpenPolice.org is not yet open to the public, but <b>we are inviting you to become a beta tester for the software</b>. If you participate, please note that you might hit bugs or errors while using the app. If that happens, refresh the page in your browser. If that doesnï¿½t fix the problem, please email OpenPolice.org\\'s coder Morgan Lesko (morgan<span style=\"margin-right: -7px;\">&nbsp;&nbsp;</span>@<span style=\"margin-right: -7px;\">&nbsp;&nbsp;</span>flexyourrights.org). He will then help you through the problem.<br><br>To prepare your complaint, click the link below. Depending on the complexity of your incident and how much information you share, the survey should take 10-40 minutes to complete.<br><br>http://openpolice.local/prepare-complaint-for-org/url<br><br>Sincerely,<br><br>{Name of Partner &amp; Org Name}<br></p>',
			'NodeOpts' => '89'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2197,
			'NodeTree' => '76',
			'NodeParentID' => '2193',
			'NodeParentOrder' => '1',
			'NodeType' => 'Layout Column',
			'NodeCharLimit' => '1'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2198,
			'NodeTree' => '76',
			'NodeParentID' => '2191',
			'NodeType' => 'Instructions',
			'NodePromptText' => '<div class="p20"></div>'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2199,
			'NodeTree' => '76',
			'NodeParentID' => '2195',
			'NodeType' => 'Instructions Raw',
			'NodePromptText' => '<h3>Software Preview Demo 2018<br /></h3>
<iframe width="100%" height="315" src="https://www.youtube.com/embed/Hn_KOQvWEmU" frameborder="0" allow="accelerometer; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>',
			'NodeOpts' => '89'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2200,
			'NodeTree' => '77',
			'NodeType' => 'Page',
			'NodePromptNotes' => 'pilot-program-with-ssdp-chapters',
			'NodePromptAfter' => 'Pilot Program with SSDP Chapters::M::You are invited to help beta test this web-based software before it launches. Please feel free to begin referring victims of police misconduct who wish to formally file a complaint.::M::::M::',
			'NodeCharLimit' => '-1'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2201,
			'NodeTree' => '77',
			'NodeParentID' => '2642',
			'NodeType' => 'Instructions Raw',
			'NodePromptText' => '<div class="p10 slGrey">(* Proposed *)</div>'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2202,
			'NodeTree' => '77',
			'NodeParentID' => '2642',
			'NodeParentOrder' => '1',
			'NodeType' => 'Layout Row',
			'NodeCharLimit' => '3'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2203,
			'NodeTree' => '77',
			'NodeParentID' => '2202',
			'NodeType' => 'Layout Column',
			'NodeCharLimit' => '7'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2205,
			'NodeTree' => '77',
			'NodeParentID' => '2202',
			'NodeParentOrder' => '1',
			'NodeType' => 'Layout Column',
			'NodeCharLimit' => '5'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2206,
			'NodeTree' => '77',
			'NodeParentID' => '2203',
			'NodeType' => 'Instructions',
			'NodePromptText' => '<a href="https://ssdp.org" target="_blank"><img src="/openpolice/uploads/ssdp-logo-20years.jpg" class="w33 pull-right" border="0"></a>
<h2 class="slBlueDark">SSDP Rockstars</h2>
<h4>Welcome to the OpenPolice.org Pilot Program!</h4>
<p>You are invited to help <b>beta test</b> this web-based software before it launches. Please feel free to begin referring victims of police misconduct who wish to formally file a complaint.</p>
<p>In the short term, you can help make OpenPolice.org more resilient and user-friendly, and help point victims in the right direction. In the long term, you can help OpenPolice.org become the national center for accessible and transparent police complaint data.</p>
<p>We designed OpenPolice.org to make it easy as possible for people to build complete reports that are accurate and easy to evaluate. If we do this right, the experience will not only better serve complaints; it will empower complainants to become better advocates for themselves and others who face police misconduct.</p>',
			'NodePromptAfter' => '<style> #ajaxWrap { background: #F5FBFF; padding-bottom: 40px; margin-bottom: -50px; } </style>',
			'NodeOpts' => '89'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2207,
			'NodeTree' => '77',
			'NodeParentID' => '2205',
			'NodeParentOrder' => '1',
			'NodeType' => 'Instructions',
			'NodePromptText' => '<iframe width=\"100%\" height=\"315\" src=\"https://www.youtube.com/embed/Hn_KOQvWEmU\" frameborder=\"0\" allow=\"accelerometer; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n<h4 class=\"slBlueDark mB0\"><br />This free web app helps you <nobr>to ...</nobr></h4>\n<ul>\n<li>Prepare and save a professional-grade police misconduct report.</li>\n<li>File your report with the right police investigative agency.</li>\n<li>Get matched with legal help.</li>\n<li>Publish your complaint online and share on social media.</li>\n<li>Upload photos, documents, video, and other evidence.</li>\n</ul>\n<h4><br />Your Privacy Options:</h4>\n<p>When you begin your new complaint, you\\'ll have three privacy options to control what personal information you want to share.</p>\n<ul>\n<li>\n<b>Full Transparency</b><br>You want to publish the names of all civilians and police officers to this website.</li>\n<li>\n<b>No Names Public<br></b>You donï¿½t want to publish any names to this website. This includes police officersï¿½ names and badge numbers too.</li>\n<li>\n<b>Anonymous</b><br>You need your complaint to be anonymous, even though it will be harder to investigate. No names will be published on this website. Neither Open Police staff nor investigators will be able to contact you. Any details that could be used for personal identification may be deleted from the database.</li>\n</ul>',
			'NodeOpts' => '89'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2208,
			'NodeTree' => '77',
			'NodeParentID' => '2203',
			'NodeParentOrder' => '4',
			'NodeType' => 'Instructions',
			'NodePromptText' => '<h3>Sample email to students who want to formally report <nobr>police misconduct</nobr>\r\n<hr></h3>\r\n<p>Dear {Complainant Name},<br><br>Iï¿½m so sorry to hear about your experience. Our SSDP chapter partnered with OpenPolice.org to help point you in the right direction.</p>\n<p>OpenPolice.org is not yet open to the public, but <b>we are inviting you to become a beta tester for the software</b>. If you participate, please note that you might hit bugs or errors while using the app. If that happens, refresh the page in your browser. If that doesnï¿½t fix the problem, please email OpenPolice.org\\'s coder Morgan Lesko (morgan<span style=\"margin-right: -7px;\">&nbsp;&nbsp;</span>@<span style=\"margin-right: -7px;\">&nbsp;&nbsp;</span>flexyourrights.org). He will then help you through the problem.</p>\n<p>To prepare your complaint, click the link below. Depending on the complexity of your incident and how much information you share, the survey should take 10-40 minutes to complete.</p>\n<p><a href=\"http://openpolice.local/filing-your-police-complaint?org=ssdp\" target=\"_blank\">http://openpolice.local/filing-your-police-complaint?org=ssdp</a></p>\n<p>Sincerely,</p>\n<p>{Name &amp; Chapter Info}<br></p>',
			'NodeOpts' => '89'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2209,
			'NodeTree' => '77',
			'NodeParentID' => '2205',
			'NodeType' => 'Instructions',
			'NodePromptText' => '<p><b>SSDP Referral Link for Victims of Police Misconduct:</b></p>
<p><a href="/filing-your-police-complaint?org=ssdp" target="_blank">openpolice.org/filing-your-police-complaint?org=ssdp</a></p>',
			'NodeOpts' => '89'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2210,
			'NodeTree' => '77',
			'NodeParentID' => '2205',
			'NodeParentOrder' => '2',
			'NodeType' => 'Instructions',
			'NodePromptText' => '<h3>About OpenPolice.org\'s Creators</h3>
<p><img src="/openpolice/uploads/smile-cspan-steve.jpeg" alt="Steve Silverman" class="bigTmbRound pull-right">Steve Silverman is the founder and executive director of <a href="https://www.flexyourrights.org/" target="_blank">Flex Your Rights (Flex)</a>, the parent of OpenPolice.org. In 2002, Silverman founded Flex to help educate people about their rights during police encounters. To this end, he created a pair of popular educational movies. The most recent work, <a href="https://www.flexyourrights.org/10-rules/" target="_blank"><i>10 Rules for Dealing with Police</i>,</a> is narrated by Billy Murphy, attorney for the family of Freddie Gray. (Both movies are available on the <a href="https://www.youtube.com/user/FlexYourRights/" target="_blank">Flex Your Rights YouTube channel</a>, which is about to hit 40 million views.)
He has also been a great ally and Friend of SSDP (awarded in 20??) for decades.</p>
<p><img src="/openpolice/uploads/morgan-lesko.png" alt="Morgan Lesko" class="bigTmbRound pull-right">Morgan Lesko is a web-based programmer and lifelong activist. He founded a chapter of Students for Sensible Drug Policy (SSDP) at the University of Maryland in 2002. After graduating he volunteered to run <a href="https://web.archive.org/web/20100615192254/http://ssdp.org/index.php" target="_blank">SSDP.org using his own content management system</a> for three years. SSDP has deeply honored with him by awarding the "Morgan Lesko Online Activism Award" since 2011. With almost 20 years of experience with PHP, MySQL, Javascript, CSS, & HTML, this is his first project built atop the <a href="https://laravel.com/" target="_blank">Laravel coding framework</a>, and first <a href="https://github.com/flexyourrights/openpolice" target="_blank">on Github</a>. He\'s also been known to sometimes make animated gifs.</p>
<p><a href="/about" target="_blank">Read more about our team and advisors...</a></p>',
			'NodeOpts' => '89'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2211,
			'NodeTree' => '77',
			'NodeParentID' => '2203',
			'NodeParentOrder' => '1',
			'NodeType' => 'Instructions',
			'NodePromptText' => '<h3>Identifying New Complainants</h3>\r\n<p>We invited you to join this program because youï¿½re an SSDP chapter that might know students who experience police misconduct. We are excited for you to introduce them to OpenPolice.org. In particular, we are looking for users who are credible and motivated to test a new app.</p>',
			'NodeOpts' => '89'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2212,
			'NodeTree' => '77',
			'NodeParentID' => '2203',
			'NodeParentOrder' => '2',
			'NodeType' => 'Instructions',
			'NodePromptText' => '<h3>Working With Complainants</h3>\r\n<p>Once youï¿½ve identified a qualified complainant, please tell them they are part of an exclusive private beta testing program for an important new web app. They should not share the app link with others. If testers know people who want to use it, they should refer them to you, Morgan, or Steve. (See sample invitation email template below.)</p>\r\n<p>Remind complainants that they might hit an error or bug while using the app. If that happens, they should refresh the page in the browser. If the problem persists, they should email morgan@flexyourrights.org using their account email. Morgan will then help them through the problem.</p>\r\n<p>Once a complainant agrees to participate, you can send them the SSDP referral link, just so we know that SSDP referred this complaint to OpenPolice.org.</p>',
			'NodeOpts' => '89'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2213,
			'NodeTree' => '77',
			'NodeParentID' => '2203',
			'NodeParentOrder' => '3',
			'NodeType' => 'Instructions',
			'NodePromptText' => '<h3>Timeline</h3>
<p>A crucial part of our pilot program will involve streamlining our administrative tools and processes for reviewing and submitting complaints to investigative agencies.</p>
<p>We aim to collect our first 100 complaints by early April 2019. Soon after, we will quietly open OpenPolice.org to the public. Then you can share the link far and wide as we invite all reports of police misconduct to use OpenPolice.org.</p>',
			'NodeOpts' => '89'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2216,
			'NodeTree' => '79',
			'NodeType' => 'Data Manip: New',
			'NodeDataBranch' => 'TesterBeta'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2217,
			'NodeTree' => '79',
			'NodeParentID' => '2216',
			'NodeType' => 'Page',
			'NodePromptNotes' => 'join',
			'NodePromptAfter' => 'Join the OpenPolice.org Beta Launch::M::Do you have a negative police experience you want to share? If so, we invite you to test our new web app. To make sure you qualify, please share your name, email, and a brief description of your incident.::M::Open Police, OpenPolice.org, Police Departments, Cops, Police, Officers, file complaint, submit, victims, beta test::M::/openpolice/uploads/meta-opc-beta-testers.jpg'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2226,
			'NodeTree' => '79',
			'NodeParentID' => '2239',
			'NodeType' => 'Instructions',
			'NodePromptText' => '<div class=\"mTn20\"><h2 class=\"slBlueDark mT0\">Now OPEN for <nobr>Beta Testers!</nobr></h2></div>\r\n<p>Do you have a negative police experience you want to share? If so, we invite you to test our new OpenPolice.org app.</p>\r\n<p>To make sure you qualify, please share your name, email, and a brief description of your incident. Your incident must have occurred in the United States. <b>If you qualify, weï¿½ll email you a link within 24 hours to begin your complaint.</b></p><p>OpenPolice.org is an independent project developed by <nobr>Flex Your Rights</nobr>, a 501(c)(3) educational nonprofit. </p>',
			'NodePromptAfter' => '<style>
#ajaxWrap { background: #F5FBFF; padding-bottom: 40px; margin-bottom: -50px; } 
#pageBtns, #sessMgmtWrap { display: none; }
</style>
<script type="text/javascript"> setTimeout("document.getElementById(\'nFormNextBtn\').innerHTML=\'Sign Up\'", 500); </script>'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2227,
			'NodeTree' => '79',
			'NodeParentID' => '2239',
			'NodeParentOrder' => '2',
			'NodeType' => 'Text',
			'NodePromptText' => 'First Name',
			'NodeDataStore' => 'TesterBeta:BetaName',
			'NodeOpts' => '5'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2228,
			'NodeTree' => '79',
			'NodeParentID' => '2239',
			'NodeParentOrder' => '1',
			'NodeType' => 'Email',
			'NodePromptText' => 'Email Address',
			'NodePromptNotes' => 'We will only use this to contact you about your complaint.',
			'NodeDataStore' => 'TesterBeta:BetaEmail',
			'NodeOpts' => '5'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2229,
			'NodeTree' => '79',
			'NodeParentID' => '2239',
			'NodeParentOrder' => '5',
			'NodeType' => 'Long Text',
			'NodePromptText' => 'Short Description of Police Incident',
			'NodeDataStore' => 'TesterBeta:BetaNarrative',
			'NodeCharLimit' => '100',
			'NodeOpts' => '7285'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2230,
			'NodeTree' => '79',
			'NodeParentID' => '2216',
			'NodeParentOrder' => '1',
			'NodeType' => 'Page',
			'NodePromptNotes' => 'success',
			'NodePromptAfter' => 'Signup Successful::M::::M::::M::',
			'NodeOpts' => '1711'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2231,
			'NodeTree' => '79',
			'NodeParentID' => '2230',
			'NodeType' => 'Instructions',
			'NodePromptText' => '<h3>Thank you for signing up to beta test OpenPolice.org!</h3>
<h3>We will email you soon.</h3><p><br><a href="/start/beta-test-signup">Back to Beta Testing Info</a><br><a href="/">Back to OpenPolice.org Home Page</a><br></p>',
			'NodePromptAfter' => '<style>
#sessMgmtWrap { display: none; }
#ajaxWrap { background: #F5FBFF; margin-bottom: -150px; }
</style>',
			'NodeOpts' => '89'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2232,
			'NodeTree' => '36',
			'NodeParentID' => '1223',
			'NodeParentOrder' => '7',
			'NodeType' => 'Hidden Field',
			'NodeDataStore' => 'Departments:DeptVerified'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2233,
			'NodeTree' => '81',
			'NodeType' => 'Page',
			'NodePromptNotes' => 'beta-test-signups',
			'NodePromptAfter' => 'Beta Test Signups::M::::M::::M::',
			'NodeCharLimit' => '-1'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2234,
			'NodeTree' => '81',
			'NodeParentID' => '2235',
			'NodeType' => 'Instructions Raw',
			'NodePromptText' => '[ Beta Tester Signups ] hard-coded via OpenListing.php function printBetaTesters, to view openpolice.nodes.2234-beta-listing'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2235,
			'NodeTree' => '81',
			'NodeParentID' => '2233',
			'NodeType' => 'Instructions',
			'NodeOpts' => '89'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2236,
			'NodeTree' => '79',
			'NodeParentID' => '2217',
			'NodeType' => 'Layout Row',
			'NodeCharLimit' => '2'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2237,
			'NodeTree' => '79',
			'NodeParentID' => '2236',
			'NodeType' => 'Layout Column',
			'NodeCharLimit' => '7'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2238,
			'NodeTree' => '79',
			'NodeParentID' => '2236',
			'NodeParentOrder' => '1',
			'NodeType' => 'Layout Column',
			'NodeCharLimit' => '5'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2239,
			'NodeTree' => '79',
			'NodeParentID' => '2237',
			'NodeType' => 'Page Block',
			'NodeOpts' => '89'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2240,
			'NodeTree' => '79',
			'NodeParentID' => '2239',
			'NodeParentOrder' => '8',
			'NodeType' => 'Instructions Raw',
			'NodePromptText' => '<a href="javascript:;" class="btn btn-primary btn-xl w100 nFormNext">Sign Me Up!</a>'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2241,
			'NodeTree' => '79',
			'NodeParentID' => '2238',
			'NodeType' => 'Instructions',
			'NodePromptText' => '<iframe src=\"https://www.youtube.com/embed/Hn_KOQvWEmU\" allow=\"accelerometer; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen=\"\" style=\"margin-top: -20px;\" width=\"100%\" height=\"236\" frameborder=\"0\"></iframe>\r\n<h3 class=\"slBlueDark m0\"><br>This free web app helps you <nobr>to ...</nobr></h3>\r\n<ul>\r\n<li>Prepare and save a professional-grade police misconduct report.</li>\r\n<li>File your report with the right police investigative agency.</li>\r\n<li>Get matched with legal help.</li>\r\n<li>Publish your complaint online and share on social media.</li>\r\n<li>Upload photos, documents, video, and other evidence.</li>\r\n</ul>\r\n<h4><br>Your Privacy Options:</h4>\r\n<p>When you begin your new complaint, you\\'ll have three privacy options to control what personal information you want to share.</p>\r\n<ul>\r\n<li>\r\n<b>Full Transparency</b><br>You want to publish the names of all civilians and police officers to this website.</li>\r\n<li>\r\n<b>No Names Public<br></b>You donï¿½t want to publish any names to this website. This includes police officersï¿½ names and badge numbers too.</li>\r\n<li>\r\n<b>Anonymous</b><br>You need your complaint to be anonymous, even though it will be harder to investigate. No names will be published on this website. Neither Open Police staff nor investigators will be able to contact you. Any details that could be used for personal identification may be deleted from the database.</li>\r\n</ul>',
			'NodeOpts' => '89'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2242,
			'NodeTree' => '79',
			'NodeParentID' => '2230',
			'NodeParentOrder' => '1',
			'NodeType' => 'Instructions Raw',
			'NodePromptText' => '<!-- Begin Mailchimp Signup Form -->
<link href="//cdn-images.mailchimp.com/embedcode/horizontal-slim-10_7.css" rel="stylesheet" type="text/css">
<style type="text/css">
    #mc_embed_signup{background:#fff; clear:left; font:14px Helvetica,Arial,sans-serif; width:100%;}
    /* Add your own Mailchimp form style overrides in your site stylesheet or in this style block.
     We recommend moving this block and the preceding CSS link to the HEAD of your HTML file. */
</style>
<div id="mc_embed_signup">
<form action="https://flexyourrights.us5.list-manage.com/subscribe/post?u=6b424f1b6d7c45a5906cd7579&amp;id=31f97a79b7" method="post" id="mc-embedded-subscribe-form" name="mc-embedded-subscribe-form" class="validate" target="_blank" novalidate>
    <div id="mc_embed_signup_scroll">
    
    <input type="email" value="" name="EMAIL" class="email" id="mce-EMAIL" placeholder="email address" required>
    <!-- real people should not fill this in and expect good things - do not remove this or risk form bot signups-->
    <div style="position: absolute; left: -5000px;" aria-hidden="true"><input type="text" name="b_6b424f1b6d7c45a5906cd7579_31f97a79b7" tabindex="-1" value=""></div>
    <div class="clear"><input type="submit" value="Subscribe" name="subscribe" id="mc-embedded-subscribe" class="button"></div>
    </div>
</form>
</div>

<!--End mc_embed_signup-->'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2243,
			'NodeTree' => '79',
			'NodeParentID' => '2239',
			'NodeParentOrder' => '3',
			'NodeType' => 'Text',
			'NodePromptText' => 'Last Name',
			'NodeDataStore' => 'TesterBeta:BetaLastName',
			'NodeOpts' => '5'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2244,
			'NodeTree' => '79',
			'NodeParentID' => '2239',
			'NodeParentOrder' => '7',
			'NodeType' => 'Checkbox',
			'NodePromptText' => 'Would you like to subscribe to the Flex Your Rights/OpenPolice.org newsletter?',
			'NodeDataStore' => 'TesterBeta:BetaNewletter',
			'NodeOpts' => '67'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2245,
			'NodeTree' => '79',
			'NodeParentID' => '2239',
			'NodeParentOrder' => '6',
			'NodeType' => 'Hidden Field',
			'NodeDataStore' => 'TesterBeta:BetaHowHear'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2246,
			'NodeTree' => '66',
			'NodeParentID' => '2273',
			'NodeType' => 'Page Block',
			'NodeOpts' => '89'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2247,
			'NodeTree' => '79',
			'NodeParentID' => '2239',
			'NodeParentOrder' => '4',
			'NodeType' => 'Drop Down',
			'NodePromptText' => 'Year Incident Occurred',
			'NodeDataStore' => 'TesterBeta:BetaYear',
			'NodeOpts' => '5'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2248,
			'NodeTree' => '82',
			'NodeType' => 'Page',
			'NodePromptNotes' => 'beta-flyer',
			'NodePromptAfter' => 'Beta Flyer::M::::M::::M::',
			'NodeCharLimit' => '-1'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2249,
			'NodeTree' => '82',
			'NodeParentID' => '2248',
			'NodeType' => 'Instructions',
			'NodePromptText' => '<div class="w100 taC p20" style="background: #000;">
<div><img src="http://openpolice.local/openpolice/Flex_Open_v4-beta-shade.png" border=0 class="mRn10 mT20 mB10" style="width: 550px;"></div>
<h2 class="wht mB20">Your story is too important to be ignored.</h2></div>
<div class="mL20" style="padding: 20px 10px 20px 40px;">
<h5 class="mT20">Did you have a negative police experience with a police officer?<br />
If so, we invite you to test our new OpenPolice.org <nobr>web app.</nobr></h5>
<div class="pT20 pB20">
<h5>We can help you ...</h5>
<h5><img src="/openpolice/uploads/arrow-right-black-white.png" border=0 style="height: 15px;" class="mL15 mR5" > Prepare and save a professional-grade police misconduct report.</h5>
<h5><img src="/openpolice/uploads/arrow-right-black-white.png" border=0 style="height: 15px;" class="mL15 mR5" > Upload photos, documents, video, and other evidence.</h5>
<h5><img src="/openpolice/uploads/arrow-right-black-white.png" border=0 style="height: 15px;" class="mL15 mR5" > File your report with the DC Office of Police Complaints.</h5>
<h5><img src="/openpolice/uploads/arrow-right-black-white.png" border=0 style="height: 15px;" class="mL15 mR5" > Publish your complaint online and share on social media.</h5>
<h5><img src="/openpolice/uploads/arrow-right-black-white.png" border=0 style="height: 15px;" class="mL15 mR5" > Get matched with legal help.</h5>
</div>
<h5>This open source software has been brought to you by SSDP Alumni.</h5>
</div>
<center><h2><a href="http://openpolice.local/join-beta-test/ssdp">openpolice.org/join-beta-test/ssdp</a></h2></center>
<div class="p20"><br /><br /></div>',
			'NodePromptAfter' => '<style> #mainBody.mainBodyDash { background: #FFF; } </style>',
			'NodeOpts' => '67'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2250,
			'NodeTree' => '7',
			'NodeParentID' => '769',
			'NodeType' => 'Layout Row',
			'NodeCharLimit' => '2'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2251,
			'NodeTree' => '7',
			'NodeParentID' => '2250',
			'NodeType' => 'Layout Column',
			'NodeCharLimit' => '7'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2252,
			'NodeTree' => '7',
			'NodeParentID' => '2250',
			'NodeParentOrder' => '1',
			'NodeType' => 'Layout Column',
			'NodeCharLimit' => '5'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2253,
			'NodeTree' => '7',
			'NodeParentID' => '2251',
			'NodeParentOrder' => '1',
			'NodeType' => 'Page Block',
			'NodeOpts' => '89'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2254,
			'NodeTree' => '7',
			'NodeParentID' => '1008',
			'NodeParentOrder' => '5',
			'NodeType' => 'Instructions',
			'NodePromptText' => '<div class="w100 taC pT10 pB10"><a href="/start/complaint?test=1">Demo the app without filing a real complaint</a></div>'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2255,
			'NodeTree' => '5',
			'NodeParentID' => '2583',
			'NodeParentOrder' => '1',
			'NodeType' => 'Checkbox',
			'NodeDefault' => '1',
			'NodeDataStore' => 'Compliments:CompliIsDemo'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2257,
			'NodeTree' => '1',
			'NodeParentID' => '157',
			'NodeParentOrder' => '1',
			'NodeType' => 'Page',
			'NodePromptNotes' => 'when-was-the-incident',
			'NodePromptAfter' => 'When Was The Incident::M::::M::::M::',
			'NodeDataBranch' => 'Incidents'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2260,
			'NodeTree' => '1',
			'NodeParentID' => '2257',
			'NodeParentOrder' => '5',
			'NodeType' => 'Checkbox',
			'NodeDefault' => '1',
			'NodeDataStore' => 'Complaints:ComIsDemo'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2261,
			'NodeTree' => '1',
			'NodeParentID' => '2257',
			'NodeParentOrder' => '1',
			'NodeType' => 'Date',
			'NodePromptText' => 'If you\'ve had an ongoing problem with police, <b class="slBlueDark">focus this complaint on one specific event.</b>',
			'NodeDataStore' => 'Incidents:IncTimeStart',
			'NodeCharLimit' => '-1',
			'NodeOpts' => '5'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2262,
			'NodeTree' => '1',
			'NodeParentID' => '2257',
			'NodeParentOrder' => '2',
			'NodeType' => 'Time',
			'NodePromptText' => 'Start Time',
			'NodeDataStore' => 'Incidents:IncTimeStart'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2263,
			'NodeTree' => '1',
			'NodeParentID' => '2257',
			'NodeParentOrder' => '3',
			'NodeType' => 'Time',
			'NodePromptText' => 'End Time',
			'NodeDataStore' => 'Incidents:IncTimeEnd'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2264,
			'NodeTree' => '16',
			'NodeParentID' => '837',
			'NodeParentOrder' => '1',
			'NodeType' => 'Instructions',
			'NodePromptText' => '<p><br></p>',
			'NodeOpts' => '67'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2267,
			'NodeTree' => '62',
			'NodeParentID' => '1992',
			'NodeType' => 'Layout Row',
			'NodeCharLimit' => '2'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2268,
			'NodeTree' => '62',
			'NodeParentID' => '2267',
			'NodeType' => 'Layout Column',
			'NodeCharLimit' => '8'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2269,
			'NodeTree' => '62',
			'NodeParentID' => '2267',
			'NodeParentOrder' => '1',
			'NodeType' => 'Layout Column',
			'NodeCharLimit' => '4'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2270,
			'NodeTree' => '62',
			'NodeParentID' => '1994',
			'NodeParentOrder' => '5',
			'NodeType' => 'Instructions',
			'NodePromptText' => '<div class="w100 taC pT10 pB10"><a href="/start/complaint?test=1">Demo the app without filing a real complaint</a></div>'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2271,
			'NodeTree' => '62',
			'NodeParentID' => '2269',
			'NodeType' => 'Page Block',
			'NodeOpts' => '89'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2272,
			'NodeTree' => '66',
			'NodeParentID' => '2657',
			'NodeType' => 'Layout Row',
			'NodeCharLimit' => '2'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2273,
			'NodeTree' => '66',
			'NodeParentID' => '2272',
			'NodeType' => 'Layout Column',
			'NodeCharLimit' => '7'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2274,
			'NodeTree' => '66',
			'NodeParentID' => '2272',
			'NodeParentOrder' => '1',
			'NodeType' => 'Layout Column',
			'NodeCharLimit' => '5'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2275,
			'NodeTree' => '62',
			'NodeParentID' => '2271',
			'NodeType' => 'Instructions',
			'NodePromptText' => '<!--- <h3>About OpenPolice.org</h3>\r\n<iframe src=\"https://www.youtube.com/embed/Hn_KOQvWEmU\" allow=\"accelerometer; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen=\"\" style=\"margin: 20px 0px 40px 0px;\" width=\"100%\" height=\"236\" frameborder=\"0\"></iframe> --->\r\n<h3>Your Privacy</h3>\r\n<p>After you complete your complaint, you can download it, print it, or email it to your legal assistance. For your protection, we will then delete your story from our system. But we will preserve some anonymous data for police accountability researchers.</p>\r\n<p>After you\\'ve checked with a lawyer ï¿½ or any charges are resolved ï¿½ you can reupload your full complaint. If you want, this will publish your full story and file it with a police investigative agency.</p>\r\n<p><a href=\"/frequently-asked-questions\" target=\"_blank\"><i class=\"fa fa-external-link\" aria-hidden=\"true\"></i> Frequently Asked Questions</a></p>'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2276,
			'NodeTree' => '66',
			'NodeParentID' => '2065',
			'NodeType' => 'Instructions',
			'NodePromptText' => '<!--- <h3>About OpenPolice.org</h3>\r\n<iframe src=\"https://www.youtube.com/embed/Hn_KOQvWEmU\" allow=\"accelerometer; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen=\"\" style=\"margin: 20px 0px 40px 0px;\" width=\"100%\" height=\"236\" frameborder=\"0\"></iframe> --->\r\n<h3>Your Privacy</h3>\r\n<p>After you complete your complaint, you can download it, print it, or email it to your legal assistance. For your protection, we will then delete your story from our system. But we will preserve some anonymous data for police accountability researchers.</p>\r\n<p>After you\\'ve checked with a lawyer ï¿½ or any charges are resolved ï¿½ you can reupload your full complaint. If you want, this will publish your full story and file it with a police investigative agency.</p>\r\n<p><a href=\"/frequently-asked-questions\" target=\"_blank\"><i class=\"fa fa-external-link\" aria-hidden=\"true\"></i> Frequently Asked Questions</a></p>'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2277,
			'NodeTree' => '66',
			'NodeParentID' => '2246',
			'NodeParentOrder' => '5',
			'NodeType' => 'Instructions',
			'NodePromptText' => '<div class="w100 taC pT10 pB10"><a href="/start/complaint?test=1">Demo the app without filing a real complaint</a></div>'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2278,
			'NodeTree' => '1',
			'NodeParentID' => '452',
			'NodeParentOrder' => '2',
			'NodeType' => 'Instructions',
			'NodePromptText' => '<h2>Any Pending Charges?</h2>',
			'NodePromptAfter' => '<style> #node[[nID]] { margin-bottom: -30px; } </style>'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2279,
			'NodeTree' => '1',
			'NodeParentID' => '2257',
			'NodeParentOrder' => '4',
			'NodeType' => 'Instructions',
			'NodePromptText' => '<b class="slBlueDark">Having trouble choosing a single incident?</b> Pick the most recent event or the one with the <nobr>most evidence.</nobr>'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2280,
			'NodeTree' => '83',
			'NodeType' => 'Page',
			'NodePromptNotes' => 'how-to-install-open-police-complaints-with-docker',
			'NodePromptAfter' => 'How To Install OpenPolice.org with Docker::M::I would love some help creating a proper Dockerfile, etc, but this is as far as I\'ve gotten thus far. First, install Docker on Mac, Windows, or an online server...::M::::M::',
			'NodeCharLimit' => '-1'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2281,
			'NodeTree' => '83',
			'NodeParentID' => '2285',
			'NodeType' => 'Instructions',
			'NodePromptText' => '<div class="alert alert-danger fade in alert-dismissible show" style="padding: 10px 15px;">A recent container build showed it to no longer function. So this install process may not work any more. Help improving this process is welcome. Please use these instructions:<br><a href="/how-to-install-local-openpolice" target="_blank">http://openpolice.local/how-to-install-local-openpolice</a><br></div>
<h2>How To Install OpenPolice.org with Docker <nobr>via Laradock</nobr></h2>
<p>But I would love some help creating a proper Dockerfile, etc. <a href="https://github.com/flexyourrights/docker-openpolice/blob/master/README.md.original-attempt.md#how-to-rebuild-this-openpolice-docker-installation-from-scratch-on-mac" target="_blank">This is as far as I got.</a><br></p>
<hr>
<p><b>First, <a href="https://www.docker.com/get-started" target="_blank">install Docker</a> on Mac, Windows, or an online server. 
</b></p><p>Then grab a copy of Laravel (last tested with v5.8.3).</p>
<pre>$ git clone https://github.com/laravel/laravel.git opc
$ cd opc
</pre>
<p>Next, install and boot up <a href="https://laradock.io/" target="_blank">Laradock</a> (last tested with v7.14).</p>
<pre>$ git submodule add https://github.com/Laradock/laradock.git
$ cd laradock
$ cp env-example .env
$ docker-compose up -d nginx mysql phpmyadmin redis workspace
</pre>
<p><br></p><p>After Docker finishes booting up your containers (maybe 15 min), enter the mysql 
container with the <span class="slRed">root</span> password, <span class="slRed">root</span>. This seems to fix things for 
the latest version of MYSQL.</p>
<pre>$ docker-compose exec mysql bash
# mysql --user=root --password=root default
mysql> ALTER USER \'default\'@\'%\' IDENTIFIED WITH mysql_native_password BY \'secret\';
mysql> exit;
$ exit
</pre>
<p><br></p>
<div class="row2 p15">
<p>At this point, you can optionally browse to <a href="http://localhost:8080" target="_blank">http://localhost:8080</a> for PhpMyAdmin.</p>
<pre>Server: mysql
Username: default
Password: secret
</pre>
</div>
<p><br></p>
<div class="row2 p15">
<p>You will also need to update your hosts file on Mac (something else on Windows?)...</p>
<pre>sudo nano /etc/hosts</pre>
<p>...by adding this line:</p>
<pre>127.0.0.1  opc.test</pre>
</div>
<p><br></p><p>Finally, enter Laradock\'s workspace container to download and run <a href="https://github.com/flexyourrights/docker-openpolice/blob/master/bin/openpolice-laradock-postinstall.sh" target="_blank">the Open Police installation script</a>.
</p><pre>$ docker-compose exec workspace bash
# git clone https://github.com/flexyourrights/docker-openpolice.git
# chmod +x ./docker-openpolice/bin/*.sh
# ./docker-openpolice/bin/openpolice-laradock-postinstall.sh
</pre>
<p><br></p><p>And if all has gone well (maybe 6 min), you\'ll be asked to create a master admin user account when you browse to <a href="http://localhost/" target="_blank">http://localhost/</a>. If it loads, but looks janky (without CSS), reload the page once... and hopefully it looks like a fresh install.</p><p class="slGrey">Updated April 25, 2019<br></p>',
			'NodePromptAfter' => '<style> #treeWrap2282 { margin-top: 30px; } </style>'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2282,
			'NodeTree' => '83',
			'NodeParentID' => '2280',
			'NodeType' => 'Layout Row',
			'NodeCharLimit' => '2'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2283,
			'NodeTree' => '83',
			'NodeParentID' => '2282',
			'NodeParentOrder' => '1',
			'NodeType' => 'Layout Column',
			'NodeCharLimit' => '8'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2284,
			'NodeTree' => '83',
			'NodeParentID' => '2282',
			'NodeType' => 'Layout Column',
			'NodeCharLimit' => '4'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2285,
			'NodeTree' => '83',
			'NodeParentID' => '2283',
			'NodeType' => 'Page Block',
			'NodeCharLimit' => '2'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2287,
			'NodeTree' => '83',
			'NodeParentID' => '2284',
			'NodeType' => 'Page Block',
			'NodeCharLimit' => '6',
			'NodeOpts' => '89'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2288,
			'NodeTree' => '83',
			'NodeParentID' => '2280',
			'NodeParentOrder' => '1',
			'NodeType' => 'Layout Row',
			'NodeCharLimit' => '2'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2289,
			'NodeTree' => '83',
			'NodeParentID' => '2288',
			'NodeParentOrder' => '1',
			'NodeType' => 'Layout Column',
			'NodeCharLimit' => '8'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2290,
			'NodeTree' => '83',
			'NodeParentID' => '2288',
			'NodeType' => 'Layout Column',
			'NodeCharLimit' => '4'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2291,
			'NodeTree' => '83',
			'NodeParentID' => '2293',
			'NodeParentOrder' => '1',
			'NodeType' => 'Instructions Raw',
			'NodePromptText' => '<iframe width="100%" height="320" src="https://www.youtube.com/embed/H1hl28-plSg" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2292,
			'NodeTree' => '83',
			'NodeParentID' => '2293',
			'NodeType' => 'Instructions',
			'NodePromptText' => '<p>&nbsp;</p>
<h2>Install Video (with a bit more discussion)<br></h2><p>Welcome to this tutorial video on how
to install your own copy of OpenPolice.org for software
development. This is Morgan Lesko, OpenPolice.org\'s robot guy and co-creator,
and I would love for you to help the coding effort on this project to
make it ever stronger.</p>'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2293,
			'NodeTree' => '83',
			'NodeParentID' => '2283',
			'NodeParentOrder' => '1',
			'NodeType' => 'Page Block'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2294,
			'NodeTree' => '83',
			'NodeParentID' => '2293',
			'NodeParentOrder' => '2',
			'NodeType' => 'Instructions',
			'NodePromptText' => '<p><br></p>\r\n<h3 class=\"slBlueDark\">Step 1 - Install Docker</h3>\r\n<p>First you\\'ll need to check out <a href=\"https://Docker.com\" target=\"_blank\">Docker.com</a> to download and install Docker for your desktop, or on your server. Here I\\'m showing how to reset your Docker installation to factory settings (on Mac). This is useful if you\\'re struggling to learn Docker and need to start fresh, perhaps again and again.</p>\r\n<p><br></p>\r\n<h3 class=\"slBlueDark\">Step 2 - Install Laradock</h3>\r\n<p>Once Docker is installed, we\\'re ready for Laradock which you can learn more about at <a href=\"https://laradock.io\" target=\"_blank\">Laradock.io</a>. It is well known in the Laravel community because it ï¿½includes pre-packaged Docker Images, all pre-configured to provide a wonderful PHP development environment.ï¿½<br><br>Expect the first Laradock boot to take up to 15 minutes, so pause this video and stretch. Or go to <a href=\"https://Laravel.com\" target=\"_blank\">Laravel.com</a> to learn more about the PHP framework used by OpenPolice.org.<br><br>If nothing goes wrong with Docker, you don\\'t need to learn much about it to help with OpenPolice.org. But some basic Laravel orientation, like on <a href=\"https://Laracasts.com\" target=\"_blank\">Laracasts.com</a>, can provide important context for working on OpenPolice.org.<br><br>To prep the stage, we can use Git to clone the latest Laravel and Laradock packages. Then initialize Laradock\\'s environment file. And now we\\'re going to boot up all of Laradock\\'s container\\'s for the first time.<br><br>If the Laradock install went smoothly, let\\'s move forward.<br><br>We will enter the Docker container created by Laradock named ï¿½mysqlï¿½, and quickly apply a fix for something funky with the latest blend of versions. Then exit out of that container.</p>\r\n<div class=\"row2 p15\"><p>At this point, you can optionally browse to <a href=\"http://localhost:8080\" target=\"_blank\">http://localhost:8080</a> for PhpMyAdmin. Enter the server as \\'mysql\\', username as \\'default\\', password as \\'secret\\'.</p></div>\r\n<p><br></p>\r\n<h3 class=\"slBlueDark\">Step 3 - Install Laravel &amp; OpenPolice.org<br></h3>\r\n<p>We will enter the Docker container created by Laradock named ï¿½workspaceï¿½. Then clone the <a href=\"https://github.com/flexyourrights/docker-openpolice/\" target=\"_blank\">docker-openpolice repository from GitHub</a>, give the bash script permissions to run, and run <a href=\"https://github.com/flexyourrights/docker-openpolice/blob/master/bin/openpolice-laradock-postinstall.sh\" target=\"_blank\">our installation script</a>.<br><br>This script should install Laravel, OpenPolice.org, and all its dependencies. It should take about half as long a wait as the first Laradock boot up, and I\\'ve laid out the screen here so you can see some of the installation\\'s results.<br><br>If the Open Police install script didn\\'t throw a bunch of red errors, then let\\'s move forward.</p><p>At this point, browsing to localhost as a URL should bring up the site template of OpenPolice.org, and a signup form to create your first Admin User account in your local system. <br><br>Now your installation has been initiated and you can browse back to the home page, click the button to Share Your Story, and test out the process of filing a complaint. While logged in, you can also click the Dashboard link in the top-right corner to start poking around the Admin Areas. <br><br>When possible, I will be make more videos to review each area of the site, and the codebase. But I hope you\\'ve had success in creating your own copy of OpenPolice.org, and I look forward any nuggets of brilliance you\\'ll be able to share for this effort.</p><p>Thank you so much, for helping to make OpenPolice.org ever stronger!</p>'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2295,
			'NodeTree' => '83',
			'NodeParentID' => '2283',
			'NodeParentOrder' => '2',
			'NodeType' => 'Page Block'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2296,
			'NodeTree' => '83',
			'NodeParentID' => '2295',
			'NodeType' => 'Instructions',
			'NodePromptText' => '<p>&nbsp;</p>
<h2>Quick Reference</h2>
<h4 class="slBlueDark"><br>Docker</h4>
<p>From your Laradock root directory, destroy all images and force re-build of containers:</p>
<pre>$ docker system prune
$ docker-compose build --no-cache nginx mysql phpmyadmin redis workspace
$ docker-compose up -d nginx mysql phpmyadmin redis workspace</pre>
<p><br></p>
<h4 class="slBlueDark">Laravel</h4>
<p>From inside the \'workspace\' container, in your Laravel root directory, push changes to all Views:</p>
<pre># php artisan vendor:publish --force</pre>
<p>Or clear the caches, fix many potential gremlins:</p>
<pre># composer dump-autoload
# php artisan optimize</pre>
<p><br></p>
<h4 class="slBlueDark">OpenPolice</h4>
<p>Regenerate core system JS and CSS caches:<br>
<a href="http://localhost/css-reload" target="_blank">localhost/css-reload</a></p>
<p>Regenerate all system JS and CSS, including all tree caches:<br>
<a href="http://localhost/dashboard/settings?refresh=2" target="_blank">localhost/dashboard/settings?refresh=2</a></p>'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2297,
			'NodeTree' => '83',
			'NodeParentID' => '2287',
			'NodeType' => 'Instructions Raw',
			'NodePromptText' => '<h4 class="slBlueDark">Software Documentation</h4>
<p>About the Web App</p>
<ul>
<li><a href="/web-app-workflows">Web App Workflows</a></li>
</ul>

<div class="pT10">
<p>For Web Developers</p>
<ul>
<li><a href="/how-to-install-local-openpolice">Install Copy of OpenPolice.org Software</a></li>
<li><a href="/web-app-technical-specs">General Technical Background on App</a></li>
</ul>
</div>

<div class="pT10">
<p>SurvLoop Codebase Orientation</p>
<ul>
<li><a href="https://survloop.org/package-files-folders-classes" target="_blank">Package Files, Folders, and Classes</a></li>
</ul>
</div>

<div class="pT10">
<p>More on GitHub</p>
<p><a href="https://github.com/flexyourrights/openpolice" target="_blank" class="btn btn-primary btn-lg btn-block taL mB20"><i class="fa fa-github mR5" aria-hidden="true"></i> flexyourrights/openpolice</a></p>
</div>'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2298,
			'NodeTree' => '84',
			'NodeType' => 'Page',
			'NodePromptNotes' => 'web-app-workflows',
			'NodePromptAfter' => 'Web App Workflows for OpenPolice.org::M::OpenPolice.org has complicated workflows for collecting and processing reports of police conduct. These diagrams help simplify and communicate those workflows.::M::::M::',
			'NodeCharLimit' => '-1'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2299,
			'NodeTree' => '84',
			'NodeParentID' => '2304',
			'NodeType' => 'Instructions',
			'NodePromptText' => '<p><a href="/openpolice/uploads/OPC_Complaint_Process.jpg" target="_blank"><img src="/openpolice/uploads/OPC_Complaint_Process.jpg" alt="Full OpenPolice.org Complaint Process" width="100%" border="0"></a></p>'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2300,
			'NodeTree' => '84',
			'NodeParentID' => '2298',
			'NodeParentOrder' => '1',
			'NodeType' => 'Layout Row',
			'NodeCharLimit' => '3'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2301,
			'NodeTree' => '84',
			'NodeParentID' => '2300',
			'NodeType' => 'Layout Column',
			'NodeCharLimit' => '4'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2302,
			'NodeTree' => '84',
			'NodeParentID' => '2300',
			'NodeParentOrder' => '1',
			'NodeType' => 'Layout Column',
			'NodeCharLimit' => '4'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2303,
			'NodeTree' => '84',
			'NodeParentID' => '2300',
			'NodeParentOrder' => '2',
			'NodeType' => 'Layout Column',
			'NodeCharLimit' => '4'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2304,
			'NodeTree' => '84',
			'NodeParentID' => '2298',
			'NodeParentOrder' => '2',
			'NodeType' => 'Page Block',
			'NodeOpts' => '89'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2305,
			'NodeTree' => '84',
			'NodeParentID' => '2301',
			'NodeType' => 'Page Block',
			'NodeOpts' => '89'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2306,
			'NodeTree' => '84',
			'NodeParentID' => '2302',
			'NodeType' => 'Page Block',
			'NodeOpts' => '89'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2307,
			'NodeTree' => '84',
			'NodeParentID' => '2303',
			'NodeType' => 'Page Block',
			'NodeOpts' => '89'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2308,
			'NodeTree' => '84',
			'NodeParentID' => '2305',
			'NodeType' => 'Instructions Raw',
			'NodePromptText' => '<a href="https://s113648.gridserver.com/vid/user-flow-basic.gif" target="_blank"><img src="https://s113648.gridserver.com/vid/user-flow-basic.gif" border=0 class="w100"></a>
<p><b>Workflow of the Default User Experience</b></p>
<p><a href="https://s113648.gridserver.com/vid/user-flow-basic.jpg" target="_blank" class="mR10"><i class="fa fa-external-link mR5" aria-hidden="true"></i> Image</a>
<a href="https://s113648.gridserver.com/vid/user-flow-basic.gif" target="_blank" class="mR10"><i class="fa fa-external-link mR5" aria-hidden="true"></i> Animated GIF</a>
<a href="https://s113648.gridserver.com/vid/user-flow-basic.mp4" target="_blank" class="mR10"><i class="fa fa-external-link mR5" aria-hidden="true"></i> Video</a></p>'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2309,
			'NodeTree' => '84',
			'NodeParentID' => '2306',
			'NodeType' => 'Instructions Raw',
			'NodePromptText' => '<a href="https://s113648.gridserver.com/vid/user-flow-partner.gif" target="_blank"><img id="partnerFlowGIF" src="" border=0 class="w100" style="min-height: 800px;"></a>
<p><b>Workflow of a User Referred by a Partner</b></p>
<p><a href="https://s113648.gridserver.com/vid/user-flow-partner.jpg" target="_blank" class="mR10"><i class="fa fa-external-link mR5" aria-hidden="true"></i> Image</a>
<a href="https://s113648.gridserver.com/vid/user-flow-partner.gif" target="_blank" class="mR10"><i class="fa fa-external-link mR5" aria-hidden="true"></i> Animated GIF</a>
<a href="https://s113648.gridserver.com/vid/user-flow-partner.mp4" target="_blank" class="mR10"><i class="fa fa-external-link mR5" aria-hidden="true"></i> Video</a></p>',
			'NodePromptAfter' => '<script type="text/javascript">
setTimeout("document.getElementById(\'partnerFlowGIF\').src=\'https://s113648.gridserver.com/vid/user-flow-partner.gif\'", 2000);
</script>'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2310,
			'NodeTree' => '84',
			'NodeParentID' => '2307',
			'NodeType' => 'Instructions Raw',
			'NodePromptText' => '<p><a href="/web-app-technical-specs">General Technical Background on App</a></p>
<p><a href="/how-to-install-open-police-complaints-with-docker" >Software Documentation for Web Developers</a></p>'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2311,
			'NodeTree' => '84',
			'NodeParentID' => '2298',
			'NodeType' => 'Instructions',
			'NodePromptText' => '<p><br></p>
<h2 class="slBlueDark">User Workflows for OpenPolice.org</h2>
<p><br></p>'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2312,
			'NodeTree' => '16',
			'NodeParentID' => '837',
			'NodeType' => 'Layout Row',
			'NodeCharLimit' => '2'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2313,
			'NodeTree' => '16',
			'NodeParentID' => '2312',
			'NodeType' => 'Layout Column',
			'NodeCharLimit' => '8'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2314,
			'NodeTree' => '16',
			'NodeParentID' => '2312',
			'NodeParentOrder' => '1',
			'NodeType' => 'Layout Column',
			'NodeCharLimit' => '4'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2315,
			'NodeTree' => '16',
			'NodeParentID' => '2313',
			'NodeType' => 'Page Block',
			'NodeOpts' => '89'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2316,
			'NodeTree' => '16',
			'NodeParentID' => '2314',
			'NodeType' => 'Page Block',
			'NodeOpts' => '89'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2317,
			'NodeTree' => '16',
			'NodeParentID' => '2316',
			'NodeType' => 'Instructions Raw',
			'NodePromptText' => '<h4 class="slBlueDark">Software Documentation</h4>
<div class="pT10"><b>About the Web App...</b></div>
<p><a href="/web-app-workflows" class="btn btn-block taL btn-primary">Web App Workflows</a></p>

<div class="pT10"><b>For Web Developers...</b></div>
<p><a href="/how-to-install-open-police-complaints-with-docker" class="btn btn-block taL btn-primary  ">Install Copy of OpenPolice.org Software with Docker</a></p>
<p><a href="/web-app-technical-specs" class="btn btn-block taL btn-secondary">General Technical Background on App</a></p>

<div class="pT10"><b>SurvLoop Codebase Orientation...</b></div>
<p><a href="https://survloop.org/package-files-folders-classes" class="btn btn-block taL btn-primary" target="_blank">Package Files, Folders, and Classes</a></p>

<div class="pT10"><b>More on GitHub...</b></div>
<p><a href="https://github.com/flexyourrights/openpolice" target="_blank" class="btn btn-primary btn-lg btn-block taL mB20"><i class="fa fa-github mR5" aria-hidden="true"></i> flexyourrights/openpolice</a></p>'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2318,
			'NodeTree' => '83',
			'NodeParentID' => '2284',
			'NodeParentOrder' => '1',
			'NodeType' => 'Page Block',
			'NodeOpts' => '89'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2319,
			'NodeTree' => '83',
			'NodeParentID' => '2318',
			'NodeType' => 'Instructions',
			'NodePromptText' => '<h4>About the Codebase</h4>
<p>The OpenPolice.org codebase is mostly PHP and extends SurvLoop, which was built for it. The 
OpenPolice package powers OpenPolice.org to collect and share data, and 
manage site content.</p>
<p>SurvLoop is an open data engine mostly written PHP, with a fair 
amount of JavaScript/jQuery for the front-end. Please share any problems
 you see that could be barriers to entry for other developers. These 
include issues with code, development processes, community standards, 
etc. Thank you!<br></p>'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2320,
			'NodeTree' => '36',
			'NodeParentID' => '1293',
			'NodeType' => 'Drop Down',
			'NodePromptText' => 'Keep Email Private',
			'NodeDefault' => '0',
			'NodeDataStore' => 'Oversight:OverKeepEmailPrivate'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2322,
			'NodeTree' => '61',
			'NodeParentID' => '1988',
			'NodeParentOrder' => '1',
			'NodeType' => 'Instructions',
			'NodePromptText' => '<div class="nodeAnchor"><a name="find-specific"></a></div>
<h3>Specific Issues<br></h3>
<p>Resources related to specific issues, helpful to complainants and partners.</p><b>Investigating Complaints</b><br><ul><li><a href="https://policeabuse.com/index.php/services" target="_blank">PoliceAbuse.com</a> - We assist citizens with the investigation of their complaint. We investigate public officials and attorneys accused of misconduct.<br></li></ul>
<b>Body Camera Footage<br></b>
<ul>
<li><a href="https://www.rcfp.org/resources/bodycams/" target="_blank">Access to police body-worn camera video</a> - by state and some cities</li></ul><p><b>For Victims with Bad Lawyers</b></p><ul><li><a href="https://www.avvo.com/legal-guides/ugc/how-to-get-rid-of-a-bad-court-appointed-lawyer" target="_blank">How to Get Rid of a Bad Court-Appointed Lawyer</a> (article)<br></li>
</ul>
<b>For Victims of Gang Stalking<br></b>
<ul>
<li><a href="https://fightgangstalking.com/what-is-gang-stalking/" target="_blank">What Is Gang Stalking</a> - history and info</li><li><a href="https://www.freedomfortargetedindividuals.org/support-groups" target="_blank">Freedom for Targeted Individuals</a> - support group and more</li><li><a href="https://static1.squarespace.com/static/51dc541ce4b03ebab8c5c88c/t/59b30bb8f5e2314756754c18/1504906168982/Documentation+Tips+for+Survivor_2014.pdf" target="_blank">Documentation Tips for Survivors of Technology Abuse &amp; Stalking</a> - online focused<br></li>
</ul>
<b>Expungement<br></b>
<ul>
<li><a href="http://caniexpunge.org/" target="_blank">CanIExpunge.org</a></li></ul><p><b>Whistleblowers<br></b>
</p><ul><li><a href="https://www.whistleblowers.org/get-help/" target="_blank">National Whistleblowers Center</a><br></li></ul><ul>
</ul>',
			'NodeOpts' => '89'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2323,
			'NodeTree' => '42',
			'NodeParentID' => '1794',
			'NodeParentOrder' => '1',
			'NodeType' => 'Instructions Raw',
			'NodePromptText' => '<p>[[ Re-Upload Tool ]]<br></p>'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2324,
			'NodeTree' => '42',
			'NodeParentID' => '1750',
			'NodeParentOrder' => '14',
			'NodeType' => 'Page Block',
			'NodeOpts' => '89'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2325,
			'NodeTree' => '42',
			'NodeParentID' => '2324',
			'NodeType' => 'Instructions Raw',
			'NodePromptText' => '<p><span class="fPerc133">[[ Re-Upload Tool ]]</span></p>'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2326,
			'NodeTree' => '42',
			'NodeParentID' => '1750',
			'NodeParentOrder' => '4',
			'NodeType' => 'Page Block',
			'NodeOpts' => '89'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2330,
			'NodeTree' => '42',
			'NodeParentID' => '1701',
			'NodeParentOrder' => '1',
			'NodeType' => 'Page Block',
			'NodePromptText' => '<p>[ load dept ]<br></p>',
			'NodeInternalNotes' => 'with OpenReport.php function chkGetReportDept'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2333,
			'NodeTree' => '42',
			'NodeParentID' => '1362',
			'NodeParentOrder' => '9',
			'NodeType' => 'Instructions Raw',
			'NodePromptAfter' => '<style>
#mainNav, .headGap, #footerLinks { display: none; }
b { font-weight: 400; }
a:link, a:visited, a:active, a:hover { text-decoration: none; }
#repNode1384 { margin-top: 0px; }
</style>'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2334,
			'NodeTree' => '42',
			'NodeParentID' => '1750',
			'NodeParentOrder' => '15',
			'NodeType' => 'Page Block',
			'NodeOpts' => '89'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2335,
			'NodeTree' => '42',
			'NodeParentID' => '2334',
			'NodeType' => 'Instructions Raw',
			'NodePromptText' => '[ Uploads ] hard-coded via OpenComplaintPrints.php function getReportUploads'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2336,
			'NodeTree' => '42',
			'NodeParentID' => '1750',
			'NodeType' => 'Page Block'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2340,
			'NodeTree' => '1',
			'NodeParentID' => '420',
			'NodeType' => 'Page',
			'NodePromptNotes' => 'complaint-audit',
			'NodePromptAfter' => 'Complaint Audit::M::::M::::M::'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2341,
			'NodeTree' => '1',
			'NodeParentID' => '2340',
			'NodeParentOrder' => '2',
			'NodeType' => 'Instructions',
			'NodePromptText' => '<div class="alert alert-danger fade in alert-dismissible show" style="padding: 10px 15px;"><p>To improve the changes of a proper investigation, it can be best to focus on up to five allegations.</p><p>Use the Back button to choose the most important allegations for your incident.</div>',
			'NodeInternalNotes' => 'hard-coded via OpenComplaintPrints.php function printAllegAudit'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2342,
			'NodeTree' => '1',
			'NodeParentID' => '2340',
			'NodeParentOrder' => '1',
			'NodeType' => 'Instructions',
			'NodePromptText' => '<div class="alert alert-danger fade in alert-dismissible show" style="padding: 10px 15px;"><p><b>You did not select an allegation of police misconduct.</b> You must pick at least one to move forward.</p></div>',
			'NodePromptAfter' => '<script type="text/javascript">
function swapNextJumpAlleg() {
  if (document.getElementById("nodeSubBtns")) {
    document.getElementById("nodeSubBtns").innerHTML=\'<a href="/u/complaint/discover-allegations-next" class="fR btn btn-primary btn-lg slTab" tabindex="1">Select Allegations</a>\';
  }
}
setTimeout("swapNextJumpAlleg()", 10);
</script>'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2343,
			'NodeTree' => '1',
			'NodeParentID' => '2340',
			'NodeType' => 'Instructions',
			'NodePromptText' => '<h2 class="slBlueDark">Checking Your Complaint</h2>',
			'NodePromptAfter' => '<style> #node[[nID]] { margin-bottom: -30px; } </style>'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2344,
			'NodeTree' => '11',
			'NodeParentID' => '791',
			'NodeType' => 'Page Block',
			'NodeOpts' => '89'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2345,
			'NodeTree' => '11',
			'NodeParentID' => '2344',
			'NodeType' => 'Instructions',
			'NodePromptText' => '<p>[[ Top-Level Stats ]]<br></p>'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2347,
			'NodeTree' => '7',
			'NodeParentID' => '2348',
			'NodeType' => 'Instructions',
			'NodePromptText' => '<iframe id="demoVid" src="https://www.youtube.com/embed/Hn_KOQvWEmU" allow="accelerometer; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="" width="100%" height="236" frameborder="0"></iframe>',
			'NodePromptAfter' => '<style>
@media screen and (max-width: 992px) {
#demoVid { height: 360px; }
}
</style>'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2348,
			'NodeTree' => '7',
			'NodeParentID' => '2252',
			'NodeType' => 'Page Block',
			'NodeOpts' => '89'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2350,
			'NodeTree' => '7',
			'NodeParentID' => '1008',
			'NodeType' => 'Instructions',
			'NodePromptText' => '<h2 class=\"slBlueDark\">File Your Police Complaint</h2>\r\n<p>Your story is too important to be ignored. Thatï¿½s why we help you build a transparent record of police misconduct. By improving accountability, you can protect the rights of people in your community.</p><p><b>OpenPolice.org</b> is an independent project developed by <nobr>Flex Your Rights</nobr>, a 501(c)(3) educational nonprofit. <br></p>',
			'NodePromptAfter' => '<script type="text/javascript">
function fixColBrk() {
if (document.getElementById("col2251")) {
  document.getElementById("col2251").className="col-lg-7";
  document.getElementById("col2252").className="col-lg-5";
}
}
setTimeout("fixColBrk()", 100);
</script>'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2351,
			'NodeTree' => '7',
			'NodeParentID' => '2252',
			'NodeParentOrder' => '1',
			'NodeType' => 'Page Block',
			'NodeOpts' => '89'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2352,
			'NodeTree' => '7',
			'NodeParentID' => '2351',
			'NodeType' => 'Instructions',
			'NodePromptText' => '<h3>Possible Paths<nobr></nobr></h3>
<center><div class="ovrNo w66 pT20"><div id="usrFloWrap">
<a href="/openpolice/uploads/user-flow-partner.jpg" target="_blank"><img src="/openpolice/uploads/user-flow-basic.jpg" class="w100" border="0"></a>
</div></div></center>',
			'NodePromptAfter' => '<style>
#usrFloWrap { margin-top: -70px; }
</style>'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2368,
			'NodeTree' => '96',
			'NodeType' => 'Page',
			'NodePromptNotes' => 'filing-your-police-complaint',
			'NodePromptAfter' => 'Filing Your Police Complaint::M::::M::::M::',
			'NodeCharLimit' => '-1'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2369,
			'NodeTree' => '96',
			'NodeParentID' => '2368',
			'NodeType' => 'Instructions',
			'NodePromptText' => '<br>',
			'NodePromptAfter' => '<script type="text/javascript">
setTimeout("window.location=\'/file-your-police-complaint\'", 1);
</script>'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2370,
			'NodeTree' => '33',
			'NodeParentID' => '1210',
			'NodeParentOrder' => '2',
			'NodeType' => 'Layout Row',
			'NodeCharLimit' => '2'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2371,
			'NodeTree' => '33',
			'NodeParentID' => '2370',
			'NodeType' => 'Layout Column',
			'NodeCharLimit' => '6'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2372,
			'NodeTree' => '33',
			'NodeParentID' => '2370',
			'NodeParentOrder' => '1',
			'NodeType' => 'Layout Column',
			'NodeCharLimit' => '6'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2373,
			'NodeTree' => '97',
			'NodeType' => 'Page',
			'NodePromptNotes' => 'department-research-volunteer-instructions-checklist',
			'NodePromptAfter' => 'Department Research Volunteer Instructions & Checklist::M::::M::::M::',
			'NodeCharLimit' => '-1'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2374,
			'NodeTree' => '98',
			'NodeType' => 'Page',
			'NodePromptNotes' => 'police-department-reports-responsiveness',
			'NodePromptAfter' => 'Responsiveness Score: How We Rate Departments::M::Below you can read a detailed description of each criteria for the OpenPolice.org Responsiveness Score, and why we think it is important.::M::Open Police, OpenPolice.org, Open Police Complaints, Police Departments, Responsiveness, Cops, Police, Officers, file complaint, submit, victims, accountability, oversight, open source, transparency::M::'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2375,
			'NodeTree' => '98',
			'NodeParentID' => '2374',
			'NodeType' => 'Instructions',
			'NodePromptText' => '<center><h1 style="margin-top: 50px;">Coming Soon</h1></center>'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2376,
			'NodeTree' => '99',
			'NodeType' => 'Page',
			'NodePromptNotes' => 'complaint',
			'NodePromptAfter' => 'Complaint #[[corePubID]]::M::::M::::M::',
			'NodeResponseSet' => '1',
			'NodeDataBranch' => 'Complaints',
			'NodeCharLimit' => '-1'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2377,
			'NodeTree' => '99',
			'NodeParentID' => '2376',
			'NodeType' => 'Record Full',
			'NodeResponseSet' => '1',
			'NodeDataBranch' => 'Complaints'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2378,
			'NodeTree' => '99',
			'NodeParentID' => '2376',
			'NodeParentOrder' => '1',
			'NodeType' => 'Instructions Raw'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2379,
			'NodeTree' => '42',
			'NodeParentID' => '1362',
			'NodeParentOrder' => '10',
			'NodeType' => 'Instructions Raw',
			'NodePromptText' => '<input type="hidden" name="resultLoaded" id="resultLoadedID" value="[[coreID]]">',
			'NodePromptAfter' => '<style>
#ajaxWrap { background: #F5FBFF; }
#node[[nID]] { display: none; }
</style>
<script type="text/javascript">
function announceLoad() {
  if (window.parent) window.parent.resultLoaded = [[coreID]]; 
}
setTimeout("announceLoad()", 10);
</script>'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2380,
			'NodeTree' => '22',
			'NodeParentID' => '997',
			'NodeParentOrder' => '2',
			'NodeType' => 'Instructions Raw',
			'NodePromptAfter' => '<style>
#main, #mainBody, #ajaxWrap { background: #F5FBFF; }
#ajaxWrap { margin-bottom: -80px; padding-bottom: 80px; }
#blockWrap2381 { margin-top: 30px; }
</style>'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2381,
			'NodeTree' => '22',
			'NodeParentID' => '997',
			'NodeType' => 'Page Block',
			'NodeOpts' => '89'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2383,
			'NodeTree' => '100',
			'NodeType' => 'Page',
			'NodePromptNotes' => 'complaints',
			'NodePromptAfter' => 'Search Complaints Published on OpenPolice.org::M::Browse and search published complaints here on OpenPolice.org. With powerful filters, communities now have access to the accountability data.::M::::M::',
			'NodeResponseSet' => '1',
			'NodeDataBranch' => 'Complaints',
			'NodeCharLimit' => '-1'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2384,
			'NodeTree' => '100',
			'NodeParentID' => '2385',
			'NodeType' => 'Instructions Raw',
			'NodePromptText' => '[ Print Complaints Listings ] hard-coded via OpenListing.php function printComplaintListing, to view openpolice.nodes.1418-admin-complaints-listing<br>'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2385,
			'NodeTree' => '100',
			'NodeParentID' => '2383',
			'NodeType' => 'Page Block'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2386,
			'NodeTree' => '100',
			'NodeParentID' => '2383',
			'NodeParentOrder' => '1',
			'NodeType' => 'Instructions Raw',
			'NodePromptAfter' => '<style>
#node2385kids { padding-top: 10px; }
</style>',
			'NodeInternalNotes' => 'just some CSS'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2387,
			'NodeTree' => '11',
			'NodeParentID' => '791',
			'NodeParentOrder' => '4',
			'NodeType' => 'Instructions Raw',
			'NodePromptAfter' => '<style>
#node2095kids { margin-top: -20px; }
#node2344kids { position: relative; height: 420px; }
#opcAllTimeStats { position: absolute; z-index: 100; }
#dailyGraphWrap { width: 100%; }
</style>'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2392,
			'NodeTree' => '12',
			'NodeParentID' => '799',
			'NodeType' => 'Instructions',
			'NodePromptText' => '<h2>Recent Complaints</h2>
<div class="alert alert-primary fade in alert-dismissible show" style="padding: 10px 15px;">The events described on this website are allegations, which may or may not be factually accurate.</div>',
			'NodePromptAfter' => '<style>
#blockWrap799 { padding: 60px 0px; }
#nLabel2392 { padding-bottom: 10px; }
</style>'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2583,
			'NodeTree' => '5',
			'NodeParentID' => '760',
			'NodeType' => 'Page',
			'NodePromptNotes' => 'when-was-the-incident',
			'NodePromptAfter' => 'When Was The Incident::M::::M::::M::',
			'NodeDataBranch' => 'Incidents'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2584,
			'NodeTree' => '5',
			'NodeParentID' => '867',
			'NodeParentOrder' => '1',
			'NodeType' => 'Page',
			'NodePromptNotes' => 'impressed-with-police',
			'NodePromptAfter' => 'Impressed With Police::M::::M::::M::',
			'NodeOpts' => '29'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2585,
			'NodeTree' => '5',
			'NodeParentID' => '2584',
			'NodeType' => 'Instructions',
			'NodePromptText' => '<h2 class="slBlueDark">This site might not be for you.</h2>
<p>You said you are impressed with police actions on the news or on the internet. But this site is for people who experienced or witnessed police conduct in-person.</p>
<p>We do appreciate your interest in police accountability.</p>
<p>If you did experience or witness misconduct in-person, go back to correct this and resume your complaint.</p>',
			'NodePromptAfter' => '<style> #node2586 .nodeSub .nFormNext { display: none; } </style>'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2586,
			'NodeTree' => '5',
			'NodeParentID' => '2584',
			'NodeParentOrder' => '1',
			'NodeType' => 'Back Next Buttons',
			'NodeResponseSet' => '79'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2587,
			'NodeTree' => '5',
			'NodeParentID' => '869',
			'NodeType' => 'Instructions',
			'NodePromptText' => '<h2 class="slBlueDark">Your Involvement</h2>',
			'NodePromptAfter' => '<style> #node[[nID]] { margin-bottom: -40px; } </style>'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2588,
			'NodeTree' => '5',
			'NodeParentID' => '961',
			'NodeParentOrder' => '2',
			'NodeType' => 'Loop Cycle',
			'NodeResponseSet' => 'LoopItems::',
			'NodeDataBranch' => 'CivCompliment'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2589,
			'NodeTree' => '5',
			'NodeParentID' => '878',
			'NodeParentOrder' => '7',
			'NodeType' => 'Radio',
			'NodePromptText' => 'Do you want to make the address of this incident public? This location data will help researchers to map policing problems in your community.',
			'NodeDataStore' => 'Incidents:IncPublic',
			'NodeOpts' => '5'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2590,
			'NodeTree' => '5',
			'NodeParentID' => '922',
			'NodeType' => 'Data Manip: Wrap',
			'NodeDataBranch' => 'Officers'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2591,
			'NodeTree' => '5',
			'NodeParentID' => '2590',
			'NodeType' => 'Data Manip: Wrap',
			'NodeDataBranch' => 'PersonContact'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2592,
			'NodeTree' => '5',
			'NodeParentID' => '944',
			'NodeType' => 'Data Manip: Wrap',
			'NodeDataBranch' => 'Officers'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2593,
			'NodeTree' => '5',
			'NodeParentID' => '762',
			'NodeType' => 'Data Manip: New',
			'NodeDefault' => 'Y',
			'NodeDataBranch' => 'CivCompliment',
			'NodeDataStore' => 'CivCompliment:CivCompIsCreator'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2594,
			'NodeTree' => '8',
			'NodeParentID' => '774',
			'NodeType' => 'Layout Row',
			'NodeCharLimit' => '2'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2595,
			'NodeTree' => '8',
			'NodeParentID' => '2594',
			'NodeType' => 'Layout Column',
			'NodeCharLimit' => '7'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2596,
			'NodeTree' => '8',
			'NodeParentID' => '2594',
			'NodeParentOrder' => '1',
			'NodeType' => 'Layout Column',
			'NodeCharLimit' => '5'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2597,
			'NodeTree' => '8',
			'NodeParentID' => '2596',
			'NodeType' => 'Page Block',
			'NodeOpts' => '89'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2598,
			'NodeTree' => '8',
			'NodeParentID' => '1009',
			'NodeParentOrder' => '1',
			'NodeType' => 'Instructions',
			'NodePromptText' => '<h3>We Will Help You ...</h3>
<ul><li>Prepare and save a professional-grade report of police excellence.</li><li>File your report with the right <b>police investigative agency</b>, and </li><li><b>Publish your compliment</b> online and share on social media.</li><li>Upload photos, documents, video, and other evidence.</li></ul>
<h3>We Will Never ...</h3>
<ul><li>Sell your data or share anything without your permission.</li><li>Investigate compliments or provide direct legal services.<br></li></ul>
<p><b>By completing this process, you confirm that, to the best of your 
knowledge, the information in this </b><b>compliment is truthful and accurate.</b></p>',
			'NodePromptAfter' => '<style>
#ajaxWrap { background: #F5FBFF; padding: 30px 0px 60px 0px; margin-bottom: -60px; }
#node[[nID]] ul li { margin-bottom: 10px; }
@media screen and (max-width: 480px) { #filingArm { width: 40%; } }
</style>'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2599,
			'NodeTree' => '8',
			'NodeParentID' => '1009',
			'NodeParentOrder' => '5',
			'NodeType' => 'Instructions',
			'NodePromptText' => '<div class="w100 taC pT10 pB10"><a href="/start/compliment?test=1">Demo the app without filing a real compliment</a></div>'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2600,
			'NodeTree' => '8',
			'NodeParentID' => '2595',
			'NodeParentOrder' => '1',
			'NodeType' => 'Page Block',
			'NodeOpts' => '89'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2601,
			'NodeTree' => '8',
			'NodeParentID' => '2600',
			'NodeType' => 'Instructions',
			'NodePromptText' => '<h3>Publishing Options</h3>\r\n<p>You can choose to file your compliment with investigative agencies and publish your story on OpenPolice.org. You\\'ll have three privacy options to control what personal information you want to share.</p>\r\n<p><a id=\"hidivBtnReadPriv\" class=\"hidivBtnSelf btn btn-secondary\" href=\"javascript:;\">Read More</a></p>\r\n<div id=\"hidivReadPriv\" class=\"disNon\">\r\n<p>Whichever you choose, we will try to send your full compliment to a police investigative agency.</p>\r\n<ul>\r\n<li>\r\n<b style=\"font-weight: bold;\">Full Transparency</b><br>You want to publish the names of all civilians and police officers to this website.</li>\r\n<li>\r\n<b style=\"font-weight: bold;\">No Names Public<br></b>You donï¿½t want to publish any names to this website. This includes police officersï¿½ names and badge numbers too.</li>\r\n<li>\r\n<b style=\"font-weight: bold;\">Anonymous</b><br>You need your complaint to be anonymous, even though it will be harder to investigate. No names will be published on this website. Neither OpenPolice.org staff nor investigators will be able to contact you. Any details that could be used for personal identification may be deleted from the database.</li>\r\n</ul>\r\n<p><a href=\"/frequently-asked-questions\" target=\"_blank\" class=\"btn btn-secondary\"><i class=\"fa fa-external-link\" aria-hidden=\"true\"></i> Frequently Asked Questions</a></p>\r\n</div>'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2602,
			'NodeTree' => '1',
			'NodeParentID' => '527',
			'NodeParentOrder' => '2',
			'NodeType' => 'Radio',
			'NodePromptText' => 'Do you agree to share your data with OpenPolice-approved police misconduct databases?',
			'NodePromptNotes' => 'For example, we may share it with CAPstat, a database of police misconduct in New York City.',
			'NodeDataStore' => 'Complaints:ComShareData'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2603,
			'NodeTree' => '1',
			'NodeParentID' => '157',
			'NodeType' => 'Page',
			'NodePromptNotes' => 'legal-notice',
			'NodePromptAfter' => 'Legal Notice::M::::M::::M::'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2604,
			'NodeTree' => '1',
			'NodeParentID' => '2603',
			'NodeParentOrder' => '1',
			'NodeType' => 'Checkbox',
			'NodePromptText' => 'In most places, reporting false allegations against police officers is a crime. Please confirm that the information you will share is to the best of your knowledge truthful and accurate.',
			'NodeOpts' => '65'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2605,
			'NodeTree' => '1',
			'NodeParentID' => '2603',
			'NodeType' => 'Instructions',
			'NodePromptText' => '<h2>Legal Notice</h2>',
			'NodePromptAfter' => '<style> #node[[nID]] { margin-bottom: -30px; } </style>'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2606,
			'NodeTree' => '1',
			'NodeParentID' => '2257',
			'NodeType' => 'Instructions',
			'NodePromptText' => '<h2>When did this incident happen?</h2>',
			'NodePromptAfter' => '<style> #node[[nID]] { margin-bottom: -30px; } </style>'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2607,
			'NodeTree' => '1',
			'NodeParentID' => '451',
			'NodeType' => 'Instructions',
			'NodePromptText' => '<h2>Share Your Story</h2>',
			'NodePromptAfter' => '<style> #node[[nID]] { margin-bottom: -30px; } </style>'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2608,
			'NodeTree' => '1',
			'NodeParentID' => '452',
			'NodeType' => 'Instructions',
			'NodePromptText' => '<h2>Need a Lawyer?</h2>',
			'NodePromptAfter' => '<style> #node[[nID]] { margin-bottom: -30px; } </style>'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2609,
			'NodeTree' => '1',
			'NodeParentID' => '453',
			'NodeType' => 'Instructions',
			'NodePromptText' => '<h2>Publishing Privacy Options</h2>',
			'NodePromptAfter' => '<style> #node[[nID]] { margin-bottom: -30px; } </style>'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2611,
			'NodeTree' => '1',
			'NodeParentID' => '457',
			'NodeType' => 'Instructions',
			'NodePromptText' => '<h2>Scene Information</h2>',
			'NodePromptAfter' => '<style> #node[[nID]] { margin-bottom: -30px; } </style>'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2612,
			'NodeTree' => '1',
			'NodeParentID' => '2122',
			'NodeType' => 'Instructions',
			'NodePromptText' => '<h2>Evidence Upload</h2>',
			'NodePromptAfter' => '<style> #node[[nID]] { margin-bottom: -30px; } </style>'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2613,
			'NodeTree' => '1',
			'NodeParentID' => '810',
			'NodeType' => 'Instructions',
			'NodePromptText' => '<h2>Who\'s Involved</h2>',
			'NodePromptAfter' => '<style> #node[[nID]] { margin-bottom: -30px; } </style>'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2614,
			'NodeTree' => '1',
			'NodeParentID' => '1441',
			'NodeType' => 'Instructions',
			'NodePromptText' => '<h2 class="slBlueDark" id="fixedHeader" style="width: 1185px; min-width: 1185px; max-width: 1185px;">Your current contact information</h2>',
			'NodePromptAfter' => '<style> #node[[nID]] { margin-bottom: -30px; } </style>'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2615,
			'NodeTree' => '1',
			'NodeParentID' => '463',
			'NodeType' => 'Instructions',
			'NodePromptText' => '<h2>Who\'s Involved: Police Officers</h2>',
			'NodePromptAfter' => '<style> #node[[nID]] { margin-bottom: -30px; } </style>'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2616,
			'NodeTree' => '1',
			'NodeParentID' => '2143',
			'NodeParentOrder' => '1',
			'NodeType' => 'Instructions',
			'NodePromptText' => '<p>This does not include police searches.<br></p>'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2617,
			'NodeTree' => '1',
			'NodeParentID' => '466',
			'NodeType' => 'Instructions',
			'NodePromptText' => '<h2>Allegations</h2>',
			'NodePromptAfter' => '<style> #node[[nID]] { margin-bottom: -30px; } </style>'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2618,
			'NodeTree' => '1',
			'NodeParentID' => '467',
			'NodeType' => 'Instructions',
			'NodePromptText' => '<h2>Stops / Questioning</h2>',
			'NodePromptAfter' => '<style> #node[[nID]] { margin-bottom: -30px; } </style>'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2619,
			'NodeTree' => '1',
			'NodeParentID' => '469',
			'NodeType' => 'Instructions',
			'NodePromptText' => '<h2>Searches</h2>',
			'NodePromptAfter' => '<style> #node[[nID]] { margin-bottom: -30px; } </style>'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2620,
			'NodeTree' => '1',
			'NodeParentID' => '854',
			'NodeType' => 'Instructions',
			'NodePromptText' => '<h2>Sexual Harassment / Assault</h2>',
			'NodePromptAfter' => '<style> #node[[nID]] { margin-bottom: -30px; } </style>'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2621,
			'NodeTree' => '1',
			'NodeParentID' => '471',
			'NodeType' => 'Instructions',
			'NodePromptText' => '<h2>Use of Physical Force</h2>',
			'NodePromptAfter' => '<style> #node[[nID]] { margin-bottom: -30px; } </style>'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2622,
			'NodeTree' => '1',
			'NodeParentID' => '472',
			'NodeType' => 'Instructions',
			'NodePromptText' => '<h2>Arrests</h2>',
			'NodePromptAfter' => '<style> #node[[nID]] { margin-bottom: -30px; } </style>'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2623,
			'NodeTree' => '1',
			'NodeParentID' => '473',
			'NodeType' => 'Instructions',
			'NodePromptText' => '<h2>Tickets / Citations</h2>',
			'NodePromptAfter' => '<style> #node[[nID]] { margin-bottom: -30px; } </style>'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2624,
			'NodeTree' => '1',
			'NodeParentID' => '476',
			'NodeType' => 'Instructions',
			'NodePromptText' => '<h2>Display of Weapon</h2>',
			'NodePromptAfter' => '<style> #node[[nID]] { margin-bottom: -30px; } </style>'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2625,
			'NodeTree' => '1',
			'NodeParentID' => '478',
			'NodeType' => 'Instructions',
			'NodePromptText' => '<h2>Biased Policing / Discrimination</h2>',
			'NodePromptAfter' => '<style> #node[[nID]] { margin-bottom: -30px; } </style>'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2626,
			'NodeTree' => '1',
			'NodeParentID' => '2184',
			'NodeType' => 'Instructions',
			'NodePromptText' => '<h2>Ongoing / Repeated Police Contact</h2>',
			'NodePromptAfter' => '<style> #node[[nID]] { margin-bottom: -30px; } </style>'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2627,
			'NodeTree' => '1',
			'NodeParentID' => '475',
			'NodeType' => 'Instructions',
			'NodePromptText' => '<h2>Wrongful Action or Inaction</h2>',
			'NodePromptAfter' => '<style> #node[[nID]] { margin-bottom: -30px; } </style>'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2628,
			'NodeTree' => '1',
			'NodeParentID' => '481',
			'NodeType' => 'Instructions',
			'NodePromptText' => '<h2>Discourtesy</h2>',
			'NodePromptAfter' => '<style> #node[[nID]] { margin-bottom: -30px; } </style>'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2629,
			'NodeTree' => '1',
			'NodeParentID' => '526',
			'NodeType' => 'Instructions',
			'NodePromptText' => '<h2>Congratulations! You\'re almost done.</h2>',
			'NodePromptAfter' => '<style> #node[[nID]] { margin-bottom: -30px; } </style>'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2630,
			'NodeTree' => '42',
			'NodeParentID' => '2336',
			'NodeParentOrder' => '4',
			'NodeType' => 'Instructions Raw',
			'NodePromptText' => '<div class="pT5"> </div><div class="alert alert-warning fade in alert-dismissible show" style="padding: 10px 15px;"><a href="/complaint-privacy-options" target="_blank">We will publish names and written story details</a> when this user confirms that they have formally filed this complaint.</div>'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2631,
			'NodeTree' => '42',
			'NodeParentID' => '2336',
			'NodeParentOrder' => '5',
			'NodeType' => 'Instructions Raw',
			'NodePromptText' => '<div class="pT5"> </div><div class="alert alert-primary fade in alert-dismissible show" style="padding: 10px 15px;">This <a href="/complaint-privacy-options" target="_blank">user\'s privacy setting</a> blocks names and written story information from public view.</div>'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2632,
			'NodeTree' => '42',
			'NodeParentID' => '1703',
			'NodeType' => 'Page Block',
			'NodeOpts' => '9991'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2633,
			'NodeTree' => '42',
			'NodeParentID' => '1711',
			'NodeType' => 'Page Block',
			'NodeOpts' => '9991'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2634,
			'NodeTree' => '42',
			'NodeParentID' => '1704',
			'NodeType' => 'Page Block',
			'NodeInternalNotes' => 'triggers OpenComplaintPrints.php function processOwnerUpdate',
			'NodeOpts' => '9991'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2635,
			'NodeTree' => '42',
			'NodeParentID' => '1362',
			'NodeParentOrder' => '11',
			'NodeType' => 'Instructions Raw',
			'NodePromptAfter' => '<style> #node[[nID]] { display: none; } </style>'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2636,
			'NodeTree' => '1',
			'NodeParentID' => '454',
			'NodeParentOrder' => '1',
			'NodeType' => 'User Sign Up',
			'NodePromptText' => '<p><b>Your story matters.</b> Please sign up or login so you can finish your complaint later, if we get interrupted. It is also important so we can contact you about the progress of your complaint. If necessary, create a temporary email address for this process (e.g. <a href="https://www.guerrillamail.com/" target="_blank">here</a> or <a href="https://www.mailinator.com" target="_blank">here</a>).</p>',
			'NodeOpts' => '5'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2637,
			'NodeTree' => '42',
			'NodeParentID' => '1512',
			'NodeParentOrder' => '2',
			'NodeType' => 'Data Print Row',
			'NodeInternalNotes' => 'with OpenReport.php function getCivReportNameRow',
			'NodeDataStore' => 'PersonContact:PrsnNameMiddle'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2638,
			'NodeTree' => '42',
			'NodeParentID' => '1514',
			'NodeParentOrder' => '2',
			'NodeType' => 'Data Print Row',
			'NodeDataStore' => 'PersonContact:PrsnNameMiddle'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2639,
			'NodeTree' => '57',
			'NodeParentID' => '1901',
			'NodeParentOrder' => '2',
			'NodeType' => 'Page Block'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2640,
			'NodeTree' => '57',
			'NodeParentID' => '2639',
			'NodeType' => 'Instructions',
			'NodePromptText' => '<h2 class=\"slBlueDark\">Donors\\' Frequently Asked Questions</h2><p><b>What will your organization do?</b></p><p>We build open data tools to track police conduct. Police agencies are bad at collecting civilian complaints data, and the data they collect, they rarely share. Our software helps police misconduct victims build professional-quality incident reports. Users can file with investigative agencies and publish online, so their data is transparent and searchable.<br><br><b>How far along are you?</b></p><p>We released a beta version of OpenPolice.org in late spring. From our organic traffic alone, weï¿½ve captured over 330 signups, and 30 users completed our comprehensive complaint survey. Ten of those have been submitted to law enforcement agencies and fully published online.<br><br><b>What\\'s new about what you plan to do?</b></p><p>Most police open data projects rely on voluntary data reporting by law enforcement agencies. As a result, such data is limited by inherent flaws, gaps, and biases. For example, data from police sources typically exclude the identity of involved police officers. That makes it practically impossible for outsiders to identify and track the behavior of individual officers. </p><p>OpenPolice.org uses a grassroots data collection strategy, gathering information directly from citizens. That enables better tracking of individual officers. And because we are a non-governmental organization, we are exempt from various state and local laws that block police records from public view.</p><p>We hope to see more governmental and research institutions using grassroots data to supplement government data.<br><br><b>How will you make money?</b></p><p>According to government data, about 4% of 2.9 million annual victims of police misconduct file complaints through departmentsï¿½ traditional methods. So there is plenty of demand for what weï¿½ve built to generate revenue with a lead generation service for defense attorneys. We will also have paid subscriptions for intake management software for law firms and investigative agencies. Beyond this free opt-in service, we will never share or sell users\\' data.<br></p><p>This revenue will help us grow and sustain citizen-controlled oversight institutions independent of police control. We can democratize police oversight in the US and forever shift the balance of power between police and the people they serve.</p><p><a href=\"#n1905\" class=\"btn btn-primary\"><i class=\"fa fa-arrow-circle-o-up mR3\" aria-hidden=\"true\"></i> <b>Back to Top, Donate</b></a></p><p><a href=\"/frequently-asked-questions\">Frequently Asked Questions</a></p><p>&nbsp;<br><br></p>'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2641,
			'NodeTree' => '17',
			'NodeParentID' => '839',
			'NodeParentOrder' => '6',
			'NodeType' => 'Instructions',
			'NodePromptText' => '<p><a href="/donate#faq">Donors\' Frequently Asked Questions</a></p>',
			'NodeOpts' => '67'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2642,
			'NodeTree' => '77',
			'NodeParentID' => '2200',
			'NodeType' => 'Page Block'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2643,
			'NodeTree' => '17',
			'NodeParentID' => '839',
			'NodeType' => 'Instructions',
			'NodePromptText' => '<p> </p>
<div class="pT20">
<a class="hidTogAll pull-right btn btn-secondary" data-list="UsersCan,Compliment,Launch,Names,False,18000,App,Video,Sue,Money,Contribute,AfterFile,Ignore,Privacy,Anonymous,AnonymousOver,Sell,Allegs,GotEmail,Integrate,Correction,Remove,AttrIntak" href="javascript:;">Toggle All</a>
<h1>Frequently Asked Questions</h1>
</div>
<p class="slGrey">Categories:  <a href="#faq-general" class="hsho">General</a>  |  <a href="#faq-complaint" class="hsho">Complaint Process</a> | <a href="#faq-law-enforcement" class="hsho">Law Enforcement</a>  |  <a href="#faq-attorneys" class="hsho">Attorneys</a></p>',
			'NodePromptAfter' => '<script type="text/javascript">
addHshoo("#faq-general");
addHshoo("#faq-complaint");
addHshoo("#faq-law-enforcement");
addHshoo("#faq-attorneys");
</script>',
			'NodeOpts' => '67'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2644,
			'NodeTree' => '12',
			'NodeParentID' => '2650',
			'NodeType' => 'Instructions',
			'NodePromptText' => '<div class="pB15 w100 taC" style="background: #FFF;"><h3>Moving You to <nobr>the Center</nobr> of <nobr>Police Accountability</nobr></h3></div>
<img src="/openpolice/uploads/screenshots-multi-mobile.png" class="w100 mT20" border="0">',
			'NodePromptAfter' => '<style> #blockWrap2650 { padding: 60px 0px; } </style>'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2645,
			'NodeTree' => '12',
			'NodeParentID' => '2647',
			'NodeType' => 'Instructions Raw',
			'NodePromptText' => '<center>
<iframe id="homeDemoVid" width="100%" height="470" src="https://www.youtube-nocookie.com/embed/Hn_KOQvWEmU" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen ></iframe>
</center>',
			'NodePromptAfter' => '<style>
#blockWrap2647 { padding: 60px 0px; }
#homeDemoVid { height: 470px; max-width: 800px; margin: 30px 0px; }
@media screen and (max-width: 1200px) {
}
@media screen and (max-width: 992px) {
#homeDemoVid { height: 380px; }
}
@media screen and (max-width: 768px) {
#homeDemoVid { height: 250px; margin-top: 40px; }
}
@media screen and (max-width: 480px) {
#homeDemoVid { height: 205px; }
}
</style>'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2647,
			'NodeTree' => '12',
			'NodeParentID' => '793',
			'NodeParentOrder' => '5',
			'NodeType' => 'Page Block',
			'NodeDefault' => '#EDF8FF;;#333;;#FFF;;;;w100;;N;;left;;auto',
			'NodeOpts' => '4757'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2649,
			'NodeTree' => '12',
			'NodeParentID' => '2650',
			'NodeParentOrder' => '1',
			'NodeType' => 'Instructions Raw',
			'NodePromptText' => '<div id="blockWrap1107" class="w100 container taC"><div class="container" id="treeWrap1107"><div class="fC"></div><div class="nodeAnchor"><a id="n1107" name="n1107"></a></div><div id="node1107" class="nodeWrap w100">

<div id="nLabel1107" class="nPrompt"><p> </p><div class="mB20"><h3 class="slBlueDark">How we stack <nobr>up against</nobr> most <nobr>police departments</nobr></h3></div></div>


</div> <!-- end #node1107 -->
</div>
</div>
<div id="blockWrap2395" class="w100"><center><div class="treeWrapForm" id="treeWrap2395"><div class="fC"></div><div class="nodeAnchor"><a id="n2395" name="n2395"></a></div><div id="node2395" class="nodeWrap">
<div id="node2395kids" class="disBlo container"><input type="hidden" name="n1108Visible" id="n1108VisibleID" value="1"><!-- generated from resources/views/vendor/survloop/css/inc-block.blade.php -->
<div id="blockWrap1108" class="w100"><div class="fC"></div><div class="nodeAnchor"><a id="n1108" name="n1108"></a></div><div id="node1108kids" class="disFlx row"><div id="col1109" class="col-md-6"><div class="fC"></div><div class="nodeAnchor"><a id="n1109" name="n1109"></a></div><div id="node1109kids" class="disBlo"><input type="hidden" name="n1111Visible" id="n1111VisibleID" value="1"><!-- generated from resources/views/vendor/survloop/css/inc-block.blade.php -->
<div id="blockWrap1111" class="w100"><div class="fC"></div><div class="nodeAnchor"><a id="n1111" name="n1111"></a></div><div id="node1111" class="nodeWrap w100">

<div id="nLabel1111" class="nPrompt"><h4 style="margin-bottom: 10px;">OpenPolice.org</h4>
<i class="fa fa-check mL10 mR10 slBlueDark" aria-hidden="true"></i> Online Report Filing<br>
<i class="fa fa-check mL10 mR10 slBlueDark" aria-hidden="true"></i> Digital Evidence Uploading<br>
<i class="fa fa-check mL10 mR10 slBlueDark" aria-hidden="true"></i> Anonymous Reports Allowed<br>
<i class="fa fa-check mL10 mR10 slBlueDark" aria-hidden="true"></i> Department Identification Tools<br>
<i class="fa fa-check mL10 mR10 slBlueDark" aria-hidden="true"></i> Publicly Searchable Reports<br>
<i class="fa fa-check mL10 mR10 slBlueDark" aria-hidden="true"></i> Officers\' Names Made Public<br>
<i class="fa fa-check mL10 mR10 slBlueDark" aria-hidden="true"></i> Social Media Sharing<br>
<i class="fa fa-check mL10 mR10 slBlueDark" aria-hidden="true"></i> Status Updates via Email<br>
<i class="fa fa-check mL10 mR10 slBlueDark" aria-hidden="true"></i> Help Finding an Attorney<br>
<i class="fa fa-check mL10 mR10 slBlueDark" aria-hidden="true"></i> Commitment to Open Data<p></p><p><br></p></div>


</div> <!-- end #node1111 -->
</div></div> <!-- end #node1109kids --></div><div id="col1110" class="col-md-6"><div class="fC"></div><div class="nodeAnchor"><a id="n1110" name="n1110"></a></div><div id="node1110kids" class="disBlo"><input type="hidden" name="n1112Visible" id="n1112VisibleID" value="1"><!-- generated from resources/views/vendor/survloop/css/inc-block.blade.php -->
<div id="blockWrap1112" class="w100"><div class="fC"></div><div class="nodeAnchor"><a id="n1112" name="n1112"></a></div><div id="node1112" class="nodeWrap w100">

<div id="nLabel1112" class="nPrompt"><h4 style="margin-bottom: 10px;">Most Police Departments</h4>
<i class="fa fa-check mL10 mR10 slRedDark" aria-hidden="true"></i> Require Police Station Visit<br>
<i class="fa fa-check mL10 mR10 slRedDark" aria-hidden="true"></i> Require Paper Reports<br>
<i class="fa fa-check mL10 mR10 slRedDark" aria-hidden="true"></i> Unhelpful or Intimidating Employees<br>
<i class="fa fa-check mL10 mR10 slRedDark" aria-hidden="true"></i> Bound by State Secrecy Laws<br>
<i class="fa fa-check mL10 mR10 slRedDark" aria-hidden="true"></i> Old Complaint Records Destroyed<p></p><p><br></p></div>


</div> <!-- end #node1112 -->
</div></div> <!-- end #node1110kids --></div></div> <!-- end #node1108kids --></div></div> <!-- end #node2395kids -->
</div> <!-- end #node2395 -->
</div></center>
</div>',
			'NodePromptAfter' => '<style> #blockWrap1107 { margin-top: -10px; } </style>'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2650,
			'NodeTree' => '12',
			'NodeParentID' => '793',
			'NodeParentOrder' => '2',
			'NodeType' => 'Page Block'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2654,
			'NodeTree' => '60',
			'NodeParentID' => '2151',
			'NodeType' => 'Layout Row',
			'NodeCharLimit' => '2'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2655,
			'NodeTree' => '60',
			'NodeParentID' => '2654',
			'NodeType' => 'Layout Column',
			'NodeCharLimit' => '4'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2656,
			'NodeTree' => '60',
			'NodeParentID' => '2654',
			'NodeParentOrder' => '1',
			'NodeType' => 'Layout Column',
			'NodeCharLimit' => '8'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2657,
			'NodeTree' => '66',
			'NodeParentID' => '2678',
			'NodeType' => 'Page Block'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2658,
			'NodeTree' => '66',
			'NodeParentID' => '2678',
			'NodeParentOrder' => '1',
			'NodeType' => 'Page Block'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2659,
			'NodeTree' => '61',
			'NodeParentID' => '1988',
			'NodeParentOrder' => '3',
			'NodeType' => 'Instructions',
			'NodePromptText' => '<p> </p>
<h3>Other/Misc Contacts</h3>
<ul><li><a href="http://FosterExperts.com" target="_blank">FosterExperts.com</a>
 - Law enforcement expert witness who contacted OpenPolice.org in May 
\'19. Would like to work on police misconduct and use of force cases.</li></ul><p><br></p>',
			'NodeOpts' => '89'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2660,
			'NodeTree' => '66',
			'NodeParentID' => '2658',
			'NodeType' => 'Layout Row',
			'NodeCharLimit' => '2'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2661,
			'NodeTree' => '66',
			'NodeParentID' => '2660',
			'NodeType' => 'Layout Column',
			'NodeCharLimit' => '7'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2662,
			'NodeTree' => '66',
			'NodeParentID' => '2660',
			'NodeParentOrder' => '1',
			'NodeType' => 'Layout Column',
			'NodeCharLimit' => '5'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2663,
			'NodeTree' => '66',
			'NodeParentID' => '2661',
			'NodeType' => 'Page Block',
			'NodeOpts' => '89'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2664,
			'NodeTree' => '66',
			'NodeParentID' => '2663',
			'NodeType' => 'Instructions',
			'NodePromptText' => '<h2 class=\"slBlueDark\">File Your Police Complaint</h2>\r\n<p>Your story is too important to be ignored. Thatï¿½s why we help you \r\nbuild a transparent record of police misconduct. By improving \r\naccountability, you can protect the rights of people in your community.</p><p><b>OpenPolice.org</b> is an independent project developed by <nobr>Flex Your Rights</nobr>, a 501(c)(3) educational nonprofit. <br></p>',
			'NodePromptAfter' => '<script type="text/javascript">
function fixColBrk() {
if (document.getElementById("col2661")) {
  document.getElementById("col2661").className="col-lg-7";
  document.getElementById("col2662").className="col-lg-5";
}
}
setTimeout("fixColBrk()", 100);
</script>'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2665,
			'NodeTree' => '66',
			'NodeParentID' => '2663',
			'NodeParentOrder' => '1',
			'NodeType' => 'Instructions',
			'NodePromptText' => '<h3>Find Your Best Path Forward</h3>
<p>Depending on your unique circumstances, OpenPolice.org will help you ...</p><ul><li>Prepare and save a professional-grade police misconduct report.</li><li>Upload photos, documents, videos, and other evidence.</li><li>File your report with the right police investigative agency and publish it online.</li><li>Get matched with appropriate legal help.</li></ul><h3>We Will Never ...</h3><ul><li>Sell your data or share anything without your permission.</li><li>Investigate complaints or provide direct legal services.</li></ul>',
			'NodePromptAfter' => '<style>
#ajaxWrap { background: #F5FBFF; padding: 30px 0px 60px 0px; margin-bottom: -60px; }
#node[[nID]] ul li { margin-bottom: 10px; }
@media screen and (max-width: 480px) { #filingArm { width: 40%; } }
</style>'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2666,
			'NodeTree' => '66',
			'NodeParentID' => '2663',
			'NodeParentOrder' => '2',
			'NodeType' => 'Instructions Raw',
			'NodePromptText' => '<a class="btn btn-xl btn-primary w100 mT10 mB10" href="[[DOMAIN]]/start/complaint">I Understand, Begin <nobr>My Complaint</nobr></a>
<a class="btn btn-xl btn-secondary w100 mT10 mB10" href="[[DOMAIN]]/login">Log Back In, Continue <nobr>My Complaint</nobr></a>'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2667,
			'NodeTree' => '66',
			'NodeParentID' => '2663',
			'NodeParentOrder' => '3',
			'NodeType' => 'Instructions Raw',
			'NodePromptText' => '<a class="btn btn-xl btn-primary w100 mT10" href="[[DOMAIN]]/start/complaint">I Understand, Begin My Complaint</a>'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2668,
			'NodeTree' => '66',
			'NodeParentID' => '2663',
			'NodeParentOrder' => '4',
			'NodeType' => 'Incomplete Sess Check',
			'NodePromptText' => '<style>
#n[[nID]]ajaxLoad .nodeGap { padding: 10px; }
</style>',
			'NodePromptAfter' => '<div class="p10"> </div>',
			'NodeResponseSet' => '1'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2669,
			'NodeTree' => '66',
			'NodeParentID' => '2663',
			'NodeParentOrder' => '5',
			'NodeType' => 'Instructions',
			'NodePromptText' => '<div class="w100 taC pT10 pB10"><a href="/start/complaint?test=1">Demo the app without filing a real complaint</a></div>'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2670,
			'NodeTree' => '66',
			'NodeParentID' => '2661',
			'NodeParentOrder' => '1',
			'NodeType' => 'Page Block',
			'NodeOpts' => '89'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2671,
			'NodeTree' => '66',
			'NodeParentID' => '2670',
			'NodeType' => 'Instructions',
			'NodePromptText' => '<h3>Publishing Options</h3>\r\n<p>You can choose to file your complaint with investigative agencies and publish your story on OpenPolice.org. You\\'ll have three privacy options to control what personal information you want to share.</p>\r\n<p><a id=\"hidivBtnReadPriv\" class=\"hidivBtnSelf btn btn-secondary\" href=\"javascript:;\">Read More</a></p>\r\n<div id=\"hidivReadPriv\" class=\"disNon\">\r\n<p>Whichever you choose, we will try to send your full complaint to a police investigative agency.</p>\r\n<ul>\r\n<li>\r\n<b style=\"font-weight: bold;\">Full Transparency</b><br>You want to publish the names of all civilians and police officers to this website.</li>\r\n<li>\r\n<b style=\"font-weight: bold;\">No Names Public<br></b>You donï¿½t want to publish any names to this website. This includes police officersï¿½ names and badge numbers too.</li>\r\n<li>\r\n<b style=\"font-weight: bold;\">Anonymous</b><br>You need your complaint to be anonymous, even though it will be harder to investigate. No names will be published on this website. Neither OpenPolice.org staff nor investigators will be able to contact you. Any details that could be used for personal identification may be deleted from the database.</li>\r\n</ul>\r\n<p><a href=\"/frequently-asked-questions\" target=\"_blank\" class=\"btn btn-secondary\"><i class=\"fa fa-external-link\" aria-hidden=\"true\"></i> Frequently Asked Questions</a></p>\r\n</div>'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2672,
			'NodeTree' => '66',
			'NodeParentID' => '2662',
			'NodeType' => 'Page Block',
			'NodeOpts' => '89'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2673,
			'NodeTree' => '66',
			'NodeParentID' => '2662',
			'NodeParentOrder' => '2',
			'NodeType' => 'Page Block',
			'NodeOpts' => '89'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2674,
			'NodeTree' => '66',
			'NodeParentID' => '2672',
			'NodeType' => 'Instructions',
			'NodePromptText' => '<iframe id="demoVid" src="https://www.youtube.com/embed/Hn_KOQvWEmU" allow="accelerometer; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="" width="100%" height="236" frameborder="0"></iframe>',
			'NodePromptAfter' => '<style>
@media screen and (max-width: 992px) {
#demoVid { height: 360px; }
}
</style>'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2675,
			'NodeTree' => '66',
			'NodeParentID' => '2673',
			'NodeType' => 'Instructions',
			'NodePromptText' => '<h3>Possible Paths<nobr></nobr></h3>
<center><div class="ovrNo w66 pT20"><div id="usrFloWrap">
<a href="/openpolice/uploads/user-flow-partner.jpg" target="_blank"><img src="/openpolice/uploads/user-flow-basic.jpg" class="w100" border="0"></a>
</div></div></center>',
			'NodePromptAfter' => '<style>
#usrFloWrap { margin-top: -70px; }
</style>'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2676,
			'NodeTree' => '66',
			'NodeParentID' => '2662',
			'NodeParentOrder' => '1',
			'NodeType' => 'Page Block',
			'NodeOpts' => '89'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2677,
			'NodeTree' => '66',
			'NodeParentID' => '2676',
			'NodeType' => 'Instructions',
			'NodePromptText' => '[ Brief Partner Info ] hard-coded via OpenPartners.php function publicPartnerPageClinicOnly, to view openpolice.nodes.2677-partner-clinic-only'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2678,
			'NodeTree' => '66',
			'NodeParentID' => '2063',
			'NodeType' => 'Page Block'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2679,
			'NodeTree' => '177',
			'NodeType' => 'Page',
			'NodePromptNotes' => 'home-test',
			'NodePromptAfter' => 'Home::M::::M::::M::'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2680,
			'NodeTree' => '177',
			'NodeParentID' => '2679',
			'NodeType' => 'Instructions',
			'NodePromptText' => '<center><h1 style="margin-top: 50px;">Coming Soon</h1></center>'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2681,
			'NodeTree' => '178',
			'NodeType' => 'Page',
			'NodePromptNotes' => 'dashboard-test',
			'NodePromptAfter' => 'Dashboard::M::::M::::M::'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2682,
			'NodeTree' => '178',
			'NodeParentID' => '2681',
			'NodeType' => 'Instructions',
			'NodePromptText' => '<center><h1 style="margin-top: 50px;">Coming Soon</h1></center>'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2684,
			'NodeTree' => '12',
			'NodeParentID' => '799',
			'NodeParentOrder' => '2',
			'NodeType' => 'Instructions',
			'NodePromptText' => '<a class="btn btn-secondary btn-lg" href="/complaints">Browse & Search All Complaints</a>'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2685,
			'NodeTree' => '12',
			'NodeParentID' => '799',
			'NodeParentOrder' => '1',
			'NodeType' => 'Instructions Raw',
			'NodePromptText' => '[ Print Recent Complaint & Compliment Listings ] hard-coded via OpenListing.php function printComplaintListing, to view openpolice.nodes.1418-admin-complaints-listing',
			'NodeResponseSet' => '1',
			'NodeCharLimit' => '6'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2686,
			'NodeTree' => '20',
			'NodeParentID' => '847',
			'NodeType' => 'Layout Row',
			'NodeCharLimit' => '2'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2687,
			'NodeTree' => '20',
			'NodeParentID' => '2686',
			'NodeType' => 'Layout Column',
			'NodeCharLimit' => '4'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2688,
			'NodeTree' => '20',
			'NodeParentID' => '2686',
			'NodeParentOrder' => '1',
			'NodeType' => 'Layout Column',
			'NodeCharLimit' => '8'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2689,
			'NodeTree' => '20',
			'NodeParentID' => '2687',
			'NodeType' => 'Page Block',
			'NodeOpts' => '89'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2690,
			'NodeTree' => '20',
			'NodeParentID' => '2689',
			'NodeType' => 'Instructions Raw',
			'NodePromptText' => '[ Documentation Navigation ] hard-coded in OpenDevelopment.php function printNavDevelopmentArea, via view openpolice.inc-documentation-navigation'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2691,
			'NodeTree' => '20',
			'NodeParentID' => '2688',
			'NodeParentOrder' => '1',
			'NodeType' => 'Instructions',
			'NodePromptText' => '<hr>
<h3 class="slBlueDark">1. Install Homestead</h3><h4>Locally On A Mac<br></h4><b>Replace all references to "openpolice" with a short name for your own project.</b>
<ol><li>Install <a href="https://apps.apple.com/us/app/xcode/id497799835" target="_blank">XCode from the App Store</a>. Open it, and accept the user agreement.</li><li>Install VirtualBox: <a href="https://www.virtualbox.org/wiki/Downloads" target="_blank" rel="noopener">https://www.virtualbox.org/wiki/Downloads</a></li><li>Install Vagrant: <a href="https://www.vagrantup.com/downloads.html" target="_blank" rel="noopener">https://www.vagrantup.com/downloads.html</a></li><li>To the command line (Mac OS Terminal, or <a href="https://www.iterm2.com/" target="_blank" rel="noopener">iTerm</a>)! Create local ssh key, if you haven\'t on this computer before:
<pre>$ ssh-keygen -t rsa -C "your@emailaddress.com"</pre>
</li><li>Install Composer, Homestead, and initialize. For this example, the
 work area\'s directory is "~/web", but you can adjust it as needed:<br><pre>$ <code class=" language-php">vagrant box add laravel<span class="token operator">/</span>homestead<br></code>$ curl -sS https://getcomposer.org/installer | sudo php -- --install-dir=/usr/local/bin --filename=composer  
$ cd ~/
$ git clone https://github.com/laravel/homestead.git homestead<code class=" language-php"></code>
$ cd homestead<br><code class=" language-php">$ </code><code class=" language-php">git checkout release</code>
$ bash init.sh</pre>
<p>&nbsp;</p>
</li><li>Edit paths in Homestead.yaml:
<pre>$ nano Homestead.yaml</pre>
<em>Change the folders and sites</em><em> to:</em>
<pre>folders: 
    - map: ~/homestead/code
      to: /home/vagrant/code

sites:
    - map: openpolice.local
      to: /home/vagrant/code/openpolice/public</pre>
<p>&nbsp;</p>
</li><li>Auto-add project(s) to the the /etc/hosts file:
<pre>$ <span class="comment-copy"><code>vagrant plugin install vagrant-hostsupdater</code></span></pre><p><br></p>

</li></ol>'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2692,
			'NodeTree' => '20',
			'NodeParentID' => '2688',
			'NodeType' => 'Instructions Raw',
			'NodePromptText' => '<h2>How To Install OpenPolice.org Locally</h2>
<ol><li><a href="#n3072">Install Homestead</a> </li><li><a href="#n3071">Install Laravel</a> </li><li><a href="#n2694">Install FlexYourRights/OpenPolice</a><br></li></ol>
<iframe width="100%" height="315" src="https://www.youtube.com/embed/U-0knFJThws" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>',
			'NodePromptAfter' => '<style> #treeWrap2686 { margin-top: 30px; } </style>'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2693,
			'NodeTree' => '20',
			'NodeParentID' => '2688',
			'NodeParentOrder' => '2',
			'NodeType' => 'Instructions',
			'NodePromptText' => '<hr>
<h3 class="slBlueDark">2. Install Laravel</h3><pre>$ cd ~/homestead
$ mkdir code
$ cd code
$ composer create-project laravel/laravel openpolice "5.8.*"
$ cd openpolice
</pre>
<p>Edit the environment file to connect the default MYSQL database:</p>
<pre>$ nano .env</pre>
<pre>DB_DATABASE=homestead<br>DB_USERNAME=homestead<br>DB_PASSWORD=secret</pre>
<p>You could do things like install Laravel\'s out-of-the-box user 
authentication tools, and push the vendor file copies where they need to
 be:
</p><pre>$ php artisan make:auth
$ echo "0" | php artisan vendor:publish --tag=laravel-notifications</pre>'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2694,
			'NodeTree' => '20',
			'NodeParentID' => '2688',
			'NodeParentOrder' => '3',
			'NodeType' => 'Instructions',
			'NodePromptText' => '<hr>
<h3 class="slBlueDark">3. Install FlexYourRights/OpenPolice</h3>
<p>From your Laravel installation\'s root directory, update `composer.json` to require and easily reference OpenPolice:</p>
<pre>$ nano composer.json
</pre>
<pre>...
"require": {
	...
    "rockhopsoft/survloop": "^0.2.11",
    "flexyourrights/openpolice": "^0.2.11",
	...
},
...
"autoload": {
	...
	"psr-4": {
		...
		"SurvLoop\\": "vendor/rockhopsoft/survloop/src/",
		"OpenPolice\\": "vendor/flexyourrights/openpolice/src/",
	}
	...
}, ...
</pre>
<p>After saving the file, run the update to download OpenPolice, and any missing dependencies.</p>
<pre>$ composer update</pre><h4>Laravel Config<br></h4><p>Add the package to your application service providers in `config/app.php`.</p>
<pre>$ nano config/app.php
</pre>
<pre>...
\'providers\' =&gt; [
	...
	SurvLoop\SurvLoopServiceProvider::class,
	OpenPolice\OpenPoliceServiceProvider::class,
	...
],
...
\'aliases\' =&gt; [
	...
	\'SurvLoop\' =&gt; \'RockHopSoft\SurvLoop\SurvLoopFacade\',
	\'OpenPolice\' =&gt; \'FlexYourRights\OpenPolice\OpenPoliceFacade\',
	...
], ...
</pre>
<p> </p>
<p>Swap out the OpenPolice user model in `config/auth.php`.</p>
<pre>$ nano config/auth.php
</pre>
<pre>...
\'model\' =&gt; App\Models\User::class,
...</pre><h4>Migrate, Publish, and Clean Up</h4>
<p>Update composer, publish the package migrations, etc...</p>
<pre>$ echo "0" | php artisan vendor:publish --force
$ cd ~/homestead
$ vagrant up
$ vagrant ssh
$ cd code/openpolice
$ php artisan migrate
$ composer dump-autoload
$ php artisan db:seed --class=OpenPoliceSeeder
$ php artisan db:seed --class=OpenPoliceSLSeeder
$ php artisan db:seed --class=OpenPoliceDeptSeeder<br>$ php artisan db:seed --class=ZipCodeSeeder
$ php artisan optimize:clear
</pre>
<p>For now, to apply database design changes to the same installation 
you are working in, depending on your server, you might also need 
something like this...</p>
<pre>$ chown -R www-data:33 app/Models
$ chown -R www-data:33 database
</pre><p>You might need to re-run some things outside the virtual box too, e.g.</p><pre>$ exit
$ cd ~/homestead/code/openpolice
$ php artisan optimize:clear
$ composer dump-autoload
</pre>

<h4>Initialize OpenPolice Installation<br></h4>
<p>Then browsing to the home page should prompt you to create the first admin user account:</p>
<p><a href="http://openpolice.local" target="_blank"><b>http://openpolice.local</b></a></p><p>If everything looks janky, then manually load the style sheets, etc:</p><p><a href="http://openpolice.local/css-reload" target="_blank"><b>http://openpolice.local/css-reload</b></a></p><p>After logging in as an admin, this link rebuilds many supporting files:</p><p><a href="http://openpolice.local/dashboard/settings?refresh=2"><b>http://openpolice.local/dashboard/settings?refresh=2</b></a></p><p>You
 can also connect to the database with apps like Sequel Pro, and default
 login info.... Host: 127.0.0.1 , Username: homestead , Password: secret
 , Port: 33060 , Database: homestead .</p>'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2695,
			'NodeTree' => '20',
			'NodeParentID' => '2688',
			'NodeParentOrder' => '4',
			'NodeType' => 'Instructions',
			'NodePromptText' => '<hr>
<h2>New To Laravel?</h2>
<p>Here are some of the basic lessons I\'ve learned in my first three years...</p>
<h4>Clearing Caches</h4>
<p>You\'ve made changes, but they aren\'t taking root. You might be able 
to turn that off and on again with one the common cache clears. These 
can be run from your Laravel installation\'s root:</p>
<pre>$ php artisan vendor:publish --force
$ php artisan cache:clear
$ php artisan route:cache
$ php artisan view:clear
$ php artisan config:cache
$ php artisan optimize
</pre>
<h4>New To Composer?</h4>
<p>Here are some of the basic lessons I\'ve learned in newb land...</p>
<pre>$ composer dump-autoload
</pre>
<hr>
<h2>Thank You!</h2><p>After following those instructions, hopefully you should have a functioning installation to start tinkering with. Please <a href="http://openpolice.local/contact">contact us</a>
 if you hit any big errors or have corrections or improvements to this 
install process. We hope you\'ll help make it harder, better, faster, and
 stronger for complainants, police oversight investigators, and the 
whole community!</p>
<hr>
<p class="slGrey">Updated: November 3, 2019</p>'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2696,
			'NodeTree' => '20',
			'NodeParentID' => '2687',
			'NodeParentOrder' => '1',
			'NodeType' => 'Instructions',
			'NodePromptText' => '<h4>About the Codebase</h4>
<p>The OpenPolice.org codebase is mostly PHP and extends SurvLoop, which was built for it. The 
OpenPolice package powers OpenPolice.org to collect and share data, and 
manage site content.</p>
<p>SurvLoop is an open data engine mostly written PHP, with a fair 
amount of JavaScript/jQuery for the front-end. Please share any problems
 you see that could be barriers to entry for other developers. These 
include issues with code, development processes, community standards, 
etc. Thank you!<br></p>',
			'NodeOpts' => '89'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2697,
			'NodeTree' => '181',
			'NodeType' => 'Page',
			'NodePromptNotes' => 'code-package-files-folders-and-classes',
			'NodePromptAfter' => 'Code Package Files, Folders, and Classes::M::::M::::M::',
			'NodeCharLimit' => '-1'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2698,
			'NodeTree' => '181',
			'NodeParentID' => '2701',
			'NodeType' => 'Instructions',
			'NodePromptText' => '<h2 class=\"slBlueDark\">OpenPolice Package\\'s File &amp; Folder Layout</h2>\r\n\r\n<p><a href=\"https://blog.pusher.com/laravel-mvc-use/\" target=\"_blank\">Laravel is a Model View Controller (</a><a href=\"https://blog.pusher.com/laravel-mvc-use/\" target=\"_blank\">MVC</a><a href=\"https://blog.pusher.com/laravel-mvc-use/\" target=\"_blank\">)</a>,\r\n and the OpenPolice package is installed on top. SurvLoop was built for this project, and it has separate <a href=\"https://survloop.org/package-files-folders-classes\" target=\"_blank\">layout documentation</a>. Below is a general map of\r\n the OpenPolice package.</p><p>If you\\'re new to Laravel, this gets installed \r\nhere: /root-folder/vendor/flexyourrights/openpolice<br></p>\r\n<h4><a href=\"https://github.com/flexyourrights/openpolice\" target=\"_blank\"> flexyourrights/openpolice</a></h4>\r\n<div class=\"pL20\"><ul><li><b>composer.json</b>: Defines more packages required by OpenPolice, as well as easier references to some packages.</li><li><b>src</b>: Repository\\'s main source code.\r\n<ul><li><b>OpenPoliceServiceProvider.php</b>: OpenPoliceServiceProvider \r\nmanages which package files and folders need to be copied to elsewhere \r\nin the system. This mostly just runs after installation, and perhaps of \r\nsome other code updates.</li><li><b>routes.php</b>: All of OpenPolice\\'s custom routing happens here, passing a url request to the right Controller.</li><li><b>Controllers</b>: Most of the PHP algorithms and logic which process and manipulate data, and call Views to output the proper results.\r\n    \r\n    </li><li><b>Database</b>: Includes migration and seeder files which Laravel can use to install OpenPolice.</li><li><b>Models</b>: Copies of all the <a href=\"https://laravel.com/docs/5.8/eloquent\" target=\"_blank\">Eloquent Models</a> used by this package, generated by this same OpenPolice installation.</li><li><b>Public</b>: Contains images and photos in OpenPolice\\'s public media gallery ï¿½ to be merged into Uploads folder.<br></li><li><b>Uploads</b>: Contains images and photos in OpenPolice\\'s public media gallery.</li><li><b>Views</b>: Includes <a href=\"https://laravel.com/docs/5.8/blade\" target=\"_blank\">Blade Templates</a> which are called by controllers, and where most of OpenPolice\\'s HTML, Javascript, and CSS can be found. Templates for...\r\n    <ul><li><b>admin</b>: general OpenPolice admin interfaces\r\n        <ul><li><b>db</b>: customize database admin tools</li></ul>\r\n        </li><li><b>ajax</b>: printing results of specific jQuery/AJAX requests custom to OpenPolice</li><li><b>nodes</b>: printing hard-coded nodes which appear within OpenPolice surveys or web content pages</li><li><b>volun</b>: printing hard-coded interfaces for volunteers\\' research of police department policies<br></li></ul></li></ul></li><li><b>tests</b>: Holding place to remind me to add as much unit testing as possible and appropriate.</li></ul></div>\r\n<h4><a href=\"https://github.com/flexyourrights/openpolice-departments\" target=\"_blank\"> flexyourrights/openpolice-departments</a></h4>\r\n<div class=\"pL20\"><ul><li><b>src/OpenPoliceDeptSeeder.php</b>: database import for 18,000+ police departments and complaint policies.<br></li></ul></div><br>',
			'NodePromptAfter' => '<style> #treeWrap2699 { margin-top: 30px; } </style>'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2699,
			'NodeTree' => '181',
			'NodeParentID' => '2697',
			'NodeType' => 'Layout Row',
			'NodeCharLimit' => '2'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2700,
			'NodeTree' => '181',
			'NodeParentID' => '2699',
			'NodeType' => 'Layout Column',
			'NodeCharLimit' => '4'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2701,
			'NodeTree' => '181',
			'NodeParentID' => '2699',
			'NodeParentOrder' => '1',
			'NodeType' => 'Layout Column',
			'NodeCharLimit' => '8'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2702,
			'NodeTree' => '181',
			'NodeParentID' => '2700',
			'NodeType' => 'Page Block',
			'NodeOpts' => '89'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2703,
			'NodeTree' => '181',
			'NodeParentID' => '2702',
			'NodeType' => 'Instructions Raw',
			'NodePromptText' => '[ Documentation Navigation ] hard-coded in OpenDevelopment.php function printNavDevelopmentArea, via view openpolice.inc-documentation-navigation'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2704,
			'NodeTree' => '181',
			'NodeParentID' => '2701',
			'NodeParentOrder' => '1',
			'NodeType' => 'Instructions',
			'NodePromptText' => '<hr><h2 class="slBlueDark">Structure of OpenPolice Classes &amp; Objects</h2>
<p>This section provides a top-level map of the 

<b>Controllers folder</b>, and how its most influential classes and objects relate to each other.

</p>
<p>Some of these long chains of extensions were simply steps toward 
breaking up long files. I hope to keep splitting out functions which 
don\'t need to load in some thick trunks.</p>
        
<hr>
<p><b class="slBlueDark">OpenPolice</b> is the primary encompassing class for this software.</p>
<div class="pL20">
    <ul><li>extends OpenInitExtras
        <ul><li>extends OpenPartners
            <ul><li>extends OpenVolunteers
                <ul><li>instantiates VolunteerLeaderboard</li><li>extends OpenDevelopment
                    <ul><li>extends OpenReportToolsAdmin
                        <ul><li>extends OpenReportToolsOversight
                            <ul><li>extends OpenReportTools
                                <ul><li>extends OpenReport
                                    <ul><li>extends OpenDepts
                                        <ul><li>extends OpenListing
                                            <ul><li>extends OpenAjax
                                                <ul><li>extends OpenComplaintSaves
                                                    <ul><li>extends OpenComplaintConditions
                                                        <ul><li>extends OpenSessDataOverride
                                                            <ul><li>extends OpenComplaintPrints
                                                                <ul><li>extends OpenComplaintEmails
                                                                    <ul><li>extends OpenPoliceEvents
                                                                        <ul><li>extends OpenPoliceAllegations
                                                                            <ul><li>extends OpenPolicePeople
                                                                                <ul><li>extends OpenPoliceUtils
                                                                                    <ul><li>instantiates DepartmentScores</li><li>extends OpenPoliceVars
                                                                                        <ul><li>extends SurvLoop\Controllers\Tree\TreeSurvForm
                                                                                            <ul><li>instantiates OpenPoliceSearcher
                                                                                                <ul><li>extends SurvLoop\Controllers\Searcher
                                                                                                </li></ul>
                                                                                            </li></ul>
                                                                                        </li></ul>
                                                                                    </li></ul>
                                                                                </li></ul>
                                                                            </li></ul>
                                                                        </li></ul>
                                                                    </li></ul>
                                                                </li></ul>
                                                            </li></ul>
                                                        </li></ul>
                                                    </li></ul>
                                                </li></ul>
                                            </li></ul>
                                        </li></ul>
                                    </li></ul>
                                </li></ul>
                            </li></ul>
                        </li></ul>
                    </li></ul>
                </li></ul>
            </li></ul>
        </li></ul>
    </li></ul>
</div>
<hr>
<p><b class="slBlueDark">OpenPoliceAdmin</b> provides some additional customizations to SurvLoop defaults when users are logged in.</p>
<div class="pL20">
    <ul><li>extends OpenInitExtras
        <ul><li>extends SurvLoop\Controllers\Admin\AdminController
            <ul><li>instantiates OpenPoliceAdminMenu
                <ul><li>extends SurvLoop\Controllers\Admin\AdminMenu
                </li></ul>
            </li></ul>
        </li></ul>
    </li></ul>
</div>',
			'NodePromptAfter' => '<style>
ul li, ol li, .nPrompt ul li, .nPrompt ol li { margin: 0px 0px 10px -28px; }
</style>'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2705,
			'NodeTree' => '181',
			'NodeParentID' => '2701',
			'NodeParentOrder' => '2',
			'NodeType' => 'Instructions',
			'NodePromptText' => '<hr>
<h3 class="slBlueDark">Roadmap for Codebase<br></h3>
<p>Current plans for improving the organization and structures of the codebase...</p>
<div class="pL20"><ul><li>Add list of officers with complaints to department pages.</li><li>Complete MVP staff tools for managing complaints.</li><li>Require MFA for staff logins.<br></li><li>Start adding unit tests to functions and ideally whole files.</li><li>Break off any independent components from being within the OpenPolice extension of SurvLoop\'s Tree 
Trunk, which can instead instantiate side-classes when on 
demand.</li><li>Adding comments to the remaining functions.</li></ul></div><hr>
Updated October 25, 2019'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2706,
			'NodeTree' => '25',
			'NodeParentID' => '1098',
			'NodeType' => 'Instructions Raw',
			'NodePromptText' => '<div id="releaseNote" class="alert alert-danger w100 taC mT5">
See something inaccurate? Please <a href="/contact">contact us</a> or <a href="/volunteer">volunteer</a> to update this record.
</div>'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2707,
			'NodeTree' => '25',
			'NodeParentID' => '1098',
			'NodeParentOrder' => '1',
			'NodeType' => 'Layout Row',
			'NodeCharLimit' => '2'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2708,
			'NodeTree' => '25',
			'NodeParentID' => '2707',
			'NodeType' => 'Layout Column',
			'NodeCharLimit' => '8'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2709,
			'NodeTree' => '25',
			'NodeParentID' => '2707',
			'NodeParentOrder' => '1',
			'NodeType' => 'Layout Column',
			'NodeCharLimit' => '4'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2710,
			'NodeTree' => '25',
			'NodeParentID' => '2708',
			'NodeType' => 'Page Block',
			'NodeOpts' => '89'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2711,
			'NodeTree' => '25',
			'NodeParentID' => '2710',
			'NodeType' => 'Instructions Raw',
			'NodePromptText' => '[ Basic Department Info & Mapped Location ] hard-coded via OpenDepts.php function printBasicDeptInfo, to view openpolice.nodes.2711-dept-page-basic-info'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2712,
			'NodeTree' => '25',
			'NodeParentID' => '2708',
			'NodeParentOrder' => '1',
			'NodeType' => 'Page Block',
			'NodeOpts' => '89'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2713,
			'NodeTree' => '25',
			'NodeParentID' => '2712',
			'NodeType' => 'Instructions Raw',
			'NodePromptText' => '[ Calls to Action ] hard-coded via OpenDepts.php function printDeptCallsToAction, to view openpolice.nodes.2713-dept-page-calls-action'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2714,
			'NodeTree' => '25',
			'NodeParentID' => '2708',
			'NodeParentOrder' => '2',
			'NodeType' => 'Page Block',
			'NodeOpts' => '89'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2715,
			'NodeTree' => '25',
			'NodeParentID' => '2714',
			'NodeType' => 'Instructions Raw',
			'NodePromptText' => '[ Recent Complaints & Compliments ] hard-coded via OpenDepts.php function printDeptReportsRecent, to view openpolice.nodes.2715-dept-page-recent-reports'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2716,
			'NodeTree' => '25',
			'NodeParentID' => '2709',
			'NodeType' => 'Page Block',
			'NodeOpts' => '89'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2717,
			'NodeTree' => '25',
			'NodeParentID' => '2716',
			'NodeType' => 'Instructions Raw',
			'NodePromptText' => '[ Accessibility Score Breakdown ] hard-coded via OpenDepts.php function printDeptProfileAccScore, to view openpolice.nodes.2717-dept-page-accessibility-score'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2718,
			'NodeTree' => '25',
			'NodeParentID' => '2709',
			'NodeParentOrder' => '1',
			'NodeType' => 'Instructions Raw',
			'NodePromptText' => '[ How To File A Complaint ] hard-coded via OpenDepts.php function printDeptProfileHowToFile, to view openpolice.nodes.2718-dept-page-how-to-file'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2719,
			'NodeTree' => '25',
			'NodeParentID' => '2708',
			'NodeParentOrder' => '3',
			'NodeType' => 'Page Block',
			'NodeOpts' => '89'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2720,
			'NodeTree' => '25',
			'NodeParentID' => '2719',
			'NodeType' => 'Instructions Raw',
			'NodePromptText' => '[ List of Officers Allegations ] hard-coded via OpenOfficers.php function printDeptOfficerComplaints, to view openpolice.nodes.2720-dept-page-officer-listing'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2721,
			'NodeTree' => '184',
			'NodeType' => 'Data Manip: New'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2722,
			'NodeTree' => '184',
			'NodeParentID' => '2721',
			'NodeType' => 'Page',
			'NodePromptNotes' => 'edit',
			'NodePromptAfter' => 'Verified Officer Record::M::::M::::M::'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2723,
			'NodeTree' => '184',
			'NodeParentID' => '2722',
			'NodeType' => 'Instructions',
			'NodePromptText' => '<h2>Edit Verified Officer Record<br></h2><p>This is a core record used to track a single officer related to multiple complaints or departments over time.<br></p>'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2724,
			'NodeTree' => '186',
			'NodeType' => 'Page',
			'NodePromptNotes' => 'officer',
			'NodePromptAfter' => 'Officer [[Officer Name]]::M::::M::::M::',
			'NodeResponseSet' => '184',
			'NodeDataBranch' => 'OfficersVerified',
			'NodeCharLimit' => '-1'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2725,
			'NodeTree' => '186',
			'NodeParentID' => '2724',
			'NodeType' => 'Instructions Raw',
			'NodePromptText' => 'Officer Profile Page Coming Soon<br>'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2726,
			'NodeTree' => '184',
			'NodeParentID' => '2722',
			'NodeParentOrder' => '1',
			'NodeType' => 'Radio',
			'NodePromptText' => 'Officer Verification Status',
			'NodeResponseSet' => 'Definition::Verified Officer Status',
			'NodeDataStore' => 'OfficersVerified:OffVerStatus',
			'NodeOpts' => '5'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2727,
			'NodeTree' => '184',
			'NodeParentID' => '2722',
			'NodeParentOrder' => '2',
			'NodeType' => 'Loop Cycle',
			'NodeResponseSet' => 'LoopItems::Departments',
			'NodeDataBranch' => 'LinksOfficerDept'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2728,
			'NodeTree' => '184',
			'NodeParentID' => '2727',
			'NodeParentOrder' => '1',
			'NodeType' => 'Date',
			'NodePromptText' => 'Verified Date of Employment with Department',
			'NodeDataStore' => 'LinksOfficerDept:LnkOffDeptDateVerified'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2729,
			'NodeTree' => '184',
			'NodeParentID' => '2730',
			'NodeType' => 'Data Print',
			'NodeDataStore' => 'Departments:DeptName'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2730,
			'NodeTree' => '184',
			'NodeParentID' => '2727',
			'NodeType' => 'Data Manip: Wrap',
			'NodeDataBranch' => 'Departments'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2731,
			'NodeTree' => '184',
			'NodeParentID' => '2721',
			'NodeParentOrder' => '1',
			'NodeType' => 'Page',
			'NodePromptNotes' => 'redirect',
			'NodePromptAfter' => 'Post-Edit Redirect::M::::M::::M::',
			'NodeOpts' => '29'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2732,
			'NodeTree' => '184',
			'NodeParentID' => '2731',
			'NodeType' => 'Instructions Raw'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2751,
			'NodeTree' => '196',
			'NodeType' => 'Page',
			'NodePromptNotes' => 'development-team-update',
			'NodePromptAfter' => 'Development Team Update::M::This contains some status updates, plans, and announcements related to software development for OpenPolice.org.::M::::M::',
			'NodeCharLimit' => '-1'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2752,
			'NodeTree' => '196',
			'NodeParentID' => '2756',
			'NodeParentOrder' => '1',
			'NodeType' => 'Instructions',
			'NodePromptText' => '<h3>Morgan\'s Current ToDo List</h3>
<p>The never ending storrrr-ryyy!..</p><ul><li>Begin partner admin area for Legal Aid Society and Asheville Police Transparency Project to manage their clinics.</li><li>Fix issues reported by Alyx, and get back to her.</li><li>Complaint Management top upgrade list<ul><li>Admin Tools to upload PDFs for public and sensitive complaint reports. These should be delivered when people click the PDF link on the site too.</li><li>Attached sensitive PDF to email sent through the admin tools to complainants or departments.</li><li>Determine first approach to try, and build admin tools to alert volunteers for need to research department info.</li><li>Upgrade email to investigative agency to include entire body of complaint in text.</li><li>Auto-select more emails for the next few steps which have been ironed out for admins.</li><li>Build into the admin tools any further instructions needed by staff during the processes.</li><li>Load individual forms on demand to reduce initial load times, and page timeouts.<br></li></ul></li><li>Layout department accessibility scores page more like the complaints search results page.</li><li>Send followup emails to any incomplete survey users.</li><li>Send followup emails to beta invites who haven\'t started the survey yet.</li><li>Finish Steve\'s general site layout redesign.</li><li>Finish pending issues and items Steve documented in Slack while dogfooding.</li><li>Finish updating Compliment survey, and sent it to the two beta users who requested it.</li><li>Enable users to upload profile pictures, and integrate with complaint reports and previews.</li><li>Integrate and require MFA for all staff user accounts.</li><li>Add protection to contact form.</li><li>Lower-priority stuff...<br><br></li></ul>',
			'NodeOpts' => '89'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2755,
			'NodeTree' => '196',
			'NodeParentID' => '2751',
			'NodeType' => 'Layout Row',
			'NodeCharLimit' => '2'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2756,
			'NodeTree' => '196',
			'NodeParentID' => '2755',
			'NodeType' => 'Layout Column',
			'NodeCharLimit' => '8'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2757,
			'NodeTree' => '196',
			'NodeParentID' => '2755',
			'NodeParentOrder' => '1',
			'NodeType' => 'Layout Column',
			'NodeCharLimit' => '4'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2758,
			'NodeTree' => '196',
			'NodeParentID' => '2757',
			'NodeType' => 'Page Block',
			'NodeOpts' => '89'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2759,
			'NodeTree' => '196',
			'NodeParentID' => '2758',
			'NodeType' => 'Instructions Raw',
			'NodePromptText' => '[ Documentation Navigation ] hard-coded in OpenDevelopment.php function printNavDevelopmentArea, via view openpolice.inc-documentation-navigation'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2760,
			'NodeTree' => '196',
			'NodeParentID' => '2756',
			'NodeType' => 'Instructions',
			'NodePromptText' => '<h2 class="slBlueDark">Software Development Team Updates</h2>',
			'NodeOpts' => '89'
		]);
		DB::table('SL_Node')->insert([
			'NodeID' => 2761,
			'NodeTree' => '196',
			'NodeParentID' => '2756',
			'NodeParentOrder' => '2',
			'NodeType' => 'Instructions',
			'NodePromptText' => '<h3>Introduction for Alyx</h3>
<p>Hi Alyx!</p><p><br></p>',
			'NodeOpts' => '89'
		]);
	
	DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 256,
			'NodeResNode' => '352',
			'NodeResEng' => 'Yes',
			'NodeResValue' => 'Y'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 512,
			'NodeResNode' => '445',
			'NodeResOrd' => '7',
			'NodeResEng' => '75-84',
			'NodeResValue' => '108'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 1,
			'NodeResNode' => '146',
			'NodeResEng' => '<span class="fPerc125 slBlueDark">Yes, Go Gold!</span>',
			'NodeResValue' => 'Gold'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 257,
			'NodeResNode' => '352',
			'NodeResOrd' => '1',
			'NodeResEng' => 'No',
			'NodeResValue' => 'N'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 513,
			'NodeResNode' => '445',
			'NodeResOrd' => '8',
			'NodeResEng' => 'Over 84',
			'NodeResValue' => '109'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 2,
			'NodeResNode' => '146',
			'NodeResOrd' => '1',
			'NodeResEng' => 'No thanks, please submit my complaint as is.',
			'NodeResValue' => 'Silver'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 258,
			'NodeResNode' => '352',
			'NodeResOrd' => '2',
			'NodeResEng' => 'Not sure',
			'NodeResValue' => '?'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 4,
			'NodeResNode' => '28',
			'NodeResEng' => '<b>I was a victim.</b> I experienced police misconduct.',
			'NodeResValue' => 'Victim'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 5,
			'NodeResNode' => '28',
			'NodeResOrd' => '1',
			'NodeResEng' => '<b>I was a witness.</b> I was at the scene and saw police misconduct against someone else.',
			'NodeResValue' => 'Witness'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 6,
			'NodeResNode' => '28',
			'NodeResOrd' => '2',
			'NodeResEng' => 'I was not at the scene, but I\'m helping a victim or a witness submit this complaint.',
			'NodeResValue' => 'Helper'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 262,
			'NodeResNode' => '362',
			'NodeResEng' => 'Yes',
			'NodeResValue' => 'Y',
			'NodeResShowKids' => '365'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 263,
			'NodeResNode' => '362',
			'NodeResOrd' => '1',
			'NodeResEng' => 'No',
			'NodeResValue' => 'N'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 8,
			'NodeResNode' => '42',
			'NodeResEng' => 'Male',
			'NodeResValue' => 'M'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 264,
			'NodeResNode' => '362',
			'NodeResOrd' => '2',
			'NodeResEng' => 'Not sure',
			'NodeResValue' => '?'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 9,
			'NodeResNode' => '42',
			'NodeResOrd' => '1',
			'NodeResEng' => 'Female',
			'NodeResValue' => 'F'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 265,
			'NodeResNode' => '370',
			'NodeResEng' => 'Yes',
			'NodeResValue' => 'Y',
			'NodeResShowKids' => '1157'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 10,
			'NodeResNode' => '47',
			'NodeResEng' => 'Yes',
			'NodeResValue' => 'Y'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 266,
			'NodeResNode' => '370',
			'NodeResOrd' => '1',
			'NodeResEng' => 'No',
			'NodeResValue' => 'N'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 11,
			'NodeResNode' => '47',
			'NodeResOrd' => '1',
			'NodeResEng' => 'No',
			'NodeResValue' => 'N'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 267,
			'NodeResNode' => '370',
			'NodeResOrd' => '2',
			'NodeResEng' => 'Not sure',
			'NodeResValue' => '?'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 779,
			'NodeResNode' => '620',
			'NodeResEng' => 'Fist (Closed Hand)',
			'NodeResValue' => '237'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 12,
			'NodeResNode' => '47',
			'NodeResOrd' => '2',
			'NodeResEng' => 'Not sure',
			'NodeResValue' => '?'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 268,
			'NodeResNode' => '379',
			'NodeResEng' => 'Yes',
			'NodeResValue' => 'Y',
			'NodeResShowKids' => '380'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 524,
			'NodeResNode' => '563',
			'NodeResEng' => 'Yes',
			'NodeResValue' => 'Y'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 780,
			'NodeResNode' => '620',
			'NodeResOrd' => '1',
			'NodeResEng' => 'Slap (Open Hand)',
			'NodeResValue' => '238'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 269,
			'NodeResNode' => '379',
			'NodeResOrd' => '1',
			'NodeResEng' => 'No',
			'NodeResValue' => 'N'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 525,
			'NodeResNode' => '563',
			'NodeResOrd' => '1',
			'NodeResEng' => 'No',
			'NodeResValue' => 'N'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 781,
			'NodeResNode' => '620',
			'NodeResOrd' => '2',
			'NodeResEng' => 'Kick (Feet)',
			'NodeResValue' => '239'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 270,
			'NodeResNode' => '379',
			'NodeResOrd' => '2',
			'NodeResEng' => 'Not sure',
			'NodeResValue' => '?'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 526,
			'NodeResNode' => '563',
			'NodeResOrd' => '2',
			'NodeResEng' => 'Not sure',
			'NodeResValue' => '?'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 782,
			'NodeResNode' => '620',
			'NodeResOrd' => '3',
			'NodeResEng' => 'Knee',
			'NodeResValue' => '240'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 783,
			'NodeResNode' => '620',
			'NodeResOrd' => '4',
			'NodeResEng' => 'Elbow',
			'NodeResValue' => '241'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 16,
			'NodeResNode' => '56',
			'NodeResEng' => 'Yes',
			'NodeResValue' => 'Y',
			'NodeResShowKids' => '1131'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 784,
			'NodeResNode' => '620',
			'NodeResOrd' => '5',
			'NodeResEng' => 'Head',
			'NodeResValue' => '242'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 17,
			'NodeResNode' => '56',
			'NodeResOrd' => '1',
			'NodeResEng' => 'No',
			'NodeResValue' => 'N'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 18,
			'NodeResNode' => '56',
			'NodeResOrd' => '2',
			'NodeResEng' => 'Not sure',
			'NodeResValue' => '?',
			'NodeResShowKids' => '1131'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 20,
			'NodeResNode' => '70',
			'NodeResEng' => 'Yes',
			'NodeResValue' => 'Y',
			'NodeResShowKids' => '1132'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 21,
			'NodeResNode' => '70',
			'NodeResOrd' => '1',
			'NodeResEng' => 'No',
			'NodeResValue' => 'N'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 277,
			'NodeResNode' => '385',
			'NodeResEng' => 'Yes',
			'NodeResValue' => 'Y',
			'NodeResShowKids' => '1155'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 22,
			'NodeResNode' => '70',
			'NodeResOrd' => '2',
			'NodeResEng' => 'Not sure',
			'NodeResValue' => '?',
			'NodeResShowKids' => '1132'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 278,
			'NodeResNode' => '385',
			'NodeResOrd' => '1',
			'NodeResEng' => 'No',
			'NodeResValue' => 'N'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 23,
			'NodeResNode' => '73',
			'NodeResEng' => 'Male',
			'NodeResValue' => 'M'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 279,
			'NodeResNode' => '385',
			'NodeResOrd' => '2',
			'NodeResEng' => 'Not sure',
			'NodeResValue' => '?',
			'NodeResShowKids' => '1155'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 24,
			'NodeResNode' => '73',
			'NodeResOrd' => '1',
			'NodeResEng' => 'Female',
			'NodeResValue' => 'F'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 280,
			'NodeResNode' => '388',
			'NodeResEng' => 'Yes',
			'NodeResValue' => 'Y'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 25,
			'NodeResNode' => '73',
			'NodeResOrd' => '2',
			'NodeResEng' => 'Not sure',
			'NodeResValue' => '?'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 281,
			'NodeResNode' => '388',
			'NodeResOrd' => '1',
			'NodeResEng' => 'No',
			'NodeResValue' => 'N'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 282,
			'NodeResNode' => '388',
			'NodeResOrd' => '2',
			'NodeResEng' => 'Not sure',
			'NodeResValue' => '?'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 29,
			'NodeResNode' => '447',
			'NodeResEng' => 'Yes',
			'NodeResValue' => 'Y',
			'NodeResShowKids' => '1133'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 30,
			'NodeResNode' => '447',
			'NodeResOrd' => '1',
			'NodeResEng' => 'No',
			'NodeResValue' => 'N'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 31,
			'NodeResNode' => '447',
			'NodeResOrd' => '2',
			'NodeResEng' => 'Not sure',
			'NodeResValue' => '?',
			'NodeResShowKids' => '1133'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 32,
			'NodeResNode' => '89',
			'NodeResEng' => 'Yes',
			'NodeResValue' => 'Y'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 800,
			'NodeResNode' => '622',
			'NodeResEng' => 'Yes',
			'NodeResValue' => 'Y',
			'NodeResShowKids' => '625'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 33,
			'NodeResNode' => '89',
			'NodeResOrd' => '1',
			'NodeResEng' => 'No',
			'NodeResValue' => 'N'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 289,
			'NodeResNode' => '402',
			'NodeResEng' => 'Yes',
			'NodeResValue' => 'Y',
			'NodeResShowKids' => '403'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 801,
			'NodeResNode' => '622',
			'NodeResOrd' => '1',
			'NodeResEng' => 'No',
			'NodeResValue' => 'N'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 34,
			'NodeResNode' => '89',
			'NodeResOrd' => '2',
			'NodeResEng' => 'Not sure',
			'NodeResValue' => '?'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 290,
			'NodeResNode' => '402',
			'NodeResOrd' => '1',
			'NodeResEng' => 'No',
			'NodeResValue' => 'N'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 546,
			'NodeResNode' => '299',
			'NodeResEng' => 'Walking Violation',
			'NodeResValue' => '326',
			'NodeResShowKids' => '300'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 802,
			'NodeResNode' => '622',
			'NodeResOrd' => '2',
			'NodeResEng' => 'Not sure',
			'NodeResValue' => '?',
			'NodeResShowKids' => '625'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 291,
			'NodeResNode' => '402',
			'NodeResOrd' => '2',
			'NodeResEng' => 'Not sure',
			'NodeResValue' => '?'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 547,
			'NodeResNode' => '299',
			'NodeResOrd' => '1',
			'NodeResEng' => 'Disturbing the Peace',
			'NodeResValue' => '327',
			'NodeResShowKids' => '300'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 803,
			'NodeResNode' => '625',
			'NodeResEng' => 'Yes',
			'NodeResValue' => 'Y'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 292,
			'NodeResNode' => '406',
			'NodeResEng' => 'Yes',
			'NodeResValue' => 'Y',
			'NodeResShowKids' => '407'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 548,
			'NodeResNode' => '299',
			'NodeResOrd' => '2',
			'NodeResEng' => 'Loitering/Trespassing',
			'NodeResValue' => '405',
			'NodeResShowKids' => '300'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 804,
			'NodeResNode' => '625',
			'NodeResOrd' => '1',
			'NodeResEng' => 'No',
			'NodeResValue' => 'N'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 293,
			'NodeResNode' => '406',
			'NodeResOrd' => '1',
			'NodeResEng' => 'No',
			'NodeResValue' => 'N'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 549,
			'NodeResNode' => '299',
			'NodeResOrd' => '3',
			'NodeResEng' => 'Public Intoxication',
			'NodeResValue' => '328',
			'NodeResShowKids' => '300'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 805,
			'NodeResNode' => '625',
			'NodeResOrd' => '2',
			'NodeResEng' => 'Not sure',
			'NodeResValue' => '?'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 38,
			'NodeResNode' => '102',
			'NodeResEng' => 'Yes',
			'NodeResValue' => 'Y',
			'NodeResShowKids' => '1134'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 294,
			'NodeResNode' => '406',
			'NodeResOrd' => '2',
			'NodeResEng' => 'Not sure',
			'NodeResValue' => '?'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 550,
			'NodeResNode' => '299',
			'NodeResOrd' => '4',
			'NodeResEng' => 'Illegal Drug Violation',
			'NodeResValue' => '329',
			'NodeResShowKids' => '300'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 806,
			'NodeResNode' => '623',
			'NodeResEng' => 'Yes',
			'NodeResValue' => 'Y',
			'NodeResShowKids' => '626'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 39,
			'NodeResNode' => '102',
			'NodeResOrd' => '1',
			'NodeResEng' => 'No',
			'NodeResValue' => 'N'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 551,
			'NodeResNode' => '299',
			'NodeResOrd' => '5',
			'NodeResEng' => 'Suspected of Something Else',
			'NodeResValue' => '330',
			'NodeResShowKids' => '300'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 807,
			'NodeResNode' => '623',
			'NodeResOrd' => '1',
			'NodeResEng' => 'No',
			'NodeResValue' => 'N'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 40,
			'NodeResNode' => '102',
			'NodeResOrd' => '2',
			'NodeResEng' => 'Not sure',
			'NodeResValue' => '?',
			'NodeResShowKids' => '1134'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 552,
			'NodeResNode' => '299',
			'NodeResOrd' => '6',
			'NodeResEng' => 'Matched a Description of Someone',
			'NodeResValue' => '331',
			'NodeResShowKids' => '300'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 808,
			'NodeResNode' => '623',
			'NodeResOrd' => '2',
			'NodeResEng' => 'Not sure',
			'NodeResValue' => '?',
			'NodeResShowKids' => '626'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 553,
			'NodeResNode' => '299',
			'NodeResOrd' => '7',
			'NodeResEng' => 'Investigating Someone Else',
			'NodeResValue' => '332',
			'NodeResShowKids' => '300'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 809,
			'NodeResNode' => '626',
			'NodeResEng' => 'Yes',
			'NodeResValue' => 'Y'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 298,
			'NodeResNode' => '427',
			'NodeResEng' => '<span class="allegation">Yes (This is an allegation.)</span>',
			'NodeResValue' => 'Y',
			'NodeResShowKids' => '545'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 554,
			'NodeResNode' => '299',
			'NodeResOrd' => '8',
			'NodeResEng' => 'Providing Assistance/Responding to Call',
			'NodeResValue' => '333',
			'NodeResShowKids' => '300'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 810,
			'NodeResNode' => '626',
			'NodeResOrd' => '1',
			'NodeResEng' => 'No',
			'NodeResValue' => 'N'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 299,
			'NodeResNode' => '427',
			'NodeResOrd' => '1',
			'NodeResEng' => 'No',
			'NodeResValue' => 'N'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 555,
			'NodeResNode' => '299',
			'NodeResOrd' => '9',
			'NodeResEng' => 'Other Reason',
			'NodeResValue' => '334',
			'NodeResShowKids' => '300'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 811,
			'NodeResNode' => '626',
			'NodeResOrd' => '2',
			'NodeResEng' => 'Not sure',
			'NodeResValue' => '?'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 300,
			'NodeResNode' => '427',
			'NodeResOrd' => '2',
			'NodeResEng' => 'Not sure',
			'NodeResValue' => '?'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 556,
			'NodeResNode' => '297',
			'NodeResEng' => 'Speeding',
			'NodeResValue' => '336',
			'NodeResShowKids' => '298'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 812,
			'NodeResNode' => '624',
			'NodeResEng' => 'Yes',
			'NodeResValue' => 'Y'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 45,
			'NodeResNode' => '129',
			'NodeResEng' => 'Yes',
			'NodeResValue' => 'Y'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 301,
			'NodeResNode' => '423',
			'NodeResEng' => 'Yes',
			'NodeResValue' => 'Y'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 557,
			'NodeResNode' => '297',
			'NodeResOrd' => '1',
			'NodeResEng' => 'Vehicle Defect',
			'NodeResValue' => '337',
			'NodeResShowKids' => '298'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 813,
			'NodeResNode' => '624',
			'NodeResOrd' => '1',
			'NodeResEng' => 'No',
			'NodeResValue' => 'N'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 46,
			'NodeResNode' => '129',
			'NodeResOrd' => '1',
			'NodeResEng' => 'No',
			'NodeResValue' => 'N'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 302,
			'NodeResNode' => '423',
			'NodeResOrd' => '1',
			'NodeResEng' => 'No',
			'NodeResValue' => 'N'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 558,
			'NodeResNode' => '297',
			'NodeResOrd' => '2',
			'NodeResEng' => 'Expired Registration',
			'NodeResValue' => '338',
			'NodeResShowKids' => '298'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 814,
			'NodeResNode' => '624',
			'NodeResOrd' => '2',
			'NodeResEng' => 'Not sure',
			'NodeResValue' => '?'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 47,
			'NodeResNode' => '129',
			'NodeResOrd' => '2',
			'NodeResEng' => 'Not sure',
			'NodeResValue' => '?'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 303,
			'NodeResNode' => '423',
			'NodeResOrd' => '2',
			'NodeResEng' => 'Not sure',
			'NodeResValue' => '?'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 559,
			'NodeResNode' => '297',
			'NodeResOrd' => '3',
			'NodeResEng' => 'License Plate Violation',
			'NodeResValue' => '339',
			'NodeResShowKids' => '298'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 815,
			'NodeResNode' => '627',
			'NodeResEng' => 'Yes',
			'NodeResValue' => 'Y',
			'NodeResShowKids' => '628'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 304,
			'NodeResNode' => '425',
			'NodeResEng' => 'Yes',
			'NodeResValue' => 'Y',
			'NodeResShowKids' => '426'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 560,
			'NodeResNode' => '297',
			'NodeResOrd' => '4',
			'NodeResEng' => 'Illegal Turn or Lane Change',
			'NodeResValue' => '340',
			'NodeResShowKids' => '298'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 816,
			'NodeResNode' => '627',
			'NodeResOrd' => '1',
			'NodeResEng' => 'No',
			'NodeResValue' => 'N'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 305,
			'NodeResNode' => '425',
			'NodeResOrd' => '1',
			'NodeResEng' => 'No',
			'NodeResValue' => 'N'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 561,
			'NodeResNode' => '297',
			'NodeResOrd' => '5',
			'NodeResEng' => 'Seatbelt or Cell Phone Violation',
			'NodeResValue' => '341',
			'NodeResShowKids' => '298'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 817,
			'NodeResNode' => '627',
			'NodeResOrd' => '2',
			'NodeResEng' => 'Not sure',
			'NodeResValue' => '?',
			'NodeResShowKids' => '628'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 306,
			'NodeResNode' => '425',
			'NodeResOrd' => '2',
			'NodeResEng' => 'Not sure',
			'NodeResValue' => '?',
			'NodeResShowKids' => '426'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 562,
			'NodeResNode' => '297',
			'NodeResOrd' => '6',
			'NodeResEng' => 'Stop Sign/Light Violation',
			'NodeResValue' => '342',
			'NodeResShowKids' => '298'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 818,
			'NodeResNode' => '386',
			'NodeResEng' => 'Assault on an Officer',
			'NodeResValue' => '133'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 563,
			'NodeResNode' => '297',
			'NodeResOrd' => '7',
			'NodeResEng' => 'Driving While Impaired',
			'NodeResValue' => '343',
			'NodeResShowKids' => '298'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 819,
			'NodeResNode' => '386',
			'NodeResOrd' => '1',
			'NodeResEng' => 'Disorderly Conduct',
			'NodeResValue' => '134'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 564,
			'NodeResNode' => '297',
			'NodeResOrd' => '8',
			'NodeResEng' => 'Sobriety Checkpoint',
			'NodeResValue' => '344',
			'NodeResShowKids' => '298'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 820,
			'NodeResNode' => '386',
			'NodeResOrd' => '2',
			'NodeResEng' => 'Disturbing the Peace',
			'NodeResValue' => '135'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 565,
			'NodeResNode' => '297',
			'NodeResOrd' => '9',
			'NodeResEng' => 'Border Checkpoint',
			'NodeResValue' => '345',
			'NodeResShowKids' => '298'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 821,
			'NodeResNode' => '386',
			'NodeResOrd' => '3',
			'NodeResEng' => 'Loitering/Trespassing',
			'NodeResValue' => '401'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 566,
			'NodeResNode' => '297',
			'NodeResOrd' => '10',
			'NodeResEng' => 'Loitering/Trespassing',
			'NodeResValue' => '406',
			'NodeResShowKids' => '298'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 822,
			'NodeResNode' => '386',
			'NodeResOrd' => '4',
			'NodeResEng' => 'Failure to Obey/Comply',
			'NodeResValue' => '136'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 55,
			'NodeResNode' => '163',
			'NodeResEng' => 'This officer <b class="slBlueDark">engaged in misconduct</b>',
			'NodeResValue' => 'Subject Officer'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 567,
			'NodeResNode' => '297',
			'NodeResOrd' => '11',
			'NodeResEng' => 'Other Reason',
			'NodeResValue' => '346'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 823,
			'NodeResNode' => '386',
			'NodeResOrd' => '5',
			'NodeResEng' => 'Obstructing/Interfering',
			'NodeResValue' => '137'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 56,
			'NodeResNode' => '163',
			'NodeResOrd' => '1',
			'NodeResEng' => 'This officer <b class="slBlueDark">witnessed misconduct</b> but is not the subject of this complaint',
			'NodeResValue' => 'Witness Officer'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 312,
			'NodeResNode' => '436',
			'NodeResEng' => 'Yes',
			'NodeResValue' => 'Y',
			'NodeResShowKids' => '433'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 568,
			'NodeResNode' => '335',
			'NodeResOrd' => '2',
			'NodeResEng' => 'Not sure',
			'NodeResValue' => '?'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 824,
			'NodeResNode' => '386',
			'NodeResOrd' => '6',
			'NodeResEng' => 'Resisting Arrest',
			'NodeResValue' => '138'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 57,
			'NodeResNode' => '164',
			'NodeResEng' => 'On-Duty',
			'NodeResValue' => 'On-Duty'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 313,
			'NodeResNode' => '436',
			'NodeResOrd' => '1',
			'NodeResEng' => 'No',
			'NodeResValue' => 'N'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 825,
			'NodeResNode' => '386',
			'NodeResOrd' => '7',
			'NodeResEng' => 'Public Intoxication',
			'NodeResValue' => '139'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 58,
			'NodeResNode' => '164',
			'NodeResOrd' => '1',
			'NodeResEng' => 'Off-Duty',
			'NodeResValue' => 'Off-Duty'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 314,
			'NodeResNode' => '436',
			'NodeResOrd' => '2',
			'NodeResEng' => 'Not sure',
			'NodeResValue' => '?'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 826,
			'NodeResNode' => '386',
			'NodeResOrd' => '8',
			'NodeResEng' => 'Marijuana Possession',
			'NodeResValue' => '140'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 59,
			'NodeResNode' => '164',
			'NodeResOrd' => '2',
			'NodeResEng' => 'Not sure',
			'NodeResValue' => '?'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 315,
			'NodeResNode' => '443',
			'NodeResEng' => 'Yes',
			'NodeResValue' => 'Y',
			'NodeResShowKids' => '1890'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 827,
			'NodeResNode' => '386',
			'NodeResOrd' => '9',
			'NodeResEng' => 'Illegal Drugs Other Than Marijuana',
			'NodeResValue' => '141'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 60,
			'NodeResNode' => '165',
			'NodeResEng' => 'Yes',
			'NodeResValue' => 'Y',
			'NodeResShowKids' => '1135'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 316,
			'NodeResNode' => '443',
			'NodeResOrd' => '1',
			'NodeResEng' => 'No',
			'NodeResValue' => 'N',
			'NodeResShowKids' => '444'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 828,
			'NodeResNode' => '386',
			'NodeResOrd' => '10',
			'NodeResEng' => 'Weapons Violation',
			'NodeResValue' => '411'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 61,
			'NodeResNode' => '165',
			'NodeResOrd' => '1',
			'NodeResEng' => 'No',
			'NodeResValue' => 'N'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 317,
			'NodeResNode' => '443',
			'NodeResOrd' => '2',
			'NodeResEng' => 'Not sure',
			'NodeResValue' => '?',
			'NodeResShowKids' => '444'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 829,
			'NodeResNode' => '173',
			'NodeResEng' => 'Under 25',
			'NodeResValue' => '435'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 62,
			'NodeResNode' => '165',
			'NodeResOrd' => '2',
			'NodeResEng' => 'Not sure',
			'NodeResValue' => '?',
			'NodeResShowKids' => '1135'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 318,
			'NodeResNode' => '444',
			'NodeResEng' => 'Yes',
			'NodeResValue' => 'Y'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 830,
			'NodeResNode' => '173',
			'NodeResOrd' => '1',
			'NodeResEng' => '25-34',
			'NodeResValue' => '436'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 319,
			'NodeResNode' => '444',
			'NodeResOrd' => '1',
			'NodeResEng' => 'No',
			'NodeResValue' => 'N'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 831,
			'NodeResNode' => '173',
			'NodeResOrd' => '2',
			'NodeResEng' => '35-44',
			'NodeResValue' => '437'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 320,
			'NodeResNode' => '444',
			'NodeResOrd' => '2',
			'NodeResEng' => 'Not sure',
			'NodeResValue' => '?'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 832,
			'NodeResNode' => '173',
			'NodeResOrd' => '3',
			'NodeResEng' => '45-54',
			'NodeResValue' => '438'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 321,
			'NodeResNode' => '450',
			'NodeResEng' => '17',
			'NodeResValue' => '117'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 833,
			'NodeResNode' => '173',
			'NodeResOrd' => '4',
			'NodeResEng' => '55-64',
			'NodeResValue' => '439'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 834,
			'NodeResNode' => '173',
			'NodeResOrd' => '5',
			'NodeResEng' => 'Over 64',
			'NodeResValue' => '440'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 69,
			'NodeResNode' => '187',
			'NodeResEng' => 'Yes',
			'NodeResValue' => 'Y'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 70,
			'NodeResNode' => '187',
			'NodeResOrd' => '1',
			'NodeResEng' => 'No',
			'NodeResValue' => 'N'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 71,
			'NodeResNode' => '187',
			'NodeResOrd' => '2',
			'NodeResEng' => 'Not sure',
			'NodeResValue' => '?'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 75,
			'NodeResNode' => '204',
			'NodeResEng' => 'Yes',
			'NodeResValue' => 'Y',
			'NodeResShowKids' => '2033'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 587,
			'NodeResNode' => '591',
			'NodeResEng' => '<span class="allegation">Yes  (This is an allegation.)</span>',
			'NodeResValue' => 'Y',
			'NodeResShowKids' => '592'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 76,
			'NodeResNode' => '204',
			'NodeResOrd' => '1',
			'NodeResEng' => 'No',
			'NodeResValue' => 'N'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 588,
			'NodeResNode' => '591',
			'NodeResOrd' => '1',
			'NodeResEng' => 'No',
			'NodeResValue' => 'N'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 77,
			'NodeResNode' => '204',
			'NodeResOrd' => '2',
			'NodeResEng' => 'Not sure',
			'NodeResValue' => '?'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 589,
			'NodeResNode' => '591',
			'NodeResOrd' => '2',
			'NodeResEng' => 'Not sure',
			'NodeResValue' => '?'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 78,
			'NodeResNode' => '205',
			'NodeResEng' => '<span class="allegation">Yes (This is an allegation.)</span>',
			'NodeResValue' => 'Y',
			'NodeResShowKids' => '450'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 334,
			'NodeResNode' => '67',
			'NodeResEng' => '0-15',
			'NodeResValue' => '101'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 590,
			'NodeResNode' => '243',
			'NodeResEng' => 'No',
			'NodeResValue' => '276'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 79,
			'NodeResNode' => '205',
			'NodeResOrd' => '1',
			'NodeResEng' => 'No',
			'NodeResValue' => 'N'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 335,
			'NodeResNode' => '67',
			'NodeResOrd' => '1',
			'NodeResEng' => '16-24',
			'NodeResValue' => '102'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 591,
			'NodeResNode' => '243',
			'NodeResOrd' => '1',
			'NodeResEng' => 'Not sure',
			'NodeResValue' => '281'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 80,
			'NodeResNode' => '205',
			'NodeResOrd' => '2',
			'NodeResEng' => 'Not sure',
			'NodeResValue' => '?'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 336,
			'NodeResNode' => '67',
			'NodeResOrd' => '2',
			'NodeResEng' => '25-34',
			'NodeResValue' => '103'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 592,
			'NodeResNode' => '243',
			'NodeResOrd' => '2',
			'NodeResEng' => '<span class="allegation">Wrongfully Displayed Weapon</span>',
			'NodeResValue' => '277',
			'NodeResShowKids' => '546'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 337,
			'NodeResNode' => '67',
			'NodeResOrd' => '3',
			'NodeResEng' => '35-44',
			'NodeResValue' => '104'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 593,
			'NodeResNode' => '243',
			'NodeResOrd' => '3',
			'NodeResEng' => '<span class="allegation">Wrongfully Drew Weapon</span>',
			'NodeResValue' => '278',
			'NodeResShowKids' => '546'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 338,
			'NodeResNode' => '67',
			'NodeResOrd' => '4',
			'NodeResEng' => '45-54',
			'NodeResValue' => '105'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 594,
			'NodeResNode' => '243',
			'NodeResOrd' => '4',
			'NodeResEng' => '<span class="allegation">Wrongfully Pointed Weapon</span>',
			'NodeResValue' => '279',
			'NodeResShowKids' => '546'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 83,
			'NodeResNode' => '209',
			'NodeResEng' => 'Yes',
			'NodeResValue' => 'Y',
			'NodeResShowKids' => '210'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 339,
			'NodeResNode' => '67',
			'NodeResOrd' => '5',
			'NodeResEng' => '55-64',
			'NodeResValue' => '106'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 595,
			'NodeResNode' => '243',
			'NodeResOrd' => '5',
			'NodeResEng' => '<span class="allegation">Wrongfully Fired or Discharged Weapon</span>',
			'NodeResValue' => '280',
			'NodeResShowKids' => '546'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 84,
			'NodeResNode' => '209',
			'NodeResOrd' => '1',
			'NodeResEng' => 'No',
			'NodeResValue' => 'N'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 340,
			'NodeResNode' => '67',
			'NodeResOrd' => '6',
			'NodeResEng' => '65-74',
			'NodeResValue' => '107'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 596,
			'NodeResNode' => '28',
			'NodeResOrd' => '3',
			'NodeResEng' => 'I was not at the scene, but I\'m upset about police brutality on the news or on the internet.?',
			'NodeResValue' => 'Upset'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 85,
			'NodeResNode' => '209',
			'NodeResOrd' => '2',
			'NodeResEng' => 'Not sure',
			'NodeResValue' => '?'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 341,
			'NodeResNode' => '67',
			'NodeResOrd' => '7',
			'NodeResEng' => '75-84',
			'NodeResValue' => '108'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 86,
			'NodeResNode' => '210',
			'NodeResEng' => '<span class="allegation">Yes (This is an allegation.)</span>',
			'NodeResValue' => 'Y',
			'NodeResShowKids' => '537'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 342,
			'NodeResNode' => '67',
			'NodeResOrd' => '8',
			'NodeResEng' => 'Over 84',
			'NodeResValue' => '109'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 87,
			'NodeResNode' => '210',
			'NodeResOrd' => '1',
			'NodeResEng' => 'No',
			'NodeResValue' => 'N'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 88,
			'NodeResNode' => '210',
			'NodeResOrd' => '2',
			'NodeResEng' => 'Not sure',
			'NodeResValue' => '?'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 90,
			'NodeResNode' => '212',
			'NodeResEng' => 'Yes',
			'NodeResValue' => 'Y',
			'NodeResShowKids' => '2034'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 91,
			'NodeResNode' => '212',
			'NodeResOrd' => '1',
			'NodeResEng' => 'No',
			'NodeResValue' => 'N'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 92,
			'NodeResNode' => '212',
			'NodeResOrd' => '2',
			'NodeResEng' => 'Not sure',
			'NodeResValue' => '?'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 93,
			'NodeResNode' => '213',
			'NodeResEng' => '<span class="allegation">Yes (This is an allegation.)</span>',
			'NodeResValue' => 'Y',
			'NodeResShowKids' => '538'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 94,
			'NodeResNode' => '213',
			'NodeResOrd' => '1',
			'NodeResEng' => 'No',
			'NodeResValue' => 'N'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 95,
			'NodeResNode' => '213',
			'NodeResOrd' => '2',
			'NodeResEng' => 'Not sure',
			'NodeResValue' => '?'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 98,
			'NodeResNode' => '217',
			'NodeResEng' => 'Yes',
			'NodeResValue' => 'Y',
			'NodeResShowKids' => '1188'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 99,
			'NodeResNode' => '217',
			'NodeResOrd' => '1',
			'NodeResEng' => 'No',
			'NodeResValue' => 'N'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 100,
			'NodeResNode' => '217',
			'NodeResOrd' => '2',
			'NodeResEng' => 'Not sure',
			'NodeResValue' => '?'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 101,
			'NodeResNode' => '218',
			'NodeResEng' => '<span class="allegation">Yes (This is an allegation.)</span>',
			'NodeResValue' => 'Y',
			'NodeResShowKids' => '539'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 102,
			'NodeResNode' => '218',
			'NodeResOrd' => '1',
			'NodeResEng' => 'No',
			'NodeResValue' => 'N'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 103,
			'NodeResNode' => '218',
			'NodeResOrd' => '2',
			'NodeResEng' => 'Not sure',
			'NodeResValue' => '?'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 359,
			'NodeResNode' => '112',
			'NodeResEng' => '0-15',
			'NodeResValue' => '101'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 360,
			'NodeResNode' => '112',
			'NodeResOrd' => '1',
			'NodeResEng' => '16-24',
			'NodeResValue' => '102'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 361,
			'NodeResNode' => '112',
			'NodeResOrd' => '2',
			'NodeResEng' => '25-34',
			'NodeResValue' => '103'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 106,
			'NodeResNode' => '222',
			'NodeResEng' => 'Yes',
			'NodeResValue' => 'Y',
			'NodeResShowKids' => '2035'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 362,
			'NodeResNode' => '112',
			'NodeResOrd' => '3',
			'NodeResEng' => '35-44',
			'NodeResValue' => '104'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 107,
			'NodeResNode' => '222',
			'NodeResOrd' => '1',
			'NodeResEng' => 'No',
			'NodeResValue' => 'N'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 363,
			'NodeResNode' => '112',
			'NodeResOrd' => '4',
			'NodeResEng' => '45-54',
			'NodeResValue' => '105'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 108,
			'NodeResNode' => '222',
			'NodeResOrd' => '2',
			'NodeResEng' => 'Not sure',
			'NodeResValue' => '?'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 364,
			'NodeResNode' => '112',
			'NodeResOrd' => '5',
			'NodeResEng' => '55-64',
			'NodeResValue' => '106'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 109,
			'NodeResNode' => '223',
			'NodeResEng' => '<span class="allegation">Yes (This is a serious allegation.)</span>',
			'NodeResValue' => 'Y',
			'NodeResShowKids' => '540'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 365,
			'NodeResNode' => '112',
			'NodeResOrd' => '6',
			'NodeResEng' => '65-74',
			'NodeResValue' => '107'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 110,
			'NodeResNode' => '223',
			'NodeResOrd' => '1',
			'NodeResEng' => 'No',
			'NodeResValue' => 'N'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 366,
			'NodeResNode' => '112',
			'NodeResOrd' => '7',
			'NodeResEng' => '75-84',
			'NodeResValue' => '108'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 111,
			'NodeResNode' => '223',
			'NodeResOrd' => '2',
			'NodeResEng' => 'Not sure',
			'NodeResValue' => '?'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 367,
			'NodeResNode' => '112',
			'NodeResOrd' => '8',
			'NodeResEng' => 'Over 84',
			'NodeResValue' => '109'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 114,
			'NodeResNode' => '227',
			'NodeResEng' => 'Yes',
			'NodeResValue' => 'Y',
			'NodeResShowKids' => '1172'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 115,
			'NodeResNode' => '227',
			'NodeResOrd' => '1',
			'NodeResEng' => 'No',
			'NodeResValue' => 'N'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 116,
			'NodeResNode' => '227',
			'NodeResOrd' => '2',
			'NodeResEng' => 'Not sure',
			'NodeResValue' => '?'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 117,
			'NodeResNode' => '228',
			'NodeResEng' => '<span class="allegation">Yes (This is an allegation.)</span>',
			'NodeResValue' => 'Y',
			'NodeResShowKids' => '541'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 118,
			'NodeResNode' => '228',
			'NodeResOrd' => '1',
			'NodeResEng' => 'No',
			'NodeResValue' => 'N'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 630,
			'NodeResNode' => '600',
			'NodeResEng' => 'Yes',
			'NodeResValue' => 'Y',
			'NodeResShowKids' => '601'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 119,
			'NodeResNode' => '228',
			'NodeResOrd' => '2',
			'NodeResEng' => 'Not sure',
			'NodeResValue' => '?'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 631,
			'NodeResNode' => '600',
			'NodeResOrd' => '1',
			'NodeResEng' => 'No',
			'NodeResValue' => 'N'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 632,
			'NodeResNode' => '600',
			'NodeResOrd' => '2',
			'NodeResEng' => 'Not sure',
			'NodeResValue' => '?'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 126,
			'NodeResNode' => '234',
			'NodeResEng' => 'Yes',
			'NodeResValue' => 'Y',
			'NodeResShowKids' => '2036'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 127,
			'NodeResNode' => '234',
			'NodeResOrd' => '1',
			'NodeResEng' => 'No',
			'NodeResValue' => 'N'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 128,
			'NodeResNode' => '234',
			'NodeResOrd' => '2',
			'NodeResEng' => 'Not sure',
			'NodeResValue' => '?'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 129,
			'NodeResNode' => '235',
			'NodeResEng' => '<span class="allegation">Yes (This is an allegation.)</span>',
			'NodeResValue' => 'Y',
			'NodeResShowKids' => '543'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 130,
			'NodeResNode' => '235',
			'NodeResOrd' => '1',
			'NodeResEng' => 'No',
			'NodeResValue' => 'N'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 131,
			'NodeResNode' => '235',
			'NodeResOrd' => '2',
			'NodeResEng' => 'Not sure',
			'NodeResValue' => '?'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 134,
			'NodeResNode' => '240',
			'NodeResEng' => '<span class="allegation">Yes (This is an allegation.)</span>',
			'NodeResValue' => 'Y',
			'NodeResShowKids' => '544'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 135,
			'NodeResNode' => '240',
			'NodeResOrd' => '1',
			'NodeResEng' => 'No',
			'NodeResValue' => 'N'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 136,
			'NodeResNode' => '240',
			'NodeResOrd' => '2',
			'NodeResEng' => 'Not sure',
			'NodeResValue' => '?'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 140,
			'NodeResNode' => '248',
			'NodeResEng' => '<span class="allegation">Yes (This is a serious allegation.)</span>',
			'NodeResValue' => 'Y',
			'NodeResShowKids' => '547'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 141,
			'NodeResNode' => '248',
			'NodeResOrd' => '1',
			'NodeResEng' => 'No',
			'NodeResValue' => 'N'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 653,
			'NodeResNode' => '607',
			'NodeResEng' => 'Yes',
			'NodeResValue' => 'Y'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 142,
			'NodeResNode' => '248',
			'NodeResOrd' => '2',
			'NodeResEng' => 'Not sure',
			'NodeResValue' => '?'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 654,
			'NodeResNode' => '607',
			'NodeResOrd' => '1',
			'NodeResEng' => 'No',
			'NodeResValue' => 'N'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 655,
			'NodeResNode' => '607',
			'NodeResOrd' => '2',
			'NodeResEng' => 'Not sure',
			'NodeResValue' => '?'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 145,
			'NodeResNode' => '252',
			'NodeResEng' => '<span class="allegation">Yes (This is an allegation.)</span>',
			'NodeResValue' => 'Y',
			'NodeResShowKids' => '548'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 146,
			'NodeResNode' => '252',
			'NodeResOrd' => '1',
			'NodeResEng' => 'No',
			'NodeResValue' => 'N'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 147,
			'NodeResNode' => '252',
			'NodeResOrd' => '2',
			'NodeResEng' => 'Not sure',
			'NodeResValue' => '?'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 155,
			'NodeResNode' => '260',
			'NodeResEng' => '<span class="allegation">Yes (This is an allegation.)</span>',
			'NodeResValue' => 'Y',
			'NodeResShowKids' => '550'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 156,
			'NodeResNode' => '260',
			'NodeResOrd' => '1',
			'NodeResEng' => 'No',
			'NodeResValue' => 'N'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 668,
			'NodeResNode' => '612',
			'NodeResEng' => 'Yes',
			'NodeResValue' => 'Y',
			'NodeResShowKids' => '613'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 157,
			'NodeResNode' => '260',
			'NodeResOrd' => '2',
			'NodeResEng' => 'Not sure',
			'NodeResValue' => '?'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 669,
			'NodeResNode' => '612',
			'NodeResOrd' => '1',
			'NodeResEng' => 'No',
			'NodeResValue' => 'N'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 158,
			'NodeResNode' => '261',
			'NodeResEng' => '<span class="allegation">Yes (This is an allegation.)</span>',
			'NodeResValue' => 'Y',
			'NodeResShowKids' => '551'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 670,
			'NodeResNode' => '612',
			'NodeResOrd' => '2',
			'NodeResEng' => 'Not sure',
			'NodeResValue' => '?'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 159,
			'NodeResNode' => '261',
			'NodeResOrd' => '1',
			'NodeResEng' => 'No',
			'NodeResValue' => 'N'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 160,
			'NodeResNode' => '261',
			'NodeResOrd' => '2',
			'NodeResEng' => 'Not sure',
			'NodeResValue' => '?'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 163,
			'NodeResNode' => '268',
			'NodeResEng' => 'Yes',
			'NodeResValue' => 'Y',
			'NodeResShowKids' => '563'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 164,
			'NodeResNode' => '268',
			'NodeResOrd' => '1',
			'NodeResEng' => 'No',
			'NodeResValue' => 'N',
			'NodeResShowKids' => '2016'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 165,
			'NodeResNode' => '268',
			'NodeResOrd' => '2',
			'NodeResEng' => 'Not sure',
			'NodeResValue' => '?',
			'NodeResShowKids' => '563'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 166,
			'NodeResNode' => '269',
			'NodeResEng' => 'Yes, I want to submit my complaint to the appropriate police investigative agencies.',
			'NodeResValue' => 'Y'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 680,
			'NodeResNode' => '614',
			'NodeResEng' => 'Yes',
			'NodeResValue' => 'Y'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 681,
			'NodeResNode' => '614',
			'NodeResOrd' => '1',
			'NodeResEng' => 'No',
			'NodeResValue' => 'N'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 682,
			'NodeResNode' => '614',
			'NodeResOrd' => '2',
			'NodeResEng' => 'Not sure',
			'NodeResValue' => '?'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 181,
			'NodeResNode' => '281',
			'NodeResEng' => 'Yes',
			'NodeResValue' => 'Y',
			'NodeResShowKids' => '282'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 182,
			'NodeResNode' => '281',
			'NodeResOrd' => '1',
			'NodeResEng' => 'No',
			'NodeResValue' => 'N'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 694,
			'NodeResNode' => '392',
			'NodeResEng' => 'Speeding',
			'NodeResValue' => '174'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 183,
			'NodeResNode' => '281',
			'NodeResOrd' => '2',
			'NodeResEng' => 'Not sure',
			'NodeResValue' => '?'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 695,
			'NodeResNode' => '392',
			'NodeResOrd' => '1',
			'NodeResEng' => 'Vehicle Defect',
			'NodeResValue' => '175'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 696,
			'NodeResNode' => '392',
			'NodeResOrd' => '2',
			'NodeResEng' => 'Records Violation',
			'NodeResValue' => '176'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 697,
			'NodeResNode' => '392',
			'NodeResOrd' => '3',
			'NodeResEng' => 'Illegal Turn or Lane Change',
			'NodeResValue' => '177'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 698,
			'NodeResNode' => '392',
			'NodeResOrd' => '4',
			'NodeResEng' => 'Seatbelt or Cell Phone Violation',
			'NodeResValue' => '178'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 699,
			'NodeResNode' => '392',
			'NodeResOrd' => '5',
			'NodeResEng' => 'Stop Sign/Light Violation',
			'NodeResValue' => '179'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 188,
			'NodeResNode' => '301',
			'NodeResEng' => 'Yes',
			'NodeResValue' => 'Y',
			'NodeResShowKids' => '302'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 700,
			'NodeResNode' => '392',
			'NodeResOrd' => '6',
			'NodeResEng' => 'Disorderly Conduct',
			'NodeResValue' => '180'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 189,
			'NodeResNode' => '301',
			'NodeResOrd' => '1',
			'NodeResEng' => 'No',
			'NodeResValue' => 'N'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 445,
			'NodeResNode' => '339',
			'NodeResEng' => 'Marijuana',
			'NodeResValue' => '213'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 701,
			'NodeResNode' => '392',
			'NodeResOrd' => '7',
			'NodeResEng' => 'Disturbing the Peace',
			'NodeResValue' => '181'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 190,
			'NodeResNode' => '301',
			'NodeResOrd' => '2',
			'NodeResEng' => 'Not sure',
			'NodeResValue' => '?'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 446,
			'NodeResNode' => '339',
			'NodeResOrd' => '1',
			'NodeResEng' => 'Other Illegal Drugs (i.e. cocaine, MDMA, etc.)',
			'NodeResValue' => '214'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 702,
			'NodeResNode' => '392',
			'NodeResOrd' => '8',
			'NodeResEng' => 'Loitering/Trespassing',
			'NodeResValue' => '402'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 191,
			'NodeResNode' => '303',
			'NodeResEng' => 'Yes',
			'NodeResValue' => 'Y',
			'NodeResShowKids' => '304'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 447,
			'NodeResNode' => '339',
			'NodeResOrd' => '2',
			'NodeResEng' => 'Illegal Gun',
			'NodeResValue' => '215'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 703,
			'NodeResNode' => '392',
			'NodeResOrd' => '9',
			'NodeResEng' => 'Failure to Obey/Comply',
			'NodeResValue' => '182'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 192,
			'NodeResNode' => '303',
			'NodeResOrd' => '1',
			'NodeResEng' => 'No',
			'NodeResValue' => 'N'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 448,
			'NodeResNode' => '339',
			'NodeResOrd' => '3',
			'NodeResEng' => 'Illegal Knife',
			'NodeResValue' => '216'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 704,
			'NodeResNode' => '392',
			'NodeResOrd' => '10',
			'NodeResEng' => 'Public Intoxication',
			'NodeResValue' => '183'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 193,
			'NodeResNode' => '303',
			'NodeResOrd' => '2',
			'NodeResEng' => 'Not sure',
			'NodeResValue' => '?'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 449,
			'NodeResNode' => '339',
			'NodeResOrd' => '4',
			'NodeResEng' => 'Stolen Goods',
			'NodeResValue' => '217'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 705,
			'NodeResNode' => '392',
			'NodeResOrd' => '11',
			'NodeResEng' => 'Marijuana Possession',
			'NodeResValue' => '184'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 194,
			'NodeResNode' => '304',
			'NodeResEng' => 'Yes',
			'NodeResValue' => 'Y'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 450,
			'NodeResNode' => '339',
			'NodeResOrd' => '5',
			'NodeResEng' => 'Other',
			'NodeResValue' => '218'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 706,
			'NodeResNode' => '392',
			'NodeResOrd' => '12',
			'NodeResEng' => 'Weapons Violation',
			'NodeResValue' => '413'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 195,
			'NodeResNode' => '304',
			'NodeResOrd' => '1',
			'NodeResEng' => 'No',
			'NodeResValue' => 'N'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 451,
			'NodeResNode' => '344',
			'NodeResEng' => 'Hands/Arms',
			'NodeResValue' => '243'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 707,
			'NodeResNode' => '393',
			'NodeResEng' => 'Walking Violation',
			'NodeResValue' => '185'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 196,
			'NodeResNode' => '304',
			'NodeResOrd' => '2',
			'NodeResEng' => 'Not sure',
			'NodeResValue' => '?'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 452,
			'NodeResNode' => '344',
			'NodeResOrd' => '1',
			'NodeResEng' => 'Body Weight',
			'NodeResValue' => '244'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 708,
			'NodeResNode' => '393',
			'NodeResOrd' => '1',
			'NodeResEng' => 'Disorderly Conduct',
			'NodeResValue' => '186'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 453,
			'NodeResNode' => '344',
			'NodeResOrd' => '2',
			'NodeResEng' => 'Knees',
			'NodeResValue' => '245'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 709,
			'NodeResNode' => '393',
			'NodeResOrd' => '2',
			'NodeResEng' => 'Disturbing the Peace',
			'NodeResValue' => '187'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 454,
			'NodeResNode' => '344',
			'NodeResOrd' => '3',
			'NodeResEng' => 'Feet/Legs',
			'NodeResValue' => '246'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 710,
			'NodeResNode' => '393',
			'NodeResOrd' => '3',
			'NodeResEng' => 'Failure to Obey/Comply',
			'NodeResValue' => '188'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 455,
			'NodeResNode' => '345',
			'NodeResEng' => 'Fist (Closed Hand)',
			'NodeResValue' => '237'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 711,
			'NodeResNode' => '393',
			'NodeResOrd' => '4',
			'NodeResEng' => 'Public Intoxication',
			'NodeResValue' => '189'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 456,
			'NodeResNode' => '345',
			'NodeResOrd' => '1',
			'NodeResEng' => 'Slap (Open Hand)',
			'NodeResValue' => '238'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 712,
			'NodeResNode' => '393',
			'NodeResOrd' => '5',
			'NodeResEng' => 'Loitering/Trespassing',
			'NodeResValue' => '403'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 457,
			'NodeResNode' => '345',
			'NodeResOrd' => '2',
			'NodeResEng' => 'Kick (Feet)',
			'NodeResValue' => '239'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 713,
			'NodeResNode' => '393',
			'NodeResOrd' => '6',
			'NodeResEng' => 'Marijuana Possession',
			'NodeResValue' => '190'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 458,
			'NodeResNode' => '345',
			'NodeResOrd' => '3',
			'NodeResEng' => 'Knee',
			'NodeResValue' => '240'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 714,
			'NodeResNode' => '393',
			'NodeResOrd' => '7',
			'NodeResEng' => 'Weapons Violation',
			'NodeResValue' => '412'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 203,
			'NodeResNode' => '307',
			'NodeResEng' => 'Yes',
			'NodeResValue' => 'Y',
			'NodeResShowKids' => '308'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 459,
			'NodeResNode' => '345',
			'NodeResOrd' => '4',
			'NodeResEng' => 'Elbow',
			'NodeResValue' => '241'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 204,
			'NodeResNode' => '307',
			'NodeResOrd' => '1',
			'NodeResEng' => 'No',
			'NodeResValue' => 'N'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 460,
			'NodeResNode' => '345',
			'NodeResOrd' => '5',
			'NodeResEng' => 'Head',
			'NodeResValue' => '242'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 205,
			'NodeResNode' => '307',
			'NodeResOrd' => '2',
			'NodeResEng' => 'Not sure',
			'NodeResValue' => '?'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 461,
			'NodeResNode' => '346',
			'NodeResEng' => 'Hands',
			'NodeResValue' => '247'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 206,
			'NodeResNode' => '308',
			'NodeResEng' => 'Yes',
			'NodeResValue' => 'Y',
			'NodeResShowKids' => '309'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 462,
			'NodeResNode' => '346',
			'NodeResOrd' => '1',
			'NodeResEng' => 'Tackle',
			'NodeResValue' => '248'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 207,
			'NodeResNode' => '308',
			'NodeResOrd' => '1',
			'NodeResEng' => 'No',
			'NodeResValue' => 'N'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 463,
			'NodeResNode' => '346',
			'NodeResOrd' => '2',
			'NodeResEng' => 'Leg Sweep',
			'NodeResValue' => '249'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 208,
			'NodeResNode' => '308',
			'NodeResOrd' => '2',
			'NodeResEng' => 'Not sure',
			'NodeResValue' => '?',
			'NodeResShowKids' => '309'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 464,
			'NodeResNode' => '348',
			'NodeResEng' => 'Lethal Ammo',
			'NodeResValue' => '250'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 209,
			'NodeResNode' => '310',
			'NodeResEng' => 'Yes',
			'NodeResValue' => 'Y'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 465,
			'NodeResNode' => '348',
			'NodeResOrd' => '1',
			'NodeResEng' => 'Less-Lethal Ammo (e.g. rubber bullets, bean bag rounds)',
			'NodeResValue' => '251'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 210,
			'NodeResNode' => '310',
			'NodeResOrd' => '1',
			'NodeResEng' => 'No',
			'NodeResValue' => 'N',
			'NodeResShowKids' => '311'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 211,
			'NodeResNode' => '310',
			'NodeResOrd' => '2',
			'NodeResEng' => 'Not sure',
			'NodeResValue' => '?',
			'NodeResShowKids' => '311'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 212,
			'NodeResNode' => '311',
			'NodeResEng' => '<span class="allegation">Yes (This is an allegation.)</span>',
			'NodeResValue' => 'Y',
			'NodeResShowKids' => '561'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 213,
			'NodeResNode' => '311',
			'NodeResOrd' => '1',
			'NodeResEng' => 'No',
			'NodeResValue' => 'N'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 214,
			'NodeResNode' => '311',
			'NodeResOrd' => '2',
			'NodeResEng' => 'Not sure',
			'NodeResValue' => '?'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 215,
			'NodeResNode' => '314',
			'NodeResEng' => 'Yes',
			'NodeResValue' => 'Y'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 216,
			'NodeResNode' => '314',
			'NodeResOrd' => '1',
			'NodeResEng' => 'No',
			'NodeResValue' => 'N'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 217,
			'NodeResNode' => '314',
			'NodeResOrd' => '2',
			'NodeResEng' => 'Not sure',
			'NodeResValue' => '?'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 218,
			'NodeResNode' => '315',
			'NodeResEng' => 'Yes',
			'NodeResValue' => 'Y',
			'NodeResShowKids' => '316'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 219,
			'NodeResNode' => '315',
			'NodeResOrd' => '1',
			'NodeResEng' => 'No',
			'NodeResValue' => 'N'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 220,
			'NodeResNode' => '315',
			'NodeResOrd' => '2',
			'NodeResEng' => 'Not sure',
			'NodeResValue' => '?'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 221,
			'NodeResNode' => '316',
			'NodeResEng' => 'Yes',
			'NodeResValue' => 'Y',
			'NodeResShowKids' => '317'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 222,
			'NodeResNode' => '316',
			'NodeResOrd' => '1',
			'NodeResEng' => 'No',
			'NodeResValue' => 'N'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 223,
			'NodeResNode' => '316',
			'NodeResOrd' => '2',
			'NodeResEng' => 'Not sure',
			'NodeResValue' => '?'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 227,
			'NodeResNode' => '319',
			'NodeResEng' => 'Yes',
			'NodeResValue' => 'Y',
			'NodeResShowKids' => '320'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 228,
			'NodeResNode' => '319',
			'NodeResOrd' => '1',
			'NodeResEng' => 'No',
			'NodeResValue' => 'N'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 229,
			'NodeResNode' => '319',
			'NodeResOrd' => '2',
			'NodeResEng' => 'Not sure',
			'NodeResValue' => '?',
			'NodeResShowKids' => '320'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 230,
			'NodeResNode' => '322',
			'NodeResEng' => 'Yes',
			'NodeResValue' => 'Y',
			'NodeResShowKids' => '1153'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 742,
			'NodeResNode' => '613',
			'NodeResEng' => 'On Foot',
			'NodeResValue' => '408'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 231,
			'NodeResNode' => '322',
			'NodeResOrd' => '1',
			'NodeResEng' => 'No',
			'NodeResValue' => 'N'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 743,
			'NodeResNode' => '613',
			'NodeResOrd' => '1',
			'NodeResEng' => 'In Vehicles',
			'NodeResValue' => '409'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 232,
			'NodeResNode' => '322',
			'NodeResOrd' => '2',
			'NodeResEng' => 'Not sure',
			'NodeResValue' => '?'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 744,
			'NodeResNode' => '613',
			'NodeResOrd' => '2',
			'NodeResEng' => 'Both',
			'NodeResValue' => '410'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 233,
			'NodeResNode' => '325',
			'NodeResEng' => 'Yes',
			'NodeResValue' => 'Y',
			'NodeResShowKids' => '327'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 745,
			'NodeResNode' => '613',
			'NodeResOrd' => '3',
			'NodeResEng' => 'Not sure',
			'NodeResValue' => '414'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 234,
			'NodeResNode' => '325',
			'NodeResOrd' => '1',
			'NodeResEng' => 'No',
			'NodeResValue' => 'N'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 746,
			'NodeResNode' => '616',
			'NodeResEng' => 'No weapon',
			'NodeResValue' => '582'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 235,
			'NodeResNode' => '325',
			'NodeResOrd' => '2',
			'NodeResEng' => 'Not sure',
			'NodeResValue' => '?',
			'NodeResShowKids' => '327'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 747,
			'NodeResNode' => '616',
			'NodeResOrd' => '1',
			'NodeResEng' => 'Gun',
			'NodeResValue' => '415',
			'NodeResShowKids' => '618'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 236,
			'NodeResNode' => '328',
			'NodeResEng' => 'Yes',
			'NodeResValue' => 'Y',
			'NodeResShowKids' => '329'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 492,
			'NodeResNode' => '403',
			'NodeResEng' => 'Cash',
			'NodeResValue' => '308'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 748,
			'NodeResNode' => '616',
			'NodeResOrd' => '2',
			'NodeResEng' => 'Knife',
			'NodeResValue' => '416',
			'NodeResShowKids' => '618'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 237,
			'NodeResNode' => '328',
			'NodeResOrd' => '1',
			'NodeResEng' => 'No',
			'NodeResValue' => 'N',
			'NodeResShowKids' => '329'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 493,
			'NodeResNode' => '403',
			'NodeResOrd' => '1',
			'NodeResEng' => 'Phone',
			'NodeResValue' => '309'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 238,
			'NodeResNode' => '328',
			'NodeResOrd' => '2',
			'NodeResEng' => 'Not sure',
			'NodeResValue' => '?',
			'NodeResShowKids' => '329'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 494,
			'NodeResNode' => '403',
			'NodeResOrd' => '2',
			'NodeResEng' => 'TV',
			'NodeResValue' => '310'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 239,
			'NodeResNode' => '330',
			'NodeResEng' => 'Yes',
			'NodeResValue' => 'Y',
			'NodeResShowKids' => '331'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 495,
			'NodeResNode' => '403',
			'NodeResOrd' => '3',
			'NodeResEng' => 'Vehicle',
			'NodeResValue' => '311'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 240,
			'NodeResNode' => '330',
			'NodeResOrd' => '1',
			'NodeResEng' => 'No',
			'NodeResValue' => 'N'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 496,
			'NodeResNode' => '403',
			'NodeResOrd' => '4',
			'NodeResEng' => 'Real Estate',
			'NodeResValue' => '312'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 241,
			'NodeResNode' => '330',
			'NodeResOrd' => '2',
			'NodeResEng' => 'Not sure',
			'NodeResValue' => '?',
			'NodeResShowKids' => '331'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 497,
			'NodeResNode' => '403',
			'NodeResOrd' => '5',
			'NodeResEng' => 'Bank Account',
			'NodeResValue' => '313'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 498,
			'NodeResNode' => '403',
			'NodeResOrd' => '6',
			'NodeResEng' => 'Boat',
			'NodeResValue' => '314'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 499,
			'NodeResNode' => '403',
			'NodeResOrd' => '7',
			'NodeResEng' => 'Firearms',
			'NodeResValue' => '315'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 500,
			'NodeResNode' => '403',
			'NodeResOrd' => '8',
			'NodeResEng' => 'Identity Documents',
			'NodeResValue' => '316'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 245,
			'NodeResNode' => '335',
			'NodeResEng' => 'Yes',
			'NodeResValue' => 'Y'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 501,
			'NodeResNode' => '403',
			'NodeResOrd' => '9',
			'NodeResEng' => 'Other Items',
			'NodeResValue' => '317'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 246,
			'NodeResNode' => '335',
			'NodeResOrd' => '1',
			'NodeResEng' => 'No',
			'NodeResValue' => 'N'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 247,
			'NodeResNode' => '336',
			'NodeResEng' => 'Yes',
			'NodeResValue' => 'Y',
			'NodeResShowKids' => '337'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 248,
			'NodeResNode' => '336',
			'NodeResOrd' => '1',
			'NodeResEng' => 'No',
			'NodeResValue' => 'N'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 249,
			'NodeResNode' => '336',
			'NodeResOrd' => '2',
			'NodeResEng' => 'Not sure',
			'NodeResValue' => '?'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 505,
			'NodeResNode' => '445',
			'NodeResEng' => '0-15',
			'NodeResValue' => '101'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 250,
			'NodeResNode' => '338',
			'NodeResEng' => 'Yes',
			'NodeResValue' => 'Y',
			'NodeResShowKids' => '339'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 506,
			'NodeResNode' => '445',
			'NodeResOrd' => '1',
			'NodeResEng' => '16-24',
			'NodeResValue' => '102'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 251,
			'NodeResNode' => '338',
			'NodeResOrd' => '1',
			'NodeResEng' => 'No',
			'NodeResValue' => 'N'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 507,
			'NodeResNode' => '445',
			'NodeResOrd' => '2',
			'NodeResEng' => '25-34',
			'NodeResValue' => '103'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 252,
			'NodeResNode' => '338',
			'NodeResOrd' => '2',
			'NodeResEng' => 'Not sure',
			'NodeResValue' => '?'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 508,
			'NodeResNode' => '445',
			'NodeResOrd' => '3',
			'NodeResEng' => '35-44',
			'NodeResValue' => '104'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 253,
			'NodeResNode' => '351',
			'NodeResEng' => 'Yes',
			'NodeResValue' => 'Y'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 509,
			'NodeResNode' => '445',
			'NodeResOrd' => '4',
			'NodeResEng' => '45-54',
			'NodeResValue' => '105'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 254,
			'NodeResNode' => '351',
			'NodeResOrd' => '1',
			'NodeResEng' => 'No',
			'NodeResValue' => 'N'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 510,
			'NodeResNode' => '445',
			'NodeResOrd' => '5',
			'NodeResEng' => '55-64',
			'NodeResValue' => '106'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 255,
			'NodeResNode' => '351',
			'NodeResOrd' => '2',
			'NodeResEng' => 'Not sure',
			'NodeResValue' => '?'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 511,
			'NodeResNode' => '445',
			'NodeResOrd' => '6',
			'NodeResEng' => '65-74',
			'NodeResValue' => '107'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 836,
			'NodeResNode' => '674',
			'NodeResEng' => 'Yes',
			'NodeResValue' => 'Y'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 837,
			'NodeResNode' => '674',
			'NodeResOrd' => '1',
			'NodeResEng' => 'No',
			'NodeResValue' => 'N'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 839,
			'NodeResNode' => '676',
			'NodeResEng' => 'Yes',
			'NodeResValue' => 'Y'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 840,
			'NodeResNode' => '676',
			'NodeResOrd' => '1',
			'NodeResEng' => 'No',
			'NodeResValue' => 'N'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 850,
			'NodeResNode' => '299',
			'NodeResOrd' => '10',
			'NodeResEng' => 'Officer Did Not Give Reason For Stop',
			'NodeResValue' => '335',
			'NodeResMutEx' => '1'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 851,
			'NodeResNode' => '297',
			'NodeResOrd' => '12',
			'NodeResEng' => 'Officer Did Not Give Reason For Stop',
			'NodeResValue' => '347'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 863,
			'NodeResNode' => '359',
			'NodeResEng' => 'Head',
			'NodeResValue' => '159'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 864,
			'NodeResNode' => '359',
			'NodeResOrd' => '1',
			'NodeResEng' => 'Neck',
			'NodeResValue' => '160'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 865,
			'NodeResNode' => '359',
			'NodeResOrd' => '2',
			'NodeResEng' => 'Torso',
			'NodeResValue' => '161'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 866,
			'NodeResNode' => '359',
			'NodeResOrd' => '3',
			'NodeResEng' => 'Hand',
			'NodeResValue' => '162'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 867,
			'NodeResNode' => '359',
			'NodeResOrd' => '4',
			'NodeResEng' => 'Elbow',
			'NodeResValue' => '163'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 868,
			'NodeResNode' => '359',
			'NodeResOrd' => '5',
			'NodeResEng' => 'Arm',
			'NodeResValue' => '164'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 869,
			'NodeResNode' => '359',
			'NodeResOrd' => '6',
			'NodeResEng' => 'Foot',
			'NodeResValue' => '165'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 870,
			'NodeResNode' => '359',
			'NodeResOrd' => '7',
			'NodeResEng' => 'Knee',
			'NodeResValue' => '166'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 871,
			'NodeResNode' => '359',
			'NodeResOrd' => '8',
			'NodeResEng' => 'Leg',
			'NodeResValue' => '167'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 872,
			'NodeResNode' => '359',
			'NodeResOrd' => '9',
			'NodeResEng' => 'Crotch',
			'NodeResValue' => '168'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 873,
			'NodeResNode' => '359',
			'NodeResOrd' => '10',
			'NodeResEng' => 'Unknown',
			'NodeResValue' => '169',
			'NodeResMutEx' => '1'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 900,
			'NodeResNode' => '743',
			'NodeResEng' => 'Yes',
			'NodeResValue' => 'Y',
			'NodeResShowKids' => '1152'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 934,
			'NodeResNode' => '43',
			'NodeResEng' => 'Asian',
			'NodeResValue' => '318'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 935,
			'NodeResNode' => '43',
			'NodeResOrd' => '1',
			'NodeResEng' => 'Black/African/Caribbean',
			'NodeResValue' => '319'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 936,
			'NodeResNode' => '43',
			'NodeResOrd' => '2',
			'NodeResEng' => 'Hispanic/Latinx',
			'NodeResValue' => '320'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 937,
			'NodeResNode' => '43',
			'NodeResOrd' => '3',
			'NodeResEng' => 'Middle Eastern',
			'NodeResValue' => '469'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 938,
			'NodeResNode' => '43',
			'NodeResOrd' => '4',
			'NodeResEng' => 'Native American',
			'NodeResValue' => '321'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 939,
			'NodeResNode' => '43',
			'NodeResOrd' => '5',
			'NodeResEng' => 'Pacific Islander',
			'NodeResValue' => '322'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 940,
			'NodeResNode' => '43',
			'NodeResOrd' => '6',
			'NodeResEng' => 'White/Caucasian',
			'NodeResValue' => '323'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 941,
			'NodeResNode' => '43',
			'NodeResOrd' => '7',
			'NodeResEng' => 'Other',
			'NodeResValue' => '324'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 942,
			'NodeResNode' => '43',
			'NodeResOrd' => '8',
			'NodeResEng' => 'Decline or Unknown',
			'NodeResValue' => '325',
			'NodeResMutEx' => '1'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 943,
			'NodeResNode' => '174',
			'NodeResEng' => 'Asian',
			'NodeResValue' => '318'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 944,
			'NodeResNode' => '174',
			'NodeResOrd' => '1',
			'NodeResEng' => 'Black/African/Caribbean',
			'NodeResValue' => '319'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 945,
			'NodeResNode' => '174',
			'NodeResOrd' => '2',
			'NodeResEng' => 'Hispanic/Latinx',
			'NodeResValue' => '320'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 946,
			'NodeResNode' => '174',
			'NodeResOrd' => '3',
			'NodeResEng' => 'Middle Eastern',
			'NodeResValue' => '469'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 947,
			'NodeResNode' => '174',
			'NodeResOrd' => '4',
			'NodeResEng' => 'Native American',
			'NodeResValue' => '321'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 948,
			'NodeResNode' => '174',
			'NodeResOrd' => '5',
			'NodeResEng' => 'Pacific Islander',
			'NodeResValue' => '322'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 949,
			'NodeResNode' => '174',
			'NodeResOrd' => '6',
			'NodeResEng' => 'White/Caucasian',
			'NodeResValue' => '323'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 950,
			'NodeResNode' => '174',
			'NodeResOrd' => '7',
			'NodeResEng' => 'Other',
			'NodeResValue' => '324'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 951,
			'NodeResNode' => '174',
			'NodeResOrd' => '8',
			'NodeResEng' => 'Decline or Unknown',
			'NodeResValue' => '325',
			'NodeResMutEx' => '1'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 952,
			'NodeResNode' => '74',
			'NodeResEng' => 'Asian',
			'NodeResValue' => '318'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 953,
			'NodeResNode' => '74',
			'NodeResOrd' => '1',
			'NodeResEng' => 'Black/African/Caribbean',
			'NodeResValue' => '319'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 954,
			'NodeResNode' => '74',
			'NodeResOrd' => '2',
			'NodeResEng' => 'Hispanic/Latinx',
			'NodeResValue' => '320'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 955,
			'NodeResNode' => '74',
			'NodeResOrd' => '3',
			'NodeResEng' => 'Middle Eastern',
			'NodeResValue' => '469'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 956,
			'NodeResNode' => '74',
			'NodeResOrd' => '4',
			'NodeResEng' => 'Native American',
			'NodeResValue' => '321'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 957,
			'NodeResNode' => '74',
			'NodeResOrd' => '5',
			'NodeResEng' => 'Pacific Islander',
			'NodeResValue' => '322'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 958,
			'NodeResNode' => '74',
			'NodeResOrd' => '6',
			'NodeResEng' => 'White/Caucasian',
			'NodeResValue' => '323'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 959,
			'NodeResNode' => '74',
			'NodeResOrd' => '7',
			'NodeResEng' => 'Other',
			'NodeResValue' => '324'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 960,
			'NodeResNode' => '74',
			'NodeResOrd' => '8',
			'NodeResEng' => 'Decline or Unknown',
			'NodeResValue' => '325',
			'NodeResMutEx' => '1'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 961,
			'NodeResNode' => '114',
			'NodeResEng' => 'Asian',
			'NodeResValue' => '318'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 962,
			'NodeResNode' => '114',
			'NodeResOrd' => '1',
			'NodeResEng' => 'Black/African/Caribbean',
			'NodeResValue' => '319'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 963,
			'NodeResNode' => '114',
			'NodeResOrd' => '2',
			'NodeResEng' => 'Hispanic/Latinx',
			'NodeResValue' => '320'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 964,
			'NodeResNode' => '114',
			'NodeResOrd' => '3',
			'NodeResEng' => 'Middle Eastern',
			'NodeResValue' => '469'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 965,
			'NodeResNode' => '114',
			'NodeResOrd' => '4',
			'NodeResEng' => 'Native American',
			'NodeResValue' => '321'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 966,
			'NodeResNode' => '114',
			'NodeResOrd' => '5',
			'NodeResEng' => 'Pacific Islander',
			'NodeResValue' => '322'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 967,
			'NodeResNode' => '114',
			'NodeResOrd' => '6',
			'NodeResEng' => 'White/Caucasian',
			'NodeResValue' => '323'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 968,
			'NodeResNode' => '114',
			'NodeResOrd' => '7',
			'NodeResEng' => 'Other',
			'NodeResValue' => '324'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 969,
			'NodeResNode' => '114',
			'NodeResOrd' => '8',
			'NodeResEng' => 'Decline or Unknown',
			'NodeResValue' => '325',
			'NodeResMutEx' => '1'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 970,
			'NodeResNode' => '178',
			'NodeResEng' => 'Slim/Slender',
			'NodeResValue' => '170'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 971,
			'NodeResNode' => '178',
			'NodeResOrd' => '1',
			'NodeResEng' => 'Medium/Average',
			'NodeResValue' => '171'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 972,
			'NodeResNode' => '178',
			'NodeResOrd' => '2',
			'NodeResEng' => 'Athletic/Muscular',
			'NodeResValue' => '172'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 973,
			'NodeResNode' => '178',
			'NodeResOrd' => '3',
			'NodeResEng' => 'Large/Fat',
			'NodeResValue' => '173'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 974,
			'NodeResNode' => '178',
			'NodeResOrd' => '4',
			'NodeResEng' => 'Not sure',
			'NodeResValue' => '470'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 975,
			'NodeResNode' => '79',
			'NodeResEng' => 'Slim/Slender',
			'NodeResValue' => '170'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 976,
			'NodeResNode' => '79',
			'NodeResOrd' => '1',
			'NodeResEng' => 'Medium/Average',
			'NodeResValue' => '171'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 977,
			'NodeResNode' => '79',
			'NodeResOrd' => '2',
			'NodeResEng' => 'Athletic/Muscular',
			'NodeResValue' => '172'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 978,
			'NodeResNode' => '79',
			'NodeResOrd' => '3',
			'NodeResEng' => 'Large/Fat',
			'NodeResValue' => '173'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 979,
			'NodeResNode' => '79',
			'NodeResOrd' => '4',
			'NodeResEng' => 'Not sure',
			'NodeResValue' => '470'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 980,
			'NodeResNode' => '119',
			'NodeResEng' => 'Slim/Slender',
			'NodeResValue' => '170'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 981,
			'NodeResNode' => '119',
			'NodeResOrd' => '1',
			'NodeResEng' => 'Medium/Average',
			'NodeResValue' => '171'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 982,
			'NodeResNode' => '119',
			'NodeResOrd' => '2',
			'NodeResEng' => 'Athletic/Muscular',
			'NodeResValue' => '172'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 983,
			'NodeResNode' => '119',
			'NodeResOrd' => '3',
			'NodeResEng' => 'Large/Fat',
			'NodeResValue' => '173'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 984,
			'NodeResNode' => '119',
			'NodeResOrd' => '4',
			'NodeResEng' => 'Not sure',
			'NodeResValue' => '470'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 985,
			'NodeResNode' => '852',
			'NodeResEng' => '<span class="allegation">Yes (This is an allegation.)</span>',
			'NodeResValue' => 'Y',
			'NodeResShowKids' => '853'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 986,
			'NodeResNode' => '852',
			'NodeResOrd' => '1',
			'NodeResEng' => 'No',
			'NodeResValue' => 'N'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 987,
			'NodeResNode' => '852',
			'NodeResOrd' => '2',
			'NodeResEng' => 'Not sure',
			'NodeResValue' => '?'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 988,
			'NodeResNode' => '246',
			'NodeResEng' => 'K9 (Dog)',
			'NodeResValue' => '286'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 989,
			'NodeResNode' => '246',
			'NodeResOrd' => '1',
			'NodeResEng' => 'Baton',
			'NodeResValue' => '282'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 990,
			'NodeResNode' => '246',
			'NodeResOrd' => '2',
			'NodeResEng' => 'Mace or Pepper Spray',
			'NodeResValue' => '285'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 991,
			'NodeResNode' => '246',
			'NodeResOrd' => '3',
			'NodeResEng' => 'Taser',
			'NodeResValue' => '283'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 992,
			'NodeResNode' => '246',
			'NodeResOrd' => '4',
			'NodeResEng' => 'Gun',
			'NodeResValue' => '284'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 993,
			'NodeResNode' => '246',
			'NodeResOrd' => '5',
			'NodeResEng' => 'Other',
			'NodeResValue' => '287'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 994,
			'NodeResNode' => '618',
			'NodeResEng' => 'No or does not apply',
			'NodeResValue' => '276'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 995,
			'NodeResNode' => '618',
			'NodeResOrd' => '1',
			'NodeResEng' => 'Not sure',
			'NodeResValue' => '281'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 996,
			'NodeResNode' => '618',
			'NodeResOrd' => '2',
			'NodeResEng' => 'Displayed Weapon',
			'NodeResValue' => '277'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 997,
			'NodeResNode' => '618',
			'NodeResOrd' => '3',
			'NodeResEng' => 'Drew Weapon',
			'NodeResValue' => '278'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 998,
			'NodeResNode' => '618',
			'NodeResOrd' => '4',
			'NodeResEng' => 'Pointed Weapon',
			'NodeResValue' => '279'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 999,
			'NodeResNode' => '618',
			'NodeResOrd' => '5',
			'NodeResEng' => 'Fired or Discharged Weapon',
			'NodeResValue' => '280'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 1004,
			'NodeResNode' => '743',
			'NodeResOrd' => '1',
			'NodeResEng' => 'No',
			'NodeResValue' => 'N'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 1005,
			'NodeResNode' => '870',
			'NodeResEng' => '<b>I personally experienced</b> police excellence.',
			'NodeResValue' => 'Subject'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 1006,
			'NodeResNode' => '870',
			'NodeResOrd' => '1',
			'NodeResEng' => '<b>I was a witness.</b> I was on the scene and saw police excellence involving someone else.',
			'NodeResValue' => 'Witness'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 1007,
			'NodeResNode' => '870',
			'NodeResOrd' => '2',
			'NodeResEng' => 'I am helping someone else submit this complaint.',
			'NodeResValue' => 'Neither'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 1008,
			'NodeResNode' => '871',
			'NodeResEng' => '<h2 class="disIn slBlueDark">Full Transparency</h2>
<div class="privOptPadL"><ul><li>You will publish your FULL compliment on OpenPolice.org. That includes your written story, the names of civilians and police officers, and your detailed survey answers.</li><li>Search engines will index your complaint. That means you cannot erase it, and you will publicly link it to your name.</li></ul></div>',
			'NodeResValue' => '304'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 1009,
			'NodeResNode' => '871',
			'NodeResOrd' => '1',
			'NodeResEng' => '<h2 class=\"disIn slBlueDark\">No Names Public</h2>\r\n<div class=\"privOptPadL\"><ul><li>You will only publish your multiple-choice answers on OpenPolice.org. That will NOT include your written story nor information showing police officersï¿½ identities.</li></ul></div>',
			'NodeResValue' => '305'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 1010,
			'NodeResNode' => '871',
			'NodeResOrd' => '2',
			'NodeResEng' => '<h2 class=\"disIn slBlueDark\">Anonymous</h2>\r\n<div class=\"privOptPadL\"><ul><li>We will NOT ask for you personal information.</li><li>Neither OpenPolice.org staff nor investigators can contact you. That will make it harder to investigate your compliment.</li><li>You will only publish your multiple-choice answers on OpenPolice.org. That will NOT include your written story nor information showing police officersï¿½ identities.</li></ul></div>',
			'NodeResValue' => '306'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 1011,
			'NodeResNode' => '889',
			'NodeResEng' => 'Yes',
			'NodeResValue' => 'Y'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 1012,
			'NodeResNode' => '889',
			'NodeResOrd' => '1',
			'NodeResEng' => 'No',
			'NodeResValue' => 'N'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 1013,
			'NodeResNode' => '889',
			'NodeResOrd' => '2',
			'NodeResEng' => 'Not sure',
			'NodeResValue' => '?'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 1014,
			'NodeResNode' => '890',
			'NodeResEng' => 'Outdoor public space (includes roads, sidewalks, parks, etc.)',
			'NodeResValue' => '352'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 1015,
			'NodeResNode' => '890',
			'NodeResOrd' => '1',
			'NodeResEng' => 'Home, private residence, or dorm (includes just outside the residence)',
			'NodeResValue' => '349'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 1016,
			'NodeResNode' => '890',
			'NodeResOrd' => '2',
			'NodeResEng' => 'School',
			'NodeResValue' => '404'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 1017,
			'NodeResNode' => '890',
			'NodeResOrd' => '3',
			'NodeResEng' => 'Workplace',
			'NodeResValue' => '350'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 1018,
			'NodeResNode' => '890',
			'NodeResOrd' => '4',
			'NodeResEng' => 'Airport',
			'NodeResValue' => '351'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 1019,
			'NodeResNode' => '890',
			'NodeResOrd' => '5',
			'NodeResEng' => 'Indoor public space',
			'NodeResValue' => '353'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 1024,
			'NodeResNode' => '912',
			'NodeResOrd' => '4',
			'NodeResEng' => 'Native American',
			'NodeResValue' => '321'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 1025,
			'NodeResNode' => '912',
			'NodeResOrd' => '5',
			'NodeResEng' => 'Pacific Islander',
			'NodeResValue' => '322'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 1026,
			'NodeResNode' => '912',
			'NodeResOrd' => '6',
			'NodeResEng' => 'White/Caucasian',
			'NodeResValue' => '323'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 1027,
			'NodeResNode' => '912',
			'NodeResOrd' => '7',
			'NodeResEng' => 'Other',
			'NodeResValue' => '324'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 1028,
			'NodeResNode' => '912',
			'NodeResOrd' => '8',
			'NodeResEng' => 'Decline or Unknown',
			'NodeResValue' => '325',
			'NodeResMutEx' => '1'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 1020,
			'NodeResNode' => '912',
			'NodeResEng' => 'Asian',
			'NodeResValue' => '318'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 1021,
			'NodeResNode' => '912',
			'NodeResOrd' => '1',
			'NodeResEng' => 'Black/African/Caribbean',
			'NodeResValue' => '319'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 1022,
			'NodeResNode' => '912',
			'NodeResOrd' => '2',
			'NodeResEng' => 'Hispanic/Latinx',
			'NodeResValue' => '320'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 1023,
			'NodeResNode' => '912',
			'NodeResOrd' => '3',
			'NodeResEng' => 'Middle Eastern',
			'NodeResValue' => '469'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 1029,
			'NodeResNode' => '914',
			'NodeResEng' => '0-15',
			'NodeResValue' => '101'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 1030,
			'NodeResNode' => '914',
			'NodeResOrd' => '1',
			'NodeResEng' => '16-24',
			'NodeResValue' => '102'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 1031,
			'NodeResNode' => '914',
			'NodeResOrd' => '2',
			'NodeResEng' => '25-34',
			'NodeResValue' => '103'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 1032,
			'NodeResNode' => '914',
			'NodeResOrd' => '3',
			'NodeResEng' => '35-44',
			'NodeResValue' => '104'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 1033,
			'NodeResNode' => '914',
			'NodeResOrd' => '4',
			'NodeResEng' => '45-54',
			'NodeResValue' => '105'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 1034,
			'NodeResNode' => '914',
			'NodeResOrd' => '5',
			'NodeResEng' => '55-64',
			'NodeResValue' => '106'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 1035,
			'NodeResNode' => '914',
			'NodeResOrd' => '6',
			'NodeResEng' => '65-74',
			'NodeResValue' => '107'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 1036,
			'NodeResNode' => '914',
			'NodeResOrd' => '7',
			'NodeResEng' => '75-84',
			'NodeResValue' => '108'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 1037,
			'NodeResNode' => '914',
			'NodeResOrd' => '8',
			'NodeResEng' => 'Over 84',
			'NodeResValue' => '109'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 1038,
			'NodeResNode' => '927',
			'NodeResEng' => 'This officer <b class="slBlueDark">engaged in excellence</b>',
			'NodeResValue' => 'Subject Officer'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 1039,
			'NodeResNode' => '927',
			'NodeResOrd' => '1',
			'NodeResEng' => 'This officer <b class="slBlueDark">witnessed excellence</b> but is not the subject of this compliment',
			'NodeResValue' => 'Witness Officer'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 1040,
			'NodeResNode' => '928',
			'NodeResEng' => 'On-Duty',
			'NodeResValue' => 'On-Duty'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 1041,
			'NodeResNode' => '928',
			'NodeResOrd' => '1',
			'NodeResEng' => 'Off-Duty',
			'NodeResValue' => 'Off-Duty'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 1042,
			'NodeResNode' => '928',
			'NodeResOrd' => '2',
			'NodeResEng' => 'Not sure',
			'NodeResValue' => '?'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 1043,
			'NodeResNode' => '929',
			'NodeResEng' => 'Yes',
			'NodeResValue' => 'Y'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 1044,
			'NodeResNode' => '929',
			'NodeResOrd' => '1',
			'NodeResEng' => 'No',
			'NodeResValue' => 'N'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 1045,
			'NodeResNode' => '929',
			'NodeResOrd' => '2',
			'NodeResEng' => 'Not sure',
			'NodeResValue' => '?'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 1046,
			'NodeResNode' => '930',
			'NodeResEng' => 'Yes',
			'NodeResValue' => 'Y'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 1047,
			'NodeResNode' => '930',
			'NodeResOrd' => '1',
			'NodeResEng' => 'No',
			'NodeResValue' => 'N'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 1048,
			'NodeResNode' => '930',
			'NodeResOrd' => '2',
			'NodeResEng' => 'Not sure',
			'NodeResValue' => '?'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 1049,
			'NodeResNode' => '932',
			'NodeResEng' => 'Asian',
			'NodeResValue' => '318'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 1050,
			'NodeResNode' => '932',
			'NodeResOrd' => '1',
			'NodeResEng' => 'Black/African/Caribbean',
			'NodeResValue' => '319'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 1051,
			'NodeResNode' => '932',
			'NodeResOrd' => '2',
			'NodeResEng' => 'Hispanic/Latinx',
			'NodeResValue' => '320'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 1052,
			'NodeResNode' => '932',
			'NodeResOrd' => '3',
			'NodeResEng' => 'Middle Eastern',
			'NodeResValue' => '469'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 1053,
			'NodeResNode' => '932',
			'NodeResOrd' => '4',
			'NodeResEng' => 'Native American',
			'NodeResValue' => '321'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 1054,
			'NodeResNode' => '932',
			'NodeResOrd' => '5',
			'NodeResEng' => 'Pacific Islander',
			'NodeResValue' => '322'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 1055,
			'NodeResNode' => '932',
			'NodeResOrd' => '6',
			'NodeResEng' => 'White/Caucasian',
			'NodeResValue' => '323'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 1056,
			'NodeResNode' => '932',
			'NodeResOrd' => '7',
			'NodeResEng' => 'Other',
			'NodeResValue' => '324'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 1057,
			'NodeResNode' => '932',
			'NodeResOrd' => '8',
			'NodeResEng' => 'Decline or Unknown',
			'NodeResValue' => '325',
			'NodeResMutEx' => '1'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 1058,
			'NodeResNode' => '933',
			'NodeResEng' => 'Under 25',
			'NodeResValue' => '435'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 1059,
			'NodeResNode' => '933',
			'NodeResOrd' => '1',
			'NodeResEng' => '25-34',
			'NodeResValue' => '436'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 1060,
			'NodeResNode' => '933',
			'NodeResOrd' => '2',
			'NodeResEng' => '35-44',
			'NodeResValue' => '437'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 1061,
			'NodeResNode' => '933',
			'NodeResOrd' => '3',
			'NodeResEng' => '45-54',
			'NodeResValue' => '438'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 1062,
			'NodeResNode' => '933',
			'NodeResOrd' => '4',
			'NodeResEng' => '55-64',
			'NodeResValue' => '439'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 1063,
			'NodeResNode' => '933',
			'NodeResOrd' => '5',
			'NodeResEng' => 'Over 64',
			'NodeResValue' => '440'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 1064,
			'NodeResNode' => '935',
			'NodeResEng' => 'Slim/Slender',
			'NodeResValue' => '170'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 1065,
			'NodeResNode' => '935',
			'NodeResOrd' => '1',
			'NodeResEng' => 'Medium/Average',
			'NodeResValue' => '171'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 1066,
			'NodeResNode' => '935',
			'NodeResOrd' => '2',
			'NodeResEng' => 'Athletic/Muscular',
			'NodeResValue' => '172'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 1067,
			'NodeResNode' => '935',
			'NodeResOrd' => '3',
			'NodeResEng' => 'Large/Fat',
			'NodeResValue' => '173'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 1068,
			'NodeResNode' => '935',
			'NodeResOrd' => '4',
			'NodeResEng' => 'Not sure',
			'NodeResValue' => '470'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 1069,
			'NodeResNode' => '937',
			'NodeResEng' => 'Yes',
			'NodeResValue' => 'Y',
			'NodeResShowKids' => '938'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 1070,
			'NodeResNode' => '937',
			'NodeResOrd' => '1',
			'NodeResEng' => 'No',
			'NodeResValue' => 'N'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 1071,
			'NodeResNode' => '937',
			'NodeResOrd' => '2',
			'NodeResEng' => 'Not sure',
			'NodeResValue' => '?',
			'NodeResShowKids' => '938'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 1072,
			'NodeResNode' => '949',
			'NodeResEng' => 'Yes',
			'NodeResValue' => 'Y'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 1073,
			'NodeResNode' => '949',
			'NodeResOrd' => '1',
			'NodeResEng' => 'No',
			'NodeResValue' => 'N'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 1074,
			'NodeResNode' => '949',
			'NodeResOrd' => '2',
			'NodeResEng' => 'Not sure',
			'NodeResValue' => '?'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 1075,
			'NodeResNode' => '950',
			'NodeResEng' => 'Yes',
			'NodeResValue' => 'Y'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 1076,
			'NodeResNode' => '950',
			'NodeResOrd' => '1',
			'NodeResEng' => 'No',
			'NodeResValue' => 'N'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 1077,
			'NodeResNode' => '950',
			'NodeResOrd' => '2',
			'NodeResEng' => 'Not sure',
			'NodeResValue' => '?'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 1078,
			'NodeResNode' => '951',
			'NodeResEng' => 'Yes',
			'NodeResValue' => 'Y'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 1079,
			'NodeResNode' => '951',
			'NodeResOrd' => '1',
			'NodeResEng' => 'No',
			'NodeResValue' => 'N'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 1080,
			'NodeResNode' => '951',
			'NodeResOrd' => '2',
			'NodeResEng' => 'Not sure',
			'NodeResValue' => '?'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 1081,
			'NodeResNode' => '952',
			'NodeResEng' => 'Yes',
			'NodeResValue' => 'Y'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 1082,
			'NodeResNode' => '952',
			'NodeResOrd' => '1',
			'NodeResEng' => 'No',
			'NodeResValue' => 'N'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 1083,
			'NodeResNode' => '952',
			'NodeResOrd' => '2',
			'NodeResEng' => 'Not sure',
			'NodeResValue' => '?'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 1084,
			'NodeResNode' => '953',
			'NodeResEng' => 'Yes',
			'NodeResValue' => 'Y'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 1085,
			'NodeResNode' => '953',
			'NodeResOrd' => '1',
			'NodeResEng' => 'No',
			'NodeResValue' => 'N'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 1086,
			'NodeResNode' => '953',
			'NodeResOrd' => '2',
			'NodeResEng' => 'Not sure',
			'NodeResValue' => '?'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 1087,
			'NodeResNode' => '954',
			'NodeResEng' => 'Yes',
			'NodeResValue' => 'Y'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 1088,
			'NodeResNode' => '954',
			'NodeResOrd' => '1',
			'NodeResEng' => 'No',
			'NodeResValue' => 'N'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 1089,
			'NodeResNode' => '954',
			'NodeResOrd' => '2',
			'NodeResEng' => 'Not sure',
			'NodeResValue' => '?'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 1090,
			'NodeResNode' => '955',
			'NodeResEng' => 'Yes',
			'NodeResValue' => 'Y'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 1091,
			'NodeResNode' => '955',
			'NodeResOrd' => '1',
			'NodeResEng' => 'No',
			'NodeResValue' => 'N'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 1092,
			'NodeResNode' => '955',
			'NodeResOrd' => '2',
			'NodeResEng' => 'Not sure',
			'NodeResValue' => '?'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 1093,
			'NodeResNode' => '956',
			'NodeResEng' => 'Yes',
			'NodeResValue' => 'Y'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 1094,
			'NodeResNode' => '956',
			'NodeResOrd' => '1',
			'NodeResEng' => 'No',
			'NodeResValue' => 'N'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 1095,
			'NodeResNode' => '956',
			'NodeResOrd' => '2',
			'NodeResEng' => 'Not sure',
			'NodeResValue' => '?'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 1096,
			'NodeResNode' => '971',
			'NodeResEng' => 'Yes, I want to submit my compliment to the appropriate police investigative agencies. I also want to publish my compliment data on this website.',
			'NodeResValue' => 'Y'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 1097,
			'NodeResNode' => '972',
			'NodeResEng' => 'Yes, I hereby certify that the information in this compliment is true and correct to the best of my knowledge and belief.',
			'NodeResValue' => 'Y'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 1098,
			'NodeResNode' => '172',
			'NodeResEng' => 'Female',
			'NodeResValue' => 'F'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 1099,
			'NodeResNode' => '172',
			'NodeResOrd' => '1',
			'NodeResEng' => 'Male',
			'NodeResValue' => 'M'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 1100,
			'NodeResNode' => '1094',
			'NodeResEng' => 'Yes',
			'NodeResValue' => '1'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 1101,
			'NodeResNode' => '1094',
			'NodeResOrd' => '1',
			'NodeResEng' => 'No',
			'NodeResValue' => '0'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 1102,
			'NodeResNode' => '1162',
			'NodeResEng' => 'Yes',
			'NodeResValue' => 'Y',
			'NodeResShowKids' => '520'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 1103,
			'NodeResNode' => '1162',
			'NodeResOrd' => '1',
			'NodeResEng' => 'No',
			'NodeResValue' => 'N'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 1104,
			'NodeResNode' => '1162',
			'NodeResOrd' => '2',
			'NodeResEng' => 'Not sure',
			'NodeResValue' => '?'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 1105,
			'NodeResNode' => '1163',
			'NodeResEng' => 'Fatal injuries',
			'NodeResValue' => '256'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 1106,
			'NodeResNode' => '1163',
			'NodeResOrd' => '1',
			'NodeResEng' => 'Major bone broken',
			'NodeResValue' => '257'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 1107,
			'NodeResNode' => '1163',
			'NodeResOrd' => '3',
			'NodeResEng' => 'Compound fracture',
			'NodeResValue' => '258'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 1108,
			'NodeResNode' => '1163',
			'NodeResOrd' => '4',
			'NodeResEng' => 'In-patient hospital stay required',
			'NodeResValue' => '259'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 1109,
			'NodeResNode' => '1163',
			'NodeResOrd' => '5',
			'NodeResEng' => 'Blood loss requiring transfusion',
			'NodeResValue' => '260'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 1110,
			'NodeResNode' => '1163',
			'NodeResOrd' => '6',
			'NodeResEng' => 'Major concussion',
			'NodeResValue' => '261'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 1111,
			'NodeResNode' => '1163',
			'NodeResOrd' => '8',
			'NodeResEng' => 'Longer than brief loss of consciousness',
			'NodeResValue' => '262'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 1112,
			'NodeResNode' => '1163',
			'NodeResOrd' => '10',
			'NodeResEng' => 'Debilitating chronic pain',
			'NodeResValue' => '263'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 1113,
			'NodeResNode' => '1163',
			'NodeResOrd' => '11',
			'NodeResEng' => 'Damage to organ (other than skin)',
			'NodeResValue' => '264'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 1114,
			'NodeResNode' => '1163',
			'NodeResOrd' => '12',
			'NodeResEng' => 'Taser Wounds',
			'NodeResValue' => '265'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 1115,
			'NodeResNode' => '1163',
			'NodeResOrd' => '2',
			'NodeResEng' => 'Minor bone broken',
			'NodeResValue' => '266'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 1116,
			'NodeResNode' => '1163',
			'NodeResOrd' => '13',
			'NodeResEng' => 'Major laceration requiring stitches',
			'NodeResValue' => '267'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 1117,
			'NodeResNode' => '1163',
			'NodeResOrd' => '7',
			'NodeResEng' => 'Minor concussion',
			'NodeResValue' => '268'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 1118,
			'NodeResNode' => '1163',
			'NodeResOrd' => '9',
			'NodeResEng' => 'Brief loss of consciousness',
			'NodeResValue' => '269'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 1119,
			'NodeResNode' => '1163',
			'NodeResOrd' => '15',
			'NodeResEng' => 'Chipped or lost tooth',
			'NodeResValue' => '270'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 1120,
			'NodeResNode' => '1163',
			'NodeResOrd' => '16',
			'NodeResEng' => 'Major abrasion',
			'NodeResValue' => '271'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 1121,
			'NodeResNode' => '1163',
			'NodeResOrd' => '18',
			'NodeResEng' => 'Sprain',
			'NodeResValue' => '272'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 1122,
			'NodeResNode' => '1163',
			'NodeResOrd' => '19',
			'NodeResEng' => 'Bruising',
			'NodeResValue' => '273'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 1123,
			'NodeResNode' => '1163',
			'NodeResOrd' => '14',
			'NodeResEng' => 'Minor laceration',
			'NodeResValue' => '274'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 1124,
			'NodeResNode' => '1163',
			'NodeResOrd' => '17',
			'NodeResEng' => 'Minor abrasion',
			'NodeResValue' => '275'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 1125,
			'NodeResNode' => '1163',
			'NodeResOrd' => '20',
			'NodeResEng' => 'Other',
			'NodeResValue' => '471'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 1126,
			'NodeResNode' => '520',
			'NodeResEng' => 'Yes',
			'NodeResValue' => 'Y',
			'NodeResShowKids' => '1165'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 1127,
			'NodeResNode' => '520',
			'NodeResOrd' => '1',
			'NodeResEng' => 'No',
			'NodeResValue' => 'N'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 1128,
			'NodeResNode' => '520',
			'NodeResOrd' => '2',
			'NodeResEng' => 'Not sure',
			'NodeResValue' => '?'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 1129,
			'NodeResNode' => '1179',
			'NodeResEng' => '<span class="allegation">Yes (This is an allegation.)</span>',
			'NodeResValue' => 'Y',
			'NodeResShowKids' => '1180'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 1130,
			'NodeResNode' => '1179',
			'NodeResOrd' => '1',
			'NodeResEng' => 'No',
			'NodeResValue' => 'N'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 1131,
			'NodeResNode' => '1179',
			'NodeResOrd' => '2',
			'NodeResEng' => 'Not sure',
			'NodeResValue' => '?'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 1135,
			'NodeResNode' => '1187',
			'NodeResEng' => 'Yes',
			'NodeResValue' => 'Y'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 1136,
			'NodeResNode' => '1187',
			'NodeResOrd' => '1',
			'NodeResEng' => 'No',
			'NodeResValue' => 'N'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 1137,
			'NodeResNode' => '1187',
			'NodeResOrd' => '2',
			'NodeResEng' => 'Not sure',
			'NodeResValue' => '?'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 1138,
			'NodeResNode' => '275',
			'NodeResEng' => 'Outdoor public space (includes roads, sidewalks, parks, etc.)',
			'NodeResValue' => '352'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 1139,
			'NodeResNode' => '275',
			'NodeResOrd' => '1',
			'NodeResEng' => 'Home or private residence (includes just outside the residence)',
			'NodeResValue' => '349',
			'NodeResShowKids' => '1810'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 1140,
			'NodeResNode' => '275',
			'NodeResOrd' => '2',
			'NodeResEng' => 'College Dorm',
			'NodeResValue' => '495',
			'NodeResShowKids' => '1810'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 1141,
			'NodeResNode' => '275',
			'NodeResOrd' => '3',
			'NodeResEng' => 'School',
			'NodeResValue' => '404'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 1142,
			'NodeResNode' => '275',
			'NodeResOrd' => '4',
			'NodeResEng' => 'Workplace',
			'NodeResValue' => '350',
			'NodeResShowKids' => '1810'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 1143,
			'NodeResNode' => '275',
			'NodeResOrd' => '5',
			'NodeResEng' => 'Airport',
			'NodeResValue' => '351'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 1144,
			'NodeResNode' => '275',
			'NodeResOrd' => '6',
			'NodeResEng' => 'Indoor public space',
			'NodeResValue' => '353'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 1145,
			'NodeResNode' => '275',
			'NodeResOrd' => '7',
			'NodeResEng' => 'Police Station',
			'NodeResValue' => '492'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 1146,
			'NodeResNode' => '275',
			'NodeResOrd' => '8',
			'NodeResEng' => 'Telephone Call',
			'NodeResValue' => '493'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 1147,
			'NodeResNode' => '275',
			'NodeResOrd' => '9',
			'NodeResEng' => 'Other',
			'NodeResValue' => '494'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 1148,
			'NodeResNode' => '1191',
			'NodeResEng' => 'Speeding',
			'NodeResValue' => '174'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 1149,
			'NodeResNode' => '1191',
			'NodeResOrd' => '1',
			'NodeResEng' => 'Vehicle Defect',
			'NodeResValue' => '175'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 1150,
			'NodeResNode' => '1191',
			'NodeResOrd' => '2',
			'NodeResEng' => 'Records Violation',
			'NodeResValue' => '176'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 1151,
			'NodeResNode' => '1191',
			'NodeResOrd' => '3',
			'NodeResEng' => 'Illegal Turn or Lane Change',
			'NodeResValue' => '177'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 1152,
			'NodeResNode' => '1191',
			'NodeResOrd' => '4',
			'NodeResEng' => 'Seatbelt or Cell Phone Violation',
			'NodeResValue' => '178'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 1153,
			'NodeResNode' => '1191',
			'NodeResOrd' => '5',
			'NodeResEng' => 'Stop Sign/Light Violation',
			'NodeResValue' => '179'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 1154,
			'NodeResNode' => '1191',
			'NodeResOrd' => '6',
			'NodeResEng' => 'Disorderly Conduct',
			'NodeResValue' => '180'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 1155,
			'NodeResNode' => '1191',
			'NodeResOrd' => '7',
			'NodeResEng' => 'Disturbing the Peace',
			'NodeResValue' => '181'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 1156,
			'NodeResNode' => '1191',
			'NodeResOrd' => '8',
			'NodeResEng' => 'Loitering/Trespassing',
			'NodeResValue' => '402'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 1157,
			'NodeResNode' => '1191',
			'NodeResOrd' => '9',
			'NodeResEng' => 'Failure to Obey/Comply',
			'NodeResValue' => '182'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 1158,
			'NodeResNode' => '1191',
			'NodeResOrd' => '10',
			'NodeResEng' => 'Public Intoxication',
			'NodeResValue' => '183'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 1159,
			'NodeResNode' => '1191',
			'NodeResOrd' => '11',
			'NodeResEng' => 'Marijuana Possession',
			'NodeResValue' => '184'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 1160,
			'NodeResNode' => '1191',
			'NodeResOrd' => '12',
			'NodeResEng' => 'Weapons Violation',
			'NodeResValue' => '413'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 1161,
			'NodeResNode' => '1251',
			'NodeResEng' => 'Local Police',
			'NodeResValue' => '368'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 1162,
			'NodeResNode' => '1251',
			'NodeResOrd' => '1',
			'NodeResEng' => 'Sheriffs\' Offices',
			'NodeResValue' => '369'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 1163,
			'NodeResNode' => '1251',
			'NodeResOrd' => '2',
			'NodeResEng' => 'State Police',
			'NodeResValue' => '367'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 1164,
			'NodeResNode' => '1251',
			'NodeResOrd' => '3',
			'NodeResEng' => 'Federal Law Enforcement',
			'NodeResValue' => '366'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 1165,
			'NodeResNode' => '1251',
			'NodeResOrd' => '4',
			'NodeResEng' => 'Other Police Departments',
			'NodeResValue' => '370'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 1166,
			'NodeResNode' => '1251',
			'NodeResOrd' => '5',
			'NodeResEng' => 'Private Security Company',
			'NodeResValue' => '427'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 1167,
			'NodeResNode' => '1255',
			'NodeResEng' => 'Active Department',
			'NodeResValue' => '506'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 1168,
			'NodeResNode' => '1255',
			'NodeResOrd' => '1',
			'NodeResEng' => 'Inactive Department',
			'NodeResValue' => '507'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 1169,
			'NodeResNode' => '1278',
			'NodeResEng' => 'Yes',
			'NodeResValue' => 'Y'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 1170,
			'NodeResNode' => '1278',
			'NodeResOrd' => '1',
			'NodeResEng' => 'No, or I Can\'t See It',
			'NodeResValue' => 'N'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 1171,
			'NodeResNode' => '1285',
			'NodeResEng' => 'Submit via Email Allowed <span class="slGreenLight fPerc66 mL10">Score+10</span>',
			'NodeResValue' => 'Email'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 1172,
			'NodeResNode' => '1285',
			'NodeResOrd' => '1',
			'NodeResEng' => 'Verbally on Phone Allowed <span class="slGreenLight fPerc66 mL10">Score+2</span>',
			'NodeResValue' => 'VerbalPhone'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 1173,
			'NodeResNode' => '1285',
			'NodeResOrd' => '2',
			'NodeResEng' => 'Paper Form via Snail Mail Allowed <span class="slGreenLight fPerc66 mL10">Score+2</span>',
			'NodeResValue' => 'PaperMail'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 1174,
			'NodeResNode' => '1285',
			'NodeResOrd' => '3',
			'NodeResEng' => 'Requires In-Person Visit',
			'NodeResValue' => 'PaperInPerson',
			'NodeResMutEx' => '1'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 1175,
			'NodeResNode' => '1287',
			'NodeResEng' => 'Official Form NOT Required <span class="slGreenLight fPerc66 mL10">Score+10</span>',
			'NodeResValue' => 'OfficialFormNotReq'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 1176,
			'NodeResNode' => '1287',
			'NodeResOrd' => '1',
			'NodeResEng' => 'Anonymous Complaints <span class="slGreenLight fPerc66 mL10">Score+10</span>',
			'NodeResValue' => 'OfficialAnon'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 1177,
			'NodeResNode' => '1287',
			'NodeResOrd' => '2',
			'NodeResEng' => 'Requires Notary <span class="slGrey" style="font-size: 66%;">(for one or more types of complaint)</span> <span class="slRedLight fPerc66 mL10">Score-10</span>',
			'NodeResValue' => 'Notary'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 1178,
			'NodeResNode' => '1288',
			'NodeResOrd' => '2',
			'NodeResEng' => 'days'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 1179,
			'NodeResNode' => '1287',
			'NodeResOrd' => '3',
			'NodeResEng' => 'Time Limit  After Incident',
			'NodeResValue' => 'TimeLimit',
			'NodeResShowKids' => '1288'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 1182,
			'NodeResNode' => '1329',
			'NodeResEng' => '<i class="fa fa-laptop mL5 mR5"></i> Online Research',
			'NodeResValue' => 'Online'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 1183,
			'NodeResNode' => '1329',
			'NodeResOrd' => '1',
			'NodeResEng' => '<i class="fa fa-phone mL5 mR5"></i> Called and spoke with Main Department',
			'NodeResValue' => 'DeptCall'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 1184,
			'NodeResNode' => '1329',
			'NodeResOrd' => '2',
			'NodeResEng' => '<i class="fa fa-phone mL5 mR5"></i> Called and spoke with Internal Affairs',
			'NodeResValue' => 'IACall'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 1185,
			'NodeResNode' => '1329',
			'NodeResOrd' => '3',
			'NodeResEng' => '<i class="fa fa-pencil  fa-flip-horizontal mL5 mR5" aria-hidden="true"></i> Minor Changes',
			'NodeResValue' => 'Minor'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 1186,
			'NodeResNode' => '1335',
			'NodeResEng' => 'Next Department On The List',
			'NodeResValue' => 'another'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 1187,
			'NodeResNode' => '1335',
			'NodeResOrd' => '1',
			'NodeResEng' => 'Save Changes & Keep Editing',
			'NodeResValue' => 'again'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 1188,
			'NodeResNode' => '1335',
			'NodeResOrd' => '2',
			'NodeResEng' => 'Go Back to List of Departments',
			'NodeResValue' => 'list'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 1189,
			'NodeResNode' => '1323',
			'NodeResEng' => 'Investigative',
			'NodeResValue' => '191'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 1190,
			'NodeResNode' => '1323',
			'NodeResOrd' => '1',
			'NodeResEng' => 'Review',
			'NodeResValue' => '192'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 1191,
			'NodeResNode' => '1323',
			'NodeResOrd' => '2',
			'NodeResEng' => 'Audit',
			'NodeResValue' => '193'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 1192,
			'NodeResNode' => '1288',
			'NodeResOrd' => '-1',
			'NodeResValue' => '0'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 1193,
			'NodeResNode' => '1262',
			'NodeResOrd' => '-1',
			'NodeResValue' => '0'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 1194,
			'NodeResNode' => '1262',
			'NodeResOrd' => '2',
			'NodeResEng' => 'employees'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 1195,
			'NodeResNode' => '1263',
			'NodeResOrd' => '-1',
			'NodeResValue' => '0'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 1196,
			'NodeResNode' => '1263',
			'NodeResOrd' => '2',
			'NodeResEng' => 'people'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 1223,
			'NodeResNode' => '1413',
			'NodeResEng' => 'Yes',
			'NodeResValue' => 'Y'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 1224,
			'NodeResNode' => '1413',
			'NodeResOrd' => '1',
			'NodeResEng' => 'No',
			'NodeResValue' => 'N'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 1225,
			'NodeResNode' => '1413',
			'NodeResOrd' => '2',
			'NodeResEng' => 'Not sure',
			'NodeResValue' => '?'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 1231,
			'NodeResNode' => '1430',
			'NodeResEng' => 'Yes',
			'NodeResValue' => 'Y'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 1232,
			'NodeResNode' => '1430',
			'NodeResOrd' => '1',
			'NodeResEng' => 'No',
			'NodeResValue' => 'N',
			'NodeResShowKids' => '1434'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 1233,
			'NodeResNode' => '1430',
			'NodeResOrd' => '2',
			'NodeResEng' => 'Not sure',
			'NodeResValue' => '?'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 1240,
			'NodeResNode' => '767',
			'NodeResEng' => 'Yes, I confirm that the information in this complaint is to the best of my knowledge truthful and accurate.',
			'NodeResValue' => 'Y',
			'NodeResShowKids' => '976'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 1241,
			'NodeResNode' => '350',
			'NodeResEng' => 'Head',
			'NodeResValue' => '159'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 1242,
			'NodeResNode' => '350',
			'NodeResOrd' => '1',
			'NodeResEng' => 'Neck',
			'NodeResValue' => '160'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 1243,
			'NodeResNode' => '350',
			'NodeResOrd' => '2',
			'NodeResEng' => 'Torso',
			'NodeResValue' => '161'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 1244,
			'NodeResNode' => '350',
			'NodeResOrd' => '3',
			'NodeResEng' => 'Hand',
			'NodeResValue' => '162'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 1245,
			'NodeResNode' => '350',
			'NodeResOrd' => '4',
			'NodeResEng' => 'Elbow',
			'NodeResValue' => '163'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 1246,
			'NodeResNode' => '350',
			'NodeResOrd' => '5',
			'NodeResEng' => 'Arm',
			'NodeResValue' => '164'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 1247,
			'NodeResNode' => '350',
			'NodeResOrd' => '6',
			'NodeResEng' => 'Foot',
			'NodeResValue' => '165'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 1248,
			'NodeResNode' => '350',
			'NodeResOrd' => '7',
			'NodeResEng' => 'Knee',
			'NodeResValue' => '166'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 1249,
			'NodeResNode' => '350',
			'NodeResOrd' => '8',
			'NodeResEng' => 'Leg',
			'NodeResValue' => '167'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 1250,
			'NodeResNode' => '350',
			'NodeResOrd' => '9',
			'NodeResEng' => 'Crotch',
			'NodeResValue' => '168'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 1251,
			'NodeResNode' => '350',
			'NodeResOrd' => '10',
			'NodeResEng' => 'Unknown',
			'NodeResValue' => '169'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 1252,
			'NodeResNode' => '1810',
			'NodeResEng' => 'Yes',
			'NodeResValue' => 'Y'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 1253,
			'NodeResNode' => '1810',
			'NodeResOrd' => '1',
			'NodeResEng' => 'No',
			'NodeResValue' => 'N'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 1254,
			'NodeResNode' => '1810',
			'NodeResOrd' => '2',
			'NodeResEng' => 'Not sure',
			'NodeResValue' => '?'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 1255,
			'NodeResNode' => '829',
			'NodeResEng' => 'Choose one...',
			'NodeResValue' => '-'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 1256,
			'NodeResNode' => '829',
			'NodeResOrd' => '1',
			'NodeResEng' => 'I need help with a police incident',
			'NodeResValue' => 'Complainant',
			'NodeResShowKids' => '1879'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 1257,
			'NodeResNode' => '829',
			'NodeResOrd' => '2',
			'NodeResEng' => 'I\'m a member of law enforcement',
			'NodeResValue' => 'Law enforcement',
			'NodeResShowKids' => '1880'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 1258,
			'NodeResNode' => '829',
			'NodeResOrd' => '3',
			'NodeResEng' => 'I\'m an attorney',
			'NodeResValue' => 'Attorney',
			'NodeResShowKids' => '1881'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 1259,
			'NodeResNode' => '829',
			'NodeResOrd' => '4',
			'NodeResEng' => 'I\'m with the media',
			'NodeResValue' => 'Media'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 1260,
			'NodeResNode' => '829',
			'NodeResOrd' => '5',
			'NodeResEng' => 'I want to volunteer',
			'NodeResValue' => 'Volunteer',
			'NodeResShowKids' => '1973'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 1261,
			'NodeResNode' => '829',
			'NodeResOrd' => '7',
			'NodeResEng' => 'Donation Inquiry',
			'NodeResValue' => 'Donor'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 1262,
			'NodeResNode' => '829',
			'NodeResOrd' => '8',
			'NodeResEng' => 'Other Inquiries',
			'NodeResValue' => 'Other',
			'NodeResShowKids' => '1974'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 1263,
			'NodeResNode' => '1879',
			'NodeResEng' => 'I have a question before I submit a complaint or compliment with OpenPolice.org.',
			'NodeResValue' => 'I have a question before I submit a complaint or compliment with OpenPolice.org.'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 1264,
			'NodeResNode' => '1879',
			'NodeResOrd' => '1',
			'NodeResEng' => 'I need to follow up about my complaint or compliment on OpenPolice.org.',
			'NodeResValue' => 'I need to follow up about my complaint or compliment on OpenPolice.org.'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 1265,
			'NodeResNode' => '1879',
			'NodeResOrd' => '2',
			'NodeResEng' => 'I need help finding a lawyer.',
			'NodeResValue' => 'I need help finding a lawyer.'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 1266,
			'NodeResNode' => '1879',
			'NodeResOrd' => '3',
			'NodeResEng' => 'I\'m reporting a bug or error on OpenPolice.org.',
			'NodeResValue' => 'I\'m reporting a bug or error on OpenPolice.org.'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 1267,
			'NodeResNode' => '1879',
			'NodeResOrd' => '4',
			'NodeResEng' => 'Other inquiries',
			'NodeResValue' => 'Other'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 1268,
			'NodeResNode' => '1880',
			'NodeResEng' => 'I want to schedule a 20-minute phone or web chat about OpenPolice.org.',
			'NodeResValue' => 'I want to schedule a 20-minute phone or web chat about OpenPolice.org.'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 1269,
			'NodeResNode' => '1880',
			'NodeResOrd' => '1',
			'NodeResEng' => 'I have a question about a complaint my department received.',
			'NodeResValue' => 'I have a question about a complaint my department received.'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 1270,
			'NodeResNode' => '1880',
			'NodeResOrd' => '2',
			'NodeResEng' => 'I want to correct information about my department.',
			'NodeResValue' => 'I want to correct information about my department.'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 1271,
			'NodeResNode' => '1881',
			'NodeResEng' => 'I have questions about signing up to receive referrals to potential civil rights cases.',
			'NodeResValue' => 'I have questions about signing up to receive referrals to potential civil rights cases.'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 1272,
			'NodeResNode' => '1881',
			'NodeResOrd' => '1',
			'NodeResEng' => 'Other inquiry',
			'NodeResValue' => 'Other'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 1273,
			'NodeResNode' => '1880',
			'NodeResOrd' => '3',
			'NodeResEng' => 'Other inquiry',
			'NodeResValue' => 'Other'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 1274,
			'NodeResNode' => '1890',
			'NodeResEng' => 'Yes, submit my complaint',
			'NodeResValue' => 'Y'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 1275,
			'NodeResNode' => '1890',
			'NodeResOrd' => '1',
			'NodeResEng' => 'No, this is only for my lawyer to review',
			'NodeResValue' => 'N'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 1276,
			'NodeResNode' => '1890',
			'NodeResOrd' => '2',
			'NodeResEng' => 'Not sure',
			'NodeResValue' => '?'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 1277,
			'NodeResNode' => '1926',
			'NodeResEng' => 'Public',
			'NodeResValue' => '1'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 1278,
			'NodeResNode' => '1926',
			'NodeResOrd' => '1',
			'NodeResEng' => 'Unlisted',
			'NodeResValue' => '0'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 1322,
			'NodeResNode' => '1951',
			'NodeResEng' => 'Never email, log in to review matches',
			'NodeResValue' => '556'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 1323,
			'NodeResNode' => '1951',
			'NodeResOrd' => '1',
			'NodeResEng' => 'Email each referral match immediately',
			'NodeResValue' => '557'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 1324,
			'NodeResNode' => '1951',
			'NodeResOrd' => '2',
			'NodeResEng' => 'Email daily list of matches, if any',
			'NodeResValue' => '558'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 1325,
			'NodeResNode' => '1951',
			'NodeResOrd' => '3',
			'NodeResEng' => 'Email matches, if any, every three days',
			'NodeResValue' => '559'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 1326,
			'NodeResNode' => '1951',
			'NodeResOrd' => '4',
			'NodeResEng' => 'Email matches, if any, every week',
			'NodeResValue' => '560'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 1327,
			'NodeResNode' => '1935',
			'NodeResEng' => 'Other Witnesses',
			'NodeResValue' => '518'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 1328,
			'NodeResNode' => '1935',
			'NodeResOrd' => '1',
			'NodeResEng' => 'Unresolved Charges',
			'NodeResValue' => '519'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 1329,
			'NodeResNode' => '1935',
			'NodeResOrd' => '2',
			'NodeResEng' => 'Arrested',
			'NodeResValue' => '520'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 1330,
			'NodeResNode' => '1935',
			'NodeResOrd' => '3',
			'NodeResEng' => 'Use of Force',
			'NodeResValue' => '521'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 1331,
			'NodeResNode' => '1935',
			'NodeResOrd' => '4',
			'NodeResEng' => 'Injury',
			'NodeResValue' => '522'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 1332,
			'NodeResNode' => '1935',
			'NodeResOrd' => '5',
			'NodeResEng' => 'Fatality',
			'NodeResValue' => '523'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 1333,
			'NodeResNode' => '1935',
			'NodeResOrd' => '6',
			'NodeResEng' => 'Has Evidence',
			'NodeResValue' => '524'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 1334,
			'NodeResNode' => '1935',
			'NodeResOrd' => '7',
			'NodeResEng' => 'Video of Incident',
			'NodeResValue' => '525'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 1335,
			'NodeResNode' => '1935',
			'NodeResOrd' => '8',
			'NodeResEng' => 'Allegation: Unreasonable Force',
			'NodeResValue' => '526'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 1336,
			'NodeResNode' => '1935',
			'NodeResOrd' => '9',
			'NodeResEng' => 'Allegation: Wrongful Arrest',
			'NodeResValue' => '527'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 1337,
			'NodeResNode' => '1935',
			'NodeResOrd' => '10',
			'NodeResEng' => 'Allegation: Wrongful Detention',
			'NodeResValue' => '528'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 1338,
			'NodeResNode' => '1935',
			'NodeResOrd' => '11',
			'NodeResEng' => 'Allegation: Wrongful Entry',
			'NodeResValue' => '529'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 1339,
			'NodeResNode' => '1935',
			'NodeResOrd' => '12',
			'NodeResEng' => 'Allegation: Wrongful Search',
			'NodeResValue' => '530'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 1340,
			'NodeResNode' => '1935',
			'NodeResOrd' => '13',
			'NodeResEng' => 'Allegation: Wrongful Property Damage',
			'NodeResValue' => '544'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 1341,
			'NodeResNode' => '1935',
			'NodeResOrd' => '14',
			'NodeResEng' => 'Allegation: Wrongful Property Seizure',
			'NodeResValue' => '531'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 1342,
			'NodeResNode' => '1935',
			'NodeResOrd' => '15',
			'NodeResEng' => 'Allegation: Bias-Based Policing',
			'NodeResValue' => '532'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 1343,
			'NodeResNode' => '1935',
			'NodeResOrd' => '16',
			'NodeResEng' => 'Allegation: Excessive Arrest Charges',
			'NodeResValue' => '533'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 1344,
			'NodeResNode' => '1935',
			'NodeResOrd' => '17',
			'NodeResEng' => 'Allegation: Excessive Citation',
			'NodeResValue' => '534'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 1345,
			'NodeResNode' => '1935',
			'NodeResOrd' => '18',
			'NodeResEng' => 'Allegation: Intimidating Display Of Weapon',
			'NodeResValue' => '535'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 1346,
			'NodeResNode' => '1935',
			'NodeResOrd' => '19',
			'NodeResEng' => 'Allegation: Sexual Harassment',
			'NodeResValue' => '536'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 1347,
			'NodeResNode' => '1935',
			'NodeResOrd' => '20',
			'NodeResEng' => 'Allegation: Sexual Assault',
			'NodeResValue' => '537'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 1348,
			'NodeResNode' => '1935',
			'NodeResOrd' => '21',
			'NodeResEng' => 'Allegation: Policy or Procedure Violation',
			'NodeResValue' => '538'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 1349,
			'NodeResNode' => '1935',
			'NodeResOrd' => '22',
			'NodeResEng' => 'Allegation: Conduct Unbecoming an Officer',
			'NodeResValue' => '539'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 1350,
			'NodeResNode' => '1935',
			'NodeResOrd' => '23',
			'NodeResEng' => 'Allegation: Discourtesy',
			'NodeResValue' => '540'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 1351,
			'NodeResNode' => '1935',
			'NodeResOrd' => '24',
			'NodeResEng' => 'Allegation: Officer Refused To Provide ID',
			'NodeResValue' => '541'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 1352,
			'NodeResNode' => '1935',
			'NodeResOrd' => '25',
			'NodeResEng' => 'Allegation: Miranda Rights',
			'NodeResValue' => '542'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 1353,
			'NodeResNode' => '1935',
			'NodeResOrd' => '26',
			'NodeResEng' => 'Allegation: Neglect of Duty',
			'NodeResValue' => '543'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 1354,
			'NodeResNode' => '1935',
			'NodeResOrd' => '27',
			'NodeResEng' => 'Gender: Male',
			'NodeResValue' => '545'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 1355,
			'NodeResNode' => '1935',
			'NodeResOrd' => '28',
			'NodeResEng' => 'Gender: Female',
			'NodeResValue' => '546'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 1356,
			'NodeResNode' => '1935',
			'NodeResOrd' => '29',
			'NodeResEng' => 'Gender: Trans & Other',
			'NodeResValue' => '547'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 1357,
			'NodeResNode' => '1935',
			'NodeResOrd' => '30',
			'NodeResEng' => 'Race: Asian',
			'NodeResValue' => '548'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 1358,
			'NodeResNode' => '1935',
			'NodeResOrd' => '31',
			'NodeResEng' => 'Race: Black/African/Caribbean',
			'NodeResValue' => '549'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 1359,
			'NodeResNode' => '1935',
			'NodeResOrd' => '32',
			'NodeResEng' => 'Race: Hispanic/Latinx',
			'NodeResValue' => '550'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 1360,
			'NodeResNode' => '1935',
			'NodeResOrd' => '33',
			'NodeResEng' => 'Race: Middle Eastern',
			'NodeResValue' => '551'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 1361,
			'NodeResNode' => '1935',
			'NodeResOrd' => '34',
			'NodeResEng' => 'Race: Native American',
			'NodeResValue' => '552'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 1362,
			'NodeResNode' => '1935',
			'NodeResOrd' => '35',
			'NodeResEng' => 'Race: Pacific Islander',
			'NodeResValue' => '553'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 1363,
			'NodeResNode' => '1935',
			'NodeResOrd' => '36',
			'NodeResEng' => 'Race: White/Caucasian',
			'NodeResValue' => '554'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 1364,
			'NodeResNode' => '1935',
			'NodeResOrd' => '37',
			'NodeResEng' => 'Race: Other',
			'NodeResValue' => '555'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 1365,
			'NodeResNode' => '1973',
			'NodeResEng' => 'Web Development',
			'NodeResValue' => 'Web Development',
			'NodeResShowKids' => '1975'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 1366,
			'NodeResNode' => '1973',
			'NodeResOrd' => '1',
			'NodeResEng' => 'Startup or Legal Expertise',
			'NodeResValue' => 'Startup or Legal Expertise'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 1367,
			'NodeResNode' => '1973',
			'NodeResOrd' => '2',
			'NodeResEng' => 'Research or Data Entry',
			'NodeResValue' => 'Research or Data Entry',
			'NodeResShowKids' => '1976'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 1368,
			'NodeResNode' => '1973',
			'NodeResOrd' => '3',
			'NodeResEng' => 'Other',
			'NodeResValue' => 'Other'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 1369,
			'NodeResNode' => '2016',
			'NodeResEng' => 'Yes',
			'NodeResValue' => 'Y'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 1370,
			'NodeResNode' => '2016',
			'NodeResOrd' => '1',
			'NodeResEng' => 'No',
			'NodeResValue' => 'N'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 1371,
			'NodeResNode' => '2016',
			'NodeResOrd' => '2',
			'NodeResEng' => 'Not sure',
			'NodeResValue' => '?'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 1372,
			'NodeResNode' => '2018',
			'NodeResEng' => '<h2 class="disIn slBlueDark">Full Transparency</h2>
<div class="privOptPadL"><ul><li>You will publish your FULL complaint on OpenPolice.org. That includes your written story, the names of civilians and police officers, and your detailed survey answers.</li><li>Search engines will index your complaint. That means you cannot erase it, and you will publicly link it to your name.</li></ul></div>',
			'NodeResValue' => '304'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 1373,
			'NodeResNode' => '2018',
			'NodeResOrd' => '1',
			'NodeResEng' => '<h2 class=\"disIn slBlueDark\">No Names Public</h2>\r\n<div class=\"privOptPadL\"><ul><li>You will only publish your multiple-choice answers on OpenPolice.org. That will NOT include your written story nor information showing police officersï¿½ identities.</li></ul></div>',
			'NodeResValue' => '305'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 1374,
			'NodeResNode' => '2018',
			'NodeResOrd' => '2',
			'NodeResEng' => '<h2 class=\"disIn slBlueDark\">Anonymous</h2>\r\n<div class=\"privOptPadL\"><ul><li>We will NOT ask for you personal information.</li><li>Neither OpenPolice.org staff nor investigators can contact you. That will make it harder to investigate your complaint.</li><li>You will only publish your multiple-choice answers on OpenPolice.org. That will NOT include your written story nor information showing police officersï¿½ identities.</li></ul></div>',
			'NodeResValue' => '306'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 1375,
			'NodeResNode' => '829',
			'NodeResOrd' => '6',
			'NodeResEng' => 'I want to correct an inaccuracy',
			'NodeResValue' => 'Correct inaccuracy'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 1376,
			'NodeResNode' => '742',
			'NodeResEng' => 'Grabbing or Control Hold',
			'NodeResValue' => '227'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 1377,
			'NodeResNode' => '742',
			'NodeResOrd' => '1',
			'NodeResEng' => 'Pushing',
			'NodeResValue' => '443'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 1378,
			'NodeResNode' => '742',
			'NodeResOrd' => '2',
			'NodeResEng' => 'Body Weapons (Punch, Kick, Elbow, etc)',
			'NodeResValue' => '228'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 1379,
			'NodeResNode' => '742',
			'NodeResOrd' => '3',
			'NodeResEng' => 'Takedown',
			'NodeResValue' => '229'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 1380,
			'NodeResNode' => '742',
			'NodeResOrd' => '4',
			'NodeResEng' => 'Baton Strike',
			'NodeResValue' => '230'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 1381,
			'NodeResNode' => '742',
			'NodeResOrd' => '5',
			'NodeResEng' => 'Taser',
			'NodeResValue' => '231'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 1382,
			'NodeResNode' => '742',
			'NodeResOrd' => '6',
			'NodeResEng' => 'Gun',
			'NodeResValue' => '232'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 1383,
			'NodeResNode' => '742',
			'NodeResOrd' => '7',
			'NodeResEng' => 'Mace or Pepper Spray',
			'NodeResValue' => '233'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 1384,
			'NodeResNode' => '742',
			'NodeResOrd' => '8',
			'NodeResEng' => 'K9 (Dog) Bite',
			'NodeResValue' => '234'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 1385,
			'NodeResNode' => '742',
			'NodeResOrd' => '9',
			'NodeResEng' => 'Vehicle',
			'NodeResValue' => '235'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 1386,
			'NodeResNode' => '742',
			'NodeResOrd' => '10',
			'NodeResEng' => 'Other',
			'NodeResValue' => '236'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 1387,
			'NodeResNode' => '744',
			'NodeResEng' => 'Grabbing or Control Hold',
			'NodeResValue' => '227'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 1388,
			'NodeResNode' => '744',
			'NodeResOrd' => '1',
			'NodeResEng' => 'Pushing',
			'NodeResValue' => '443'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 1389,
			'NodeResNode' => '744',
			'NodeResOrd' => '2',
			'NodeResEng' => 'Body Weapons (Punch, Kick, Elbow, etc)',
			'NodeResValue' => '228'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 1390,
			'NodeResNode' => '744',
			'NodeResOrd' => '3',
			'NodeResEng' => 'Takedown',
			'NodeResValue' => '229'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 1391,
			'NodeResNode' => '744',
			'NodeResOrd' => '4',
			'NodeResEng' => 'Baton Strike',
			'NodeResValue' => '230'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 1392,
			'NodeResNode' => '744',
			'NodeResOrd' => '5',
			'NodeResEng' => 'Taser',
			'NodeResValue' => '231'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 1393,
			'NodeResNode' => '744',
			'NodeResOrd' => '6',
			'NodeResEng' => 'Gun',
			'NodeResValue' => '232'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 1394,
			'NodeResNode' => '744',
			'NodeResOrd' => '7',
			'NodeResEng' => 'Mace or Pepper Spray',
			'NodeResValue' => '233'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 1395,
			'NodeResNode' => '744',
			'NodeResOrd' => '8',
			'NodeResEng' => 'K9 (Dog) Bite',
			'NodeResValue' => '234'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 1396,
			'NodeResNode' => '744',
			'NodeResOrd' => '9',
			'NodeResEng' => 'Vehicle',
			'NodeResValue' => '235'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 1397,
			'NodeResNode' => '744',
			'NodeResOrd' => '10',
			'NodeResEng' => 'Other',
			'NodeResValue' => '236'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 1398,
			'NodeResNode' => '2044',
			'NodeResEng' => 'Grabbing or Control Hold',
			'NodeResValue' => '227'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 1399,
			'NodeResNode' => '2044',
			'NodeResOrd' => '1',
			'NodeResEng' => 'Pushing',
			'NodeResValue' => '443'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 1400,
			'NodeResNode' => '2044',
			'NodeResOrd' => '2',
			'NodeResEng' => 'Body Weapons (Punch, Kick, Elbow, etc)',
			'NodeResValue' => '228'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 1401,
			'NodeResNode' => '2044',
			'NodeResOrd' => '3',
			'NodeResEng' => 'Takedown',
			'NodeResValue' => '229'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 1402,
			'NodeResNode' => '2044',
			'NodeResOrd' => '4',
			'NodeResEng' => 'Baton Strike',
			'NodeResValue' => '230'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 1403,
			'NodeResNode' => '2044',
			'NodeResOrd' => '5',
			'NodeResEng' => 'Taser',
			'NodeResValue' => '231'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 1404,
			'NodeResNode' => '2044',
			'NodeResOrd' => '6',
			'NodeResEng' => 'Gun',
			'NodeResValue' => '232'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 1405,
			'NodeResNode' => '2044',
			'NodeResOrd' => '7',
			'NodeResEng' => 'Mace or Pepper Spray',
			'NodeResValue' => '233'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 1406,
			'NodeResNode' => '2044',
			'NodeResOrd' => '8',
			'NodeResEng' => 'K9 (Dog) Bite',
			'NodeResValue' => '234'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 1407,
			'NodeResNode' => '2044',
			'NodeResOrd' => '9',
			'NodeResEng' => 'Vehicle',
			'NodeResValue' => '235'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 1408,
			'NodeResNode' => '2044',
			'NodeResOrd' => '10',
			'NodeResEng' => 'Other',
			'NodeResValue' => '236'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 1409,
			'NodeResNode' => '616',
			'NodeResOrd' => '3',
			'NodeResEng' => 'Other',
			'NodeResValue' => '417',
			'NodeResShowKids' => '618'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 1410,
			'NodeResNode' => '616',
			'NodeResOrd' => '4',
			'NodeResEng' => 'Not sure',
			'NodeResValue' => '583',
			'NodeResShowKids' => '618'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 1411,
			'NodeResNode' => '2074',
			'NodeResEng' => 'Attorney',
			'NodeResValue' => '219'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 1412,
			'NodeResNode' => '2074',
			'NodeResOrd' => '1',
			'NodeResEng' => 'Academic',
			'NodeResValue' => '220'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 1413,
			'NodeResNode' => '2074',
			'NodeResOrd' => '2',
			'NodeResEng' => 'Journalist',
			'NodeResValue' => '221'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 1414,
			'NodeResNode' => '2074',
			'NodeResOrd' => '3',
			'NodeResEng' => 'Researcher',
			'NodeResValue' => '222'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 1415,
			'NodeResNode' => '2074',
			'NodeResOrd' => '4',
			'NodeResEng' => 'Police Department',
			'NodeResValue' => '516'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 1416,
			'NodeResNode' => '2074',
			'NodeResOrd' => '5',
			'NodeResEng' => 'Investigative Agency',
			'NodeResValue' => '517'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 1417,
			'NodeResNode' => '2074',
			'NodeResOrd' => '6',
			'NodeResEng' => 'Organization',
			'NodeResValue' => '584'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 1418,
			'NodeResNode' => '2125',
			'NodeResEng' => 'Yes, I want to share my complaint with attorneys and legal experts who can help.',
			'NodeResValue' => 'Y'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 1419,
			'NodeResNode' => '2126',
			'NodeResEng' => 'Yes, I want to publish my complaint data on this website.',
			'NodeResValue' => 'Yes, I want to publish my complaint data on this website.'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 1420,
			'NodeResNode' => '349',
			'NodeResOrd' => '-1',
			'NodeResValue' => '0'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 1421,
			'NodeResNode' => '2132',
			'NodeResEng' => 'Driver',
			'NodeResValue' => '593'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 1422,
			'NodeResNode' => '2132',
			'NodeResOrd' => '1',
			'NodeResEng' => 'Passenger',
			'NodeResValue' => '594'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 1429,
			'NodeResNode' => '1431',
			'NodeResEng' => 'Car',
			'NodeResValue' => '360'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 1430,
			'NodeResNode' => '1431',
			'NodeResOrd' => '1',
			'NodeResEng' => 'Truck',
			'NodeResValue' => '592'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 1431,
			'NodeResNode' => '1431',
			'NodeResOrd' => '2',
			'NodeResEng' => 'Van',
			'NodeResValue' => '361'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 1432,
			'NodeResNode' => '1431',
			'NodeResOrd' => '3',
			'NodeResEng' => 'Motorcycle',
			'NodeResValue' => '362'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 1433,
			'NodeResNode' => '1431',
			'NodeResOrd' => '4',
			'NodeResEng' => 'Bicycle',
			'NodeResValue' => '363'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 1434,
			'NodeResNode' => '1431',
			'NodeResOrd' => '5',
			'NodeResEng' => 'Boat',
			'NodeResValue' => '364'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 1435,
			'NodeResNode' => '1431',
			'NodeResOrd' => '6',
			'NodeResEng' => 'Other',
			'NodeResValue' => '365'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 1436,
			'NodeResNode' => '2140',
			'NodeResEng' => 'Yes',
			'NodeResValue' => '0',
			'NodeResShowKids' => '2141'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 1437,
			'NodeResNode' => '2140',
			'NodeResOrd' => '1',
			'NodeResEng' => 'No',
			'NodeResValue' => '1'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 1438,
			'NodeResNode' => '2147',
			'NodeResEng' => 'Driver',
			'NodeResValue' => '593'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 1439,
			'NodeResNode' => '2147',
			'NodeResOrd' => '1',
			'NodeResEng' => 'Passenger',
			'NodeResValue' => '594'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 1460,
			'NodeResNode' => '1229',
			'NodeResEng' => 'Yes',
			'NodeResValue' => 'Y'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 1461,
			'NodeResNode' => '1229',
			'NodeResOrd' => '1',
			'NodeResEng' => 'No',
			'NodeResValue' => 'N'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 1462,
			'NodeResNode' => '2185',
			'NodeResEng' => 'Yes',
			'NodeResValue' => 'Y',
			'NodeResShowKids' => '2186'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 1463,
			'NodeResNode' => '2185',
			'NodeResOrd' => '1',
			'NodeResEng' => 'No',
			'NodeResValue' => 'N'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 1464,
			'NodeResNode' => '2185',
			'NodeResOrd' => '2',
			'NodeResEng' => 'Not sure',
			'NodeResValue' => '?'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 1465,
			'NodeResNode' => '2186',
			'NodeResEng' => '<span class="allegation">Yes (This is an allegation.)</span>',
			'NodeResValue' => 'Y',
			'NodeResShowKids' => '2187'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 1466,
			'NodeResNode' => '2186',
			'NodeResOrd' => '1',
			'NodeResEng' => 'No',
			'NodeResValue' => 'N'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 1467,
			'NodeResNode' => '2186',
			'NodeResOrd' => '2',
			'NodeResEng' => 'Not sure',
			'NodeResValue' => '?'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 1468,
			'NodeResNode' => '2244',
			'NodeResEng' => 'Yes',
			'NodeResValue' => '1'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 1478,
			'NodeResNode' => '2247',
			'NodeResEng' => '2019',
			'NodeResValue' => '2019'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 1479,
			'NodeResNode' => '2247',
			'NodeResOrd' => '1',
			'NodeResEng' => '2018',
			'NodeResValue' => '2018'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 1480,
			'NodeResNode' => '2247',
			'NodeResOrd' => '2',
			'NodeResEng' => '2017',
			'NodeResValue' => '2017'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 1481,
			'NodeResNode' => '2247',
			'NodeResOrd' => '3',
			'NodeResEng' => '2016',
			'NodeResValue' => '2016'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 1482,
			'NodeResNode' => '2247',
			'NodeResOrd' => '4',
			'NodeResEng' => '2015',
			'NodeResValue' => '2015'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 1483,
			'NodeResNode' => '2247',
			'NodeResOrd' => '5',
			'NodeResEng' => '2014',
			'NodeResValue' => '2014'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 1484,
			'NodeResNode' => '2247',
			'NodeResOrd' => '6',
			'NodeResEng' => '2013',
			'NodeResValue' => '2013'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 1485,
			'NodeResNode' => '2247',
			'NodeResOrd' => '7',
			'NodeResEng' => '2012',
			'NodeResValue' => '2012'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 1486,
			'NodeResNode' => '2247',
			'NodeResOrd' => '8',
			'NodeResEng' => '2011',
			'NodeResValue' => '2011'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 1487,
			'NodeResNode' => '2247',
			'NodeResOrd' => '9',
			'NodeResEng' => '2010',
			'NodeResValue' => '2010'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 1488,
			'NodeResNode' => '2247',
			'NodeResOrd' => '10',
			'NodeResEng' => '2009',
			'NodeResValue' => '2009'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 1489,
			'NodeResNode' => '2247',
			'NodeResOrd' => '11',
			'NodeResEng' => '2008',
			'NodeResValue' => '2008'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 1490,
			'NodeResNode' => '2247',
			'NodeResOrd' => '12',
			'NodeResEng' => '2007',
			'NodeResValue' => '2007'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 1491,
			'NodeResNode' => '2247',
			'NodeResOrd' => '13',
			'NodeResEng' => '2006',
			'NodeResValue' => '2006'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 1492,
			'NodeResNode' => '2247',
			'NodeResOrd' => '14',
			'NodeResEng' => '2005',
			'NodeResValue' => '2005'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 1493,
			'NodeResNode' => '2247',
			'NodeResOrd' => '15',
			'NodeResEng' => '2004',
			'NodeResValue' => '2004'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 1494,
			'NodeResNode' => '2247',
			'NodeResOrd' => '16',
			'NodeResEng' => '2003',
			'NodeResValue' => '2003'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 1495,
			'NodeResNode' => '2247',
			'NodeResOrd' => '17',
			'NodeResEng' => '2002',
			'NodeResValue' => '2002'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 1496,
			'NodeResNode' => '2247',
			'NodeResOrd' => '18',
			'NodeResEng' => '2001',
			'NodeResValue' => '2001'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 1497,
			'NodeResNode' => '2247',
			'NodeResOrd' => '19',
			'NodeResEng' => '2000',
			'NodeResValue' => '2000'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 1498,
			'NodeResNode' => '2255',
			'NodeResEng' => 'I just want to demo the app without filing a real complaint',
			'NodeResValue' => '1'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 1500,
			'NodeResNode' => '2260',
			'NodeResEng' => 'I just want to demo the app without filing a real complaint',
			'NodeResValue' => '1'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 1501,
			'NodeResNode' => '2320',
			'NodeResEng' => 'No',
			'NodeResValue' => '0'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 1502,
			'NodeResNode' => '2320',
			'NodeResOrd' => '1',
			'NodeResEng' => 'Yes',
			'NodeResValue' => '1'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 1503,
			'NodeResNode' => '172',
			'NodeResOrd' => '2',
			'NodeResEng' => 'Not Sure',
			'NodeResValue' => '?'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 1504,
			'NodeResNode' => '1335',
			'NodeResOrd' => '3',
			'NodeResEng' => 'View Department Profile',
			'NodeResValue' => 'dept-page'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 1505,
			'NodeResNode' => '870',
			'NodeResOrd' => '3',
			'NodeResEng' => 'I was not at the scene, but I\'m impressed with police actions on the news or on the internet.?',
			'NodeResValue' => 'Impressed'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 1506,
			'NodeResNode' => '2589',
			'NodeResEng' => 'Yes',
			'NodeResValue' => '1'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 1507,
			'NodeResNode' => '2589',
			'NodeResOrd' => '1',
			'NodeResEng' => 'No',
			'NodeResValue' => '0'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 1508,
			'NodeResNode' => '2602',
			'NodeResEng' => 'Yes',
			'NodeResValue' => '1'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 1509,
			'NodeResNode' => '2602',
			'NodeResOrd' => '1',
			'NodeResEng' => 'No',
			'NodeResValue' => '0'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 1510,
			'NodeResNode' => '2604',
			'NodeResEng' => 'Yes, I have read and understand the above notice.',
			'NodeResValue' => '1'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 1511,
			'NodeResNode' => '2085',
			'NodeResEng' => 'Assist Complainants Using OpenPolice.org',
			'NodeResValue' => '588'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 1512,
			'NodeResNode' => '2085',
			'NodeResOrd' => '1',
			'NodeResEng' => 'Hosts Clinics for Using OpenPolice.org',
			'NodeResValue' => '667'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 1513,
			'NodeResNode' => '2085',
			'NodeResOrd' => '2',
			'NodeResEng' => 'Services or Support for Police Brutality Victims',
			'NodeResValue' => '585'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 1514,
			'NodeResNode' => '2085',
			'NodeResOrd' => '3',
			'NodeResEng' => 'Education About Police or Corrections',
			'NodeResValue' => '587'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 1515,
			'NodeResNode' => '2085',
			'NodeResOrd' => '4',
			'NodeResEng' => 'Legal Assistance for Civil Cases',
			'NodeResValue' => '610'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 1516,
			'NodeResNode' => '2085',
			'NodeResOrd' => '5',
			'NodeResEng' => 'Legal Representation for Civil Cases',
			'NodeResValue' => '609'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 1517,
			'NodeResNode' => '2085',
			'NodeResOrd' => '6',
			'NodeResEng' => 'Legal Assistance for Criminal Cases',
			'NodeResValue' => '589'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 1518,
			'NodeResNode' => '2085',
			'NodeResOrd' => '7',
			'NodeResEng' => 'Legal Representation for Criminal Cases',
			'NodeResValue' => '590'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 1519,
			'NodeResNode' => '2085',
			'NodeResOrd' => '8',
			'NodeResEng' => 'Political or Legislative Action',
			'NodeResValue' => '586'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 1520,
			'NodeResNode' => '2085',
			'NodeResOrd' => '9',
			'NodeResEng' => 'Accepts Legal Referrals through OpenPolice.org',
			'NodeResValue' => '606',
			'NodeResShowKids' => '2082'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 1521,
			'NodeResNode' => '2726',
			'NodeResEng' => 'Department Employment Not Verified',
			'NodeResValue' => '670'
		]);
		DB::table('SL_NodeResponses')->insert([
			'NodeResID' => 1522,
			'NodeResNode' => '2726',
			'NodeResOrd' => '1',
			'NodeResEng' => 'Department Employment Verified',
			'NodeResValue' => '671'
		]);
	
	DB::table('SL_Conditions')->insert([
			'CondID' => 1,
			'CondDatabase' => '1',
			'CondTag' => '#NotAnonymized',
			'CondDesc' => 'Complaint data has not been anonymized.',
			'CondOperator' => '}',
			'CondOperDeet' => '0',
			'CondField' => '393',
			'CondTable' => '112',
			'CondLoop' => '0'
		]);
		DB::table('SL_Conditions')->insert([
			'CondID' => 2,
			'CondDatabase' => '1',
			'CondTag' => '#ComplainantInvolved',
			'CondDesc' => 'The complainant was a victim or witness, not a third-party assistant.',
			'CondOperDeet' => '0',
			'CondField' => '990',
			'CondTable' => '102',
			'CondLoop' => '0',
			'CondOpts' => '2'
		]);
		DB::table('SL_Conditions')->insert([
			'CondID' => 3,
			'CondDatabase' => '1',
			'CondTag' => '#NotFemale',
			'CondDesc' => 'The civilian is not female.',
			'CondOperator' => '}',
			'CondOperDeet' => '0',
			'CondField' => '628',
			'CondTable' => '102',
			'CondLoop' => '0'
		]);
		DB::table('SL_Conditions')->insert([
			'CondID' => 4,
			'CondDatabase' => '1',
			'CondTag' => '#HasEvent',
			'CondDesc' => 'Complaint has at least one gold-level event described.',
			'CondOperator' => 'EXISTS>',
			'CondOperDeet' => '0',
			'CondField' => '0',
			'CondTable' => '137',
			'CondLoop' => '0'
		]);
		DB::table('SL_Conditions')->insert([
			'CondID' => 5,
			'CondDatabase' => '1',
			'CondTag' => '#HasMultipleDepartment',
			'CondDesc' => 'Complaint is associated with more than one police department.',
			'CondOperator' => 'EXISTS>',
			'CondOperDeet' => '1',
			'CondField' => '0',
			'CondTable' => '111',
			'CondLoop' => '0'
		]);
		DB::table('SL_Conditions')->insert([
			'CondID' => 6,
			'CondDatabase' => '1',
			'CondTag' => '#OfficerNotFemale',
			'CondDesc' => 'The officer is not female.',
			'CondOperator' => '}',
			'CondOperDeet' => '0',
			'CondField' => '628',
			'CondTable' => '153',
			'CondLoop' => '4'
		]);
		DB::table('SL_Conditions')->insert([
			'CondID' => 7,
			'CondDatabase' => '1',
			'CondTag' => '#Gold',
			'CondDesc' => 'Complainant has gone gold.',
			'CondOperDeet' => '0',
			'CondField' => '1031',
			'CondTable' => '112',
			'CondLoop' => '0',
			'CondOpts' => '6'
		]);
		DB::table('SL_Conditions')->insert([
			'CondID' => 8,
			'CondDatabase' => '1',
			'CondTag' => '#HasMultipleOfficer',
			'CondDesc' => 'Complaint is associated with more than one police officer.',
			'CondOperator' => 'EXISTS>',
			'CondOperDeet' => '1',
			'CondField' => '0',
			'CondTable' => '104',
			'CondLoop' => '4'
		]);
		DB::table('SL_Conditions')->insert([
			'CondID' => 9,
			'CondDatabase' => '1',
			'CondTag' => '#HasMultipleVictim',
			'CondDesc' => 'Complaint has more than one victim.',
			'CondOperator' => 'EXISTS>',
			'CondOperDeet' => '1',
			'CondField' => '0',
			'CondTable' => '0',
			'CondLoop' => '1',
			'CondOpts' => '2'
		]);
		DB::table('SL_Conditions')->insert([
			'CondID' => 10,
			'CondDatabase' => '1',
			'CondTag' => '#VehicleStop',
			'CondDesc' => 'Complaint scene was a vehicle stop.',
			'CondOperDeet' => '0',
			'CondField' => '1171',
			'CondTable' => '115',
			'CondLoop' => '0',
			'CondOpts' => '2'
		]);
		DB::table('SL_Conditions')->insert([
			'CondID' => 12,
			'CondDatabase' => '1',
			'CondTag' => '#NotOnPrivateProperty',
			'CondDesc' => 'Complaint scene was not a home nor a workplace.',
			'CondOperator' => '}',
			'CondOperDeet' => '0',
			'CondField' => '249',
			'CondTable' => '115',
			'CondLoop' => '0'
		]);
		DB::table('SL_Conditions')->insert([
			'CondID' => 13,
			'CondDatabase' => '1',
			'CondTag' => '#ForceControlHold',
			'CondDesc' => 'Use of force involved a control hold.',
			'CondOperDeet' => '0',
			'CondField' => '256',
			'CondTable' => '116',
			'CondLoop' => '6'
		]);
		DB::table('SL_Conditions')->insert([
			'CondID' => 14,
			'CondDatabase' => '1',
			'CondTag' => '#ForceBodyWeapons',
			'CondDesc' => 'Use of force involved body weapons.',
			'CondOperDeet' => '0',
			'CondField' => '256',
			'CondTable' => '116',
			'CondLoop' => '6'
		]);
		DB::table('SL_Conditions')->insert([
			'CondID' => 15,
			'CondDatabase' => '1',
			'CondTag' => '#ForceTakedown',
			'CondDesc' => 'Use of force involved a takedown.',
			'CondOperDeet' => '0',
			'CondField' => '256',
			'CondTable' => '116',
			'CondLoop' => '6'
		]);
		DB::table('SL_Conditions')->insert([
			'CondID' => 16,
			'CondDatabase' => '1',
			'CondTag' => '#ForceGun',
			'CondDesc' => 'Use of force involved a gun.',
			'CondOperDeet' => '0',
			'CondField' => '256',
			'CondTable' => '116',
			'CondLoop' => '6'
		]);
		DB::table('SL_Conditions')->insert([
			'CondID' => 18,
			'CondDatabase' => '1',
			'CondTag' => '#HasInjury',
			'CondDesc' => 'Complaint has at least one injury described.',
			'CondOperator' => 'CUSTOM',
			'CondOperDeet' => '0',
			'CondField' => '0',
			'CondTable' => '117',
			'CondLoop' => '0',
			'CondOpts' => '2'
		]);
		DB::table('SL_Conditions')->insert([
			'CondID' => 19,
			'CondDatabase' => '1',
			'CondTag' => '#HasForceHuman',
			'CondDesc' => 'Complaint include the use of force against a human (not a pet).',
			'CondOperator' => 'CUSTOM',
			'CondOperDeet' => '0',
			'CondField' => '0',
			'CondTable' => '0',
			'CondLoop' => '0'
		]);
		DB::table('SL_Conditions')->insert([
			'CondID' => 20,
			'CondDatabase' => '1',
			'CondTag' => '#HasInjuryCare',
			'CondDesc' => 'Current event (being edited) is a search.',
			'CondOperator' => 'EXISTS>',
			'CondOperDeet' => '0',
			'CondField' => '0',
			'CondTable' => '146',
			'CondLoop' => '0'
		]);
		DB::table('SL_Conditions')->insert([
			'CondID' => 21,
			'CondDatabase' => '1',
			'CondTag' => '#Anonymized',
			'CondDesc' => 'Complaint data has been anonymized.',
			'CondOperDeet' => '0',
			'CondField' => '393',
			'CondTable' => '112',
			'CondLoop' => '0',
			'CondOpts' => '2'
		]);
		DB::table('SL_Conditions')->insert([
			'CondID' => 22,
			'CondDatabase' => '1',
			'CondTag' => '#NotLoggedIn',
			'CondDesc' => 'Complainant is not currently logged into the system.',
			'CondOperator' => 'CUSTOM',
			'CondOperDeet' => '0',
			'CondField' => '0',
			'CondTable' => '0',
			'CondLoop' => '0'
		]);
		DB::table('SL_Conditions')->insert([
			'CondID' => 23,
			'CondDatabase' => '1',
			'CondTag' => '#VictimsWithoutArrests',
			'CondDesc' => 'Complaint has victims who were not arrested.',
			'CondOperator' => 'CUSTOM',
			'CondOperDeet' => '0',
			'CondField' => '0',
			'CondTable' => '0',
			'CondLoop' => '0',
			'CondOpts' => '2'
		]);
		DB::table('SL_Conditions')->insert([
			'CondID' => 24,
			'CondDatabase' => '1',
			'CondTag' => '#AllegationNoForce',
			'CondDesc' => 'Complaint has no unreasonable use of force allegations.',
			'CondOperator' => 'CUSTOM',
			'CondOperDeet' => '0',
			'CondField' => '0',
			'CondTable' => '0',
			'CondLoop' => '0'
		]);
		DB::table('SL_Conditions')->insert([
			'CondID' => 25,
			'CondDatabase' => '1',
			'CondTag' => '#HasArrestOrForce',
			'CondDesc' => 'Complaint has at least one arrest or use of force event.',
			'CondOperator' => 'CUSTOM',
			'CondOperDeet' => '0',
			'CondField' => '0',
			'CondTable' => '0',
			'CondLoop' => '0'
		]);
		DB::table('SL_Conditions')->insert([
			'CondID' => 26,
			'CondDatabase' => '1',
			'CondTag' => '#NoSexualAllegation',
			'CondDesc' => 'Complaint does not have Sexual Assault nor Sexual Harassment allegations.',
			'CondOperator' => 'CUSTOM',
			'CondOperDeet' => '0',
			'CondField' => '0',
			'CondTable' => '0',
			'CondLoop' => '0'
		]);
		DB::table('SL_Conditions')->insert([
			'CondID' => 31,
			'CondDatabase' => '1',
			'CondTag' => '#EventIsForce',
			'CondDesc' => 'Current event (being edited) is a use of force.',
			'CondOperDeet' => '0',
			'CondField' => '1154',
			'CondTable' => '137',
			'CondLoop' => '0'
		]);
		DB::table('SL_Conditions')->insert([
			'CondID' => 35,
			'CondDatabase' => '1',
			'CondTag' => '#Property',
			'CondDesc' => 'Complaint includes destruction or seizure.',
			'CondOperator' => 'CUSTOM',
			'CondOperDeet' => '0',
			'CondField' => '0',
			'CondTable' => '0',
			'CondLoop' => '0',
			'CondOpts' => '2'
		]);
		DB::table('SL_Conditions')->insert([
			'CondID' => 36,
			'CondDatabase' => '1',
			'CondTag' => '#ForceHasSubType',
			'CondDesc' => 'Use of force involved a control hold, body weapons, a takedown, and/or a gun..',
			'CondOperDeet' => '0',
			'CondField' => '256',
			'CondTable' => '116',
			'CondLoop' => '6'
		]);
		DB::table('SL_Conditions')->insert([
			'CondID' => 37,
			'CondDatabase' => '1',
			'CondTag' => '#HasArrestCharges',
			'CondDesc' => 'Complaint arrest has charges associated with it.',
			'CondOperator' => 'CUSTOM',
			'CondOperDeet' => '0',
			'CondField' => '0',
			'CondTable' => '0',
			'CondLoop' => '0'
		]);
		DB::table('SL_Conditions')->insert([
			'CondID' => 38,
			'CondDatabase' => '1',
			'CondTag' => '#HasForceGold',
			'CondDesc' => 'Complaint has at least one use of force described.',
			'CondOperator' => 'EXISTS>',
			'CondOperDeet' => '0',
			'CondField' => '0',
			'CondTable' => '116',
			'CondLoop' => '0'
		]);
		DB::table('SL_Conditions')->insert([
			'CondID' => 39,
			'CondDatabase' => '1',
			'CondTag' => '#NotAnonymous',
			'CondDesc' => 'Complaint was not submitted anonymously, nor was it anonymized.',
			'CondOperator' => '}',
			'CondOperDeet' => '0',
			'CondField' => '393',
			'CondTable' => '112',
			'CondLoop' => '0',
			'CondOpts' => '2'
		]);
		DB::table('SL_Conditions')->insert([
			'CondID' => 40,
			'CondDatabase' => '1',
			'CondTag' => '#IsVictim',
			'CondDesc' => 'Current civilian is a Victim.',
			'CondOperDeet' => '0',
			'CondField' => '990',
			'CondTable' => '102',
			'CondLoop' => '0'
		]);
		DB::table('SL_Conditions')->insert([
			'CondID' => 41,
			'CondDatabase' => '1',
			'CondTag' => '#IsWitness',
			'CondDesc' => 'Current civilian is a Witness.',
			'CondOperDeet' => '0',
			'CondField' => '990',
			'CondTable' => '102',
			'CondLoop' => '0'
		]);
		DB::table('SL_Conditions')->insert([
			'CondID' => 42,
			'CondDatabase' => '1',
			'CondTag' => '#IsComplainant',
			'CondDesc' => 'Current civilian is the Complainant.',
			'CondOperDeet' => '0',
			'CondField' => '984',
			'CondTable' => '102',
			'CondLoop' => '0'
		]);
		DB::table('SL_Conditions')->insert([
			'CondID' => 44,
			'CondDatabase' => '1',
			'CondTag' => '#HasArrest',
			'CondDesc' => 'Complaint has at least one arrest.',
			'CondOperDeet' => '0',
			'CondField' => '1102',
			'CondTable' => '156',
			'CondLoop' => '0',
			'CondOpts' => '2'
		]);
		DB::table('SL_Conditions')->insert([
			'CondID' => 48,
			'CondDatabase' => '1',
			'CondTag' => '#IsUpset',
			'CondDesc' => 'Current civilian is a Upset about some media they saw.',
			'CondOperDeet' => '0',
			'CondField' => '990',
			'CondTable' => '102',
			'CondLoop' => '0'
		]);
		DB::table('SL_Conditions')->insert([
			'CondID' => 49,
			'CondDatabase' => '1',
			'CondTag' => '#HasForceMultiple',
			'CondDesc' => 'Complaint has more than one use of force described.',
			'CondOperator' => 'EXISTS>',
			'CondOperDeet' => '1',
			'CondField' => '0',
			'CondTable' => '116',
			'CondLoop' => '0',
			'CondOpts' => '2'
		]);
		DB::table('SL_Conditions')->insert([
			'CondID' => 50,
			'CondDatabase' => '1',
			'CondTag' => '#ComplainantIsVictim',
			'CondDesc' => 'The complainant was a victim in the incident.',
			'CondOperDeet' => '0',
			'CondField' => '990',
			'CondTable' => '102',
			'CondLoop' => '0',
			'CondOpts' => '2'
		]);
		DB::table('SL_Conditions')->insert([
			'CondID' => 51,
			'CondDatabase' => '1',
			'CondTag' => '#ComplainantNotVictim',
			'CondDesc' => 'The complainant was not a victim in the incident.',
			'CondOperator' => '}',
			'CondOperDeet' => '0',
			'CondField' => '990',
			'CondTable' => '102',
			'CondLoop' => '0',
			'CondOpts' => '2'
		]);
		DB::table('SL_Conditions')->insert([
			'CondID' => 52,
			'CondDatabase' => '1',
			'CondTag' => '#AllChargesNotResolved',
			'CondDesc' => 'This incident has not had all charges resolved.',
			'CondOperDeet' => '0',
			'CondField' => '1124',
			'CondTable' => '112',
			'CondLoop' => '0'
		]);
		DB::table('SL_Conditions')->insert([
			'CondID' => 53,
			'CondDatabase' => '1',
			'CondTag' => '#AllChargesNotSure',
			'CondDesc' => 'Complainant is not sure if all charges have been resolved.',
			'CondOperDeet' => '0',
			'CondField' => '1124',
			'CondTable' => '112',
			'CondLoop' => '0'
		]);
		DB::table('SL_Conditions')->insert([
			'CondID' => 54,
			'CondDatabase' => '1',
			'CondTag' => '#AllChargesHas',
			'CondDesc' => 'There were charges tied to this complaint\'s incident.',
			'CondOperDeet' => '0',
			'CondField' => '1151',
			'CondTable' => '112',
			'CondLoop' => '0'
		]);
		DB::table('SL_Conditions')->insert([
			'CondID' => 55,
			'CondDatabase' => '1',
			'CondTag' => '#NormalComplaintProcess',
			'CondDesc' => 'Complaint is being generated to formally submit and publish online.',
			'CondOperator' => '}',
			'CondOperDeet' => '0',
			'CondField' => '1125',
			'CondTable' => '112',
			'CondLoop' => '0'
		]);
		DB::table('SL_Conditions')->insert([
			'CondID' => 56,
			'CondDatabase' => '1',
			'CondTag' => '#IsTransparent',
			'CondDesc' => 'Complaint privacy options set to fully transparent.',
			'CondOperDeet' => '0',
			'CondField' => '393',
			'CondTable' => '112',
			'CondLoop' => '0',
			'CondOpts' => '2'
		]);
		DB::table('SL_Conditions')->insert([
			'CondID' => 58,
			'CondDatabase' => '1',
			'CondTag' => '#IsNotTransparent',
			'CondDesc' => 'Complaint privacy options not set to fully transparent.',
			'CondOperator' => '}',
			'CondOperDeet' => '0',
			'CondField' => '393',
			'CondTable' => '112',
			'CondLoop' => '0',
			'CondOpts' => '2'
		]);
		DB::table('SL_Conditions')->insert([
			'CondID' => 59,
			'CondDatabase' => '1',
			'CondTag' => '#AllChargesNotYes',
			'CondDesc' => 'This incident has not had all charges resolved, or not sure.',
			'CondOperator' => '}',
			'CondOperDeet' => '0',
			'CondField' => '1124',
			'CondTable' => '112',
			'CondLoop' => '0'
		]);
		DB::table('SL_Conditions')->insert([
			'CondID' => 94,
			'CondDatabase' => '1',
			'CondTag' => '#CivHasForce',
			'CondDesc' => 'Current subject is associated with a use of force.',
			'CondOperator' => 'CUSTOM'
		]);
		DB::table('SL_Conditions')->insert([
			'CondID' => 108,
			'CondDatabase' => '1',
			'CondTag' => '#PrintSensitiveReport',
			'CondDesc' => 'This report view includes the most sensitive private information.',
			'CondOperator' => 'CUSTOM'
		]);
		DB::table('SL_Conditions')->insert([
			'CondID' => 137,
			'CondDatabase' => '1',
			'CondTag' => '#ComplaintNotIncompleteOrCurrIsStaff',
			'CondDesc' => 'This complaint has been completely submitted to OPC, or the user currently logged in is staff or admin.',
			'CondOperator' => 'CUSTOM'
		]);
		DB::table('SL_Conditions')->insert([
			'CondID' => 139,
			'CondDatabase' => '1',
			'CondTag' => '#PartnerIntake',
			'CondDesc' => 'The current complaint started from a partner\'s intake.',
			'CondOperator' => 'CUSTOM'
		]);
		DB::table('SL_Conditions')->insert([
			'CondID' => 46,
			'CondDatabase' => '1',
			'CondTag' => '#HasOnlyOneOfficer',
			'CondDesc' => 'Complaint is associated with exactly one police officer.',
			'CondOperator' => 'EXISTS=',
			'CondOperDeet' => '1',
			'CondField' => '0',
			'CondTable' => '0',
			'CondLoop' => '4'
		]);
		DB::table('SL_Conditions')->insert([
			'CondID' => 47,
			'CondDatabase' => '1',
			'CondTag' => '#HasOnlyOneVictim',
			'CondDesc' => 'Complaint has exactly one victim.',
			'CondOperator' => 'EXISTS=',
			'CondOperDeet' => '1',
			'CondField' => '0',
			'CondTable' => '0',
			'CondLoop' => '1'
		]);
		DB::table('SL_Conditions')->insert([
			'CondID' => 62,
			'CondDatabase' => '1',
			'CondTag' => '#TestLink',
			'CondDesc' => 'The url includes the parameter, /url/?test=1 .',
			'CondOperator' => 'URL-PARAM',
			'CondOperDeet' => 'test',
			'CondField' => '0',
			'CondTable' => '0',
			'CondLoop' => '0'
		]);
		DB::table('SL_Conditions')->insert([
			'CondID' => 64,
			'CondDatabase' => '1',
			'CondTag' => '#HasSexualHarass',
			'CondDesc' => 'Complaint does have Sexual Harassment allegations.',
			'CondOperDeet' => '0',
			'CondField' => '1399',
			'CondTable' => '156',
			'CondLoop' => '0',
			'CondOpts' => '2'
		]);
		DB::table('SL_Conditions')->insert([
			'CondID' => 65,
			'CondDatabase' => '1',
			'CondTag' => '#IsSubjectOfficer',
			'CondDesc' => 'The officer is the subject of the complaint or compliment.',
			'CondOperDeet' => '0',
			'CondField' => '397',
			'CondTable' => '104',
			'CondLoop' => '0'
		]);
		DB::table('SL_Conditions')->insert([
			'CondID' => 67,
			'CondDatabase' => '1',
			'CondTag' => '#IncidentHasAddress',
			'CondDesc' => 'This incident has a street address.',
			'CondOperator' => 'CUSTOM',
			'CondOperDeet' => '0',
			'CondField' => '240',
			'CondTable' => '114',
			'CondLoop' => '0'
		]);
		DB::table('SL_Conditions')->insert([
			'CondID' => 68,
			'CondDatabase' => '1',
			'CondTag' => '#ConsentToSearch',
			'CondDesc' => 'One or more subjects might have provided consent to a search.',
			'CondOperDeet' => '0',
			'CondField' => '329',
			'CondTable' => '122',
			'CondLoop' => '0',
			'CondOpts' => '6'
		]);
		DB::table('SL_Conditions')->insert([
			'CondID' => 69,
			'CondDatabase' => '1',
			'CondTag' => '#HasSearchNotVehicle',
			'CondDesc' => 'One or more subjects might have provided consent to the search of private property.',
			'CondOperator' => 'COMPLEX',
			'CondOperDeet' => '0',
			'CondField' => '0',
			'CondTable' => '0',
			'CondLoop' => '0',
			'CondOpts' => '6'
		]);
		DB::table('SL_Conditions')->insert([
			'CondID' => 70,
			'CondDatabase' => '1',
			'CondTag' => '#HasSearchVehicle',
			'CondDesc' => 'One or more subjects might have provided consent to the search of a vehicle.',
			'CondOperator' => 'COMPLEX',
			'CondOperDeet' => '0',
			'CondField' => '0',
			'CondTable' => '0',
			'CondLoop' => '0',
			'CondOpts' => '6'
		]);
		DB::table('SL_Conditions')->insert([
			'CondID' => 75,
			'CondDatabase' => '1',
			'CondTag' => '#NoMirandaRights',
			'CondDesc' => 'An arrest subject was not read their Miranda rights.',
			'CondOperDeet' => '0',
			'CondField' => '404',
			'CondTable' => '123',
			'CondLoop' => '0',
			'CondOpts' => '6'
		]);
		DB::table('SL_Conditions')->insert([
			'CondID' => 76,
			'CondDatabase' => '1',
			'CondTag' => '#HasStop',
			'CondDesc' => 'Complaint has at least one stop/detention described. ',
			'CondOperDeet' => '0',
			'CondField' => '1092',
			'CondTable' => '156',
			'CondLoop' => '0',
			'CondOpts' => '6'
		]);
		DB::table('SL_Conditions')->insert([
			'CondID' => 77,
			'CondDatabase' => '1',
			'CondTag' => '#HasSearch',
			'CondDesc' => 'Complaint has at least one search described. ',
			'CondOperDeet' => '0',
			'CondField' => '1096',
			'CondTable' => '156',
			'CondLoop' => '0',
			'CondOpts' => '6'
		]);
		DB::table('SL_Conditions')->insert([
			'CondID' => 78,
			'CondDatabase' => '1',
			'CondTag' => '#HasForce',
			'CondDesc' => 'Complaint has at least one use of force.',
			'CondOperDeet' => '0',
			'CondField' => '1100',
			'CondTable' => '156',
			'CondLoop' => '0',
			'CondOpts' => '2'
		]);
		DB::table('SL_Conditions')->insert([
			'CondID' => 79,
			'CondDatabase' => '1',
			'CondTag' => '#HasCitation',
			'CondDesc' => 'Complaint has at least one issuance of a citation.',
			'CondOperDeet' => '0',
			'CondField' => '1105',
			'CondTable' => '156',
			'CondLoop' => '0',
			'CondOpts' => '2'
		]);
		DB::table('SL_Conditions')->insert([
			'CondID' => 80,
			'CondDatabase' => '1',
			'CondTag' => '#HasCitationVehicle',
			'CondDesc' => 'Vehicle stop complaint has at least one issuance of a citation. ',
			'CondOperator' => 'COMPLEX',
			'CondOperDeet' => '0',
			'CondField' => '0',
			'CondTable' => '0',
			'CondLoop' => '0',
			'CondOpts' => '6'
		]);
		DB::table('SL_Conditions')->insert([
			'CondID' => 81,
			'CondDatabase' => '1',
			'CondTag' => '#BorderCheckpoint',
			'CondDesc' => 'Complaint incident occurred at a border-related checkpoint.',
			'CondOperDeet' => '0',
			'CondField' => '1058',
			'CondTable' => '147',
			'CondLoop' => '0',
			'CondOpts' => '6'
		]);
		DB::table('SL_Conditions')->insert([
			'CondID' => 82,
			'CondDatabase' => '1',
			'CondTag' => '#SobrietyCheckpoint',
			'CondDesc' => 'Complaint incident occurred at a sobriety-related (DUI) checkpoint.',
			'CondOperDeet' => '0',
			'CondField' => '1058',
			'CondTable' => '147',
			'CondLoop' => '0',
			'CondOpts' => '6'
		]);
		DB::table('SL_Conditions')->insert([
			'CondID' => 83,
			'CondDatabase' => '1',
			'CondTag' => '#PoliceAskedForID',
			'CondDesc' => 'Complaint included the police asking at least one subject for identification.',
			'CondOperDeet' => '0',
			'CondField' => '1027',
			'CondTable' => '121',
			'CondLoop' => '0',
			'CondOpts' => '6'
		]);
		DB::table('SL_Conditions')->insert([
			'CondID' => 84,
			'CondDatabase' => '1',
			'CondTag' => '#Airport',
			'CondDesc' => 'Complaint incident occurred at an airport.',
			'CondOperDeet' => '0',
			'CondField' => '249',
			'CondTable' => '115',
			'CondLoop' => '0',
			'CondOpts' => '6'
		]);
		DB::table('SL_Conditions')->insert([
			'CondID' => 85,
			'CondDatabase' => '1',
			'CondTag' => '#School',
			'CondDesc' => 'Complaint incident occurred at a school.',
			'CondOperDeet' => '0',
			'CondField' => '249',
			'CondTable' => '115',
			'CondLoop' => '0',
			'CondOpts' => '2'
		]);
		DB::table('SL_Conditions')->insert([
			'CondID' => 86,
			'CondDatabase' => '1',
			'CondTag' => '#SearchAtSchool',
			'CondDesc' => 'Complaint includes at least one search of a subject at a school.',
			'CondOperator' => 'COMPLEX',
			'CondOperDeet' => '0',
			'CondField' => '0',
			'CondTable' => '0',
			'CondLoop' => '0',
			'CondOpts' => '6'
		]);
		DB::table('SL_Conditions')->insert([
			'CondID' => 87,
			'CondDatabase' => '1',
			'CondTag' => '#RecordedThePolice',
			'CondDesc' => 'At least one subject recorded the police.',
			'CondOperDeet' => '0',
			'CondField' => '785',
			'CondTable' => '102',
			'CondLoop' => '0',
			'CondOpts' => '3'
		]);
		DB::table('SL_Conditions')->insert([
			'CondID' => 88,
			'CondDatabase' => '1',
			'CondTag' => '#StopPedestrianDrug',
			'CondDesc' => 'Complaint incident includes a stop/detention justified by an illegal drug violation.',
			'CondOperDeet' => '0',
			'CondField' => '1058',
			'CondTable' => '147',
			'CondLoop' => '0',
			'CondOpts' => '6'
		]);
		DB::table('SL_Conditions')->insert([
			'CondID' => 89,
			'CondDatabase' => '1',
			'CondTag' => '#MarijuanaCharges',
			'CondDesc' => 'Complaint includes at least one legal charge for marijuana.',
			'CondOperDeet' => '0',
			'CondField' => '824',
			'CondTable' => '138',
			'CondLoop' => '0',
			'CondOpts' => '6'
		]);
		DB::table('SL_Conditions')->insert([
			'CondID' => 90,
			'CondDatabase' => '1',
			'CondTag' => '#DogSniff',
			'CondDesc' => 'Complaint incident included the use of a K9 (dog) related to a search.',
			'CondOperDeet' => '0',
			'CondField' => '333',
			'CondTable' => '122',
			'CondLoop' => '0',
			'CondOpts' => '6'
		]);
		DB::table('SL_Conditions')->insert([
			'CondID' => 91,
			'CondDatabase' => '1',
			'CondTag' => '#ConsentResponseGiven',
			'CondDesc' => 'Complaint includes any response to the question about search consent.',
			'CondOperDeet' => '0',
			'CondField' => '329',
			'CondTable' => '122',
			'CondLoop' => '0',
			'CondOpts' => '3'
		]);
		DB::table('SL_Conditions')->insert([
			'CondID' => 92,
			'CondDatabase' => '1',
			'CondTag' => '#VehicleHasPassenger',
			'CondDesc' => 'Complaint incident includes at least one passenger in a subject vehicle.',
			'CondOperDeet' => '0',
			'CondField' => '1147',
			'CondTable' => '163',
			'CondLoop' => '0',
			'CondOpts' => '6'
		]);
		DB::table('SL_Conditions')->insert([
			'CondID' => 96,
			'CondDatabase' => '1',
			'CondTag' => '#CivHasInjury',
			'CondDesc' => 'Current subject had at least one injury associated with a use of force.',
			'CondOperDeet' => '0',
			'CondField' => '1436',
			'CondTable' => '102',
			'CondLoop' => '0'
		]);
		DB::table('SL_Conditions')->insert([
			'CondID' => 97,
			'CondDatabase' => '1',
			'CondTag' => '#MedicalCareNotYou',
			'CondDesc' => 'The current medical care record is not tied to the complainant.',
			'CondOperator' => 'CUSTOM',
			'CondOperDeet' => '0',
			'CondField' => '0',
			'CondTable' => '0',
			'CondLoop' => '0'
		]);
		DB::table('SL_Conditions')->insert([
			'CondID' => 98,
			'CondDatabase' => '1',
			'CondTag' => '#EmailConfirmSentToday',
			'CondDesc' => 'Current user has been sent the address confirmation email within the past day.',
			'CondOperator' => 'CUSTOM',
			'CondOperDeet' => '0',
			'CondField' => '0',
			'CondTable' => '0',
			'CondLoop' => '0'
		]);
		DB::table('SL_Conditions')->insert([
			'CondID' => 99,
			'CondDatabase' => '1',
			'CondTag' => '#LawyerInvolved',
			'CondDesc' => 'This incident has someone who has or needs a lawyer.',
			'CondOperator' => 'CUSTOM',
			'CondOperDeet' => '0',
			'CondField' => '0',
			'CondTable' => '112',
			'CondLoop' => '0'
		]);
		DB::table('SL_Conditions')->insert([
			'CondID' => 100,
			'CondDatabase' => '1',
			'CondTag' => '#StatusSubmit',
			'CondDesc' => 'This complaint status is either to be ï¿½ or having been ï¿½ submitted.',
			'CondOperDeet' => '0',
			'CondField' => '405',
			'CondTable' => '112',
			'CondLoop' => '0'
		]);
		DB::table('SL_Conditions')->insert([
			'CondID' => 101,
			'CondDatabase' => '1',
			'CondTag' => '#StatusNew',
			'CondDesc' => 'This complaint is so new that it hasn\'t been reviewed.',
			'CondOperDeet' => '0',
			'CondField' => '405',
			'CondTable' => '112',
			'CondLoop' => '0'
		]);
		DB::table('SL_Conditions')->insert([
			'CondID' => 102,
			'CondDatabase' => '1',
			'CondTag' => '#StatusHold',
			'CondDesc' => 'This complaint has one of the hold statuses.',
			'CondOperDeet' => '0',
			'CondField' => '405',
			'CondTable' => '112',
			'CondLoop' => '0'
		]);
		DB::table('SL_Conditions')->insert([
			'CondID' => 103,
			'CondDatabase' => '1',
			'CondTag' => '#StatusNoSubmitConfirm',
			'CondDesc' => 'This complaint does not yet have confirmation of being submitted to the official investigative agency.',
			'CondOperator' => '}',
			'CondOperDeet' => '0',
			'CondField' => '405',
			'CondTable' => '112',
			'CondLoop' => '0'
		]);
		DB::table('SL_Conditions')->insert([
			'CondID' => 104,
			'CondDatabase' => '1',
			'CondTag' => '#PrintFullReport',
			'CondDesc' => 'The story and open-ended questions of this complaint can be printed on this page load.',
			'CondOperator' => 'COMPLEX',
			'CondOperDeet' => '0',
			'CondField' => '0',
			'CondTable' => '0',
			'CondLoop' => '0'
		]);
		DB::table('SL_Conditions')->insert([
			'CondID' => 105,
			'CondDatabase' => '1',
			'CondTag' => '#HasVehicleDescription',
			'CondDesc' => 'This complaint has at least one vehicle description.',
			'CondOperator' => 'EXISTS>',
			'CondOperDeet' => '0',
			'CondField' => '0',
			'CondTable' => '152',
			'CondLoop' => '0'
		]);
		DB::table('SL_Conditions')->insert([
			'CondID' => 106,
			'CondDatabase' => '1',
			'CondTag' => '#VehicleIsCivilian',
			'CondDesc' => 'The current vehicle is civilian.',
			'CondOperDeet' => '0',
			'CondField' => '1509',
			'CondTable' => '152',
			'CondLoop' => '0'
		]);
		DB::table('SL_Conditions')->insert([
			'CondID' => 107,
			'CondDatabase' => '1',
			'CondTag' => '#VehicleIsOfficer',
			'CondDesc' => 'The current vehicle is police.',
			'CondOperDeet' => '0',
			'CondField' => '1509',
			'CondTable' => '152',
			'CondLoop' => '0'
		]);
		DB::table('SL_Conditions')->insert([
			'CondID' => 113,
			'CondDatabase' => '1',
			'CondTag' => '#IsOversightAgency',
			'CondDesc' => 'The current user has access as an Investigative Agency',
			'CondOperator' => 'CUSTOM',
			'CondOperDeet' => '0',
			'CondField' => '0',
			'CondTable' => '0',
			'CondLoop' => '0'
		]);
		DB::table('SL_Conditions')->insert([
			'CondID' => 119,
			'CondDatabase' => '1',
			'CondTag' => '#PublishingOnHold',
			'CondDesc' => 'This complaint\'s publishing status is on hold for more review and/or legal guidance.',
			'CondOperDeet' => '0',
			'CondField' => '405',
			'CondTable' => '112',
			'CondLoop' => '0',
			'CondOpts' => '2'
		]);
		DB::table('SL_Conditions')->insert([
			'CondID' => 121,
			'CondDatabase' => '1',
			'CondTag' => '#HasUploads',
			'CondDesc' => 'This complaint has at least one upload related to it.',
			'CondOperator' => 'CUSTOM',
			'CondOperDeet' => '0',
			'CondField' => '0',
			'CondTable' => '0',
			'CondLoop' => '0',
			'CondOpts' => '2'
		]);
		DB::table('SL_Conditions')->insert([
			'CondID' => 125,
			'CondDatabase' => '1',
			'CondTag' => '#ForceHasType',
			'CondDesc' => 'Use of current force record includes a type of force.',
			'CondOperDeet' => '0',
			'CondField' => '256',
			'CondTable' => '116',
			'CondLoop' => '0'
		]);
		DB::table('SL_Conditions')->insert([
			'CondID' => 126,
			'CondDatabase' => '1',
			'CondTag' => '#CivHasMedicalCare',
			'CondDesc' => 'Current civilian received medical care for injuries.',
			'CondOperDeet' => '0',
			'CondField' => '1437',
			'CondTable' => '102',
			'CondLoop' => '0',
			'CondOpts' => '2'
		]);
		DB::table('SL_Conditions')->insert([
			'CondID' => 127,
			'CondDatabase' => '1',
			'CondTag' => '#CivHasCitation',
			'CondDesc' => 'The current civilian was given a citation.',
			'CondOperDeet' => '0',
			'CondField' => '1084',
			'CondTable' => '102',
			'CondLoop' => '0'
		]);
		DB::table('SL_Conditions')->insert([
			'CondID' => 128,
			'CondDatabase' => '1',
			'CondTag' => '#PartnerIsAttorney',
			'CondDesc' => 'Current partner is an attorney.',
			'CondOperDeet' => '0',
			'CondField' => '988',
			'CondTable' => '110',
			'CondLoop' => '0'
		]);
		DB::table('SL_Conditions')->insert([
			'CondID' => 129,
			'CondDatabase' => '1',
			'CondTag' => '#PartnerIsOrg',
			'CondDesc' => 'Current partner is an organization.',
			'CondOperDeet' => '0',
			'CondField' => '988',
			'CondTable' => '110',
			'CondLoop' => '0'
		]);
		DB::table('SL_Conditions')->insert([
			'CondID' => 135,
			'CondDatabase' => '1',
			'CondTag' => '#HasMultipleCivilians',
			'CondDesc' => 'Complaint has Victims and Witnesses totalling more than one.',
			'CondOperator' => 'EXISTS>',
			'CondOperDeet' => '1',
			'CondField' => '0',
			'CondTable' => '0',
			'CondLoop' => '25',
			'CondOpts' => '2'
		]);
		DB::table('SL_Conditions')->insert([
			'CondID' => 136,
			'CondDatabase' => '1',
			'CondTag' => '#ComplaintIncomplete',
			'CondDesc' => 'This complaint has not been completely submitted to OPC.',
			'CondOperDeet' => '0',
			'CondField' => '405',
			'CondTable' => '112',
			'CondLoop' => '0',
			'CondOpts' => '2'
		]);
		DB::table('SL_Conditions')->insert([
			'CondID' => 138,
			'CondDatabase' => '1',
			'CondTag' => '%AB Tree1',
			'CondDesc' => 'Ask When First',
			'CondOperator' => 'AB TEST'
		]);
		DB::table('SL_Conditions')->insert([
			'CondID' => 140,
			'CondDatabase' => '1',
			'CondTag' => '#ShowUploads',
			'CondDesc' => 'This complaint has uploads which should be displayed on this page load.',
			'CondOperator' => 'CUSTOM',
			'CondOperDeet' => '0',
			'CondField' => '0',
			'CondTable' => '0',
			'CondLoop' => '0'
		]);
		DB::table('SL_Conditions')->insert([
			'CondID' => 141,
			'CondDatabase' => '1',
			'CondTag' => '#AttorneyIntake',
			'CondDesc' => 'The current complaint started from a attorney partner\'s intake.',
			'CondOperator' => 'CUSTOM',
			'CondOperDeet' => '0',
			'CondField' => '0',
			'CondTable' => '0',
			'CondLoop' => '0',
			'CondOpts' => '2'
		]);
		DB::table('SL_Conditions')->insert([
			'CondID' => 142,
			'CondDatabase' => '1',
			'CondTag' => '#CanEditUploads',
			'CondDesc' => 'The current user can edit this complaint\'s uploads.',
			'CondOperator' => 'CUSTOM',
			'CondOperDeet' => '0',
			'CondField' => '0',
			'CondTable' => '0',
			'CondLoop' => '0'
		]);
		DB::table('SL_Conditions')->insert([
			'CondID' => 144,
			'CondDatabase' => '1',
			'CondTag' => '#AllegationsMany',
			'CondDesc' => 'This complaint has selected more allegations than are recommended.',
			'CondOperator' => 'CUSTOM',
			'CondOperDeet' => '0',
			'CondField' => '0',
			'CondTable' => '0',
			'CondLoop' => '0',
			'CondOpts' => '2'
		]);
		DB::table('SL_Conditions')->insert([
			'CondID' => 145,
			'CondDatabase' => '1',
			'CondTag' => '#AllegationsNone',
			'CondDesc' => 'This complaint has selected zero allegations.',
			'CondOperator' => 'CUSTOM',
			'CondOperDeet' => '0',
			'CondField' => '0',
			'CondTable' => '0',
			'CondLoop' => '0'
		]);
		DB::table('SL_Conditions')->insert([
			'CondID' => 146,
			'CondDatabase' => '1',
			'CondTag' => '#NeedsAudit',
			'CondDesc' => 'This complaint has at least one need for an audit of its data.',
			'CondOperator' => 'CUSTOM',
			'CondOperDeet' => '0',
			'CondField' => '0',
			'CondTable' => '0',
			'CondLoop' => '0'
		]);
		DB::table('SL_Conditions')->insert([
			'CondID' => 147,
			'CondDatabase' => '1',
			'CondTag' => '#PrintPublishingOnHold',
			'CondDesc' => 'This complaint shouldn\'t be printed because its publishing status is on hold for more review and/or legal guidance.',
			'CondOperator' => 'CUSTOM',
			'CondOperDeet' => '0',
			'CondField' => '0',
			'CondTable' => '0',
			'CondLoop' => '0'
		]);
		DB::table('SL_Conditions')->insert([
			'CondID' => 148,
			'CondDatabase' => '1',
			'CondTag' => '#IsImpressed',
			'CondDesc' => 'Current civilian is a Impressed about some media they saw.',
			'CondOperDeet' => '0',
			'CondField' => '1586',
			'CondTable' => '185',
			'CondLoop' => '0'
		]);
		DB::table('SL_Conditions')->insert([
			'CondID' => 149,
			'CondDatabase' => '1',
			'CondTag' => '#IsComplimentor',
			'CondDesc' => 'Current civilian is the Complimentor.',
			'CondOperDeet' => '0',
			'CondField' => '1585',
			'CondTable' => '185',
			'CondLoop' => '0'
		]);
		DB::table('SL_Conditions')->insert([
			'CondID' => 150,
			'CondDatabase' => '1',
			'CondTag' => '#NotAnonymizedCompliment',
			'CondDesc' => 'Compliment data has not been anonymized.',
			'CondOperator' => '}',
			'CondOperDeet' => '0',
			'CondField' => '1419',
			'CondTable' => '170',
			'CondLoop' => '0'
		]);
		DB::table('SL_Conditions')->insert([
			'CondID' => 151,
			'CondDatabase' => '1',
			'CondTag' => '#IsTransparentCompliment',
			'CondDesc' => 'Compliment privacy options set to fully transparent.',
			'CondOperDeet' => '0',
			'CondField' => '1419',
			'CondTable' => '170',
			'CondLoop' => '0'
		]);
		DB::table('SL_Conditions')->insert([
			'CondID' => 152,
			'CondDatabase' => '1',
			'CondTag' => '#PartnerDoesOnlyClinics',
			'CondDesc' => 'The current partner only provides users of OpenPolice.org help during occasional clinics.',
			'CondOperator' => 'CUSTOM',
			'CondOperDeet' => '0',
			'CondField' => '0',
			'CondTable' => '0',
			'CondLoop' => '0'
		]);
		DB::table('SL_Conditions')->insert([
			'CondID' => 153,
			'CondDatabase' => '1',
			'CondTag' => '#PartnerActive',
			'CondDesc' => 'The current partner is actively working with OpenPolice.org.',
			'CondOperDeet' => '0',
			'CondField' => '1545',
			'CondTable' => '110',
			'CondLoop' => '0'
		]);
		DB::table('SL_Conditions')->insert([
			'CondID' => 154,
			'CondDatabase' => '1',
			'CondTag' => '#PartnerActiveOrTestLink',
			'CondDesc' => 'The current partner is actively working with OpenPolice.org ï¿½ï¿½or the url has ?test=1',
			'CondOperator' => 'CUSTOM',
			'CondOperDeet' => '0',
			'CondField' => '0',
			'CondTable' => '0',
			'CondLoop' => '0'
		]);
	
	DB::table('SL_ConditionsVals')->insert([
			'CondValID' => 1,
			'CondValCondID' => '1',
			'CondValValue' => '307'
		]);
		DB::table('SL_ConditionsVals')->insert([
			'CondValID' => 2,
			'CondValCondID' => '2',
			'CondValValue' => 'Witness'
		]);
		DB::table('SL_ConditionsVals')->insert([
			'CondValID' => 3,
			'CondValCondID' => '2',
			'CondValValue' => 'Victim'
		]);
		DB::table('SL_ConditionsVals')->insert([
			'CondValID' => 4,
			'CondValCondID' => '3',
			'CondValValue' => 'F'
		]);
		DB::table('SL_ConditionsVals')->insert([
			'CondValID' => 7,
			'CondValCondID' => '6',
			'CondValValue' => 'F'
		]);
		DB::table('SL_ConditionsVals')->insert([
			'CondValID' => 12,
			'CondValCondID' => '12',
			'CondValValue' => '349'
		]);
		DB::table('SL_ConditionsVals')->insert([
			'CondValID' => 13,
			'CondValCondID' => '12',
			'CondValValue' => '350'
		]);
		DB::table('SL_ConditionsVals')->insert([
			'CondValID' => 17,
			'CondValCondID' => '21',
			'CondValValue' => '307'
		]);
		DB::table('SL_ConditionsVals')->insert([
			'CondValID' => 20,
			'CondValCondID' => '31',
			'CondValValue' => 'Force'
		]);
		DB::table('SL_ConditionsVals')->insert([
			'CondValID' => 23,
			'CondValCondID' => '39',
			'CondValValue' => '306'
		]);
		DB::table('SL_ConditionsVals')->insert([
			'CondValID' => 24,
			'CondValCondID' => '39',
			'CondValValue' => '307'
		]);
		DB::table('SL_ConditionsVals')->insert([
			'CondValID' => 25,
			'CondValCondID' => '40',
			'CondValValue' => 'Victim'
		]);
		DB::table('SL_ConditionsVals')->insert([
			'CondValID' => 26,
			'CondValCondID' => '41',
			'CondValValue' => 'Witness'
		]);
		DB::table('SL_ConditionsVals')->insert([
			'CondValID' => 27,
			'CondValCondID' => '42',
			'CondValValue' => 'Y'
		]);
		DB::table('SL_ConditionsVals')->insert([
			'CondValID' => 29,
			'CondValCondID' => '36',
			'CondValValue' => '127'
		]);
		DB::table('SL_ConditionsVals')->insert([
			'CondValID' => 30,
			'CondValCondID' => '36',
			'CondValValue' => '128'
		]);
		DB::table('SL_ConditionsVals')->insert([
			'CondValID' => 31,
			'CondValCondID' => '36',
			'CondValValue' => '129'
		]);
		DB::table('SL_ConditionsVals')->insert([
			'CondValID' => 32,
			'CondValCondID' => '36',
			'CondValValue' => '132'
		]);
		DB::table('SL_ConditionsVals')->insert([
			'CondValID' => 33,
			'CondValCondID' => '13',
			'CondValValue' => '127'
		]);
		DB::table('SL_ConditionsVals')->insert([
			'CondValID' => 34,
			'CondValCondID' => '14',
			'CondValValue' => '128'
		]);
		DB::table('SL_ConditionsVals')->insert([
			'CondValID' => 35,
			'CondValCondID' => '15',
			'CondValValue' => '129'
		]);
		DB::table('SL_ConditionsVals')->insert([
			'CondValID' => 36,
			'CondValCondID' => '16',
			'CondValValue' => '132'
		]);
		DB::table('SL_ConditionsVals')->insert([
			'CondValID' => 39,
			'CondValCondID' => '48',
			'CondValValue' => 'Upset'
		]);
		DB::table('SL_ConditionsVals')->insert([
			'CondValID' => 40,
			'CondValCondID' => '50',
			'CondValValue' => 'Victim'
		]);
		DB::table('SL_ConditionsVals')->insert([
			'CondValID' => 41,
			'CondValCondID' => '51',
			'CondValValue' => 'Victim'
		]);
		DB::table('SL_ConditionsVals')->insert([
			'CondValID' => 44,
			'CondValCondID' => '52',
			'CondValValue' => 'N'
		]);
		DB::table('SL_ConditionsVals')->insert([
			'CondValID' => 45,
			'CondValCondID' => '53',
			'CondValValue' => '?'
		]);
		DB::table('SL_ConditionsVals')->insert([
			'CondValID' => 46,
			'CondValCondID' => '54',
			'CondValValue' => 'Y'
		]);
		DB::table('SL_ConditionsVals')->insert([
			'CondValID' => 47,
			'CondValCondID' => '54',
			'CondValValue' => '?'
		]);
		DB::table('SL_ConditionsVals')->insert([
			'CondValID' => 48,
			'CondValCondID' => '55',
			'CondValValue' => '398'
		]);
		DB::table('SL_ConditionsVals')->insert([
			'CondValID' => 49,
			'CondValCondID' => '55',
			'CondValValue' => '399'
		]);
		DB::table('SL_ConditionsVals')->insert([
			'CondValID' => 50,
			'CondValCondID' => '56',
			'CondValValue' => '304'
		]);
		DB::table('SL_ConditionsVals')->insert([
			'CondValID' => 51,
			'CondValCondID' => '58',
			'CondValValue' => '304'
		]);
		DB::table('SL_ConditionsVals')->insert([
			'CondValID' => 52,
			'CondValCondID' => '59',
			'CondValValue' => 'Y'
		]);
		DB::table('SL_ConditionsVals')->insert([
			'CondValID' => 56,
			'CondValCondID' => '65',
			'CondValValue' => 'Subject Officer'
		]);
		DB::table('SL_ConditionsVals')->insert([
			'CondValID' => 127,
			'CondValCondID' => '96',
			'CondValValue' => 'Y'
		]);
		DB::table('SL_ConditionsVals')->insert([
			'CondValID' => 128,
			'CondValCondID' => '100',
			'CondValValue' => '200'
		]);
		DB::table('SL_ConditionsVals')->insert([
			'CondValID' => 129,
			'CondValCondID' => '100',
			'CondValValue' => '201'
		]);
		DB::table('SL_ConditionsVals')->insert([
			'CondValID' => 130,
			'CondValCondID' => '100',
			'CondValValue' => '202'
		]);
		DB::table('SL_ConditionsVals')->insert([
			'CondValID' => 131,
			'CondValCondID' => '101',
			'CondValValue' => '196'
		]);
		DB::table('SL_ConditionsVals')->insert([
			'CondValID' => 132,
			'CondValCondID' => '102',
			'CondValValue' => '195'
		]);
		DB::table('SL_ConditionsVals')->insert([
			'CondValID' => 133,
			'CondValCondID' => '102',
			'CondValValue' => '198'
		]);
		DB::table('SL_ConditionsVals')->insert([
			'CondValID' => 134,
			'CondValCondID' => '102',
			'CondValValue' => '199'
		]);
		DB::table('SL_ConditionsVals')->insert([
			'CondValID' => 135,
			'CondValCondID' => '103',
			'CondValValue' => '200'
		]);
		DB::table('SL_ConditionsVals')->insert([
			'CondValID' => 136,
			'CondValCondID' => '103',
			'CondValValue' => '201'
		]);
		DB::table('SL_ConditionsVals')->insert([
			'CondValID' => 137,
			'CondValCondID' => '103',
			'CondValValue' => '203'
		]);
		DB::table('SL_ConditionsVals')->insert([
			'CondValID' => 138,
			'CondValCondID' => '103',
			'CondValValue' => '204'
		]);
		DB::table('SL_ConditionsVals')->insert([
			'CondValID' => 139,
			'CondValCondID' => '106',
			'CondValValue' => '1'
		]);
		DB::table('SL_ConditionsVals')->insert([
			'CondValID' => 140,
			'CondValCondID' => '107',
			'CondValValue' => '0'
		]);
		DB::table('SL_ConditionsVals')->insert([
			'CondValID' => 141,
			'CondValCondID' => '119',
			'CondValValue' => '195'
		]);
		DB::table('SL_ConditionsVals')->insert([
			'CondValID' => 142,
			'CondValCondID' => '119',
			'CondValValue' => '197'
		]);
		DB::table('SL_ConditionsVals')->insert([
			'CondValID' => 143,
			'CondValCondID' => '119',
			'CondValValue' => '198'
		]);
		DB::table('SL_ConditionsVals')->insert([
			'CondValID' => 144,
			'CondValCondID' => '119',
			'CondValValue' => '199'
		]);
		DB::table('SL_ConditionsVals')->insert([
			'CondValID' => 157,
			'CondValCondID' => '127',
			'CondValValue' => 'Y'
		]);
		DB::table('SL_ConditionsVals')->insert([
			'CondValID' => 160,
			'CondValCondID' => '136',
			'CondValValue' => '194'
		]);
		DB::table('SL_ConditionsVals')->insert([
			'CondValID' => 162,
			'CondValCondID' => '119',
			'CondValValue' => '196'
		]);
		DB::table('SL_ConditionsVals')->insert([
			'CondValID' => 163,
			'CondValCondID' => '119',
			'CondValValue' => '627'
		]);
		DB::table('SL_ConditionsVals')->insert([
			'CondValID' => 165,
			'CondValCondID' => '149',
			'CondValValue' => 'Y'
		]);
		DB::table('SL_ConditionsVals')->insert([
			'CondValID' => 53,
			'CondValCondID' => '62',
			'CondValValue' => '1'
		]);
		DB::table('SL_ConditionsVals')->insert([
			'CondValID' => 65,
			'CondValCondID' => '68',
			'CondValValue' => 'Y'
		]);
		DB::table('SL_ConditionsVals')->insert([
			'CondValID' => 66,
			'CondValCondID' => '68',
			'CondValValue' => '?'
		]);
		DB::table('SL_ConditionsVals')->insert([
			'CondValID' => 69,
			'CondValCondID' => '7',
			'CondValValue' => 'Gold'
		]);
		DB::table('SL_ConditionsVals')->insert([
			'CondValID' => 79,
			'CondValCondID' => '44',
			'CondValValue' => 'Y'
		]);
		DB::table('SL_ConditionsVals')->insert([
			'CondValID' => 84,
			'CondValCondID' => '78',
			'CondValValue' => 'Y'
		]);
		DB::table('SL_ConditionsVals')->insert([
			'CondValID' => 85,
			'CondValCondID' => '64',
			'CondValValue' => 'Y'
		]);
		DB::table('SL_ConditionsVals')->insert([
			'CondValID' => 86,
			'CondValCondID' => '64',
			'CondValValue' => '?'
		]);
		DB::table('SL_ConditionsVals')->insert([
			'CondValID' => 88,
			'CondValCondID' => '79',
			'CondValValue' => 'Y'
		]);
		DB::table('SL_ConditionsVals')->insert([
			'CondValID' => 92,
			'CondValCondID' => '10',
			'CondValValue' => 'Y'
		]);
		DB::table('SL_ConditionsVals')->insert([
			'CondValID' => 97,
			'CondValCondID' => '75',
			'CondValValue' => 'N'
		]);
		DB::table('SL_ConditionsVals')->insert([
			'CondValID' => 98,
			'CondValCondID' => '75',
			'CondValValue' => '?'
		]);
		DB::table('SL_ConditionsVals')->insert([
			'CondValID' => 101,
			'CondValCondID' => '76',
			'CondValValue' => 'Y'
		]);
		DB::table('SL_ConditionsVals')->insert([
			'CondValID' => 103,
			'CondValCondID' => '69',
			'CondValValue' => '77'
		]);
		DB::table('SL_ConditionsVals')->insert([
			'CondValID' => 104,
			'CondValCondID' => '69',
			'CondValValue' => '-10'
		]);
		DB::table('SL_ConditionsVals')->insert([
			'CondValID' => 105,
			'CondValCondID' => '70',
			'CondValValue' => '77'
		]);
		DB::table('SL_ConditionsVals')->insert([
			'CondValID' => 106,
			'CondValCondID' => '70',
			'CondValValue' => '10'
		]);
		DB::table('SL_ConditionsVals')->insert([
			'CondValID' => 107,
			'CondValCondID' => '77',
			'CondValValue' => 'Y'
		]);
		DB::table('SL_ConditionsVals')->insert([
			'CondValID' => 108,
			'CondValCondID' => '83',
			'CondValValue' => 'Y'
		]);
		DB::table('SL_ConditionsVals')->insert([
			'CondValID' => 109,
			'CondValCondID' => '84',
			'CondValValue' => '351'
		]);
		DB::table('SL_ConditionsVals')->insert([
			'CondValID' => 110,
			'CondValCondID' => '85',
			'CondValValue' => '404'
		]);
		DB::table('SL_ConditionsVals')->insert([
			'CondValID' => 111,
			'CondValCondID' => '86',
			'CondValValue' => '77'
		]);
		DB::table('SL_ConditionsVals')->insert([
			'CondValID' => 112,
			'CondValCondID' => '86',
			'CondValValue' => '85'
		]);
		DB::table('SL_ConditionsVals')->insert([
			'CondValID' => 113,
			'CondValCondID' => '87',
			'CondValValue' => 'Y'
		]);
		DB::table('SL_ConditionsVals')->insert([
			'CondValID' => 114,
			'CondValCondID' => '87',
			'CondValValue' => '?'
		]);
		DB::table('SL_ConditionsVals')->insert([
			'CondValID' => 115,
			'CondValCondID' => '89',
			'CondValValue' => '140'
		]);
		DB::table('SL_ConditionsVals')->insert([
			'CondValID' => 116,
			'CondValCondID' => '89',
			'CondValValue' => '190'
		]);
		DB::table('SL_ConditionsVals')->insert([
			'CondValID' => 117,
			'CondValCondID' => '90',
			'CondValValue' => 'Y'
		]);
		DB::table('SL_ConditionsVals')->insert([
			'CondValID' => 118,
			'CondValCondID' => '90',
			'CondValValue' => '?'
		]);
		DB::table('SL_ConditionsVals')->insert([
			'CondValID' => 121,
			'CondValCondID' => '80',
			'CondValValue' => '79'
		]);
		DB::table('SL_ConditionsVals')->insert([
			'CondValID' => 122,
			'CondValCondID' => '80',
			'CondValValue' => '10'
		]);
		DB::table('SL_ConditionsVals')->insert([
			'CondValID' => 123,
			'CondValCondID' => '91',
			'CondValValue' => 'Y'
		]);
		DB::table('SL_ConditionsVals')->insert([
			'CondValID' => 124,
			'CondValCondID' => '91',
			'CondValValue' => 'N'
		]);
		DB::table('SL_ConditionsVals')->insert([
			'CondValID' => 125,
			'CondValCondID' => '91',
			'CondValValue' => '?'
		]);
		DB::table('SL_ConditionsVals')->insert([
			'CondValID' => 126,
			'CondValCondID' => '92',
			'CondValValue' => 'Passenger'
		]);
		DB::table('SL_ConditionsVals')->insert([
			'CondValID' => 145,
			'CondValCondID' => '125',
			'CondValValue' => '227'
		]);
		DB::table('SL_ConditionsVals')->insert([
			'CondValID' => 146,
			'CondValCondID' => '125',
			'CondValValue' => '443'
		]);
		DB::table('SL_ConditionsVals')->insert([
			'CondValID' => 147,
			'CondValCondID' => '125',
			'CondValValue' => '228'
		]);
		DB::table('SL_ConditionsVals')->insert([
			'CondValID' => 148,
			'CondValCondID' => '125',
			'CondValValue' => '229'
		]);
		DB::table('SL_ConditionsVals')->insert([
			'CondValID' => 149,
			'CondValCondID' => '125',
			'CondValValue' => '230'
		]);
		DB::table('SL_ConditionsVals')->insert([
			'CondValID' => 150,
			'CondValCondID' => '125',
			'CondValValue' => '231'
		]);
		DB::table('SL_ConditionsVals')->insert([
			'CondValID' => 151,
			'CondValCondID' => '125',
			'CondValValue' => '232'
		]);
		DB::table('SL_ConditionsVals')->insert([
			'CondValID' => 152,
			'CondValCondID' => '125',
			'CondValValue' => '233'
		]);
		DB::table('SL_ConditionsVals')->insert([
			'CondValID' => 153,
			'CondValCondID' => '125',
			'CondValValue' => '234'
		]);
		DB::table('SL_ConditionsVals')->insert([
			'CondValID' => 154,
			'CondValCondID' => '125',
			'CondValValue' => '235'
		]);
		DB::table('SL_ConditionsVals')->insert([
			'CondValID' => 155,
			'CondValCondID' => '125',
			'CondValValue' => '236'
		]);
		DB::table('SL_ConditionsVals')->insert([
			'CondValID' => 156,
			'CondValCondID' => '126',
			'CondValValue' => 'Y'
		]);
		DB::table('SL_ConditionsVals')->insert([
			'CondValID' => 158,
			'CondValCondID' => '128',
			'CondValValue' => '219'
		]);
		DB::table('SL_ConditionsVals')->insert([
			'CondValID' => 159,
			'CondValCondID' => '129',
			'CondValValue' => '584'
		]);
		DB::table('SL_ConditionsVals')->insert([
			'CondValID' => 164,
			'CondValCondID' => '148',
			'CondValValue' => 'Impressed'
		]);
		DB::table('SL_ConditionsVals')->insert([
			'CondValID' => 166,
			'CondValCondID' => '150',
			'CondValValue' => '307'
		]);
		DB::table('SL_ConditionsVals')->insert([
			'CondValID' => 167,
			'CondValCondID' => '151',
			'CondValValue' => '304'
		]);
		DB::table('SL_ConditionsVals')->insert([
			'CondValID' => 168,
			'CondValCondID' => '153',
			'CondValValue' => '1'
		]);
	
	DB::table('SL_ConditionsNodes')->insert([
			'CondNodeID' => 1,
			'CondNodeCondID' => '1',
			'CondNodeNodeID' => '16'
		]);
		DB::table('SL_ConditionsNodes')->insert([
			'CondNodeID' => 2,
			'CondNodeCondID' => '1',
			'CondNodeNodeID' => '17'
		]);
		DB::table('SL_ConditionsNodes')->insert([
			'CondNodeID' => 3,
			'CondNodeCondID' => '1',
			'CondNodeNodeID' => '22'
		]);
		DB::table('SL_ConditionsNodes')->insert([
			'CondNodeID' => 4,
			'CondNodeCondID' => '1',
			'CondNodeNodeID' => '23'
		]);
		DB::table('SL_ConditionsNodes')->insert([
			'CondNodeID' => 5,
			'CondNodeCondID' => '1',
			'CondNodeNodeID' => '26'
		]);
		DB::table('SL_ConditionsNodes')->insert([
			'CondNodeID' => 6,
			'CondNodeCondID' => '1',
			'CondNodeNodeID' => '27'
		]);
		DB::table('SL_ConditionsNodes')->insert([
			'CondNodeID' => 7,
			'CondNodeCondID' => '1',
			'CondNodeNodeID' => '41'
		]);
		DB::table('SL_ConditionsNodes')->insert([
			'CondNodeID' => 8,
			'CondNodeCondID' => '1',
			'CondNodeNodeID' => '44'
		]);
		DB::table('SL_ConditionsNodes')->insert([
			'CondNodeID' => 9,
			'CondNodeCondID' => '1',
			'CondNodeNodeID' => '50'
		]);
		DB::table('SL_ConditionsNodes')->insert([
			'CondNodeID' => 10,
			'CondNodeCondID' => '1',
			'CondNodeNodeID' => '51'
		]);
		DB::table('SL_ConditionsNodes')->insert([
			'CondNodeID' => 11,
			'CondNodeCondID' => '1',
			'CondNodeNodeID' => '52'
		]);
		DB::table('SL_ConditionsNodes')->insert([
			'CondNodeID' => 12,
			'CondNodeCondID' => '1',
			'CondNodeNodeID' => '53'
		]);
		DB::table('SL_ConditionsNodes')->insert([
			'CondNodeID' => 13,
			'CondNodeCondID' => '1',
			'CondNodeNodeID' => '56'
		]);
		DB::table('SL_ConditionsNodes')->insert([
			'CondNodeID' => 14,
			'CondNodeCondID' => '1',
			'CondNodeNodeID' => '70'
		]);
		DB::table('SL_ConditionsNodes')->insert([
			'CondNodeID' => 15,
			'CondNodeCondID' => '1',
			'CondNodeNodeID' => '75'
		]);
		DB::table('SL_ConditionsNodes')->insert([
			'CondNodeID' => 16,
			'CondNodeCondID' => '1',
			'CondNodeNodeID' => '76'
		]);
		DB::table('SL_ConditionsNodes')->insert([
			'CondNodeID' => 17,
			'CondNodeCondID' => '1',
			'CondNodeNodeID' => '447'
		]);
		DB::table('SL_ConditionsNodes')->insert([
			'CondNodeID' => 18,
			'CondNodeCondID' => '1',
			'CondNodeNodeID' => '92'
		]);
		DB::table('SL_ConditionsNodes')->insert([
			'CondNodeID' => 19,
			'CondNodeCondID' => '1',
			'CondNodeNodeID' => '93'
		]);
		DB::table('SL_ConditionsNodes')->insert([
			'CondNodeID' => 20,
			'CondNodeCondID' => '1',
			'CondNodeNodeID' => '94'
		]);
		DB::table('SL_ConditionsNodes')->insert([
			'CondNodeID' => 21,
			'CondNodeCondID' => '1',
			'CondNodeNodeID' => '95'
		]);
		DB::table('SL_ConditionsNodes')->insert([
			'CondNodeID' => 22,
			'CondNodeCondID' => '1',
			'CondNodeNodeID' => '102'
		]);
		DB::table('SL_ConditionsNodes')->insert([
			'CondNodeID' => 23,
			'CondNodeCondID' => '1',
			'CondNodeNodeID' => '115'
		]);
		DB::table('SL_ConditionsNodes')->insert([
			'CondNodeID' => 24,
			'CondNodeCondID' => '1',
			'CondNodeNodeID' => '117'
		]);
		DB::table('SL_ConditionsNodes')->insert([
			'CondNodeID' => 25,
			'CondNodeCondID' => '1',
			'CondNodeNodeID' => '132'
		]);
		DB::table('SL_ConditionsNodes')->insert([
			'CondNodeID' => 26,
			'CondNodeCondID' => '1',
			'CondNodeNodeID' => '133'
		]);
		DB::table('SL_ConditionsNodes')->insert([
			'CondNodeID' => 27,
			'CondNodeCondID' => '1',
			'CondNodeNodeID' => '134'
		]);
		DB::table('SL_ConditionsNodes')->insert([
			'CondNodeID' => 28,
			'CondNodeCondID' => '1',
			'CondNodeNodeID' => '135'
		]);
		DB::table('SL_ConditionsNodes')->insert([
			'CondNodeID' => 29,
			'CondNodeCondID' => '1',
			'CondNodeNodeID' => '165'
		]);
		DB::table('SL_ConditionsNodes')->insert([
			'CondNodeID' => 30,
			'CondNodeCondID' => '1',
			'CondNodeNodeID' => '176'
		]);
		DB::table('SL_ConditionsNodes')->insert([
			'CondNodeID' => 31,
			'CondNodeCondID' => '1',
			'CondNodeNodeID' => '190'
		]);
		DB::table('SL_ConditionsNodes')->insert([
			'CondNodeID' => 32,
			'CondNodeCondID' => '1',
			'CondNodeNodeID' => '191'
		]);
		DB::table('SL_ConditionsNodes')->insert([
			'CondNodeID' => 33,
			'CondNodeCondID' => '1',
			'CondNodeNodeID' => '192'
		]);
		DB::table('SL_ConditionsNodes')->insert([
			'CondNodeID' => 34,
			'CondNodeCondID' => '1',
			'CondNodeNodeID' => '194'
		]);
		DB::table('SL_ConditionsNodes')->insert([
			'CondNodeID' => 35,
			'CondNodeCondID' => '1',
			'CondNodeNodeID' => '279'
		]);
		DB::table('SL_ConditionsNodes')->insert([
			'CondNodeID' => 36,
			'CondNodeCondID' => '1',
			'CondNodeNodeID' => '280'
		]);
		DB::table('SL_ConditionsNodes')->insert([
			'CondNodeID' => 37,
			'CondNodeCondID' => '1',
			'CondNodeNodeID' => '282'
		]);
		DB::table('SL_ConditionsNodes')->insert([
			'CondNodeID' => 39,
			'CondNodeCondID' => '2',
			'CondNodeNodeID' => '47'
		]);
		DB::table('SL_ConditionsNodes')->insert([
			'CondNodeID' => 40,
			'CondNodeCondID' => '2',
			'CondNodeNodeID' => '48'
		]);
		DB::table('SL_ConditionsNodes')->insert([
			'CondNodeID' => 44,
			'CondNodeCondID' => '4',
			'CondNodeNodeID' => '485'
		]);
		DB::table('SL_ConditionsNodes')->insert([
			'CondNodeID' => 45,
			'CondNodeCondID' => '5',
			'CondNodeNodeID' => '162'
		]);
		DB::table('SL_ConditionsNodes')->insert([
			'CondNodeID' => 47,
			'CondNodeCondID' => '7',
			'CondNodeNodeID' => '196'
		]);
		DB::table('SL_ConditionsNodes')->insert([
			'CondNodeID' => 48,
			'CondNodeCondID' => '8',
			'CondNodeNodeID' => '206'
		]);
		DB::table('SL_ConditionsNodes')->insert([
			'CondNodeID' => 49,
			'CondNodeCondID' => '8',
			'CondNodeNodeID' => '211'
		]);
		DB::table('SL_ConditionsNodes')->insert([
			'CondNodeID' => 50,
			'CondNodeCondID' => '8',
			'CondNodeNodeID' => '214'
		]);
		DB::table('SL_ConditionsNodes')->insert([
			'CondNodeID' => 51,
			'CondNodeCondID' => '8',
			'CondNodeNodeID' => '219'
		]);
		DB::table('SL_ConditionsNodes')->insert([
			'CondNodeID' => 52,
			'CondNodeCondID' => '8',
			'CondNodeNodeID' => '224'
		]);
		DB::table('SL_ConditionsNodes')->insert([
			'CondNodeID' => 53,
			'CondNodeCondID' => '8',
			'CondNodeNodeID' => '229'
		]);
		DB::table('SL_ConditionsNodes')->insert([
			'CondNodeID' => 54,
			'CondNodeCondID' => '8',
			'CondNodeNodeID' => '236'
		]);
		DB::table('SL_ConditionsNodes')->insert([
			'CondNodeID' => 55,
			'CondNodeCondID' => '8',
			'CondNodeNodeID' => '241'
		]);
		DB::table('SL_ConditionsNodes')->insert([
			'CondNodeID' => 56,
			'CondNodeCondID' => '8',
			'CondNodeNodeID' => '244'
		]);
		DB::table('SL_ConditionsNodes')->insert([
			'CondNodeID' => 57,
			'CondNodeCondID' => '8',
			'CondNodeNodeID' => '249'
		]);
		DB::table('SL_ConditionsNodes')->insert([
			'CondNodeID' => 58,
			'CondNodeCondID' => '8',
			'CondNodeNodeID' => '253'
		]);
		DB::table('SL_ConditionsNodes')->insert([
			'CondNodeID' => 59,
			'CondNodeCondID' => '8',
			'CondNodeNodeID' => '257'
		]);
		DB::table('SL_ConditionsNodes')->insert([
			'CondNodeID' => 60,
			'CondNodeCondID' => '8',
			'CondNodeNodeID' => '262'
		]);
		DB::table('SL_ConditionsNodes')->insert([
			'CondNodeID' => 61,
			'CondNodeCondID' => '8',
			'CondNodeNodeID' => '263'
		]);
		DB::table('SL_ConditionsNodes')->insert([
			'CondNodeID' => 62,
			'CondNodeCondID' => '8',
			'CondNodeNodeID' => '428'
		]);
		DB::table('SL_ConditionsNodes')->insert([
			'CondNodeID' => 63,
			'CondNodeCondID' => '8',
			'CondNodeNodeID' => '487'
		]);
		DB::table('SL_ConditionsNodes')->insert([
			'CondNodeID' => 64,
			'CondNodeCondID' => '8',
			'CondNodeNodeID' => '495'
		]);
		DB::table('SL_ConditionsNodes')->insert([
			'CondNodeID' => 65,
			'CondNodeCondID' => '8',
			'CondNodeNodeID' => '498'
		]);
		DB::table('SL_ConditionsNodes')->insert([
			'CondNodeID' => 66,
			'CondNodeCondID' => '8',
			'CondNodeNodeID' => '499'
		]);
		DB::table('SL_ConditionsNodes')->insert([
			'CondNodeID' => 67,
			'CondNodeCondID' => '8',
			'CondNodeNodeID' => '593'
		]);
		DB::table('SL_ConditionsNodes')->insert([
			'CondNodeID' => 70,
			'CondNodeCondID' => '9',
			'CondNodeNodeID' => '220'
		]);
		DB::table('SL_ConditionsNodes')->insert([
			'CondNodeID' => 73,
			'CondNodeCondID' => '9',
			'CondNodeNodeID' => '233'
		]);
		DB::table('SL_ConditionsNodes')->insert([
			'CondNodeID' => 74,
			'CondNodeCondID' => '9',
			'CondNodeNodeID' => '237'
		]);
		DB::table('SL_ConditionsNodes')->insert([
			'CondNodeID' => 75,
			'CondNodeCondID' => '9',
			'CondNodeNodeID' => '245'
		]);
		DB::table('SL_ConditionsNodes')->insert([
			'CondNodeID' => 76,
			'CondNodeCondID' => '9',
			'CondNodeNodeID' => '250'
		]);
		DB::table('SL_ConditionsNodes')->insert([
			'CondNodeID' => 77,
			'CondNodeCondID' => '9',
			'CondNodeNodeID' => '254'
		]);
		DB::table('SL_ConditionsNodes')->insert([
			'CondNodeID' => 78,
			'CondNodeCondID' => '9',
			'CondNodeNodeID' => '258'
		]);
		DB::table('SL_ConditionsNodes')->insert([
			'CondNodeID' => 79,
			'CondNodeCondID' => '9',
			'CondNodeNodeID' => '271'
		]);
		DB::table('SL_ConditionsNodes')->insert([
			'CondNodeID' => 80,
			'CondNodeCondID' => '9',
			'CondNodeNodeID' => '272'
		]);
		DB::table('SL_ConditionsNodes')->insert([
			'CondNodeID' => 81,
			'CondNodeCondID' => '9',
			'CondNodeNodeID' => '273'
		]);
		DB::table('SL_ConditionsNodes')->insert([
			'CondNodeID' => 82,
			'CondNodeCondID' => '9',
			'CondNodeNodeID' => '429'
		]);
		DB::table('SL_ConditionsNodes')->insert([
			'CondNodeID' => 83,
			'CondNodeCondID' => '9',
			'CondNodeNodeID' => '594'
		]);
		DB::table('SL_ConditionsNodes')->insert([
			'CondNodeID' => 84,
			'CondNodeCondID' => '10',
			'CondNodeNodeID' => '297'
		]);
		DB::table('SL_ConditionsNodes')->insert([
			'CondNodeID' => 85,
			'CondNodeCondID' => '10',
			'CondNodeNodeID' => '392'
		]);
		DB::table('SL_ConditionsNodes')->insert([
			'CondNodeID' => 88,
			'CondNodeCondID' => '10',
			'CondNodeNodeID' => '490',
			'CondNodeLoopID' => '-1'
		]);
		DB::table('SL_ConditionsNodes')->insert([
			'CondNodeID' => 89,
			'CondNodeCondID' => '12',
			'CondNodeNodeID' => '301'
		]);
		DB::table('SL_ConditionsNodes')->insert([
			'CondNodeID' => 90,
			'CondNodeCondID' => '13',
			'CondNodeNodeID' => '344'
		]);
		DB::table('SL_ConditionsNodes')->insert([
			'CondNodeID' => 91,
			'CondNodeCondID' => '14',
			'CondNodeNodeID' => '345'
		]);
		DB::table('SL_ConditionsNodes')->insert([
			'CondNodeID' => 92,
			'CondNodeCondID' => '15',
			'CondNodeNodeID' => '346'
		]);
		DB::table('SL_ConditionsNodes')->insert([
			'CondNodeID' => 93,
			'CondNodeCondID' => '16',
			'CondNodeNodeID' => '347'
		]);
		DB::table('SL_ConditionsNodes')->insert([
			'CondNodeID' => 95,
			'CondNodeCondID' => '18',
			'CondNodeNodeID' => '357'
		]);
		DB::table('SL_ConditionsNodes')->insert([
			'CondNodeID' => 96,
			'CondNodeCondID' => '18',
			'CondNodeNodeID' => '519'
		]);
		DB::table('SL_ConditionsNodes')->insert([
			'CondNodeID' => 97,
			'CondNodeCondID' => '19',
			'CondNodeNodeID' => '357'
		]);
		DB::table('SL_ConditionsNodes')->insert([
			'CondNodeID' => 99,
			'CondNodeCondID' => '19',
			'CondNodeNodeID' => '519'
		]);
		DB::table('SL_ConditionsNodes')->insert([
			'CondNodeID' => 100,
			'CondNodeCondID' => '19',
			'CondNodeNodeID' => '517'
		]);
		DB::table('SL_ConditionsNodes')->insert([
			'CondNodeID' => 101,
			'CondNodeCondID' => '19',
			'CondNodeNodeID' => '518'
		]);
		DB::table('SL_ConditionsNodes')->insert([
			'CondNodeID' => 106,
			'CondNodeCondID' => '21',
			'CondNodeNodeID' => '445'
		]);
		DB::table('SL_ConditionsNodes')->insert([
			'CondNodeID' => 108,
			'CondNodeCondID' => '23',
			'CondNodeNodeID' => '473'
		]);
		DB::table('SL_ConditionsNodes')->insert([
			'CondNodeID' => 109,
			'CondNodeCondID' => '24',
			'CondNodeNodeID' => '476'
		]);
		DB::table('SL_ConditionsNodes')->insert([
			'CondNodeID' => 110,
			'CondNodeCondID' => '25',
			'CondNodeNodeID' => '479'
		]);
		DB::table('SL_ConditionsNodes')->insert([
			'CondNodeID' => 111,
			'CondNodeCondID' => '26',
			'CondNodeNodeID' => '260'
		]);
		DB::table('SL_ConditionsNodes')->insert([
			'CondNodeID' => 132,
			'CondNodeCondID' => '31',
			'CondNodeNodeID' => '498'
		]);
		DB::table('SL_ConditionsNodes')->insert([
			'CondNodeID' => 133,
			'CondNodeCondID' => '31',
			'CondNodeNodeID' => '496'
		]);
		DB::table('SL_ConditionsNodes')->insert([
			'CondNodeID' => 134,
			'CondNodeCondID' => '31',
			'CondNodeNodeID' => '507'
		]);
		DB::table('SL_ConditionsNodes')->insert([
			'CondNodeID' => 136,
			'CondNodeCondID' => '31',
			'CondNodeNodeID' => '509'
		]);
		DB::table('SL_ConditionsNodes')->insert([
			'CondNodeID' => 138,
			'CondNodeCondID' => '31',
			'CondNodeNodeID' => '511'
		]);
		DB::table('SL_ConditionsNodes')->insert([
			'CondNodeID' => 149,
			'CondNodeCondID' => '35',
			'CondNodeNodeID' => '506'
		]);
		DB::table('SL_ConditionsNodes')->insert([
			'CondNodeID' => 151,
			'CondNodeCondID' => '37',
			'CondNodeNodeID' => '516'
		]);
		DB::table('SL_ConditionsNodes')->insert([
			'CondNodeID' => 153,
			'CondNodeCondID' => '39',
			'CondNodeNodeID' => '565'
		]);
		DB::table('SL_ConditionsNodes')->insert([
			'CondNodeID' => 154,
			'CondNodeCondID' => '39',
			'CondNodeNodeID' => '566'
		]);
		DB::table('SL_ConditionsNodes')->insert([
			'CondNodeID' => 155,
			'CondNodeCondID' => '40',
			'CondNodeLoopID' => '1'
		]);
		DB::table('SL_ConditionsNodes')->insert([
			'CondNodeID' => 156,
			'CondNodeCondID' => '41',
			'CondNodeLoopID' => '2'
		]);
		DB::table('SL_ConditionsNodes')->insert([
			'CondNodeID' => 157,
			'CondNodeCondID' => '42',
			'CondNodeLoopID' => '7'
		]);
		DB::table('SL_ConditionsNodes')->insert([
			'CondNodeID' => 159,
			'CondNodeCondID' => '44',
			'CondNodeNodeID' => '610'
		]);
		DB::table('SL_ConditionsNodes')->insert([
			'CondNodeID' => 160,
			'CondNodeCondID' => '44',
			'CondNodeNodeID' => '-3'
		]);
		DB::table('SL_ConditionsNodes')->insert([
			'CondNodeID' => 161,
			'CondNodeCondID' => '44',
			'CondNodeNodeID' => '611'
		]);
		DB::table('SL_ConditionsNodes')->insert([
			'CondNodeID' => 255,
			'CondNodeCondID' => '65',
			'CondNodeNodeID' => '-3',
			'CondNodeLoopID' => '22'
		]);
		DB::table('SL_ConditionsNodes')->insert([
			'CondNodeID' => 364,
			'CondNodeCondID' => '106',
			'CondNodeLoopID' => '23'
		]);
		DB::table('SL_ConditionsNodes')->insert([
			'CondNodeID' => 365,
			'CondNodeCondID' => '107',
			'CondNodeLoopID' => '24'
		]);
		DB::table('SL_ConditionsNodes')->insert([
			'CondNodeID' => 613,
			'CondNodeCondID' => '149',
			'CondNodeLoopID' => '17'
		]);
		DB::table('SL_ConditionsNodes')->insert([
			'CondNodeID' => 627,
			'CondNodeCondID' => '65',
			'CondNodeNodeID' => '-3',
			'CondNodeLoopID' => '31'
		]);
		DB::table('SL_ConditionsNodes')->insert([
			'CondNodeID' => 167,
			'CondNodeCondID' => '8',
			'CondNodeNodeID' => '671'
		]);
		DB::table('SL_ConditionsNodes')->insert([
			'CondNodeID' => 168,
			'CondNodeCondID' => '46',
			'CondNodeNodeID' => '674'
		]);
		DB::table('SL_ConditionsNodes')->insert([
			'CondNodeID' => 169,
			'CondNodeCondID' => '9',
			'CondNodeNodeID' => '670'
		]);
		DB::table('SL_ConditionsNodes')->insert([
			'CondNodeID' => 170,
			'CondNodeCondID' => '47',
			'CondNodeNodeID' => '676'
		]);
		DB::table('SL_ConditionsNodes')->insert([
			'CondNodeID' => 171,
			'CondNodeCondID' => '48',
			'CondNodeNodeID' => '-3'
		]);
		DB::table('SL_ConditionsNodes')->insert([
			'CondNodeID' => 172,
			'CondNodeCondID' => '48',
			'CondNodeNodeID' => '677'
		]);
		DB::table('SL_ConditionsNodes')->insert([
			'CondNodeID' => 174,
			'CondNodeCondID' => '9',
			'CondNodeNodeID' => '516'
		]);
		DB::table('SL_ConditionsNodes')->insert([
			'CondNodeID' => 175,
			'CondNodeCondID' => '9',
			'CondNodeNodeID' => '514'
		]);
		DB::table('SL_ConditionsNodes')->insert([
			'CondNodeID' => 176,
			'CondNodeCondID' => '9',
			'CondNodeNodeID' => '381'
		]);
		DB::table('SL_ConditionsNodes')->insert([
			'CondNodeID' => 178,
			'CondNodeCondID' => '9',
			'CondNodeNodeID' => '506'
		]);
		DB::table('SL_ConditionsNodes')->insert([
			'CondNodeID' => 179,
			'CondNodeCondID' => '9',
			'CondNodeNodeID' => '503'
		]);
		DB::table('SL_ConditionsNodes')->insert([
			'CondNodeID' => 180,
			'CondNodeCondID' => '9',
			'CondNodeNodeID' => '493'
		]);
		DB::table('SL_ConditionsNodes')->insert([
			'CondNodeID' => 181,
			'CondNodeCondID' => '9',
			'CondNodeNodeID' => '305'
		]);
		DB::table('SL_ConditionsNodes')->insert([
			'CondNodeID' => 184,
			'CondNodeCondID' => '51',
			'CondNodeNodeID' => '680'
		]);
		DB::table('SL_ConditionsNodes')->insert([
			'CondNodeID' => 186,
			'CondNodeCondID' => '52',
			'CondNodeNodeID' => '682'
		]);
		DB::table('SL_ConditionsNodes')->insert([
			'CondNodeID' => 187,
			'CondNodeCondID' => '53',
			'CondNodeNodeID' => '-3'
		]);
		DB::table('SL_ConditionsNodes')->insert([
			'CondNodeID' => 188,
			'CondNodeCondID' => '53',
			'CondNodeNodeID' => '683'
		]);
		DB::table('SL_ConditionsNodes')->insert([
			'CondNodeID' => 192,
			'CondNodeCondID' => '56',
			'CondNodeNodeID' => '687'
		]);
		DB::table('SL_ConditionsNodes')->insert([
			'CondNodeID' => 193,
			'CondNodeCondID' => '58',
			'CondNodeNodeID' => '-3'
		]);
		DB::table('SL_ConditionsNodes')->insert([
			'CondNodeID' => 194,
			'CondNodeCondID' => '58',
			'CondNodeNodeID' => '688'
		]);
		DB::table('SL_ConditionsNodes')->insert([
			'CondNodeID' => 196,
			'CondNodeCondID' => '9',
			'CondNodeNodeID' => '732'
		]);
		DB::table('SL_ConditionsNodes')->insert([
			'CondNodeID' => 197,
			'CondNodeCondID' => '9',
			'CondNodeNodeID' => '733'
		]);
		DB::table('SL_ConditionsNodes')->insert([
			'CondNodeID' => 200,
			'CondNodeCondID' => '10',
			'CondNodeNodeID' => '732'
		]);
		DB::table('SL_ConditionsNodes')->insert([
			'CondNodeID' => 201,
			'CondNodeCondID' => '9',
			'CondNodeNodeID' => '736'
		]);
		DB::table('SL_ConditionsNodes')->insert([
			'CondNodeID' => 203,
			'CondNodeCondID' => '47',
			'CondNodeNodeID' => '737'
		]);
		DB::table('SL_ConditionsNodes')->insert([
			'CondNodeID' => 204,
			'CondNodeCondID' => '10',
			'CondNodeNodeID' => '737'
		]);
		DB::table('SL_ConditionsNodes')->insert([
			'CondNodeID' => 205,
			'CondNodeCondID' => '47',
			'CondNodeNodeID' => '738'
		]);
		DB::table('SL_ConditionsNodes')->insert([
			'CondNodeID' => 207,
			'CondNodeCondID' => '47',
			'CondNodeNodeID' => '739'
		]);
		DB::table('SL_ConditionsNodes')->insert([
			'CondNodeID' => 208,
			'CondNodeCondID' => '9',
			'CondNodeNodeID' => '-3'
		]);
		DB::table('SL_ConditionsNodes')->insert([
			'CondNodeID' => 209,
			'CondNodeCondID' => '47',
			'CondNodeNodeID' => '747'
		]);
		DB::table('SL_ConditionsNodes')->insert([
			'CondNodeID' => 210,
			'CondNodeCondID' => '9',
			'CondNodeNodeID' => '748'
		]);
		DB::table('SL_ConditionsNodes')->insert([
			'CondNodeID' => 216,
			'CondNodeCondID' => '62',
			'CondNodeNodeID' => '781',
			'CondNodeLoopID' => '-1'
		]);
		DB::table('SL_ConditionsNodes')->insert([
			'CondNodeID' => 217,
			'CondNodeCondID' => '62',
			'CondNodeNodeID' => '-3',
			'CondNodeLoopID' => '-1'
		]);
		DB::table('SL_ConditionsNodes')->insert([
			'CondNodeID' => 218,
			'CondNodeCondID' => '62',
			'CondNodeNodeID' => '782',
			'CondNodeLoopID' => '-1'
		]);
		DB::table('SL_ConditionsNodes')->insert([
			'CondNodeID' => 225,
			'CondNodeCondID' => '62',
			'CondNodeNodeID' => '-3'
		]);
		DB::table('SL_ConditionsNodes')->insert([
			'CondNodeID' => 226,
			'CondNodeCondID' => '62',
			'CondNodeNodeID' => '-3'
		]);
		DB::table('SL_ConditionsNodes')->insert([
			'CondNodeID' => 230,
			'CondNodeCondID' => '1',
			'CondNodeNodeID' => '185'
		]);
		DB::table('SL_ConditionsNodes')->insert([
			'CondNodeID' => 231,
			'CondNodeCondID' => '1',
			'CondNodeNodeID' => '126'
		]);
		DB::table('SL_ConditionsNodes')->insert([
			'CondNodeID' => 232,
			'CondNodeCondID' => '1',
			'CondNodeNodeID' => '86'
		]);
		DB::table('SL_ConditionsNodes')->insert([
			'CondNodeID' => 234,
			'CondNodeCondID' => '62',
			'CondNodeNodeID' => '-3',
			'CondNodeLoopID' => '-1'
		]);
		DB::table('SL_ConditionsNodes')->insert([
			'CondNodeID' => 235,
			'CondNodeCondID' => '8',
			'CondNodeNodeID' => '855'
		]);
		DB::table('SL_ConditionsNodes')->insert([
			'CondNodeID' => 236,
			'CondNodeCondID' => '9',
			'CondNodeNodeID' => '856'
		]);
		DB::table('SL_ConditionsNodes')->insert([
			'CondNodeID' => 237,
			'CondNodeCondID' => '64',
			'CondNodeNodeID' => '477'
		]);
		DB::table('SL_ConditionsNodes')->insert([
			'CondNodeID' => 238,
			'CondNodeCondID' => '9',
			'CondNodeNodeID' => '731'
		]);
		DB::table('SL_ConditionsNodes')->insert([
			'CondNodeID' => 239,
			'CondNodeCondID' => '47',
			'CondNodeNodeID' => '866'
		]);
		DB::table('SL_ConditionsNodes')->insert([
			'CondNodeID' => 240,
			'CondNodeCondID' => '55',
			'CondNodeNodeID' => '-3'
		]);
		DB::table('SL_ConditionsNodes')->insert([
			'CondNodeID' => 250,
			'CondNodeCondID' => '1',
			'CondNodeNodeID' => '913'
		]);
		DB::table('SL_ConditionsNodes')->insert([
			'CondNodeID' => 251,
			'CondNodeCondID' => '21',
			'CondNodeNodeID' => '914'
		]);
		DB::table('SL_ConditionsNodes')->insert([
			'CondNodeID' => 252,
			'CondNodeCondID' => '5',
			'CondNodeNodeID' => '926'
		]);
		DB::table('SL_ConditionsNodes')->insert([
			'CondNodeID' => 258,
			'CondNodeCondID' => '58',
			'CondNodeNodeID' => '-3'
		]);
		DB::table('SL_ConditionsNodes')->insert([
			'CondNodeID' => 260,
			'CondNodeCondID' => '58',
			'CondNodeNodeID' => '-3'
		]);
		DB::table('SL_ConditionsNodes')->insert([
			'CondNodeID' => 275,
			'CondNodeCondID' => '67',
			'CondNodeNodeID' => '1093'
		]);
		DB::table('SL_ConditionsNodes')->insert([
			'CondNodeID' => 276,
			'CondNodeCondID' => '62',
			'CondNodeNodeID' => '-3',
			'CondNodeLoopID' => '-1'
		]);
		DB::table('SL_ConditionsNodes')->insert([
			'CondNodeID' => 279,
			'CondNodeCondID' => '62',
			'CondNodeNodeID' => '-3',
			'CondNodeLoopID' => '-1'
		]);
		DB::table('SL_ConditionsNodes')->insert([
			'CondNodeID' => 282,
			'CondNodeCondID' => '62',
			'CondNodeNodeID' => '-3'
		]);
		DB::table('SL_ConditionsNodes')->insert([
			'CondNodeID' => 284,
			'CondNodeCondID' => '62',
			'CondNodeNodeID' => '1113',
			'CondNodeLoopID' => '-1'
		]);
		DB::table('SL_ConditionsNodes')->insert([
			'CondNodeID' => 286,
			'CondNodeCondID' => '62',
			'CondNodeNodeID' => '1124',
			'CondNodeLoopID' => '-1'
		]);
		DB::table('SL_ConditionsNodes')->insert([
			'CondNodeID' => 293,
			'CondNodeCondID' => '8',
			'CondNodeNodeID' => '296'
		]);
		DB::table('SL_ConditionsNodes')->insert([
			'CondNodeID' => 294,
			'CondNodeCondID' => '8',
			'CondNodeNodeID' => '295'
		]);
		DB::table('SL_ConditionsNodes')->insert([
			'CondNodeID' => 295,
			'CondNodeCondID' => '8',
			'CondNodeNodeID' => '294'
		]);
		DB::table('SL_ConditionsNodes')->insert([
			'CondNodeID' => 296,
			'CondNodeCondID' => '8',
			'CondNodeNodeID' => '293'
		]);
		DB::table('SL_ConditionsNodes')->insert([
			'CondNodeID' => 297,
			'CondNodeCondID' => '9',
			'CondNodeNodeID' => '333'
		]);
		DB::table('SL_ConditionsNodes')->insert([
			'CondNodeID' => 298,
			'CondNodeCondID' => '9',
			'CondNodeNodeID' => '353'
		]);
		DB::table('SL_ConditionsNodes')->insert([
			'CondNodeID' => 299,
			'CondNodeCondID' => '9',
			'CondNodeNodeID' => '408'
		]);
		DB::table('SL_ConditionsNodes')->insert([
			'CondNodeID' => 300,
			'CondNodeCondID' => '9',
			'CondNodeNodeID' => '383'
		]);
		DB::table('SL_ConditionsNodes')->insert([
			'CondNodeID' => 301,
			'CondNodeCondID' => '9',
			'CondNodeNodeID' => '389'
		]);
		DB::table('SL_ConditionsNodes')->insert([
			'CondNodeID' => 302,
			'CondNodeCondID' => '9',
			'CondNodeNodeID' => '318'
		]);
		DB::table('SL_ConditionsNodes')->insert([
			'CondNodeID' => 303,
			'CondNodeCondID' => '9',
			'CondNodeNodeID' => '397'
		]);
		DB::table('SL_ConditionsNodes')->insert([
			'CondNodeID' => 304,
			'CondNodeCondID' => '1',
			'CondNodeNodeID' => '1094'
		]);
		DB::table('SL_ConditionsNodes')->insert([
			'CondNodeID' => 306,
			'CondNodeCondID' => '25',
			'CondNodeNodeID' => '256'
		]);
		DB::table('SL_ConditionsNodes')->insert([
			'CondNodeID' => 307,
			'CondNodeCondID' => '94',
			'CondNodeNodeID' => '1162'
		]);
		DB::table('SL_ConditionsNodes')->insert([
			'CondNodeID' => 309,
			'CondNodeCondID' => '97',
			'CondNodeNodeID' => '362'
		]);
		DB::table('SL_ConditionsNodes')->insert([
			'CondNodeID' => 310,
			'CondNodeCondID' => '98',
			'CondNodeNodeID' => '1091',
			'CondNodeLoopID' => '-1'
		]);
		DB::table('SL_ConditionsNodes')->insert([
			'CondNodeID' => 311,
			'CondNodeCondID' => '8',
			'CondNodeNodeID' => '1181'
		]);
		DB::table('SL_ConditionsNodes')->insert([
			'CondNodeID' => 312,
			'CondNodeCondID' => '9',
			'CondNodeNodeID' => '1182'
		]);
		DB::table('SL_ConditionsNodes')->insert([
			'CondNodeID' => 313,
			'CondNodeCondID' => '9',
			'CondNodeNodeID' => '1184'
		]);
		DB::table('SL_ConditionsNodes')->insert([
			'CondNodeID' => 314,
			'CondNodeCondID' => '10',
			'CondNodeNodeID' => '736',
			'CondNodeLoopID' => '-1'
		]);
		DB::table('SL_ConditionsNodes')->insert([
			'CondNodeID' => 315,
			'CondNodeCondID' => '10',
			'CondNodeNodeID' => '738',
			'CondNodeLoopID' => '-1'
		]);
		DB::table('SL_ConditionsNodes')->insert([
			'CondNodeID' => 316,
			'CondNodeCondID' => '10',
			'CondNodeNodeID' => '299',
			'CondNodeLoopID' => '-1'
		]);
		DB::table('SL_ConditionsNodes')->insert([
			'CondNodeID' => 317,
			'CondNodeCondID' => '10',
			'CondNodeNodeID' => '393',
			'CondNodeLoopID' => '-1'
		]);
		DB::table('SL_ConditionsNodes')->insert([
			'CondNodeID' => 319,
			'CondNodeCondID' => '99',
			'CondNodeNodeID' => '679'
		]);
		DB::table('SL_ConditionsNodes')->insert([
			'CondNodeID' => 321,
			'CondNodeCondID' => '100',
			'CondNodeNodeID' => '1363',
			'CondNodeLoopID' => '-1'
		]);
		DB::table('SL_ConditionsNodes')->insert([
			'CondNodeID' => 322,
			'CondNodeCondID' => '100',
			'CondNodeNodeID' => '1364'
		]);
		DB::table('SL_ConditionsNodes')->insert([
			'CondNodeID' => 323,
			'CondNodeCondID' => '101',
			'CondNodeNodeID' => '1365'
		]);
		DB::table('SL_ConditionsNodes')->insert([
			'CondNodeID' => 325,
			'CondNodeCondID' => '101',
			'CondNodeNodeID' => '1366'
		]);
		DB::table('SL_ConditionsNodes')->insert([
			'CondNodeID' => 326,
			'CondNodeCondID' => '103',
			'CondNodeNodeID' => '1367'
		]);
		DB::table('SL_ConditionsNodes')->insert([
			'CondNodeID' => 330,
			'CondNodeCondID' => '104',
			'CondNodeNodeID' => '1375',
			'CondNodeLoopID' => '-1'
		]);
		DB::table('SL_ConditionsNodes')->insert([
			'CondNodeID' => 332,
			'CondNodeCondID' => '105',
			'CondNodeNodeID' => '576'
		]);
		DB::table('SL_ConditionsNodes')->insert([
			'CondNodeID' => 333,
			'CondNodeCondID' => '105',
			'CondNodeNodeID' => '1387',
			'CondNodeLoopID' => '-1'
		]);
		DB::table('SL_ConditionsNodes')->insert([
			'CondNodeID' => 334,
			'CondNodeCondID' => '1',
			'CondNodeNodeID' => '1389'
		]);
		DB::table('SL_ConditionsNodes')->insert([
			'CondNodeID' => 335,
			'CondNodeCondID' => '1',
			'CondNodeNodeID' => '1390'
		]);
		DB::table('SL_ConditionsNodes')->insert([
			'CondNodeID' => 336,
			'CondNodeCondID' => '1',
			'CondNodeNodeID' => '1391'
		]);
		DB::table('SL_ConditionsNodes')->insert([
			'CondNodeID' => 337,
			'CondNodeCondID' => '1',
			'CondNodeNodeID' => '1392'
		]);
		DB::table('SL_ConditionsNodes')->insert([
			'CondNodeID' => 338,
			'CondNodeCondID' => '105',
			'CondNodeNodeID' => '571'
		]);
		DB::table('SL_ConditionsNodes')->insert([
			'CondNodeID' => 339,
			'CondNodeCondID' => '105',
			'CondNodeNodeID' => '1393',
			'CondNodeLoopID' => '-1'
		]);
		DB::table('SL_ConditionsNodes')->insert([
			'CondNodeID' => 340,
			'CondNodeCondID' => '1',
			'CondNodeNodeID' => '1395'
		]);
		DB::table('SL_ConditionsNodes')->insert([
			'CondNodeID' => 341,
			'CondNodeCondID' => '1',
			'CondNodeNodeID' => '1396'
		]);
		DB::table('SL_ConditionsNodes')->insert([
			'CondNodeID' => 342,
			'CondNodeCondID' => '1',
			'CondNodeNodeID' => '1397'
		]);
		DB::table('SL_ConditionsNodes')->insert([
			'CondNodeID' => 343,
			'CondNodeCondID' => '1',
			'CondNodeNodeID' => '1398'
		]);
		DB::table('SL_ConditionsNodes')->insert([
			'CondNodeID' => 344,
			'CondNodeCondID' => '105',
			'CondNodeNodeID' => '584'
		]);
		DB::table('SL_ConditionsNodes')->insert([
			'CondNodeID' => 345,
			'CondNodeCondID' => '105',
			'CondNodeNodeID' => '1399',
			'CondNodeLoopID' => '-1'
		]);
		DB::table('SL_ConditionsNodes')->insert([
			'CondNodeID' => 346,
			'CondNodeCondID' => '1',
			'CondNodeNodeID' => '1402'
		]);
		DB::table('SL_ConditionsNodes')->insert([
			'CondNodeID' => 347,
			'CondNodeCondID' => '1',
			'CondNodeNodeID' => '1403'
		]);
		DB::table('SL_ConditionsNodes')->insert([
			'CondNodeID' => 348,
			'CondNodeCondID' => '1',
			'CondNodeNodeID' => '1404'
		]);
		DB::table('SL_ConditionsNodes')->insert([
			'CondNodeID' => 349,
			'CondNodeCondID' => '105',
			'CondNodeNodeID' => '573',
			'CondNodeLoopID' => '-1'
		]);
		DB::table('SL_ConditionsNodes')->insert([
			'CondNodeID' => 350,
			'CondNodeCondID' => '105',
			'CondNodeNodeID' => '1405'
		]);
		DB::table('SL_ConditionsNodes')->insert([
			'CondNodeID' => 351,
			'CondNodeCondID' => '1',
			'CondNodeNodeID' => '1409'
		]);
		DB::table('SL_ConditionsNodes')->insert([
			'CondNodeID' => 352,
			'CondNodeCondID' => '1',
			'CondNodeNodeID' => '1410'
		]);
		DB::table('SL_ConditionsNodes')->insert([
			'CondNodeID' => 353,
			'CondNodeCondID' => '1',
			'CondNodeNodeID' => '1411'
		]);
		DB::table('SL_ConditionsNodes')->insert([
			'CondNodeID' => 354,
			'CondNodeCondID' => '1',
			'CondNodeNodeID' => '1412'
		]);
		DB::table('SL_ConditionsNodes')->insert([
			'CondNodeID' => 363,
			'CondNodeCondID' => '105',
			'CondNodeNodeID' => '1436'
		]);
		DB::table('SL_ConditionsNodes')->insert([
			'CondNodeID' => 378,
			'CondNodeCondID' => '108',
			'CondNodeNodeID' => '1478',
			'CondNodeLoopID' => '-1'
		]);
		DB::table('SL_ConditionsNodes')->insert([
			'CondNodeID' => 379,
			'CondNodeCondID' => '105',
			'CondNodeNodeID' => '1490'
		]);
		DB::table('SL_ConditionsNodes')->insert([
			'CondNodeID' => 380,
			'CondNodeCondID' => '108',
			'CondNodeNodeID' => '1519',
			'CondNodeLoopID' => '-1'
		]);
		DB::table('SL_ConditionsNodes')->insert([
			'CondNodeID' => 383,
			'CondNodeCondID' => '31',
			'CondNodeNodeID' => '1577'
		]);
		DB::table('SL_ConditionsNodes')->insert([
			'CondNodeID' => 393,
			'CondNodeCondID' => '113',
			'CondNodeNodeID' => '1711'
		]);
		DB::table('SL_ConditionsNodes')->insert([
			'CondNodeID' => 399,
			'CondNodeCondID' => '56',
			'CondNodeNodeID' => '1366',
			'CondNodeLoopID' => '-1'
		]);
		DB::table('SL_ConditionsNodes')->insert([
			'CondNodeID' => 400,
			'CondNodeCondID' => '101',
			'CondNodeNodeID' => '1367',
			'CondNodeLoopID' => '-1'
		]);
		DB::table('SL_ConditionsNodes')->insert([
			'CondNodeID' => 401,
			'CondNodeCondID' => '56',
			'CondNodeNodeID' => '1368'
		]);
		DB::table('SL_ConditionsNodes')->insert([
			'CondNodeID' => 407,
			'CondNodeCondID' => '5',
			'CondNodeNodeID' => '1521'
		]);
		DB::table('SL_ConditionsNodes')->insert([
			'CondNodeID' => 411,
			'CondNodeCondID' => '113',
			'CondNodeNodeID' => '999',
			'CondNodeLoopID' => '-1'
		]);
		DB::table('SL_ConditionsNodes')->insert([
			'CondNodeID' => 412,
			'CondNodeCondID' => '113',
			'CondNodeNodeID' => '1771'
		]);
		DB::table('SL_ConditionsNodes')->insert([
			'CondNodeID' => 418,
			'CondNodeCondID' => '113',
			'CondNodeNodeID' => '1705',
			'CondNodeLoopID' => '-1'
		]);
		DB::table('SL_ConditionsNodes')->insert([
			'CondNodeID' => 419,
			'CondNodeCondID' => '113',
			'CondNodeNodeID' => '1752',
			'CondNodeLoopID' => '-1'
		]);
		DB::table('SL_ConditionsNodes')->insert([
			'CondNodeID' => 437,
			'CondNodeCondID' => '99',
			'CondNodeNodeID' => '453',
			'CondNodeLoopID' => '-1'
		]);
		DB::table('SL_ConditionsNodes')->insert([
			'CondNodeID' => 443,
			'CondNodeCondID' => '77',
			'CondNodeNodeID' => '150'
		]);
		DB::table('SL_ConditionsNodes')->insert([
			'CondNodeID' => 444,
			'CondNodeCondID' => '44',
			'CondNodeNodeID' => '152'
		]);
		DB::table('SL_ConditionsNodes')->insert([
			'CondNodeID' => 447,
			'CondNodeCondID' => '31',
			'CondNodeLoopID' => '6'
		]);
		DB::table('SL_ConditionsNodes')->insert([
			'CondNodeID' => 449,
			'CondNodeCondID' => '9',
			'CondNodeNodeID' => '2038'
		]);
		DB::table('SL_ConditionsNodes')->insert([
			'CondNodeID' => 450,
			'CondNodeCondID' => '9',
			'CondNodeNodeID' => '2039'
		]);
		DB::table('SL_ConditionsNodes')->insert([
			'CondNodeID' => 453,
			'CondNodeCondID' => '9',
			'CondNodeNodeID' => '742'
		]);
		DB::table('SL_ConditionsNodes')->insert([
			'CondNodeID' => 454,
			'CondNodeCondID' => '9',
			'CondNodeNodeID' => '2044',
			'CondNodeLoopID' => '-1'
		]);
		DB::table('SL_ConditionsNodes')->insert([
			'CondNodeID' => 455,
			'CondNodeCondID' => '125',
			'CondNodeNodeID' => '2047'
		]);
		DB::table('SL_ConditionsNodes')->insert([
			'CondNodeID' => 457,
			'CondNodeCondID' => '9',
			'CondNodeNodeID' => '2040'
		]);
		DB::table('SL_ConditionsNodes')->insert([
			'CondNodeID' => 458,
			'CondNodeCondID' => '9',
			'CondNodeNodeID' => '2041'
		]);
		DB::table('SL_ConditionsNodes')->insert([
			'CondNodeID' => 459,
			'CondNodeCondID' => '96',
			'CondNodeNodeID' => '2050'
		]);
		DB::table('SL_ConditionsNodes')->insert([
			'CondNodeID' => 460,
			'CondNodeCondID' => '126',
			'CondNodeNodeID' => '2051'
		]);
		DB::table('SL_ConditionsNodes')->insert([
			'CondNodeID' => 463,
			'CondNodeCondID' => '20',
			'CondNodeNodeID' => '2054'
		]);
		DB::table('SL_ConditionsNodes')->insert([
			'CondNodeID' => 464,
			'CondNodeCondID' => '126',
			'CondNodeNodeID' => '2056'
		]);
		DB::table('SL_ConditionsNodes')->insert([
			'CondNodeID' => 467,
			'CondNodeCondID' => '77',
			'CondNodeNodeID' => '505'
		]);
		DB::table('SL_ConditionsNodes')->insert([
			'CondNodeID' => 468,
			'CondNodeCondID' => '76',
			'CondNodeNodeID' => '488'
		]);
		DB::table('SL_ConditionsNodes')->insert([
			'CondNodeID' => 469,
			'CondNodeCondID' => '77',
			'CondNodeNodeID' => '500'
		]);
		DB::table('SL_ConditionsNodes')->insert([
			'CondNodeID' => 471,
			'CondNodeCondID' => '44',
			'CondNodeNodeID' => '512'
		]);
		DB::table('SL_ConditionsNodes')->insert([
			'CondNodeID' => 472,
			'CondNodeCondID' => '18',
			'CondNodeNodeID' => '414'
		]);
		DB::table('SL_ConditionsNodes')->insert([
			'CondNodeID' => 473,
			'CondNodeCondID' => '78',
			'CondNodeNodeID' => '2032'
		]);
		DB::table('SL_ConditionsNodes')->insert([
			'CondNodeID' => 474,
			'CondNodeCondID' => '78',
			'CondNodeNodeID' => '508'
		]);
		DB::table('SL_ConditionsNodes')->insert([
			'CondNodeID' => 475,
			'CondNodeCondID' => '127',
			'CondNodeNodeID' => '2058'
		]);
		DB::table('SL_ConditionsNodes')->insert([
			'CondNodeID' => 476,
			'CondNodeCondID' => '79',
			'CondNodeNodeID' => '523'
		]);
		DB::table('SL_ConditionsNodes')->insert([
			'CondNodeID' => 481,
			'CondNodeCondID' => '128',
			'CondNodeNodeID' => '1964'
		]);
		DB::table('SL_ConditionsNodes')->insert([
			'CondNodeID' => 482,
			'CondNodeCondID' => '129',
			'CondNodeNodeID' => '2075'
		]);
		DB::table('SL_ConditionsNodes')->insert([
			'CondNodeID' => 484,
			'CondNodeCondID' => '129',
			'CondNodeNodeID' => '2076'
		]);
		DB::table('SL_ConditionsNodes')->insert([
			'CondNodeID' => 485,
			'CondNodeCondID' => '128',
			'CondNodeNodeID' => '2081'
		]);
		DB::table('SL_ConditionsNodes')->insert([
			'CondNodeID' => 487,
			'CondNodeCondID' => '129',
			'CondNodeNodeID' => '2083'
		]);
		DB::table('SL_ConditionsNodes')->insert([
			'CondNodeID' => 488,
			'CondNodeCondID' => '129',
			'CondNodeNodeID' => '2084'
		]);
		DB::table('SL_ConditionsNodes')->insert([
			'CondNodeID' => 493,
			'CondNodeCondID' => '7',
			'CondNodeNodeID' => '862'
		]);
		DB::table('SL_ConditionsNodes')->insert([
			'CondNodeID' => 494,
			'CondNodeCondID' => '7',
			'CondNodeNodeID' => '508'
		]);
		DB::table('SL_ConditionsNodes')->insert([
			'CondNodeID' => 495,
			'CondNodeCondID' => '7',
			'CondNodeNodeID' => '2032'
		]);
		DB::table('SL_ConditionsNodes')->insert([
			'CondNodeID' => 496,
			'CondNodeCondID' => '7',
			'CondNodeNodeID' => '523'
		]);
		DB::table('SL_ConditionsNodes')->insert([
			'CondNodeID' => 497,
			'CondNodeCondID' => '7',
			'CondNodeNodeID' => '512'
		]);
		DB::table('SL_ConditionsNodes')->insert([
			'CondNodeID' => 498,
			'CondNodeCondID' => '7',
			'CondNodeNodeID' => '500'
		]);
		DB::table('SL_ConditionsNodes')->insert([
			'CondNodeID' => 499,
			'CondNodeCondID' => '7',
			'CondNodeNodeID' => '2054'
		]);
		DB::table('SL_ConditionsNodes')->insert([
			'CondNodeID' => 500,
			'CondNodeCondID' => '7',
			'CondNodeNodeID' => '505'
		]);
		DB::table('SL_ConditionsNodes')->insert([
			'CondNodeID' => 501,
			'CondNodeCondID' => '7',
			'CondNodeNodeID' => '488'
		]);
		DB::table('SL_ConditionsNodes')->insert([
			'CondNodeID' => 502,
			'CondNodeCondID' => '7',
			'CondNodeNodeID' => '414'
		]);
		DB::table('SL_ConditionsNodes')->insert([
			'CondNodeID' => 503,
			'CondNodeCondID' => '7',
			'CondNodeNodeID' => '517'
		]);
		DB::table('SL_ConditionsNodes')->insert([
			'CondNodeID' => 513,
			'CondNodeCondID' => '7',
			'CondNodeNodeID' => '2119'
		]);
		DB::table('SL_ConditionsNodes')->insert([
			'CondNodeID' => 516,
			'CondNodeCondID' => '99',
			'CondNodeNodeID' => '2123'
		]);
		DB::table('SL_ConditionsNodes')->insert([
			'CondNodeID' => 517,
			'CondNodeCondID' => '99',
			'CondNodeNodeID' => '2124',
			'CondNodeLoopID' => '-1'
		]);
		DB::table('SL_ConditionsNodes')->insert([
			'CondNodeID' => 518,
			'CondNodeCondID' => '99',
			'CondNodeNodeID' => '269',
			'CondNodeLoopID' => '-1'
		]);
		DB::table('SL_ConditionsNodes')->insert([
			'CondNodeID' => 519,
			'CondNodeCondID' => '99',
			'CondNodeNodeID' => '2125'
		]);
		DB::table('SL_ConditionsNodes')->insert([
			'CondNodeID' => 521,
			'CondNodeCondID' => '97',
			'CondNodeNodeID' => '2127',
			'CondNodeLoopID' => '-1'
		]);
		DB::table('SL_ConditionsNodes')->insert([
			'CondNodeID' => 524,
			'CondNodeCondID' => '135',
			'CondNodeNodeID' => '2138',
			'CondNodeLoopID' => '-1'
		]);
		DB::table('SL_ConditionsNodes')->insert([
			'CondNodeID' => 525,
			'CondNodeCondID' => '8',
			'CondNodeNodeID' => '2137',
			'CondNodeLoopID' => '-1'
		]);
		DB::table('SL_ConditionsNodes')->insert([
			'CondNodeID' => 526,
			'CondNodeCondID' => '105',
			'CondNodeNodeID' => '-3'
		]);
		DB::table('SL_ConditionsNodes')->insert([
			'CondNodeID' => 527,
			'CondNodeCondID' => '105',
			'CondNodeNodeID' => '2143'
		]);
		DB::table('SL_ConditionsNodes')->insert([
			'CondNodeID' => 531,
			'CondNodeCondID' => '136',
			'CondNodeNodeID' => '2163'
		]);
		DB::table('SL_ConditionsNodes')->insert([
			'CondNodeID' => 533,
			'CondNodeCondID' => '128',
			'CondNodeNodeID' => '1955',
			'CondNodeLoopID' => '-1'
		]);
		DB::table('SL_ConditionsNodes')->insert([
			'CondNodeID' => 534,
			'CondNodeCondID' => '128',
			'CondNodeNodeID' => '2116'
		]);
		DB::table('SL_ConditionsNodes')->insert([
			'CondNodeID' => 540,
			'CondNodeCondID' => '136',
			'CondNodeNodeID' => '1709',
			'CondNodeLoopID' => '-1'
		]);
		DB::table('SL_ConditionsNodes')->insert([
			'CondNodeID' => 541,
			'CondNodeCondID' => '9',
			'CondNodeNodeID' => '2188'
		]);
		DB::table('SL_ConditionsNodes')->insert([
			'CondNodeID' => 542,
			'CondNodeCondID' => '8',
			'CondNodeNodeID' => '2189'
		]);
		DB::table('SL_ConditionsNodes')->insert([
			'CondNodeID' => 550,
			'CondNodeCondID' => '138',
			'CondNodeNodeID' => '2258'
		]);
		DB::table('SL_ConditionsNodes')->insert([
			'CondNodeID' => 551,
			'CondNodeCondID' => '138',
			'CondNodeNodeID' => '-3',
			'CondNodeLoopID' => '-1'
		]);
		DB::table('SL_ConditionsNodes')->insert([
			'CondNodeID' => 555,
			'CondNodeCondID' => '139',
			'CondNodeNodeID' => '453',
			'CondNodeLoopID' => '-1'
		]);
		DB::table('SL_ConditionsNodes')->insert([
			'CondNodeID' => 556,
			'CondNodeCondID' => '139',
			'CondNodeNodeID' => '679',
			'CondNodeLoopID' => '-1'
		]);
		DB::table('SL_ConditionsNodes')->insert([
			'CondNodeID' => 559,
			'CondNodeCondID' => '121',
			'CondNodeNodeID' => '2265'
		]);
		DB::table('SL_ConditionsNodes')->insert([
			'CondNodeID' => 560,
			'CondNodeCondID' => '141',
			'CondNodeNodeID' => '443',
			'CondNodeLoopID' => '-1'
		]);
		DB::table('SL_ConditionsNodes')->insert([
			'CondNodeID' => 561,
			'CondNodeCondID' => '141',
			'CondNodeNodeID' => '-3'
		]);
		DB::table('SL_ConditionsNodes')->insert([
			'CondNodeID' => 562,
			'CondNodeCondID' => '141',
			'CondNodeNodeID' => '2278'
		]);
		DB::table('SL_ConditionsNodes')->insert([
			'CondNodeID' => 563,
			'CondNodeCondID' => '140',
			'CondNodeNodeID' => '1794'
		]);
		DB::table('SL_ConditionsNodes')->insert([
			'CondNodeID' => 573,
			'CondNodeCondID' => '104',
			'CondNodeNodeID' => '1369'
		]);
		DB::table('SL_ConditionsNodes')->insert([
			'CondNodeID' => 575,
			'CondNodeCondID' => '142',
			'CondNodeNodeID' => '2323'
		]);
		DB::table('SL_ConditionsNodes')->insert([
			'CondNodeID' => 576,
			'CondNodeCondID' => '140',
			'CondNodeNodeID' => '2324',
			'CondNodeLoopID' => '-1'
		]);
		DB::table('SL_ConditionsNodes')->insert([
			'CondNodeID' => 577,
			'CondNodeCondID' => '142',
			'CondNodeNodeID' => '2324'
		]);
		DB::table('SL_ConditionsNodes')->insert([
			'CondNodeID' => 578,
			'CondNodeCondID' => '104',
			'CondNodeNodeID' => '2331',
			'CondNodeLoopID' => '-1'
		]);
		DB::table('SL_ConditionsNodes')->insert([
			'CondNodeID' => 582,
			'CondNodeCondID' => '140',
			'CondNodeNodeID' => '-3'
		]);
		DB::table('SL_ConditionsNodes')->insert([
			'CondNodeID' => 583,
			'CondNodeCondID' => '140',
			'CondNodeNodeID' => '2334'
		]);
		DB::table('SL_ConditionsNodes')->insert([
			'CondNodeID' => 596,
			'CondNodeCondID' => '146',
			'CondNodeNodeID' => '2340'
		]);
		DB::table('SL_ConditionsNodes')->insert([
			'CondNodeID' => 598,
			'CondNodeCondID' => '144',
			'CondNodeNodeID' => '2341'
		]);
		DB::table('SL_ConditionsNodes')->insert([
			'CondNodeID' => 599,
			'CondNodeCondID' => '145',
			'CondNodeNodeID' => '2342'
		]);
		DB::table('SL_ConditionsNodes')->insert([
			'CondNodeID' => 601,
			'CondNodeCondID' => '147',
			'CondNodeNodeID' => '1749'
		]);
		DB::table('SL_ConditionsNodes')->insert([
			'CondNodeID' => 602,
			'CondNodeCondID' => '147',
			'CondNodeNodeID' => '1750',
			'CondNodeLoopID' => '-1'
		]);
		DB::table('SL_ConditionsNodes')->insert([
			'CondNodeID' => 607,
			'CondNodeCondID' => '113',
			'CondNodeNodeID' => '2048',
			'CondNodeLoopID' => '-1'
		]);
		DB::table('SL_ConditionsNodes')->insert([
			'CondNodeID' => 612,
			'CondNodeCondID' => '148',
			'CondNodeNodeID' => '2584'
		]);
		DB::table('SL_ConditionsNodes')->insert([
			'CondNodeID' => 614,
			'CondNodeCondID' => '150',
			'CondNodeNodeID' => '2589'
		]);
		DB::table('SL_ConditionsNodes')->insert([
			'CondNodeID' => 615,
			'CondNodeCondID' => '150',
			'CondNodeNodeID' => '881'
		]);
		DB::table('SL_ConditionsNodes')->insert([
			'CondNodeID' => 616,
			'CondNodeCondID' => '150',
			'CondNodeNodeID' => '886'
		]);
		DB::table('SL_ConditionsNodes')->insert([
			'CondNodeID' => 617,
			'CondNodeCondID' => '150',
			'CondNodeNodeID' => '882'
		]);
		DB::table('SL_ConditionsNodes')->insert([
			'CondNodeID' => 618,
			'CondNodeCondID' => '150',
			'CondNodeNodeID' => '885'
		]);
		DB::table('SL_ConditionsNodes')->insert([
			'CondNodeID' => 619,
			'CondNodeCondID' => '150',
			'CondNodeNodeID' => '891'
		]);
		DB::table('SL_ConditionsNodes')->insert([
			'CondNodeID' => 620,
			'CondNodeCondID' => '150',
			'CondNodeNodeID' => '947'
		]);
		DB::table('SL_ConditionsNodes')->insert([
			'CondNodeID' => 621,
			'CondNodeCondID' => '150',
			'CondNodeNodeID' => '899'
		]);
		DB::table('SL_ConditionsNodes')->insert([
			'CondNodeID' => 622,
			'CondNodeCondID' => '150',
			'CondNodeNodeID' => '894'
		]);
		DB::table('SL_ConditionsNodes')->insert([
			'CondNodeID' => 623,
			'CondNodeCondID' => '150',
			'CondNodeNodeID' => '936'
		]);
		DB::table('SL_ConditionsNodes')->insert([
			'CondNodeID' => 624,
			'CondNodeCondID' => '150',
			'CondNodeNodeID' => '937'
		]);
		DB::table('SL_ConditionsNodes')->insert([
			'CondNodeID' => 625,
			'CondNodeCondID' => '151',
			'CondNodeNodeID' => '965'
		]);
		DB::table('SL_ConditionsNodes')->insert([
			'CondNodeID' => 626,
			'CondNodeCondID' => '151',
			'CondNodeNodeID' => '966',
			'CondNodeLoopID' => '-1'
		]);
		DB::table('SL_ConditionsNodes')->insert([
			'CondNodeID' => 629,
			'CondNodeCondID' => '56',
			'CondNodeNodeID' => '2630'
		]);
		DB::table('SL_ConditionsNodes')->insert([
			'CondNodeID' => 630,
			'CondNodeCondID' => '56',
			'CondNodeNodeID' => '-3',
			'CondNodeLoopID' => '-1'
		]);
		DB::table('SL_ConditionsNodes')->insert([
			'CondNodeID' => 631,
			'CondNodeCondID' => '56',
			'CondNodeNodeID' => '2631',
			'CondNodeLoopID' => '-1'
		]);
		DB::table('SL_ConditionsNodes')->insert([
			'CondNodeID' => 632,
			'CondNodeCondID' => '103',
			'CondNodeNodeID' => '2630'
		]);
		DB::table('SL_ConditionsNodes')->insert([
			'CondNodeID' => 634,
			'CondNodeCondID' => '39',
			'CondNodeNodeID' => '8'
		]);
		DB::table('SL_ConditionsNodes')->insert([
			'CondNodeID' => 635,
			'CondNodeCondID' => '39',
			'CondNodeNodeID' => '2636',
			'CondNodeLoopID' => '-1'
		]);
		DB::table('SL_ConditionsNodes')->insert([
			'CondNodeID' => 655,
			'CondNodeCondID' => '152',
			'CondNodeNodeID' => '2657',
			'CondNodeLoopID' => '-1'
		]);
		DB::table('SL_ConditionsNodes')->insert([
			'CondNodeID' => 656,
			'CondNodeCondID' => '152',
			'CondNodeNodeID' => '2658'
		]);
		DB::table('SL_ConditionsNodes')->insert([
			'CondNodeID' => 665,
			'CondNodeCondID' => '154',
			'CondNodeNodeID' => '2678'
		]);
		DB::table('SL_ConditionsNodes')->insert([
			'CondNodeID' => 668,
			'CondNodeCondID' => '104',
			'CondNodeNodeID' => '1732',
			'CondNodeLoopID' => '-1'
		]);
		DB::table('SL_ConditionsNodes')->insert([
			'CondNodeID' => 669,
			'CondNodeCondID' => '104',
			'CondNodeNodeID' => '1688'
		]);
		DB::table('SL_ConditionsNodes')->insert([
			'CondNodeID' => 670,
			'CondNodeCondID' => '104',
			'CondNodeNodeID' => '1479'
		]);
		DB::table('SL_ConditionsNodes')->insert([
			'CondNodeID' => 672,
			'CondNodeCondID' => '104',
			'CondNodeNodeID' => '1505'
		]);
		DB::table('SL_ConditionsNodes')->insert([
			'CondNodeID' => 673,
			'CondNodeCondID' => '104',
			'CondNodeNodeID' => '2637'
		]);
		DB::table('SL_ConditionsNodes')->insert([
			'CondNodeID' => 674,
			'CondNodeCondID' => '104',
			'CondNodeNodeID' => '1506'
		]);
		DB::table('SL_ConditionsNodes')->insert([
			'CondNodeID' => 675,
			'CondNodeCondID' => '104',
			'CondNodeNodeID' => '1507'
		]);
		DB::table('SL_ConditionsNodes')->insert([
			'CondNodeID' => 676,
			'CondNodeCondID' => '108',
			'CondNodeNodeID' => '1508'
		]);
		DB::table('SL_ConditionsNodes')->insert([
			'CondNodeID' => 677,
			'CondNodeCondID' => '108',
			'CondNodeNodeID' => '1509'
		]);
		DB::table('SL_ConditionsNodes')->insert([
			'CondNodeID' => 678,
			'CondNodeCondID' => '108',
			'CondNodeNodeID' => '1510'
		]);
		DB::table('SL_ConditionsNodes')->insert([
			'CondNodeID' => 679,
			'CondNodeCondID' => '108',
			'CondNodeNodeID' => '1511'
		]);
		DB::table('SL_ConditionsNodes')->insert([
			'CondNodeID' => 680,
			'CondNodeCondID' => '108',
			'CondNodeNodeID' => '1659'
		]);
		DB::table('SL_ConditionsNodes')->insert([
			'CondNodeID' => 681,
			'CondNodeCondID' => '108',
			'CondNodeNodeID' => '1660'
		]);
		DB::table('SL_ConditionsNodes')->insert([
			'CondNodeID' => 682,
			'CondNodeCondID' => '104',
			'CondNodeNodeID' => '1516'
		]);
		DB::table('SL_ConditionsNodes')->insert([
			'CondNodeID' => 683,
			'CondNodeCondID' => '104',
			'CondNodeNodeID' => '2638'
		]);
		DB::table('SL_ConditionsNodes')->insert([
			'CondNodeID' => 684,
			'CondNodeCondID' => '104',
			'CondNodeNodeID' => '1517'
		]);
		DB::table('SL_ConditionsNodes')->insert([
			'CondNodeID' => 685,
			'CondNodeCondID' => '104',
			'CondNodeNodeID' => '1892'
		]);
		DB::table('SL_ConditionsNodes')->insert([
			'CondNodeID' => 686,
			'CondNodeCondID' => '104',
			'CondNodeNodeID' => '1518'
		]);
		DB::table('SL_ConditionsNodes')->insert([
			'CondNodeID' => 687,
			'CondNodeCondID' => '104',
			'CondNodeNodeID' => '1522'
		]);
		DB::table('SL_ConditionsNodes')->insert([
			'CondNodeID' => 689,
			'CondNodeCondID' => '154',
			'CondNodeNodeID' => '2061'
		]);
		DB::table('SL_ConditionsNodes')->insert([
			'CondNodeID' => 690,
			'CondNodeCondID' => '154',
			'CondNodeNodeID' => '2060'
		]);
		DB::table('SL_ConditionsNodes')->insert([
			'CondNodeID' => 691,
			'CondNodeCondID' => '154',
			'CondNodeNodeID' => '1898'
		]);
		DB::table('SL_ConditionsNodes')->insert([
			'CondNodeID' => 692,
			'CondNodeCondID' => '154',
			'CondNodeNodeID' => '1960'
		]);
	
	DB::table('SL_ConditionsArticles')->insert([
			'ArticleID' => 2,
			'ArticleCondID' => '69',
			'ArticleURL' => 'https://www.flexyourrights.org/faqs/police-at-my-door-what-should-i-do/',
			'ArticleTitle' => 'Police at my door: what should I do?'
		]);
		DB::table('SL_ConditionsArticles')->insert([
			'ArticleID' => 3,
			'ArticleCondID' => '70',
			'ArticleURL' => 'https://www.flexyourrights.org/faqs/when-can-police-search-your-car/',
			'ArticleTitle' => 'When can police search your car?'
		]);
		DB::table('SL_ConditionsArticles')->insert([
			'ArticleID' => 6,
			'ArticleCondID' => '68',
			'ArticleURL' => 'https://www.flexyourrights.org/faqs/when-can-police-search-your-car/',
			'ArticleTitle' => 'When can police search your car?'
		]);
		DB::table('SL_ConditionsArticles')->insert([
			'ArticleID' => 7,
			'ArticleCondID' => '68',
			'ArticleURL' => 'https://www.flexyourrights.org/faqs/police-at-my-door-what-should-i-do/',
			'ArticleTitle' => 'Police at my door: what should I do?'
		]);
		DB::table('SL_ConditionsArticles')->insert([
			'ArticleID' => 8,
			'ArticleCondID' => '7',
			'ArticleURL' => 'http://openpolice.local/go-gold-make-your-complaint-strong',
			'ArticleTitle' => '"Go Gold" To Make Your Complaint As Strong As Possible'
		]);
		DB::table('SL_ConditionsArticles')->insert([
			'ArticleID' => 10,
			'ArticleCondID' => '75',
			'ArticleURL' => 'https://www.flexyourrights.org/faqs/police-didnt-read-me-my-rights/',
			'ArticleTitle' => 'Don\'t police have to read me my rights?'
		]);
		DB::table('SL_ConditionsArticles')->insert([
			'ArticleID' => 13,
			'ArticleCondID' => '76',
			'ArticleURL' => 'https://www.flexyourrights.org/faqs/how-long-can-police-detain-you/',
			'ArticleTitle' => 'How long can police detain you?'
		]);
		DB::table('SL_ConditionsArticles')->insert([
			'ArticleID' => 14,
			'ArticleCondID' => '76',
			'ArticleURL' => 'https://www.flexyourrights.org/faqs/when-can-police-ask-for-id/',
			'ArticleTitle' => 'When can police ask for ID?'
		]);
		DB::table('SL_ConditionsArticles')->insert([
			'ArticleID' => 15,
			'ArticleCondID' => '69',
			'ArticleURL' => 'https://www.youtube.com/watch?v=z_ckcdtQ95w',
			'ArticleTitle' => 'How to Deal with Police at Your Door'
		]);
		DB::table('SL_ConditionsArticles')->insert([
			'ArticleID' => 16,
			'ArticleCondID' => '70',
			'ArticleURL' => 'https://www.youtube.com/watch?v=3kVX6NIPzB0',
			'ArticleTitle' => 'How to Refuse Police Searches'
		]);
		DB::table('SL_ConditionsArticles')->insert([
			'ArticleID' => 19,
			'ArticleCondID' => '80',
			'ArticleURL' => 'https://www.flexyourrights.org/faqs/avoid-getting-traffic-ticket/',
			'ArticleTitle' => 'How To Avoid Getting a Traffic Ticket'
		]);
		DB::table('SL_ConditionsArticles')->insert([
			'ArticleID' => 20,
			'ArticleCondID' => '81',
			'ArticleURL' => 'https://www.flexyourrights.org/faqs/my-rights-at-checkpoints/#US-border',
			'ArticleTitle' => 'What are my rights at various border checkpoints?'
		]);
		DB::table('SL_ConditionsArticles')->insert([
			'ArticleID' => 21,
			'ArticleCondID' => '82',
			'ArticleURL' => 'https://www.flexyourrights.org/faqs/my-rights-at-checkpoints/',
			'ArticleTitle' => 'What are my rights at DUI checkpoints?'
		]);
		DB::table('SL_ConditionsArticles')->insert([
			'ArticleID' => 22,
			'ArticleCondID' => '75',
			'ArticleURL' => 'https://www.youtube.com/watch?v=b2-nKV5odbw',
			'ArticleTitle' => 'You Have the Right to Remain Silent (Use It!)'
		]);
		DB::table('SL_ConditionsArticles')->insert([
			'ArticleID' => 23,
			'ArticleCondID' => '83',
			'ArticleURL' => 'https://www.flexyourrights.org/faqs/when-can-police-ask-for-id/',
			'ArticleTitle' => 'When can police ask for ID?'
		]);
		DB::table('SL_ConditionsArticles')->insert([
			'ArticleID' => 24,
			'ArticleCondID' => '76',
			'ArticleURL' => 'https://www.youtube.com/watch?v=2d7-0TDsxnw',
			'ArticleTitle' => 'Officer, Am I Free to Go?'
		]);
		DB::table('SL_ConditionsArticles')->insert([
			'ArticleID' => 25,
			'ArticleCondID' => '76',
			'ArticleURL' => 'https://www.flexyourrights.org/faqs/what-is-reasonable-suspicion/',
			'ArticleTitle' => 'What is reasonable suspicion?'
		]);
		DB::table('SL_ConditionsArticles')->insert([
			'ArticleID' => 26,
			'ArticleCondID' => '76',
			'ArticleURL' => 'https://www.youtube.com/watch?v=7bT6VfVGZ2c',
			'ArticleTitle' => 'What is Reasonable Suspicion?'
		]);
		DB::table('SL_ConditionsArticles')->insert([
			'ArticleID' => 27,
			'ArticleCondID' => '77',
			'ArticleURL' => 'https://www.flexyourrights.org/faqs/probable-cause/',
			'ArticleTitle' => 'What is probable cause?'
		]);
		DB::table('SL_ConditionsArticles')->insert([
			'ArticleID' => 28,
			'ArticleCondID' => '77',
			'ArticleURL' => 'https://www.youtube.com/watch?v=0JOitPfRlCw',
			'ArticleTitle' => 'What is Probable Cause?'
		]);
		DB::table('SL_ConditionsArticles')->insert([
			'ArticleID' => 29,
			'ArticleCondID' => '77',
			'ArticleURL' => 'https://www.youtube.com/watch?v=3kVX6NIPzB0',
			'ArticleTitle' => 'How to Refuse Police Searches'
		]);
		DB::table('SL_ConditionsArticles')->insert([
			'ArticleID' => 30,
			'ArticleCondID' => '83',
			'ArticleURL' => 'https://www.youtube.com/watch?v=eV_ANiGk4Sc',
			'ArticleTitle' => 'When can police ask for ID?'
		]);
		DB::table('SL_ConditionsArticles')->insert([
			'ArticleID' => 31,
			'ArticleCondID' => '81',
			'ArticleURL' => 'https://www.youtube.com/watch?v=BBICaJspXw0',
			'ArticleTitle' => 'What are my rights with airline security & at the U.S. border?'
		]);
		DB::table('SL_ConditionsArticles')->insert([
			'ArticleID' => 32,
			'ArticleCondID' => '81',
			'ArticleURL' => 'https://www.youtube.com/watch?v=6_3dDNPwJTU',
			'ArticleTitle' => '"No Thanks" Best DHS Checkpoint Refusals EVER!'
		]);
		DB::table('SL_ConditionsArticles')->insert([
			'ArticleID' => 33,
			'ArticleCondID' => '82',
			'ArticleURL' => 'https://www.youtube.com/watch?v=JQk8zsuqsag',
			'ArticleTitle' => 'What to do if pulled over for DUI? Arizona Criminal Lawyer'
		]);
		DB::table('SL_ConditionsArticles')->insert([
			'ArticleID' => 34,
			'ArticleCondID' => '84',
			'ArticleURL' => 'https://www.flexyourrights.org/faqs/what-are-my-rights-with-airport-security/',
			'ArticleTitle' => 'What are my rights with airport security?'
		]);
		DB::table('SL_ConditionsArticles')->insert([
			'ArticleID' => 35,
			'ArticleCondID' => '84',
			'ArticleURL' => 'https://www.youtube.com/watch?v=BBICaJspXw0',
			'ArticleTitle' => 'What are my rights with airline security & at the U.S. border?'
		]);
		DB::table('SL_ConditionsArticles')->insert([
			'ArticleID' => 36,
			'ArticleCondID' => '86',
			'ArticleURL' => 'https://www.flexyourrights.org/faqs/search-and-seizure-in-public-school/',
			'ArticleTitle' => 'Search and Seizure in Public Schools'
		]);
		DB::table('SL_ConditionsArticles')->insert([
			'ArticleID' => 37,
			'ArticleCondID' => '87',
			'ArticleURL' => 'https://www.flexyourrights.org/7-rules-for-recording-police/',
			'ArticleTitle' => '7 Rules for Recording Police'
		]);
		DB::table('SL_ConditionsArticles')->insert([
			'ArticleID' => 38,
			'ArticleCondID' => '88',
			'ArticleURL' => 'https://www.flexyourrights.org/faqs/what-if-police-say-they-smell-marijuana/',
			'ArticleTitle' => 'What if police say they smell marijuana?'
		]);
		DB::table('SL_ConditionsArticles')->insert([
			'ArticleID' => 39,
			'ArticleCondID' => '88',
			'ArticleURL' => 'https://www.flexyourrights.org/faqs/marijuana-legalization/',
			'ArticleTitle' => 'What Are My Rights When Marijuana is Legal?'
		]);
		DB::table('SL_ConditionsArticles')->insert([
			'ArticleID' => 40,
			'ArticleCondID' => '88',
			'ArticleURL' => 'https://www.youtube.com/watch?v=6EcUmNJ3ppc',
			'ArticleTitle' => 'What Are My Rights When Marijuana is Legal?'
		]);
		DB::table('SL_ConditionsArticles')->insert([
			'ArticleID' => 41,
			'ArticleCondID' => '89',
			'ArticleURL' => 'https://www.flexyourrights.org/faqs/what-if-police-say-they-smell-marijuana/',
			'ArticleTitle' => 'What if police say they smell marijuana?'
		]);
		DB::table('SL_ConditionsArticles')->insert([
			'ArticleID' => 42,
			'ArticleCondID' => '89',
			'ArticleURL' => 'https://www.flexyourrights.org/faqs/marijuana-legalization/',
			'ArticleTitle' => 'What Are My Rights When Marijuana is Legal?'
		]);
		DB::table('SL_ConditionsArticles')->insert([
			'ArticleID' => 43,
			'ArticleCondID' => '89',
			'ArticleURL' => 'https://www.youtube.com/watch?v=6EcUmNJ3ppc',
			'ArticleTitle' => 'What Are My Rights When Marijuana is Legal?'
		]);
		DB::table('SL_ConditionsArticles')->insert([
			'ArticleID' => 44,
			'ArticleCondID' => '90',
			'ArticleURL' => 'https://www.flexyourrights.org/faqs/when-can-police-use-drug-dogs/',
			'ArticleTitle' => 'When can police use drug dogs?'
		]);
		DB::table('SL_ConditionsArticles')->insert([
			'ArticleID' => 45,
			'ArticleCondID' => '90',
			'ArticleURL' => 'https://www.youtube.com/watch?v=dxz9MpgcN5c',
			'ArticleTitle' => 'What if Police Threaten to Call in the Dogs?'
		]);
		DB::table('SL_ConditionsArticles')->insert([
			'ArticleID' => 46,
			'ArticleCondID' => '80',
			'ArticleURL' => 'https://www.flexyourrights.org/faqs/top-4-traffic-ticket-myths/',
			'ArticleTitle' => 'Top 4 Traffic Ticket Myths'
		]);
		DB::table('SL_ConditionsArticles')->insert([
			'ArticleID' => 47,
			'ArticleCondID' => '91',
			'ArticleURL' => 'https://www.flexyourrights.org/faqs/can-someone-else-consent-to-a-search-of-my-property/',
			'ArticleTitle' => 'Can someone else consent to a search of my property?'
		]);
		DB::table('SL_ConditionsArticles')->insert([
			'ArticleID' => 48,
			'ArticleCondID' => '91',
			'ArticleURL' => 'https://www.youtube.com/watch?v=HeyIvq7Z9SA',
			'ArticleTitle' => 'Are police allowed to enter my home during a party?'
		]);
		DB::table('SL_ConditionsArticles')->insert([
			'ArticleID' => 49,
			'ArticleCondID' => '92',
			'ArticleURL' => 'https://www.flexyourrights.org/faqs/what-are-the-rights-of-passengers-during-a-traffic-stop/',
			'ArticleTitle' => 'What are the rights of passengers during a traffic stop?'
		]);
	
	DB::table('SL_DataLoop')->insert([
			'DataLoopID' => 1,
			'DataLoopTree' => '1',
			'DataLoopRoot' => '55',
			'DataLoopPlural' => 'Victims',
			'DataLoopSingular' => 'Victim',
			'DataLoopTable' => 'Civilians',
			'DataLoopMaxLimit' => '3',
			'DataLoopWarnLimit' => '1',
			'DataLoopMinLimit' => '1'
		]);
		DB::table('SL_DataLoop')->insert([
			'DataLoopID' => 2,
			'DataLoopTree' => '1',
			'DataLoopRoot' => '97',
			'DataLoopPlural' => 'Witnesses',
			'DataLoopSingular' => 'Witness',
			'DataLoopTable' => 'Civilians',
			'DataLoopMaxLimit' => '3',
			'DataLoopWarnLimit' => '1'
		]);
		DB::table('SL_DataLoop')->insert([
			'DataLoopID' => 3,
			'DataLoopTree' => '1',
			'DataLoopRoot' => '143',
			'DataLoopPlural' => 'Departments',
			'DataLoopSingular' => 'Department',
			'DataLoopTable' => 'LinksComplaintDept',
			'DataLoopMaxLimit' => '3',
			'DataLoopWarnLimit' => '2',
			'DataLoopMinLimit' => '1',
			'DataLoopAutoGen' => '0'
		]);
		DB::table('SL_DataLoop')->insert([
			'DataLoopID' => 4,
			'DataLoopTree' => '1',
			'DataLoopRoot' => '160',
			'DataLoopPlural' => 'Officers',
			'DataLoopSingular' => 'Officer',
			'DataLoopTable' => 'Officers',
			'DataLoopMaxLimit' => '5',
			'DataLoopWarnLimit' => '2',
			'DataLoopMinLimit' => '1'
		]);
		DB::table('SL_DataLoop')->insert([
			'DataLoopID' => 6,
			'DataLoopTree' => '1',
			'DataLoopRoot' => '148',
			'DataLoopPlural' => 'Types of Force',
			'DataLoopSingular' => 'Type of Force',
			'DataLoopTable' => 'EventSequence',
			'DataLoopSortFld' => 'EveOrder',
			'DataLoopIsStep' => '1',
			'DataLoopAutoGen' => '0'
		]);
		DB::table('SL_DataLoop')->insert([
			'DataLoopID' => 7,
			'DataLoopTree' => '57',
			'DataLoopRoot' => '458',
			'DataLoopPlural' => 'Complainants',
			'DataLoopSingular' => 'Complainant',
			'DataLoopTable' => 'Civilians',
			'DataLoopMaxLimit' => '1',
			'DataLoopWarnLimit' => '-1',
			'DataLoopMinLimit' => '1',
			'DataLoopIsStep' => '1',
			'DataLoopAutoGen' => '0'
		]);
		DB::table('SL_DataLoop')->insert([
			'DataLoopID' => 15,
			'DataLoopTree' => '1',
			'DataLoopRoot' => '400',
			'DataLoopPlural' => 'Citations',
			'DataLoopSingular' => 'Citation',
			'DataLoopTable' => 'Civilians',
			'DataLoopIsStep' => '1',
			'DataLoopAutoGen' => '0'
		]);
		DB::table('SL_DataLoop')->insert([
			'DataLoopID' => 23,
			'DataLoopTree' => '1',
			'DataLoopRoot' => '1423',
			'DataLoopPlural' => 'Civilian Vehicles',
			'DataLoopSingular' => 'Civilian Vehicle',
			'DataLoopTable' => 'Vehicles'
		]);
		DB::table('SL_DataLoop')->insert([
			'DataLoopID' => 24,
			'DataLoopTree' => '1',
			'DataLoopRoot' => '1425',
			'DataLoopPlural' => 'Officer Vehicles',
			'DataLoopSingular' => 'Officer Vehicle',
			'DataLoopTable' => 'Vehicles'
		]);
		DB::table('SL_DataLoop')->insert([
			'DataLoopID' => 25,
			'DataLoopTree' => '1',
			'DataLoopRoot' => '1469',
			'DataLoopPlural' => 'Civilians',
			'DataLoopSingular' => 'Civilian',
			'DataLoopTable' => 'Civilians',
			'DataLoopIsStep' => '1'
		]);
		DB::table('SL_DataLoop')->insert([
			'DataLoopID' => 27,
			'DataLoopTree' => '1',
			'DataLoopRoot' => '1701',
			'DataLoopPlural' => 'Investigative Agencies',
			'DataLoopSingular' => 'Investigative Agency',
			'DataLoopTable' => 'LinksComplaintOversight'
		]);
		DB::table('SL_DataLoop')->insert([
			'DataLoopID' => 28,
			'DataLoopTree' => '1',
			'DataLoopRoot' => '2128',
			'DataLoopPlural' => 'Vehicles',
			'DataLoopSingular' => 'Vehicle',
			'DataLoopTable' => 'Vehicles',
			'DataLoopMaxLimit' => '3',
			'DataLoopWarnLimit' => '2'
		]);
		DB::table('SL_DataLoop')->insert([
			'DataLoopID' => 29,
			'DataLoopTree' => '58',
			'DataLoopRoot' => '1936',
			'DataLoopPlural' => 'Case Types',
			'DataLoopSingular' => 'Case Type',
			'DataLoopTable' => 'PartnerCaseTypes',
			'DataLoopMaxLimit' => '5',
			'DataLoopMinLimit' => '1'
		]);
		DB::table('SL_DataLoop')->insert([
			'DataLoopID' => 30,
			'DataLoopTree' => '5',
			'DataLoopRoot' => '2588',
			'DataLoopPlural' => 'Civilians',
			'DataLoopSingular' => 'Civilian',
			'DataLoopTable' => 'CivCompliment',
			'DataLoopIsStep' => '1'
		]);
		DB::table('SL_DataLoop')->insert([
			'DataLoopID' => 31,
			'DataLoopTree' => '5',
			'DataLoopRoot' => '945',
			'DataLoopPlural' => 'Excellent Officers',
			'DataLoopSingular' => 'Excellent Officer',
			'DataLoopTable' => 'Officers',
			'DataLoopMinLimit' => '1',
			'DataLoopIsStep' => '1',
			'DataLoopAutoGen' => '0'
		]);
		DB::table('SL_DataLoop')->insert([
			'DataLoopID' => 32,
			'DataLoopTree' => '184',
			'DataLoopRoot' => '2727',
			'DataLoopPlural' => 'Departments',
			'DataLoopSingular' => 'Department',
			'DataLoopTable' => 'LinksOfficerDept',
			'DataLoopIsStep' => '1',
			'DataLoopAutoGen' => '0'
		]);
		DB::table('SL_DataLoop')->insert([
			'DataLoopID' => 17,
			'DataLoopTree' => '5',
			'DataLoopRoot' => '892',
			'DataLoopPlural' => 'Complimentors',
			'DataLoopSingular' => 'Complimentor',
			'DataLoopTable' => 'CivCompliment',
			'DataLoopMaxLimit' => '1',
			'DataLoopWarnLimit' => '-1',
			'DataLoopMinLimit' => '1',
			'DataLoopIsStep' => '1',
			'DataLoopAutoGen' => '0'
		]);
		DB::table('SL_DataLoop')->insert([
			'DataLoopID' => 20,
			'DataLoopTree' => '5',
			'DataLoopRoot' => '917',
			'DataLoopPlural' => 'Departments',
			'DataLoopSingular' => 'Department',
			'DataLoopTable' => 'LinksComplimentDept',
			'DataLoopMaxLimit' => '3',
			'DataLoopWarnLimit' => '2',
			'DataLoopMinLimit' => '1',
			'DataLoopAutoGen' => '0'
		]);
		DB::table('SL_DataLoop')->insert([
			'DataLoopID' => 21,
			'DataLoopTree' => '5',
			'DataLoopRoot' => '921',
			'DataLoopPlural' => 'Officers',
			'DataLoopSingular' => 'Officer',
			'DataLoopTable' => 'OffCompliment',
			'DataLoopMaxLimit' => '5',
			'DataLoopWarnLimit' => '2',
			'DataLoopMinLimit' => '1',
			'DataLoopIsStep' => '1',
			'DataLoopAutoGen' => '0'
		]);
	
	DB::table('SL_DataSubsets')->insert([
			'DataSubID' => 4,
			'DataSubTree' => '1',
			'DataSubTbl' => 'EventSequence',
			'DataSubSubTbl' => 'Searches',
			'DataSubSubLnk' => 'SrchEventSequenceID'
		]);
		DB::table('SL_DataSubsets')->insert([
			'DataSubID' => 5,
			'DataSubTree' => '1',
			'DataSubTbl' => 'EventSequence',
			'DataSubSubTbl' => 'Force',
			'DataSubSubLnk' => 'ForEventSequenceID'
		]);
		DB::table('SL_DataSubsets')->insert([
			'DataSubID' => 6,
			'DataSubTree' => '1',
			'DataSubTbl' => 'Officers',
			'DataSubTblLnk' => 'OffPersonID',
			'DataSubSubTbl' => 'PersonContact'
		]);
		DB::table('SL_DataSubsets')->insert([
			'DataSubID' => 7,
			'DataSubTree' => '1',
			'DataSubTbl' => 'Officers',
			'DataSubTblLnk' => 'OffPhysDescID',
			'DataSubSubTbl' => 'PhysicalDesc'
		]);
		DB::table('SL_DataSubsets')->insert([
			'DataSubID' => 8,
			'DataSubTree' => '1',
			'DataSubTbl' => 'Civilians',
			'DataSubTblLnk' => 'CivPersonID',
			'DataSubSubTbl' => 'PersonContact'
		]);
		DB::table('SL_DataSubsets')->insert([
			'DataSubID' => 9,
			'DataSubTree' => '1',
			'DataSubTbl' => 'Civilians',
			'DataSubTblLnk' => 'CivPhysDescID',
			'DataSubSubTbl' => 'PhysicalDesc'
		]);
		DB::table('SL_DataSubsets')->insert([
			'DataSubID' => 10,
			'DataSubTree' => '1',
			'DataSubTbl' => 'EventSequence',
			'DataSubSubTbl' => 'Stops',
			'DataSubSubLnk' => 'StopEventSequenceID'
		]);
		DB::table('SL_DataSubsets')->insert([
			'DataSubID' => 14,
			'DataSubTree' => '1',
			'DataSubTbl' => 'EventSequence',
			'DataSubSubTbl' => 'Arrests',
			'DataSubSubLnk' => 'ArstEventSequenceID'
		]);
		DB::table('SL_DataSubsets')->insert([
			'DataSubID' => 25,
			'DataSubTree' => '1',
			'DataSubTbl' => 'Complaints',
			'DataSubTblLnk' => 'ComIncidentID',
			'DataSubSubTbl' => 'Incidents',
			'DataSubAutoGen' => '1'
		]);
		DB::table('SL_DataSubsets')->insert([
			'DataSubID' => 27,
			'DataSubTree' => '1',
			'DataSubTbl' => 'Complaints',
			'DataSubTblLnk' => 'ComSceneID',
			'DataSubSubTbl' => 'Scenes',
			'DataSubAutoGen' => '1'
		]);
		DB::table('SL_DataSubsets')->insert([
			'DataSubID' => 29,
			'DataSubTree' => '1',
			'DataSubTbl' => 'Complaints',
			'DataSubSubTbl' => 'AllegSilver',
			'DataSubSubLnk' => 'AlleSilComplaintID',
			'DataSubAutoGen' => '1'
		]);
		DB::table('SL_DataSubsets')->insert([
			'DataSubID' => 30,
			'DataSubTree' => '1',
			'DataSubTbl' => 'LinksComplaintDept',
			'DataSubTblLnk' => 'LnkComDeptDeptID',
			'DataSubSubTbl' => 'Departments'
		]);
		DB::table('SL_DataSubsets')->insert([
			'DataSubID' => 41,
			'DataSubTree' => '1',
			'DataSubTbl' => 'Departments',
			'DataSubSubTbl' => 'Oversight',
			'DataSubSubLnk' => 'OverDeptID'
		]);
		DB::table('SL_DataSubsets')->insert([
			'DataSubID' => 42,
			'DataSubTree' => '1',
			'DataSubTbl' => 'LinksComplaintOversight',
			'DataSubTblLnk' => 'LnkComOverOverID',
			'DataSubSubTbl' => 'Oversight'
		]);
		DB::table('SL_DataSubsets')->insert([
			'DataSubID' => 32,
			'DataSubTree' => '5',
			'DataSubTbl' => 'OffCompliment',
			'DataSubTblLnk' => 'OffCompOffID',
			'DataSubSubTbl' => 'Officers',
			'DataSubAutoGen' => '1'
		]);
		DB::table('SL_DataSubsets')->insert([
			'DataSubID' => 33,
			'DataSubTree' => '5',
			'DataSubTbl' => 'CivCompliment',
			'DataSubTblLnk' => 'CivCompPersonID',
			'DataSubSubTbl' => 'PersonContact',
			'DataSubAutoGen' => '1'
		]);
		DB::table('SL_DataSubsets')->insert([
			'DataSubID' => 34,
			'DataSubTree' => '5',
			'DataSubTbl' => 'CivCompliment',
			'DataSubTblLnk' => 'CivCompPhysDescID',
			'DataSubSubTbl' => 'PhysicalDesc',
			'DataSubAutoGen' => '1'
		]);
		DB::table('SL_DataSubsets')->insert([
			'DataSubID' => 35,
			'DataSubTree' => '5',
			'DataSubTbl' => 'Officers',
			'DataSubTblLnk' => 'OffPersonID',
			'DataSubSubTbl' => 'PersonContact',
			'DataSubAutoGen' => '1'
		]);
		DB::table('SL_DataSubsets')->insert([
			'DataSubID' => 36,
			'DataSubTree' => '5',
			'DataSubTbl' => 'Officers',
			'DataSubTblLnk' => 'OffPhysDescID',
			'DataSubSubTbl' => 'PhysicalDesc',
			'DataSubAutoGen' => '1'
		]);
		DB::table('SL_DataSubsets')->insert([
			'DataSubID' => 37,
			'DataSubTree' => '5',
			'DataSubTbl' => 'Compliments',
			'DataSubTblLnk' => 'CompliIncidentID',
			'DataSubSubTbl' => 'Incidents',
			'DataSubAutoGen' => '1'
		]);
		DB::table('SL_DataSubsets')->insert([
			'DataSubID' => 38,
			'DataSubTree' => '5',
			'DataSubTbl' => 'Compliments',
			'DataSubTblLnk' => 'CompliSceneID',
			'DataSubSubTbl' => 'Scenes',
			'DataSubAutoGen' => '1'
		]);
		DB::table('SL_DataSubsets')->insert([
			'DataSubID' => 40,
			'DataSubTree' => '5',
			'DataSubTbl' => 'LinksComplimentDept',
			'DataSubTblLnk' => 'LnkCompliDeptDeptID',
			'DataSubSubTbl' => 'Departments'
		]);
		DB::table('SL_DataSubsets')->insert([
			'DataSubID' => 44,
			'DataSubTree' => '1',
			'DataSubTbl' => 'Civilians',
			'DataSubSubTbl' => 'InjuryCare',
			'DataSubSubLnk' => 'InjCareSubjectID'
		]);
		DB::table('SL_DataSubsets')->insert([
			'DataSubID' => 45,
			'DataSubTree' => '1',
			'DataSubTbl' => 'Departments',
			'DataSubSubTbl' => 'Officers',
			'DataSubSubLnk' => 'OffDeptID'
		]);
		DB::table('SL_DataSubsets')->insert([
			'DataSubID' => 46,
			'DataSubTree' => '58',
			'DataSubTbl' => 'Partners',
			'DataSubTblLnk' => 'PartPersonID',
			'DataSubSubTbl' => 'PersonContact',
			'DataSubAutoGen' => '1'
		]);
		DB::table('SL_DataSubsets')->insert([
			'DataSubID' => 50,
			'DataSubTree' => '184',
			'DataSubTbl' => 'OfficersVerified',
			'DataSubTblLnk' => 'OffVerPersonID',
			'DataSubSubTbl' => 'PersonContact'
		]);
		DB::table('SL_DataSubsets')->insert([
			'DataSubID' => 51,
			'DataSubTree' => '184',
			'DataSubTbl' => 'Officers',
			'DataSubTblLnk' => 'OffPersonID',
			'DataSubSubTbl' => 'PersonContact'
		]);
		DB::table('SL_DataSubsets')->insert([
			'DataSubID' => 52,
			'DataSubTree' => '184',
			'DataSubTbl' => 'LinksOfficerDept',
			'DataSubTblLnk' => 'LnkOffDeptDeptID',
			'DataSubSubTbl' => 'Departments'
		]);
	
	DB::table('SL_DataHelpers')->insert([
			'DataHelpID' => 2,
			'DataHelpTree' => '1',
			'DataHelpParentTable' => 'Searches',
			'DataHelpTable' => 'SearchContra',
			'DataHelpKeyField' => 'SrchConSearchID',
			'DataHelpValueField' => 'SrchConType'
		]);
		DB::table('SL_DataHelpers')->insert([
			'DataHelpID' => 3,
			'DataHelpTree' => '1',
			'DataHelpParentTable' => 'Force',
			'DataHelpTable' => 'ForceSubType',
			'DataHelpKeyField' => 'ForceSubForceID',
			'DataHelpValueField' => 'ForceSubType'
		]);
		DB::table('SL_DataHelpers')->insert([
			'DataHelpID' => 8,
			'DataHelpTree' => '1',
			'DataHelpParentTable' => 'Searches',
			'DataHelpTable' => 'SearchSeize',
			'DataHelpKeyField' => 'SrchSeizSearchID',
			'DataHelpValueField' => 'SrchSeizType'
		]);
		DB::table('SL_DataHelpers')->insert([
			'DataHelpID' => 20,
			'DataHelpTree' => '1',
			'DataHelpParentTable' => 'EventSequence',
			'DataHelpTable' => 'Allegations',
			'DataHelpKeyField' => 'AlleEventSequenceID'
		]);
		DB::table('SL_DataHelpers')->insert([
			'DataHelpID' => 21,
			'DataHelpTree' => '1',
			'DataHelpParentTable' => 'Complaints',
			'DataHelpTable' => 'Allegations',
			'DataHelpKeyField' => 'AlleComplaintID'
		]);
		DB::table('SL_DataHelpers')->insert([
			'DataHelpID' => 22,
			'DataHelpTree' => '1',
			'DataHelpParentTable' => 'Allegations',
			'DataHelpTable' => 'LinksCivilianAllegations',
			'DataHelpKeyField' => 'LnkCivAlleAlleID',
			'DataHelpValueField' => 'LnkCivAlleCivID'
		]);
		DB::table('SL_DataHelpers')->insert([
			'DataHelpID' => 23,
			'DataHelpTree' => '1',
			'DataHelpParentTable' => 'Allegations',
			'DataHelpTable' => 'LinksOfficerAllegations',
			'DataHelpKeyField' => 'LnkOffAlleAlleID',
			'DataHelpValueField' => 'LnkOffAlleOffID'
		]);
		DB::table('SL_DataHelpers')->insert([
			'DataHelpID' => 24,
			'DataHelpTree' => '1',
			'DataHelpParentTable' => 'EventSequence',
			'DataHelpTable' => 'LinksCivilianEvents',
			'DataHelpKeyField' => 'LnkCivEveEveID',
			'DataHelpValueField' => 'LnkCivEveCivID'
		]);
		DB::table('SL_DataHelpers')->insert([
			'DataHelpID' => 25,
			'DataHelpTree' => '1',
			'DataHelpParentTable' => 'EventSequence',
			'DataHelpTable' => 'LinksOfficerEvents',
			'DataHelpKeyField' => 'LnkOffEveEveID',
			'DataHelpValueField' => 'LnkOffEveOffID'
		]);
		DB::table('SL_DataHelpers')->insert([
			'DataHelpID' => 29,
			'DataHelpTree' => '1',
			'DataHelpParentTable' => 'PhysicalDesc',
			'DataHelpTable' => 'PhysicalDescRace',
			'DataHelpKeyField' => 'PhysRacePhysDescID',
			'DataHelpValueField' => 'PhysRaceRace'
		]);
		DB::table('SL_DataHelpers')->insert([
			'DataHelpID' => 1,
			'DataHelpTree' => '1',
			'DataHelpParentTable' => 'Stops',
			'DataHelpTable' => 'StopReasons',
			'DataHelpKeyField' => 'StopReasStopID',
			'DataHelpValueField' => 'StopReasReason'
		]);
		DB::table('SL_DataHelpers')->insert([
			'DataHelpID' => 46,
			'DataHelpTree' => '36',
			'DataHelpParentTable' => 'Oversight',
			'DataHelpTable' => 'OversightModels',
			'DataHelpKeyField' => 'OverModOversightID',
			'DataHelpValueField' => 'OverModCivModel'
		]);
		DB::table('SL_DataHelpers')->insert([
			'DataHelpID' => 31,
			'DataHelpTree' => '5',
			'DataHelpParentTable' => 'PhysicalDesc',
			'DataHelpTable' => 'PhysicalDescRace',
			'DataHelpKeyField' => 'PhysRacePhysDescID',
			'DataHelpValueField' => 'PhysRaceRace'
		]);
		DB::table('SL_DataHelpers')->insert([
			'DataHelpID' => 33,
			'DataHelpTree' => '1',
			'DataHelpParentTable' => 'Civilians',
			'DataHelpTable' => 'Injuries',
			'DataHelpKeyField' => 'InjSubjectID',
			'DataHelpValueField' => 'InjType'
		]);
		DB::table('SL_DataHelpers')->insert([
			'DataHelpID' => 34,
			'DataHelpTree' => '36',
			'DataHelpParentTable' => 'Departments',
			'DataHelpTable' => 'Oversight',
			'DataHelpKeyField' => 'OverDeptID'
		]);
		DB::table('SL_DataHelpers')->insert([
			'DataHelpID' => 35,
			'DataHelpTree' => '1',
			'DataHelpParentTable' => 'Force',
			'DataHelpTable' => 'ForceBodyParts',
			'DataHelpKeyField' => 'FrcBdyForceID',
			'DataHelpValueField' => 'FrcBdyPart'
		]);
		DB::table('SL_DataHelpers')->insert([
			'DataHelpID' => 36,
			'DataHelpTree' => '1',
			'DataHelpParentTable' => 'Injuries',
			'DataHelpTable' => 'InjuryBodyParts',
			'DataHelpKeyField' => 'InjBdyInjuryID',
			'DataHelpValueField' => 'InjBdyPart'
		]);
		DB::table('SL_DataHelpers')->insert([
			'DataHelpID' => 37,
			'DataHelpTree' => '1',
			'DataHelpParentTable' => 'Complaints',
			'DataHelpTable' => 'CivWeapons',
			'DataHelpKeyField' => 'CivWeapComID',
			'DataHelpValueField' => 'CivWeapBodyWeapon'
		]);
		DB::table('SL_DataHelpers')->insert([
			'DataHelpID' => 39,
			'DataHelpTree' => '58',
			'DataHelpParentTable' => 'Partners',
			'DataHelpTable' => 'PartnerCaseTypes',
			'DataHelpKeyField' => 'PrtCasPartnerID'
		]);
		DB::table('SL_DataHelpers')->insert([
			'DataHelpID' => 40,
			'DataHelpTree' => '58',
			'DataHelpParentTable' => 'PartnerCaseTypes',
			'DataHelpTable' => 'PartnerFilters',
			'DataHelpKeyField' => 'PrtFltCaseID',
			'DataHelpValueField' => 'PrtFltFilter'
		]);
		DB::table('SL_DataHelpers')->insert([
			'DataHelpID' => 41,
			'DataHelpTree' => '58',
			'DataHelpParentTable' => 'Partners',
			'DataHelpTable' => 'PartnerStates',
			'DataHelpKeyField' => 'PrtStaPartID',
			'DataHelpValueField' => 'PrtStaState'
		]);
		DB::table('SL_DataHelpers')->insert([
			'DataHelpID' => 42,
			'DataHelpTree' => '1',
			'DataHelpParentTable' => 'Civilians',
			'DataHelpTable' => 'Charges',
			'DataHelpKeyField' => 'ChrgCivID',
			'DataHelpValueField' => 'ChrgCharges'
		]);
		DB::table('SL_DataHelpers')->insert([
			'DataHelpID' => 43,
			'DataHelpTree' => '58',
			'DataHelpParentTable' => 'Partners',
			'DataHelpTable' => 'PartnerCapac',
			'DataHelpKeyField' => 'PrtCapPartID',
			'DataHelpValueField' => 'PrtCapCapacity'
		]);
		DB::table('SL_DataHelpers')->insert([
			'DataHelpID' => 44,
			'DataHelpTree' => '1',
			'DataHelpParentTable' => 'Vehicles',
			'DataHelpTable' => 'LinksCivilianVehicles',
			'DataHelpKeyField' => 'LnkCivVehicVehicID',
			'DataHelpValueField' => 'LnkCivVehicCivID'
		]);
		DB::table('SL_DataHelpers')->insert([
			'DataHelpID' => 45,
			'DataHelpTree' => '1',
			'DataHelpParentTable' => 'Vehicles',
			'DataHelpTable' => 'LinksOfficerVehicles',
			'DataHelpKeyField' => 'LnkOffVehicVehicID',
			'DataHelpValueField' => 'LnkOffVehicOffID'
		]);
		DB::table('SL_DataHelpers')->insert([
			'DataHelpID' => 47,
			'DataHelpTree' => '5',
			'DataHelpParentTable' => 'Departments',
			'DataHelpTable' => 'Oversight',
			'DataHelpKeyField' => 'OverDeptID'
		]);
		DB::table('SL_DataHelpers')->insert([
			'DataHelpID' => 49,
			'DataHelpTree' => '184',
			'DataHelpParentTable' => 'OfficersVerified',
			'DataHelpTable' => 'Officers',
			'DataHelpKeyField' => 'OffVerifiedID',
			'DataHelpValueField' => 'OffID'
		]);
		DB::table('SL_DataHelpers')->insert([
			'DataHelpID' => 50,
			'DataHelpTree' => '184',
			'DataHelpParentTable' => 'OfficersVerified',
			'DataHelpTable' => 'LinksOfficerDept',
			'DataHelpKeyField' => 'LnkOffDeptOfficerID',
			'DataHelpValueField' => 'LinksComplaintDept:LnkComDeptDeptID'
		]);
	

	DB::table('SL_Images')->insert([
			'ImgID' => 22,
			'ImgDatabaseID' => '1',
			'ImgUserID' => '0',
			'ImgFileLoc' => '.DS_Store',
			'ImgFullFilename' => '/openpolice/uploads/.DS_Store',
			'ImgType' => 'ds_store',
			'ImgFileSize' => '6148'
		]);
		DB::table('SL_Images')->insert([
			'ImgID' => 23,
			'ImgDatabaseID' => '1',
			'ImgUserID' => '0',
			'ImgFileLoc' => 'balance.png',
			'ImgFullFilename' => '/openpolice/uploads/balance.png',
			'ImgType' => 'png',
			'ImgFileSize' => '29980',
			'ImgWidth' => '1000',
			'ImgHeight' => '797'
		]);
		DB::table('SL_Images')->insert([
			'ImgID' => 24,
			'ImgDatabaseID' => '1',
			'ImgUserID' => '0',
			'ImgFileLoc' => 'ben-word.jpeg',
			'ImgFullFilename' => '/openpolice/uploads/ben-word.jpeg',
			'ImgType' => 'jpg',
			'ImgFileSize' => '17735',
			'ImgWidth' => '300',
			'ImgHeight' => '300'
		]);
		DB::table('SL_Images')->insert([
			'ImgID' => 25,
			'ImgDatabaseID' => '1',
			'ImgUserID' => '0',
			'ImgFileLoc' => 'billy-murphy.jpeg',
			'ImgFullFilename' => '/openpolice/uploads/billy-murphy.jpeg',
			'ImgType' => 'jpg',
			'ImgFileSize' => '32681',
			'ImgWidth' => '300',
			'ImgHeight' => '300'
		]);
		DB::table('SL_Images')->insert([
			'ImgID' => 26,
			'ImgDatabaseID' => '1',
			'ImgUserID' => '0',
			'ImgFileLoc' => 'brian-buchner.jpeg',
			'ImgFullFilename' => '/openpolice/uploads/brian-buchner.jpeg',
			'ImgType' => 'jpg',
			'ImgFileSize' => '20735',
			'ImgWidth' => '300',
			'ImgHeight' => '300'
		]);
		DB::table('SL_Images')->insert([
			'ImgID' => 27,
			'ImgDatabaseID' => '1',
			'ImgUserID' => '0',
			'ImgFileLoc' => 'cory-troup.jpeg',
			'ImgFullFilename' => '/openpolice/uploads/cory-troup.jpeg',
			'ImgType' => 'jpg',
			'ImgFileSize' => '8493',
			'ImgWidth' => '180',
			'ImgHeight' => '180'
		]);
		DB::table('SL_Images')->insert([
			'ImgID' => 28,
			'ImgDatabaseID' => '1',
			'ImgUserID' => '0',
			'ImgFileLoc' => 'cynthia-conti-cook1.jpeg',
			'ImgFullFilename' => '/openpolice/uploads/cynthia-conti-cook1.jpeg',
			'ImgType' => 'jpg',
			'ImgFileSize' => '15871',
			'ImgWidth' => '300',
			'ImgHeight' => '300'
		]);
		DB::table('SL_Images')->insert([
			'ImgID' => 29,
			'ImgDatabaseID' => '1',
			'ImgUserID' => '0',
			'ImgFileLoc' => 'empowered-arm-2b.png',
			'ImgFullFilename' => '/openpolice/uploads/empowered-arm-2b.png',
			'ImgType' => 'png',
			'ImgFileSize' => '34919',
			'ImgWidth' => '500',
			'ImgHeight' => '500'
		]);
		DB::table('SL_Images')->insert([
			'ImgID' => 30,
			'ImgDatabaseID' => '1',
			'ImgUserID' => '0',
			'ImgFileLoc' => 'empowered-arm.png',
			'ImgFullFilename' => '/openpolice/uploads/empowered-arm.png',
			'ImgType' => 'png',
			'ImgFileSize' => '29792',
			'ImgWidth' => '500',
			'ImgHeight' => '500'
		]);
		DB::table('SL_Images')->insert([
			'ImgID' => 31,
			'ImgDatabaseID' => '1',
			'ImgUserID' => '0',
			'ImgFileLoc' => 'eric-garner-daniel-pantaleo.jpeg',
			'ImgFullFilename' => '/openpolice/uploads/eric-garner-daniel-pantaleo.jpeg',
			'ImgType' => 'jpg',
			'ImgFileSize' => '35465',
			'ImgWidth' => '640',
			'ImgHeight' => '360'
		]);
		DB::table('SL_Images')->insert([
			'ImgID' => 32,
			'ImgDatabaseID' => '1',
			'ImgUserID' => '0',
			'ImgFileLoc' => 'flex-arm-sm.png',
			'ImgFullFilename' => '/openpolice/uploads/flex-arm-sm.png',
			'ImgType' => 'png',
			'ImgFileSize' => '3057',
			'ImgWidth' => '50',
			'ImgHeight' => '50'
		]);
		DB::table('SL_Images')->insert([
			'ImgID' => 33,
			'ImgDatabaseID' => '1',
			'ImgUserID' => '0',
			'ImgFileLoc' => 'flex-arm.png',
			'ImgFullFilename' => '/openpolice/uploads/flex-arm.png',
			'ImgType' => 'png',
			'ImgFileSize' => '72242',
			'ImgWidth' => '479',
			'ImgHeight' => '483'
		]);
		DB::table('SL_Images')->insert([
			'ImgID' => 34,
			'ImgDatabaseID' => '1',
			'ImgUserID' => '0',
			'ImgFileLoc' => 'Fritz-Mulhauser.png',
			'ImgFullFilename' => '/openpolice/uploads/Fritz-Mulhauser.png',
			'ImgType' => 'png',
			'ImgFileSize' => '152364',
			'ImgWidth' => '300',
			'ImgHeight' => '300'
		]);
		DB::table('SL_Images')->insert([
			'ImgID' => 35,
			'ImgDatabaseID' => '1',
			'ImgUserID' => '0',
			'ImgFileLoc' => 'iceberg-icon.jpg',
			'ImgFullFilename' => '/openpolice/uploads/iceberg-icon.jpg',
			'ImgType' => 'jpg',
			'ImgFileSize' => '41458',
			'ImgWidth' => '960',
			'ImgHeight' => '622'
		]);
		DB::table('SL_Images')->insert([
			'ImgID' => 36,
			'ImgDatabaseID' => '1',
			'ImgUserID' => '0',
			'ImgFileLoc' => 'james_carroll.jpg',
			'ImgFullFilename' => '/openpolice/uploads/james_carroll.jpg',
			'ImgType' => 'jpg',
			'ImgFileSize' => '33367',
			'ImgWidth' => '355',
			'ImgHeight' => '356'
		]);
		DB::table('SL_Images')->insert([
			'ImgID' => 37,
			'ImgDatabaseID' => '1',
			'ImgUserID' => '0',
			'ImgFileLoc' => 'kelvyn-anderson.png',
			'ImgFullFilename' => '/openpolice/uploads/kelvyn-anderson.png',
			'ImgType' => 'png',
			'ImgFileSize' => '171024',
			'ImgWidth' => '300',
			'ImgHeight' => '300'
		]);
		DB::table('SL_Images')->insert([
			'ImgID' => 38,
			'ImgDatabaseID' => '1',
			'ImgUserID' => '0',
			'ImgFileLoc' => 'LaDoris-Cordell.jpeg',
			'ImgFullFilename' => '/openpolice/uploads/LaDoris-Cordell.jpeg',
			'ImgType' => 'jpg',
			'ImgFileSize' => '15616',
			'ImgWidth' => '300',
			'ImgHeight' => '300'
		]);
		DB::table('SL_Images')->insert([
			'ImgID' => 39,
			'ImgDatabaseID' => '1',
			'ImgUserID' => '0',
			'ImgFileLoc' => 'lee-killings-by-police-all-1995-2015.png',
			'ImgFullFilename' => '/openpolice/uploads/lee-killings-by-police-all-1995-2015.png',
			'ImgType' => 'png',
			'ImgFileSize' => '36636',
			'ImgWidth' => '710',
			'ImgHeight' => '580'
		]);
		DB::table('SL_Images')->insert([
			'ImgID' => 40,
			'ImgDatabaseID' => '1',
			'ImgUserID' => '0',
			'ImgFileLoc' => 'lynn-police-1920-by-1080-1024x576.jpeg',
			'ImgFullFilename' => '/openpolice/uploads/lynn-police-1920-by-1080-1024x576.jpeg',
			'ImgType' => 'jpg',
			'ImgFileSize' => '92535',
			'ImgWidth' => '1024',
			'ImgHeight' => '576'
		]);
		DB::table('SL_Images')->insert([
			'ImgID' => 41,
			'ImgDatabaseID' => '1',
			'ImgUserID' => '0',
			'ImgFileLoc' => 'magnifying-eye.png',
			'ImgFullFilename' => '/openpolice/uploads/magnifying-eye.png',
			'ImgType' => 'png',
			'ImgFileSize' => '39823',
			'ImgWidth' => '1000',
			'ImgHeight' => '1016'
		]);
		DB::table('SL_Images')->insert([
			'ImgID' => 42,
			'ImgDatabaseID' => '1',
			'ImgUserID' => '0',
			'ImgFileLoc' => 'Matthew-Hickman.jpeg',
			'ImgFullFilename' => '/openpolice/uploads/Matthew-Hickman.jpeg',
			'ImgType' => 'jpg',
			'ImgFileSize' => '33083',
			'ImgWidth' => '300',
			'ImgHeight' => '300'
		]);
		DB::table('SL_Images')->insert([
			'ImgID' => 43,
			'ImgDatabaseID' => '1',
			'ImgUserID' => '0',
			'ImgFileLoc' => 'morgan-lesko.png',
			'ImgFullFilename' => '/openpolice/uploads/morgan-lesko.png',
			'ImgType' => 'png',
			'ImgFileSize' => '1064137',
			'ImgWidth' => '816',
			'ImgHeight' => '816'
		]);
		DB::table('SL_Images')->insert([
			'ImgID' => 44,
			'ImgDatabaseID' => '1',
			'ImgUserID' => '0',
			'ImgFileLoc' => 'morgan-sandwitches1.png',
			'ImgFullFilename' => '/openpolice/uploads/morgan-sandwitches1.png',
			'ImgType' => 'png',
			'ImgFileSize' => '210705',
			'ImgWidth' => '300',
			'ImgHeight' => '300'
		]);
		DB::table('SL_Images')->insert([
			'ImgID' => 45,
			'ImgDatabaseID' => '1',
			'ImgUserID' => '0',
			'ImgFileLoc' => 'NACOLE-logo.png',
			'ImgFullFilename' => '/openpolice/uploads/NACOLE-logo.png',
			'ImgType' => 'png',
			'ImgFileSize' => '572994',
			'ImgWidth' => '1024',
			'ImgHeight' => '976'
		]);
		DB::table('SL_Images')->insert([
			'ImgID' => 46,
			'ImgDatabaseID' => '1',
			'ImgUserID' => '0',
			'ImgFileLoc' => 'neill-franklin.jpeg',
			'ImgFullFilename' => '/openpolice/uploads/neill-franklin.jpeg',
			'ImgType' => 'jpg',
			'ImgFileSize' => '4840',
			'ImgWidth' => '150',
			'ImgHeight' => '150'
		]);
		DB::table('SL_Images')->insert([
			'ImgID' => 47,
			'ImgDatabaseID' => '1',
			'ImgUserID' => '0',
			'ImgFileLoc' => 'norm-stamper.jpeg',
			'ImgFullFilename' => '/openpolice/uploads/norm-stamper.jpeg',
			'ImgType' => 'jpg',
			'ImgFileSize' => '96761',
			'ImgWidth' => '300',
			'ImgHeight' => '300'
		]);
		DB::table('SL_Images')->insert([
			'ImgID' => 48,
			'ImgDatabaseID' => '1',
			'ImgUserID' => '0',
			'ImgFileLoc' => 'only-allegations.png',
			'ImgFullFilename' => '/openpolice/uploads/only-allegations.png',
			'ImgType' => 'png',
			'ImgFileSize' => '96974',
			'ImgWidth' => '917',
			'ImgHeight' => '249'
		]);
		DB::table('SL_Images')->insert([
			'ImgID' => 49,
			'ImgDatabaseID' => '1',
			'ImgUserID' => '0',
			'ImgFileLoc' => 'OPC_Complaint_Process.png',
			'ImgFullFilename' => '/openpolice/uploads/OPC_Complaint_Process.png',
			'ImgType' => 'png',
			'ImgFileSize' => '577528',
			'ImgWidth' => '828',
			'ImgHeight' => '2771'
		]);
		DB::table('SL_Images')->insert([
			'ImgID' => 50,
			'ImgDatabaseID' => '1',
			'ImgUserID' => '0',
			'ImgFileLoc' => 'open-police-logo-home-hero.png',
			'ImgFullFilename' => '/openpolice/uploads/open-police-logo-home-hero.png',
			'ImgType' => 'png',
			'ImgFileSize' => '58221',
			'ImgWidth' => '1636',
			'ImgHeight' => '291'
		]);
		DB::table('SL_Images')->insert([
			'ImgID' => 51,
			'ImgDatabaseID' => '1',
			'ImgUserID' => '0',
			'ImgFileLoc' => 'open-police-logo-home-hero2.png',
			'ImgFullFilename' => '/openpolice/uploads/open-police-logo-home-hero2.png',
			'ImgType' => 'png',
			'ImgFileSize' => '244894',
			'ImgWidth' => '1171',
			'ImgHeight' => '643'
		]);
		DB::table('SL_Images')->insert([
			'ImgID' => 52,
			'ImgDatabaseID' => '1',
			'ImgUserID' => '0',
			'ImgFileLoc' => 'open-police-logo-home-hero8.png',
			'ImgFullFilename' => '/openpolice/uploads/open-police-logo-home-hero8.png',
			'ImgType' => 'png',
			'ImgFileSize' => '58221',
			'ImgWidth' => '1636',
			'ImgHeight' => '291'
		]);
		DB::table('SL_Images')->insert([
			'ImgID' => 53,
			'ImgDatabaseID' => '1',
			'ImgUserID' => '0',
			'ImgFileLoc' => 'openness.png',
			'ImgFullFilename' => '/openpolice/uploads/openness.png',
			'ImgType' => 'png',
			'ImgFileSize' => '23560',
			'ImgWidth' => '500',
			'ImgHeight' => '500'
		]);
		DB::table('SL_Images')->insert([
			'ImgID' => 54,
			'ImgDatabaseID' => '1',
			'ImgUserID' => '0',
			'ImgFileLoc' => 'puzzle-pieces-circle-2.png',
			'ImgFullFilename' => '/openpolice/uploads/puzzle-pieces-circle-2.png',
			'ImgType' => 'png',
			'ImgFileSize' => '62284',
			'ImgWidth' => '1000',
			'ImgHeight' => '998'
		]);
		DB::table('SL_Images')->insert([
			'ImgID' => 55,
			'ImgDatabaseID' => '1',
			'ImgUserID' => '0',
			'ImgFileLoc' => 'smile-cspan-steve.jpeg',
			'ImgFullFilename' => '/openpolice/uploads/smile-cspan-steve.jpeg',
			'ImgType' => 'jpg',
			'ImgFileSize' => '21056',
			'ImgWidth' => '300',
			'ImgHeight' => '300'
		]);
		DB::table('SL_Images')->insert([
			'ImgID' => 56,
			'ImgDatabaseID' => '1',
			'ImgUserID' => '0',
			'ImgFileLoc' => 'stephen-hawking.png',
			'ImgFullFilename' => '/openpolice/uploads/stephen-hawking.png',
			'ImgType' => 'png',
			'ImgFileSize' => '169812',
			'ImgWidth' => '470',
			'ImgHeight' => '312'
		]);
		DB::table('SL_Images')->insert([
			'ImgID' => 57,
			'ImgDatabaseID' => '1',
			'ImgUserID' => '0',
			'ImgFileLoc' => 'universality.png',
			'ImgFullFilename' => '/openpolice/uploads/universality.png',
			'ImgType' => 'png',
			'ImgFileSize' => '72297',
			'ImgWidth' => '1000',
			'ImgHeight' => '1000'
		]);
	
	DB::table('SL_Emails')->insert([
			'EmailID' => 1,
			'EmailTree' => '1',
			'EmailType' => 'To Complainant',
			'EmailName' => '30. Confirm Email Address - immediately after user creation, sends automatically',
			'EmailSubject' => 'Confirm your email address for OpenPolice.org',
			'EmailBody' => '<p>Hi,</p>
<p>Thank you for creating an account with OpenPolice.org! Please open the link below to confirm that [{ User Email }] is your correct email address.<br /> [{ Email Confirmation URL }]</p>
<p>If you get interrupted before finishing your complaint, you can use your email address to log back in. (We\'ll save your progress, so you can pick up wherever you left off.)<br /> [{ Login URL }]</p>
<p>Your story is too important to be ignored. Thank you so much for participating in this process!</p>
<p>Sincerely,</p>
<p>OpenPolice.org</p>'
		]);
		DB::table('SL_Emails')->insert([
			'EmailID' => 5,
			'EmailTree' => '1',
			'EmailType' => 'To Complainant',
			'EmailName' => '51. After Submission, Before Review, sends automatically',
			'EmailSubject' => 'Thank you for submitting your police complaint!',
			'EmailBody' => '<p></p><p>Congratulations, [{ Complainant Name }]!</p>
<p>You\'ve successfully created a complaint with OpenPolice.org.</p>
<p>Within the next week, we will review your complaint and let you know what comes next. If you need legal help, we can try to set that up. Otherwise, we will help you file your complaint with the [{ Complaint Investigative Agency }]. So hang tight!</p>
<p>Your story is too important to be ignored, so thank you for participating in this process!</p>
<p>Sincerely,</p>
<p>OpenPolice.org</p>
[{ Complaint Footer Links }]
[{ Flex Article Suggestions Based On Responses }]
[{ Standard Complainant Email Closer }]<p></p>'
		]);
		DB::table('SL_Emails')->insert([
			'EmailID' => 6,
			'EmailTree' => '1',
			'EmailType' => 'To Complainant',
			'EmailName' => '43. After Review, Invitation to Go Gold',
			'EmailSubject' => 'Action Needed: You\'re invited to Go Gold!',
			'EmailBody' => '<p>Congratulations, [{ Complainant Name }]!</p>
<p>I\'ve reviewed your police complaint, and it\'s excellent! Before we try to submit it to the [{ Complaint Investigative Agency }], I invite you to add some more important details about your incident.</p>
<p>You\'ve already created a basic Silver Level complaint. By adding a few more crucial details, you can achieve Gold Level complaint status. This FREE upgrade will give your complaint more power in the hands of investigators.</p>
<p><b>Yes, Go Gold! I want to make my complaint even more powerful:</b><br />
[{ Go Gold Secure URL }]</p>
<p>No thanks, please submit my complaint as it is:<br />
[{ Submit Silver Secure URL }]</p>
<p>If we don\'t hear from you within 7 days [by [{ Days From Now: 7, mm/dd/yyyy }]], we will then try to submit your complaint as it is.</p>
<p>Your story is too important to be ignored, so thank you for participating in this process!</p>
<p>Sincerely,</p>
<p>[{ Analyst Name }]<br />
OpenPolice.org</p>
<p>&nbsp;</p>
[{ Complaint Footer Links }]
[{ Standard Complainant Email Closer }] '
		]);
		DB::table('SL_Emails')->insert([
			'EmailID' => 7,
			'EmailTree' => '1',
			'EmailType' => 'To Complainant',
			'EmailName' => '62. Complaint Emailed To Oversight (OpenPolice-COMPLIANT!)',
			'EmailSubject' => 'We submitted your police complaint!',
			'EmailBody' => '<p>Congratulations, [{ Complainant Name }]!</p>\r\n<p>We just attempted to email your complaint to the [{ Complaint Investigative Agency }]. But this shouldn\\'t be the end of the road for you!</p>\r\n<p><b>Please contact the [{ Complaint Investigative Agency }] this week ï¿½ even tomorrow ï¿½ to confirm that your complaint has been received.</b> And as the investigation progresses, please login to update the community!<br>\r\n[{ Complaint URL }]</p>\r\n<p>If you can\\'t confirm that your complaint was accepted by the [{ Complaint Investigative Agency }], you\\'ll need to submit it another way to make sure it gets investigated. You can find the instructions for submitting your complaint to the department here:<br>\r\n[{ Complaint Police Department URL How }]</p>\r\n<p>Thank you so much for using OpenPolice.org!</p>\r\n<p>Sincerely,</p>\r\n<p>[{ Analyst Name }]<br>\r\nOpenPolice.org</p><p>\r\n</p><p>P.S. We care about how well ï¿½ or how poorly ï¿½ this department responds to your complaint. So we\\'ll be in touch in the coming weeks and months to check in!</p>\r\n[{ Complaint Footer Links }]'
		]);
		DB::table('SL_Emails')->insert([
			'EmailID' => 9,
			'EmailTree' => '1',
			'EmailType' => 'To Complainant',
			'EmailName' => '60. How To Manually Submit Complaint (NON-COMPLIANT)',
			'EmailSubject' => 'Action Needed: How to formally submit your complaint to the [{ Complaint Police Department }]',
			'EmailBody' => '<p>Hi, [{ Complainant Name }],</p>\r\n<p>We\\'re almost done ï¿½ but we need you to do one more important thing as soon as possible. OpenPolice.org is working to get all police departments to accept complaints sent by email. Unfortunately, the [{ Complaint Investigative Agency }] does not investigate OpenPolice.org complaints sent by email.</p><p><b><a href=\"http://openpolice.local/login\" target=\"_blank\">Log into your account</a> and follow the instructions at the top of your complaint:</b><br>\r\n[{ Complaint URL }]</p>\r\n<p>After you submit your complaint with the [{ Complaint Investigative Agency }], please login to update us. Also, please <b>let us know whenever they receive or investigate your complaint</b>.</p>\r\n<p>Thank you so much for using OpenPolice.org!</p>\r\n<p>Sincerely,</p>\r\n<p>[{ Analyst Name }]<br>\r\nOpenPolice.org</p>\r\n<p>P.S. We care about how well ï¿½ or how poorly ï¿½ this department responds to your complaint. So we\\'ll be in touch in the coming weeks and months to check in!</p>\r\n[{ Complaint Footer Links }]'
		]);
		DB::table('SL_Emails')->insert([
			'EmailID' => 11,
			'EmailTree' => '1',
			'EmailType' => 'Blurb',
			'EmailName' => 'Complaint Footer Links',
			'EmailBody' => '<p><strong>Update Your Complaint\'s Status:</strong><br /> [{ Complaint URL }]</p>
<p>You must be logged in to reveal all complaint information:<br />[{ Complaint URL PDF }]<br /> [{ Complaint URL JSON }]</p>
<p>Department Information &amp; Reports:<br /> [{ Complaint Police Department URL }]</p>'
		]);
		DB::table('SL_Emails')->insert([
			'EmailID' => 12,
			'EmailTree' => '1',
			'EmailType' => 'To Oversight',
			'EmailName' => '61. Email Investigative Agency',
			'EmailSubject' => 'New Complaint Received: #[{ Complaint ID }]',
			'EmailBody' => '<p>[{ Dear Primary Investigative Agency }]</p>

<p>We are sending this message on behalf of someone who submitted a complaint through OpenPolice.org. The complaint, against [{ Complaint Officers Reference }] in your department, includes the following allegations: [{ Complaint Top Three Allegation List Lower Bold }].</p>

<p>The complainant requests that your department promptly investigate this incident. Please use the following link and temporary key code to view, download, and print the detailed complaint report. (This key code will expire in 7 days.)</p>

<p>[{ Oversight Complaint Token URL Link }]<br></p>

<p>Key Code: <b>[{ Oversight Complaint Secure MFA }]</b></p>Please note that the full report may contain sensitive personal information. So please share with appropriate oversight staff only.<p></p><p><b>If your department cannot investigate this complaint as is, please tell us why.</b> You can reply to this email or inform us through the above link. We will then update your department\'s complaint submission information 
on OpenPolice.org.</p>

<p>Thank you for your attention to this matter.</p>

<p>Sincerely,

</p><p>[{ Analyst Name }],<br>
OpenPolice.org,<br>
[{ Analyst Email }]</p>

<p>Department Information &amp; Reports:<br> 
[{ Complaint Police Department URL }]</p>

<p>Public Link To This Complaint:<br>
[{ Complaint URL }]</p>

<p><b>What is OpenPolice.org?</b><br>
<i>OpenPolice.org is a web app that helps people to prepare, file, and track police conduct reports. It\'s designed to serve the needs of oversight investigators, attorneys, police chiefs, and others working to advance constitutional and community policing.</i></p><p></p>'
		]);
		DB::table('SL_Emails')->insert([
			'EmailID' => 15,
			'EmailTree' => '1',
			'EmailType' => 'Blurb',
			'EmailName' => 'Standard Complainant Email Closer',
			'EmailBody' => '<p><a href="http://openpolice.local/frequently-asked-questions" target="_blank">Frequently Asked Questions</a><br />
<a href="http://openpolice.local/contact" target="_blank">Contact Us</a></p>
<p>You are receiving this email because you submitted a complaint. If you no longer want follow-up emails about this complaint, click your complaint\'s link above to <a href="[{ Complaint URL Link }]" target="_blank">unsubscribe</a> in your email settings.</p>'
		]);
		DB::table('SL_Emails')->insert([
			'EmailID' => 16,
			'EmailTree' => '1',
			'EmailType' => 'To Complainant',
			'EmailName' => '73. Investivated? Periodic Follow-Up',
			'EmailSubject' => '[{ Complainant Name }], what\'s the status of the police complaint you filed?',
			'EmailBody' => '<p>Hi, [{ Complainant Name }],</p>\r\n<p>Have you heard yet from the [{ Complaint Investigative Agency }] about the status of your complaint? It\\'s been a while since you submitted it.</p><p><b><a href=\"http://openpolice.local/login\" target=\"_blank\">Log into your account</a> and let us know </b><b>how well ï¿½ or how poorly ï¿½ this department responds here:</b><br>\r\n[{ Complaint URL }]</p>\r\n<p>Our community wants to know, for example, if the investigation by the [{ Complaint Investigative Agency }] upheld your allegations. This information helps make sure that future complaints like yours won\\'t be ignored.</p>\r\n<p>Thank you so much for using OpenPolice.org!</p>\r\n<p>Sincerely,</p>\r\n<p>[{ Analyst Name }]<br>\r\nOpenPolice.org</p>\r\n[{ Complaint Footer Links }]'
		]);
		DB::table('SL_Emails')->insert([
			'EmailID' => 17,
			'EmailTree' => '1',
			'EmailType' => 'To Complainant',
			'EmailName' => '00. CUSTOM - for general use',
			'EmailSubject' => 'CUSTOM',
			'EmailBody' => '<p>Hi, [{ Complainant Name }],</p>
<p>...</p>
<p>Sincerely,</p>
<p>[{ Analyst Name }]<br />
OpenPolice.org</p>
[{ Complaint Footer Links }]'
		]);
		DB::table('SL_Emails')->insert([
			'EmailID' => 18,
			'EmailTree' => '1',
			'EmailType' => 'To Complainant',
			'EmailName' => '53. Has Attorney, Do You Want To File Complaint',
			'EmailSubject' => 'Action Needed: Confirm you want to file your police complaint',
			'EmailBody' => '<p>Hi [{ Complainant Name }],</p>
<p>We\'re sorry to hear about this situation, but we\'re glad that you already have a lawyer. </p>
<p><b><b>OpenPolice.org can publish your complaint and </b>file it</b> with the&nbsp; [{ Complaint Investigative Agency }]. But you should only do this if your lawyer said it is OK. <b>If you and your lawyer decide to take these next steps, please <a href="http://openpolice.local/login" target="_blank">log into your account</a> and follow the instructions at the top of your complaint:</b><br>[{ Complaint URL }]</p>
<p>A PDF version of your full complaint report is attached for your records. Thank you so much for using OpenPolice.org!</p>
<p>Sincerely,</p>
<p>[{ Analyst Name }]<br>
OpenPolice.org</p>
[{ Complaint Footer Links }]'
		]);
		DB::table('SL_Emails')->insert([
			'EmailID' => 19,
			'EmailTree' => '1',
			'EmailType' => 'To Complainant',
			'EmailName' => '54. Attorney Tinder (You Might Want To Sue) Doesn\'t Have Laywer, Doesn\'t Want One',
			'EmailSubject' => 'Action Needed: You might want to sue regarding your police complaint',
			'EmailBody' => '<p>Hi, [{ Complainant Name }],</p>
<p>I\'ve reviewed your complaint, and this is wild... <br />
We noticed that didn\'t want lawyer, but you might want one...</p>
<p>Thank you so much for using OpenPolice.org!</p>
<p>Sincerely,</p>
<p>[{ Analyst Name }]<br />
OpenPolice.org</p>
[{ Complaint Footer Links }]'
		]);
		DB::table('SL_Emails')->insert([
			'EmailID' => 20,
			'EmailTree' => '1',
			'EmailType' => 'To Complainant',
			'EmailName' => '55. Attorney Tinder (You Might Want To Sue) Doesn\'t Have Laywer, Wants One',
			'EmailSubject' => 'Action Needed: You might want to sue regarding your police complaint',
			'EmailBody' => '<p>Hi, [{ Complainant Name }],</p>
<p>I\'ve reviewed your complaint, and this is wild... <br />
FULL TINDER MODE... link to list of potential lawyers for their case... etc... tbd... bfd....</p>
<p>Thank you so much for using OpenPolice.org!</p>
<p>Sincerely,</p>
<p>[{ Analyst Name }]<br />
OpenPolice.org</p>
[{ Complaint Footer Links }]'
		]);
		DB::table('SL_Emails')->insert([
			'EmailID' => 22,
			'EmailTree' => '1',
			'EmailType' => 'To Complainant',
			'EmailName' => '52. Talk To A Lawyer, Doesn\'t Have Laywer',
			'EmailSubject' => 'Action Needed: We reviewed your complaint, you need to talk to a lawyer',
			'EmailBody' => '<p></p><p>Hi, [{ Complainant Name }],</p><p>Iï¿½m sorry to hear about your situation. <b>Because you have unresolved criminal charges, I urge you to contact a local criminal defense attorney as soon as possible.</b> Until you speak with a lawyer, you should avoid posting anything online about this incident and avoid talking to the police about it.</p><p>Please understand that we do not provide direct legal services. If you cannot afford a lawyer, the court will connect you to a public defender. If you can afford one, you can start by searching online for well-reviewed criminal defense attorneys in your area.</p><p><b>When you contact an attorney, we recommend you share the attached PDF version of your complaint.</b> They will appreciate the work you put into organizing it, and it will help them prepare your defense. When contacting an attorney, you can send them your PDF with a brief message like the sample below.</p><p><b>Please let us know whether or not you can find legal help.</b> Thank you so much for using OpenPolice.org!</p>\r\n<p>Sincerely,</p>\r\n<p>[{ Analyst Name }]<br>\r\nOpenPolice.org</p><p><br></p><p><b>Sample Email To Attorney:</b></p><p>Hi {Attorney Name},</p><p>I created the attached document using OpenPolice.org. Itï¿½s an online web service that I used to organize essential event details and evidence related to my criminal case.</p><p>I look forward to discussing it with you further, and you can reach me at {insert your email and phone number}.</p><p>Sincerely,<br>{Your Name}<br></p><p><br></p><p><b>Some Resources To Search:</b><br></p><ul><li><a href=\"https://www.avvo.com/search/lawyer_search?utf8=%E2%9C%93&amp;q=criminal+defense&amp;loc=[{ Police Department Zip Code }]&amp;client_rating_range=3&amp;free_consultation=true&amp;no_misconduct=true&amp;sort=relevancy\">Avvo Directory: Criminal Defense Lawyers</a></li><li><a href=\"https://www.nlg-npap.org/find-an-attorney\" target=\"_blank\">National Police Accountability Projectï¿½s (NPAP) Find an Attorney page</a></li><li><a href=\"https://cldc.org/wp-content/uploads/2014/04/Evaluating-Police-Misconduct-Cases.pdf\" target=\"_blank\">Evaluating Your Potential Police Misconduct Civil Rights Case, by Ben Rosenfeld, Attorney</a></li><li><a href=\"https://www.lsc.gov/what-legal-aid/find-legal-aid\" target=\"_blank\">Non-Profit Legal Aid Organizations</a><br><br></li></ul><p><br></p>\r\n[{ Complaint Footer Links }]<p></p><p><br></p>'
		]);
		DB::table('SL_Emails')->insert([
			'EmailID' => 23,
			'EmailTree' => '1',
			'EmailType' => 'To Oversight',
			'EmailName' => '50. New Complaint Submitted',
			'EmailSubject' => 'New Complaint Submitted on OpenPolice: #[{ Complaint ID }]',
			'EmailBody' => '<p>We\'ve got a new complaint on OpenPolice.org!</p>
<p>Public link to this complaint:</p>
<p>[{ Complaint URL }]</p>'
		]);
		DB::table('SL_Emails')->insert([
			'EmailID' => 24,
			'EmailTree' => '1',
			'EmailType' => 'To Complainant',
			'EmailName' => '63. Complaint Received By Oversight',
			'EmailSubject' => 'The [{ Complaint Investigative Agency }] received your complaint',
			'EmailBody' => '<div class=\"\" data-block=\"true\" data-editor=\"8a1e3\" data-offset-key=\"35fb8-0-0\"><div data-offset-key=\"35fb8-0-0\" class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\"><span data-offset-key=\"35fb8-0-0\"><span data-text=\"true\">Congratulations, </span></span><span data-offset-key=\"35fb8-0-0\"><span data-text=\"true\">[{ Complainant Name }],</span></span></div></div><div class=\"\" data-block=\"true\" data-editor=\"8a1e3\" data-offset-key=\"deg56-0-0\"><div data-offset-key=\"deg56-0-0\" class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\"><span data-offset-key=\"deg56-0-0\"><br data-text=\"true\"></span></div></div><div class=\"\" data-block=\"true\" data-editor=\"8a1e3\" data-offset-key=\"2mhdt-0-0\"><div data-offset-key=\"2mhdt-0-0\" class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\"><span data-offset-key=\"2mhdt-0-0\"><span data-text=\"true\">The [{ Complaint Investigative Agency }] received your complaint! But this shouldn\\'t be the end of the road for you. As the investigation progresses, please login to update the community.\r\n [{ Complaint URL }]</span></span></div></div><div class=\"\" data-block=\"true\" data-editor=\"8a1e3\" data-offset-key=\"46n75-0-0\"><div data-offset-key=\"46n75-0-0\" class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\"><span data-offset-key=\"46n75-0-0\"><br data-text=\"true\"></span></div></div><div class=\"\" data-block=\"true\" data-editor=\"8a1e3\" data-offset-key=\"254n2-0-0\"><div data-offset-key=\"254n2-0-0\" class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\"><span data-offset-key=\"254n2-0-0\"><span data-text=\"true\">Thank you so much for using OpenPolice.org!</span></span></div></div><div class=\"\" data-block=\"true\" data-editor=\"8a1e3\" data-offset-key=\"2feu9-0-0\"><div data-offset-key=\"2feu9-0-0\" class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\"><span data-offset-key=\"2feu9-0-0\"><br data-text=\"true\"></span></div></div><div class=\"\" data-block=\"true\" data-editor=\"8a1e3\" data-offset-key=\"45dpo-0-0\"><div data-offset-key=\"45dpo-0-0\" class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\"><span class=\"adverb\"><span data-offset-key=\"45dpo-0-0\"><span data-text=\"true\">Sincerely</span></span></span><span data-offset-key=\"45dpo-1-0\"><span data-text=\"true\">,</span></span></div></div><div class=\"\" data-block=\"true\" data-editor=\"8a1e3\" data-offset-key=\"4du2g-0-0\"><div data-offset-key=\"4du2g-0-0\" class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\"><span data-offset-key=\"4du2g-0-0\"><br data-text=\"true\"></span></div></div><div class=\"\" data-block=\"true\" data-editor=\"8a1e3\" data-offset-key=\"87pf3-0-0\"><div data-offset-key=\"87pf3-0-0\" class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\"><span data-offset-key=\"87pf3-0-0\"><span data-text=\"true\">[{ Analyst Name }]\r\n OpenPolice.org</span></span></div></div><div class=\"\" data-block=\"true\" data-editor=\"8a1e3\" data-offset-key=\"ecbsi-0-0\"><div data-offset-key=\"ecbsi-0-0\" class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\"><span data-offset-key=\"ecbsi-0-0\"><br data-text=\"true\"></span></div></div><div class=\"\" data-block=\"true\" data-editor=\"8a1e3\" data-offset-key=\"al9a2-0-0\"><div data-offset-key=\"al9a2-0-0\" class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\"><span data-offset-key=\"al9a2-0-0\"><span data-text=\"true\">P.S. We care about how well ï¿½ or how </span></span><span class=\"adverb\"><span data-offset-key=\"al9a2-1-0\"><span data-text=\"true\">poorly</span></span></span><span data-offset-key=\"al9a2-2-0\"><span data-text=\"true\"> ï¿½ this department  responds to your complaint. So we\\'ll be in touch in the coming weeks and  months to check in!</span></span></div></div><div class=\"\" data-block=\"true\" data-editor=\"8a1e3\" data-offset-key=\"4c2e3-0-0\"><div data-offset-key=\"4c2e3-0-0\" class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\"><span data-offset-key=\"4c2e3-0-0\"><br data-text=\"true\"></span></div></div><div class=\"\" data-block=\"true\" data-editor=\"8a1e3\" data-offset-key=\"csqgq-0-0\"><div data-offset-key=\"csqgq-0-0\" class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\"><span data-offset-key=\"csqgq-0-0\"><span data-text=\"true\">[{ Complaint Footer Links }]</span></span></div></div><div class=\"\" data-block=\"true\" data-editor=\"8a1e3\" data-offset-key=\"bnnk3-0-0\"><div data-offset-key=\"bnnk3-0-0\" class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\"><span data-offset-key=\"bnnk3-0-0\"><br data-text=\"true\"></span></div></div><div class=\"\" data-block=\"true\" data-editor=\"8a1e3\" data-offset-key=\"2peoa-0-0\"><div data-offset-key=\"2peoa-0-0\" class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\"><span data-offset-key=\"2peoa-0-0\"><br data-text=\"true\"></span></div></div>'
		]);
				
	}
}